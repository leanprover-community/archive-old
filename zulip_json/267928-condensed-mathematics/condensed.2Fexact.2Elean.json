[
    {
        "content": "<p>In <code>condensed/exact.lean</code>, Johan was attempting to construct some isomorphisms which should just come from the fact that limits commute. I've done this (at least for <code>P1</code>, not yet <code>P2</code>) on a branch <code>condensed_exact</code>. It needs <a href=\"https://github.com/leanprover-community/mathlib/pull/13215\">#13215</a> merged into mathlib, and <code>lean-liquid</code> bumped, before that branch can be merged with master.</p>",
        "id": 278145232,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649328561
    },
    {
        "content": "<p>(If someone could merge <a href=\"https://github.com/leanprover-community/mathlib/pull/13215\">#13215</a> when it's ready, that would be great. It's hopefully noncontroversial.)</p>",
        "id": 278145254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649328581
    },
    {
        "content": "<p>(Also <a href=\"https://github.com/leanprover-community/mathlib/pull/13216\">#13216</a> which contains the other mathlib-appropriate part of this branch.)</p>",
        "id": 278146297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649329254
    },
    {
        "content": "<p>I left a comment on <a href=\"https://github.com/leanprover-community/mathlib/pull/13215\">#13215</a></p>",
        "id": 278156157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649334602
    },
    {
        "content": "<p>We'll have to brace ourselves for the mathlib bump. But it needs to be done at some point. So let's get it over with.</p>",
        "id": 278159547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649336175
    },
    {
        "content": "<p>I'm starting a bump</p>",
        "id": 278160827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649336741
    },
    {
        "content": "<p>If you want some help I can work on it, but it's probably not very easy to coordinate the work.</p>",
        "id": 278161315,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649336959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> If you want to take on that pseudo-element proof, that would be cool!</p>",
        "id": 278161360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649336984
    },
    {
        "content": "<p>I mean this one: <a href=\"#narrow/stream/116395-maths/topic/pseudoelements/near/278122957\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/pseudoelements/near/278122957</a></p>",
        "id": 278161388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649337000
    },
    {
        "content": "<p>I guess the bump will indeed be hard to parallelize</p>",
        "id": 278161462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649337017
    },
    {
        "content": "<p>Okay, I will work on the proof</p>",
        "id": 278161478,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649337024
    },
    {
        "content": "<p>Do you mean the last sorry, right? Not <code>have aux : ∀ n, short_exact ((kernel.ι π).f n) (π.f n) </code>.</p>",
        "id": 278161568,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649337079
    },
    {
        "content": "<p>Sure that one should be trivial.</p>",
        "id": 278161790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649337182
    },
    {
        "content": "<p>We just need a lemma that says proves <code>short_exact (kernel.\\iota f) f</code> given <code>epi f</code></p>",
        "id": 278161859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649337226
    },
    {
        "content": "<p>But the last one is trickier, I fear.</p>",
        "id": 278161894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649337240
    },
    {
        "content": "<p>Yes, the first one is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.exact_kernel\">docs#category_theory.exact_kernel</a>_ι</p>",
        "id": 278162067,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649337328
    },
    {
        "content": "<p>Plus <code>mono (kernel.\\iota f)</code> which should be <code>infer_isntance</code></p>",
        "id": 278162276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649337462
    },
    {
        "content": "<p>thanks for the pointer.</p>",
        "id": 278162282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649337466
    },
    {
        "content": "<p>The mathlib bump is a really nice stress test for my new desktop. The fans are ramping up <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 278166143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649339271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.2Fexact.2Elean/near/278161388\">said</a>:</p>\n<blockquote>\n<p>I mean this one: <a href=\"#narrow/stream/116395-maths/topic/pseudoelements/near/278122957\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/pseudoelements/near/278122957</a></p>\n</blockquote>\n<p>I would have imagined that this would follow from the 5-lemma and the snake lemma without any additional fussing around with pseudoelements.</p>",
        "id": 278170714,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649341166
    },
    {
        "content": "<p>Seemed more annoying than I hoped.</p>",
        "id": 278170848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649341213
    },
    {
        "content": "<p>It seems that we have all the ingredients needed for the proof -- we have that homology is a homological functor, so we get a LES associated to the triangle given by the cone, and we have the snake lemma which gives us the LES for homology coming from the SES. Now we just need to check that some diagram commutes to apply the 5-lemma (which we have in mathlib)</p>",
        "id": 278171106,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649341339
    },
    {
        "content": "<p>well, that proof would only work in the homotopy category since we need the API for homological functors, but that should be okay for our applications (I hope).</p>",
        "id": 278171304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649341431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> do you think your <code>pseudoelement.biprod_ext</code> is false in general?</p>",
        "id": 278175877,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649343290
    },
    {
        "content": "<p>maybe, I really don't know</p>",
        "id": 278176030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649343343
    },
    {
        "content": "<p>Freyd–Mitchell seems to imply it, but maybe there is something subtle. Let me see if I can prove it.</p>",
        "id": 278176305,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649343455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.2Fexact.2Elean/near/278176305\">said</a>:</p>\n<blockquote>\n<p>Freyd–Mitchell seems to imply it, but maybe there is something subtle. Let me see if I can prove it.</p>\n</blockquote>\n<p>IIRC pseudoelements are not how one constructs the Freyd-Mitchell embedding.</p>",
        "id": 278178293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649344108
    },
    {
        "content": "<p>I have to a take a break, but Proposition 2.4.3 (vi) <a href=\"https://helda.helsinki.fi/bitstream/handle/10138/161100/An%20Introduction%20to%20Homological%20Algebra.pdf;jsessionid=466283181CE870D518E5BF58D21EE0F8?sequence=3\">here</a> immediately implies <code>pseudoelement.biprod_ext</code> if I am not misunderstanding anything.</p>",
        "id": 278199661,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649352885
    },
    {
        "content": "<p>I just realized that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.pseudoelement.pseudo_pullback\">docs#category_theory.abelian.pseudoelement.pseudo_pullback</a>, with a comment saying \"Remark: Borceux claims that <code>s</code> is unique. I was unable to transform his proof sketch into a pen-and-paper proof of this fact, so naturally I was not able to formalize the proof.\"</p>",
        "id": 278209165,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649357280
    },
    {
        "content": "<p>And I am in the same situation</p>",
        "id": 278209219,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649357292
    },
    {
        "content": "<p>hmmz, so maybe it's hopeless to do this with pseudo-elements?</p>",
        "id": 278214399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649359585
    },
    {
        "content": "<p>Now I am trying to understand the math-proof , we will see. It is an interesting question in its own</p>",
        "id": 278215154,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649359976
    },
    {
        "content": "<p>I pushed a start for the proof of the quasi iso result which uses the snake and 5 lemma (and no pseudoelements). Currently there is just a stub for the isomorphism of homologies in degree zero, and once that's done we would need to play with various shifts to get the actual result.</p>",
        "id": 278239002,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649373701
    },
    {
        "content": "<p>We do have a lemma called <code>homotopy_category.is_quasi_iso_iff</code> in <code>for_mathlib/derived/lemmas.lean</code> (I think?) which should be helpful with this shifting argument.</p>",
        "id": 278239102,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649373764
    },
    {
        "content": "<p>Concerning pseudoelements are essentially spent the last two hours trying to prove <code>pseudoelement.biprod_ext</code> by all the reasonable combinations of pullbakcs/products/...  but at the end I arrive at the same goal as Johan, that I don't know how to prove (if it is true). I posted a <a href=\"https://mathoverflow.net/questions/419888/pullback-and-pseudoelements\">question</a> on mathoverflow.</p>",
        "id": 278244045,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649378127
    },
    {
        "content": "<p>My alarm clock is in four hours so I guess I have to stop playing with this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278244199,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649378286
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13215\">#13215</a> is ready for review/merge again. Thanks, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> for your suggestion re: simp lemmas.</p>",
        "id": 278247785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649382038
    },
    {
        "content": "<p>Great, Johan just merged mathlib master, and I've now merged this branch back to lean-liquid/master.</p>",
        "id": 278265734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649402871
    },
    {
        "content": "<p>I had a go at finishing <code>extend</code> in <code>condensed/exact.lean</code>, but things went pretty badly off the rails.</p>",
        "id": 278287662,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649415666
    },
    {
        "content": "<p>I'm not too certain what's going on, but at least the <code>sorry</code>d goals as currently stated have a problem because we are mixing up the <code>has_limit</code> and <code>is_limit</code> APIs in an awkward way.</p>",
        "id": 278287809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649415754
    },
    {
        "content": "<p>I pushed a version that is all on the <code>has_limit</code> side. Hopefully it is just missing the right simp lemmas now??</p>",
        "id": 278292398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649418474
    },
    {
        "content": "<p>I certainly hope so!</p>",
        "id": 278295086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649420061
    },
    {
        "content": "<p>Thanks for your efforts!</p>",
        "id": 278295090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649420065
    },
    {
        "content": "<p>No sorries in <code>condensed/exact.lean</code>! <del>However for now I need <code>-T200000</code>. :-)</del></p>",
        "id": 278295204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649420149
    },
    {
        "content": "<p>Just pushed.</p>",
        "id": 278295453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649420291
    },
    {
        "content": "<p>Two associated PRs to mathlib: <a href=\"https://github.com/leanprover-community/mathlib/pull/13237\">#13237</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/13238\">#13238</a>.</p>",
        "id": 278297840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649421662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, the proof of <code>extend_aux_1</code> should surely be improved. But I may defer to you for instructions as to whether I ought to improve it, or move on to something else. :-)</p>",
        "id": 278298284,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649421863
    },
    {
        "content": "<p>Wow, I'm really happy that this file is now done. Another green oval in the blueprint (I'll update it now).</p>",
        "id": 278298833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649422185
    },
    {
        "content": "<p>If I were you I would just move on to something else. We can polish later.</p>",
        "id": 278298901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649422207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Here's the updated blueprint: <a href=\"https://leanprover-community.github.io/liquid/dep_graph_section_2.html\">https://leanprover-community.github.io/liquid/dep_graph_section_2.html</a></p>",
        "id": 278302036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649423756
    },
    {
        "content": "<p>For the record, the <code>theta.bounded</code> that is still blue should be ignored. Filippo has been working in that area, and once he's done we'll update the blueprint to reflect the correct proof.</p>",
        "id": 278302165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649423807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> If you already want to push an updated LaTeX proof, feel free to do so.</p>",
        "id": 278302208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649423824
    },
    {
        "content": "<p>Yes, I am sorry, I have not been very active on the blueprint recently, but I will try to push an updated LaTeX proof soon.</p>",
        "id": 278309429,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1649426966
    },
    {
        "content": "<p>I am afraid <code>pseudoelement.biprod_ext</code> is <a href=\"https://mathoverflow.net/a/419951/7845\">false</a>.</p>\n<p>I will wait a little bit to be sure I am not misunderstanding anything, but then I think I will modify the comment in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.pseudoelement.pseudo_pullback\">docs#category_theory.abelian.pseudoelement.pseudo_pullback</a> (CC <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> ).</p>\n<p>Without <code>pseudoelement.biprod_ext</code> I don't see how we can finish the current proof of <code>cone.π_quasi_iso</code>, so I guess <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  approach is the right one, even if the final result is slightly weaker.</p>",
        "id": 278336202,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649438548
    },
    {
        "content": "<p>Thanks for sorting this out!</p>",
        "id": 278337920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649439438
    },
    {
        "content": "<p>Adam and I are working on the other approach right now</p>",
        "id": 278337943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649439456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I just proved this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">is_iso_Ext_flip_obj_map_of_is_quasi_iso</span> <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">X'</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">𝒦</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">X'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">homotopy_category.is_quasi_iso</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_iso</span> <span class=\"o\">(((</span><span class=\"n\">Ext</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip.obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f.op</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>This should help us along with the LES without worrying too much about the derived cat.</p>",
        "id": 278357307,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649449225
    },
    {
        "content": "<p>This <code>Ext</code> is the <code>bounded_homotopy_category.Ext</code>..</p>",
        "id": 278357327,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649449241
    },
    {
        "content": "<p>We can do something similar in the second variable as well, if needed..</p>",
        "id": 278357357,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649449269
    },
    {
        "content": "<p>Getting there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ext_five_term_exact_seq</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">bounded_homotopy_category</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">homotopy_category.is_bounded_above</span> <span class=\"o\">((</span><span class=\"n\">homotopy_category.quotient</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">homotopy_category.is_bounded_above</span> <span class=\"o\">((</span><span class=\"n\">homotopy_category.quotient</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">homotopy_category.is_bounded_above</span> <span class=\"o\">((</span><span class=\"n\">homotopy_category.quotient</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Z</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">short_exact</span> <span class=\"o\">(</span><span class=\"n\">f.f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g.f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip.obj</span> <span class=\"n\">W</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_op</span> <span class=\"k\">in</span>\n  <span class=\"n\">exact_seq</span> <span class=\"n\">Ab</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">$</span>\n    <span class=\"o\">[</span> <span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"o\">(</span><span class=\"n\">of_hom</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n    <span class=\"o\">,</span> <span class=\"n\">E.map</span> <span class=\"o\">(</span><span class=\"n\">of_hom</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"o\">,</span> <span class=\"n\">connecting_hom'</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"n\">W</span> <span class=\"n\">w</span>\n    <span class=\"o\">,</span> <span class=\"n\">E.map</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">of_hom</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">⟧'</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 278362094,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649451844
    },
    {
        "content": "<p>Now we just need some shifting nonsense.</p>",
        "id": 278362113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649451852
    },
    {
        "content": "<p>There is one sorry here about checking that some square commutes, in case anyone has the time:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/47262fc71f999823fe3a399d6ad1f9b0570039e7/src/for_mathlib/derived/les2.lean#L94\">https://github.com/leanprover-community/lean-liquid/blob/47262fc71f999823fe3a399d6ad1f9b0570039e7/src/for_mathlib/derived/les2.lean#L94</a></p>",
        "id": 278362968,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649452377
    },
    {
        "content": "<p>Who would have thought that getting a workable version of LES would have been so tricky.</p>",
        "id": 278391304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649485502
    },
    {
        "content": "<p>Since this is claimed in well known reference, I wanted to really check that <code>pseudoelement.biprod_ext</code> is false.  <a href=\"https://github.com/leanprover-community/mathlib/pull/13387\">#13387</a></p>",
        "id": 278680447,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649763830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.2Fexact.2Elean/near/278391304\">said</a>:</p>\n<blockquote>\n<p>Who would have thought that getting a workable version of LES would have been so tricky.</p>\n</blockquote>\n<p>Did people working in other theorem provers find this? I remember Hales once pointing out to me that \"category theory in Coq seems to work fine\". However there's this phrase in the UK (which I very much doubt is used elsewhere) -- \"the proof of the pudding is in the eating\", which means that it's one thing just to define something which you claim is a long exact sequence, and it's quite another thing to prove that it works by e.g. proving some fact about ext groups vanishing in some category of condensed abelian groups. Who are the people doing category theory in Coq? Furthermore, my memory of Unimath was that there was an absolute ton of category theory in it. Did they do long exact sequences? </p>\n<p>OK so maybe this is a good question for the proof assistants stack exchange: I've <a href=\"https://proofassistants.stackexchange.com/questions/1258/examples-of-formalisation-of-abelian-categories\">asked it there</a>.</p>",
        "id": 278687940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649768078
    }
]