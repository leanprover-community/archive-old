[
    {
        "content": "<p>Do people ever work with the \"simplex category\" that only considers the maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>→</mo><mo stretchy=\"false\">[</mo><mi>m</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[n] \\to [m]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">]</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n \\le m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>? Does it have a name? Because that seems to be all we need for this project.</p>",
        "id": 230996351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616146608
    },
    {
        "content": "<p>semisimplicial objects?</p>",
        "id": 230996431,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616146660
    },
    {
        "content": "<p>I guess the \"semisimplex category\"? Let me look it up...</p>",
        "id": 230996499,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616146683
    },
    {
        "content": "<p>On the nLab <a href=\"https://ncatlab.org/nlab/show/semi-simplicial+object\">https://ncatlab.org/nlab/show/semi-simplicial+object</a> it did not get a special name</p>",
        "id": 230996810,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616146856
    },
    {
        "content": "<p>aha, thanks</p>",
        "id": 230997086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616147020
    },
    {
        "content": "<p>I think semisimplicial is indeed the name that the HoTT folks gave such objects</p>",
        "id": 231019423,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616159331
    },
    {
        "content": "<p>semisimplicial is completely standard, I'm just not sure whether the index category has a name of its own</p>",
        "id": 231019471,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616159358
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 231019513,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616159379
    },
    {
        "content": "<p>Semisimplex category? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 231019616,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616159408
    },
    {
        "content": "<p>Ha you already suggested that!</p>",
        "id": 231019729,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616159447
    },
    {
        "content": "<p>Maybe <code>simplex_category_coface</code> is a more descriptive name?</p>",
        "id": 231020120,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616159632
    },
    {
        "content": "<p>Or <code>coface_category</code>?</p>",
        "id": 231020209,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616159662
    },
    {
        "content": "<p>Anyway, I don't think that right now it makes sense to duplicate all the simplicial API to this new category.</p>",
        "id": 231020879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616159981
    },
    {
        "content": "<p>Also, I don't know enough about 8.19 to see whether we use the degeneracy maps there. Probably we do.</p>",
        "id": 231020990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616160012
    },
    {
        "content": "<p>For the construction of the <code>double_complex</code> used in the proof of 9.5, we only need the face maps.</p>",
        "id": 231021053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616160033
    },
    {
        "content": "<p>Yes, the \"alternating face map\" complex doesn't use degeneracies. But yes, I think they are used in 8.19; I think the notion of a hypercover is really about simplicial objects, not semisimplicial ones</p>",
        "id": 231021378,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616160164
    },
    {
        "content": "<p>So then we'll just battle through the functoriality of compositions of not-all-face-maps.</p>",
        "id": 231021827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616160386
    }
]