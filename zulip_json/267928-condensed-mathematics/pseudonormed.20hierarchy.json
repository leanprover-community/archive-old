[
    {
        "content": "<p>We have pseudonormed groups. For the second part, it will be useful to have pseudonormed rings as well.<br>\nIt's not clear to me whether this should move to mathlib at some point. But it looks like it will be useful to develop (at least a partial) hierarchy of pseudonormed foobars.</p>",
        "id": 244543783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625134183
    },
    {
        "content": "<p>We seem to have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semi_normed_comm_ring\">docs#semi_normed_comm_ring</a></p>",
        "id": 244562499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625144973
    },
    {
        "content": "<p>What other <code>foobars</code> do we need?</p>",
        "id": 244562540,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625144992
    },
    {
        "content": "<p>Oh nevermind, I guess you really do mean <code>pseudo</code> and not <code>semi</code>.</p>",
        "id": 244562833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625145131
    },
    {
        "content": "<p>Right, so we want rings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> with a filtration but subsets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>∈</mo><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">c \\in \\R_{\\ge 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>), such that</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>∈</mo><msub><mi>R</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">0 \\in R_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msub><mi>R</mi><mi>c</mi></msub><mo>=</mo><msub><mi>R</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">-R_c = R_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><msub><mi>c</mi><mn>1</mn></msub></msub><mo>+</mo><msub><mi>R</mi><msub><mi>c</mi><mn>2</mn></msub></msub><mo>⊂</mo><msub><mi>R</mi><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub></mrow></msub></mrow><annotation encoding=\"application/x-tex\">R_{c_1} + R_{c_2} \\subset R_{c_1 + c_2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139199999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139199999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><msub><mi>c</mi><mn>1</mn></msub></msub><mo>⋅</mo><msub><mi>R</mi><msub><mi>c</mi><mn>2</mn></msub></msub><mo>⊂</mo><msub><mi>R</mi><mrow><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub></mrow></msub></mrow><annotation encoding=\"application/x-tex\">R_{c_1} \\cdot R_{c_2} \\subset R_{c_1c_2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139199999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139199999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139199999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span>,</li>\n</ul>",
        "id": 244564159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625145648
    },
    {
        "content": "<p>Ooh, and probably <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>∈</mo><msub><mi>R</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">1 \\in R_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ?</p>",
        "id": 244564191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625145658
    },
    {
        "content": "<p>It feels like there is some general thing underlying such structures here, something between a seminorm and a bornology...</p>",
        "id": 244566886,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625146687
    },
    {
        "content": "<p>Scott had this categorical remark right? That these things were some sort of monoidal functors or something.</p>",
        "id": 244569291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625147597
    },
    {
        "content": "<p>Right, but I don't see how the pseudo-normed rings would fit with that point of view</p>",
        "id": 244570169,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625147917
    },
    {
        "content": "<p>Does mathlib or LTE have any form of filtered algebras right now?</p>",
        "id": 244570531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625148049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> these objects are of a somewhat different nature -- <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are not even additive subgroups.</p>",
        "id": 244571648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625148466
    },
    {
        "content": "<p>I guess it makes sense to develop a bit of pseudonormed (add_)monoids, and plug that before the stuff on pseudonormed add_groups that we already have. And then combine all of this into pseudonormed (semi_)rings.</p>",
        "id": 244611196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625165648
    },
    {
        "content": "<p>We will also want to have pseudonormed condensed foobars. This brings a question to the front that we've had some discussions about in the past, but now we need to get serious about it: how do we model (pseudonormed) groups/rings/monoids/modules in a topos?</p>\n<p>Is a sheaf of abelian groups a sheaf with values in the category <code>Ab</code>, or do we want an abelian group object in the sheaf topos?</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have any wisdom to inject in this design decision?</p>",
        "id": 244682533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625220511
    },
    {
        "content": "<p>To my naive eyes, defining it as an abelian group object sounds like one has to rebuild all the definitions from scratch. Defining it as a sheaf with values in some category makes it look more like diagrams of known things, so one probably doesn't have to rebuild so much.</p>\n<p>On the other hand, it may be that some more subtle things will be easier with the \"internal\" definition...</p>",
        "id": 244682838,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625220724
    },
    {
        "content": "<p>There has been discussion on the Discord about the merits of defining condensed abelian groups as group objects in condensed sets v functors to groups.</p>",
        "id": 244690907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625226440
    },
    {
        "content": "<p>What was the conclusion?</p>",
        "id": 244691241,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625226649
    },
    {
        "content": "<p>My take is that we want to define it as a sheaf with values in Ab, and prove an equivalence to the internal version</p>",
        "id": 244713382,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625237394
    },
    {
        "content": "<p>Woudn't the dream be to be able to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">CondensedType</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">condensed_add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 244714659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625237890
    },
    {
        "content": "<p>That looks very tempting, especially if we can invoke some topos-meta-tactic-fu to port the entire (constructive part of the) algebraic hierarchy over to internal algebraic hierarchies in a topos.</p>",
        "id": 244715082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625238087
    },
    {
        "content": "<p>But I'm not very well-versed in topos-meta-tactic-fu.</p>",
        "id": 244715117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625238101
    },
    {
        "content": "<p>Maybe this will be the time when the Coq and Lean communities will come together ;-)</p>",
        "id": 244715482,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625238249
    },
    {
        "content": "<p>Does coq have topos-meta-tactic-fu?</p>",
        "id": 244715588,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625238294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Wouldn't the dream rather be <code>variables (A : CondensedType) [add_comm_group A]</code>?</p>",
        "id": 244715605,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625238296
    },
    {
        "content": "<p>I don't know, but they do make the point that everything they do automatically ports to any topos</p>",
        "id": 244715679,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625238341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> Do you have experience with auto-porting stuff from <code>Type</code> to a topos? (In our case we want to work with a very specific topos, not just an arbitrary one.)</p>",
        "id": 244716503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625238693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/pseudonormed.20hierarchy/near/244716503\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110193\">Cyril Cohen</span> Do you have experience with auto-porting stuff from <code>Type</code> to a topos? (In our case we want to work with a very specific topos, not just an arbitrary one.)</p>\n</blockquote>\n<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>  I may have plans for that <br>\nIf you internalize (parts of ?) the lambda calculus and/or tactics, then I guess you can replay the normal proof scripts inside your topos <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 244718462,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1625239571
    },
    {
        "content": "<p>There was quite a bit of discussion about these things a while ago (perhaps <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> can chime in), see eg <a href=\"#narrow/stream/236446-Type-theory/topic/externalization\">https://leanprover.zulipchat.com/#narrow/stream/236446-Type-theory/topic/externalization</a> and also very recent discussions on this in the discord, I think auto-porting results in Lean as it stands is <em>hard</em>. Firstly we'd need to figure out how to take existing Lean proofs and interpret them in a topos, which would involve some nontrivial meta code), but also have enough topos theory to work with these things in practice</p>",
        "id": 244718510,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625239599
    },
    {
        "content": "<p>I think in my topos project I had <em>just</em> enough to interpret some parts of dependent type theory, but no guarantees that it's usable. I remember Reid also had some concerns that pullbacks might not behave nicely enough (eg that pulling back twice isn't the same on the nose as pulling back along a composition) for dependent type theory to work nicely internal to a topos in Lean</p>",
        "id": 244718755,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625239725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> You are also involved in this hierarchy builder project, right? Could that be put to use here?</p>",
        "id": 244718933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625239811
    },
    {
        "content": "<p>Of course it would create a hierarchy that is a priori disjoint from the existing one in mathlib. Which will probably bite us.</p>",
        "id": 244718974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625239837
    },
    {
        "content": "<p>Yes, the hierarchy would be disjoint. But maybe you can generate them quantifying on an abstract topos and use them in Lean? I don't know</p>",
        "id": 244719408,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1625240036
    },
    {
        "content": "<p>Ah here's the full thread: <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197486222\">https://leanprover.zulipchat.com/#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197486222</a>, specifically <a href=\"#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197495583\">https://leanprover.zulipchat.com/#narrow/stream/236446-Type-theory/topic/How.20to.20get.20HoTT.20people.20into.20Lean/near/197495583</a></p>",
        "id": 244719541,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625240086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> thanks for digging up all those pointers</p>",
        "id": 244720047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625240296
    },
    {
        "content": "<p>This is something I've dreamt about having in Lean for years :D</p>",
        "id": 244722467,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625241262
    },
    {
        "content": "<p>There's one approach I've been discussing with <span class=\"user-mention\" data-user-id=\"132893\">@Ken Lee</span> which I feel might be accessible as well as useful: defining an internal monoid on <code>X : C</code> as <code>Π δ,  monoid (δ ⟶ X)</code> such that precomposition is a monoid hom. Then we can automatically re-use all of mathlib's algebraic hierarchy, specifically it's easy to generalise this to internal rings, modules etc without a lot of boilerplate code; and we can then work with generalised elements in a category as if they're just elements of some type</p>",
        "id": 244722960,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625241476
    },
    {
        "content": "<p>This doesn't let you auto-port all results, but I think it could make it easy to transfer results: for instance <a href=\"https://github.com/b-mehta/topos/blob/2f75a61877899ff152d734d6f654f64601b4a97b/src/applications/nno.lean#L762\">here</a> when I defined internal natural numbers in a cartesian closed category, the proof of some lemmas were just \"unfold definitions then repeat the natural numbers proof\", and some were almost exactly a natural numbers proof including using <code>ring</code></p>",
        "id": 244723320,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625241611
    },
    {
        "content": "<p>Admittedly that file as a whole isn't a great example since it has muddled APIs for natural number objects, generalised elements all in one; ideally it should be three separate files</p>",
        "id": 244723460,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625241670
    },
    {
        "content": "<p>One thing that might help with guiding our decision is actually how to define <code>pseudonormed</code> insides a topos.</p>\n<ul>\n<li>We could work with sheaves taking values in pseudonormed foobars</li>\n<li>We could work with families of subobjects. Here we have two options:<ul>\n<li>Using the subobject API developed by Bhavik. I think this will give a feel that is pretty close to the handson definition that we have in <code>Type</code></li>\n<li>Using families of objects and compatible monomorphisms between them. I fear that we will quickly run into a huge slew of canonical isomorphisms that aren't defeqs.</li>\n</ul>\n</li>\n</ul>",
        "id": 244732582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625246302
    },
    {
        "content": "<p>I was actually wondering about this. Consider the category of pseudonormed sets. Is it possible to define, say, pseudonormed groups as something like an abelian group object in this category?</p>",
        "id": 244732863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625246477
    },
    {
        "content": "<p>(The answer is, of course, no. E.g one has to specify that the operation is additive and hence use addition on the reals which index the filtration.)</p>",
        "id": 244734845,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625247452
    },
    {
        "content": "<p>Does it make sense to generalize the indexing set of the filtration?</p>",
        "id": 244741118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625250527
    },
    {
        "content": "<p>To something like linearly ordered commutative groups with zero?</p>",
        "id": 244741147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625250545
    },
    {
        "content": "<p>For the case of pseudonormed rings, it seems we really need an ordered semiring as the indexing type</p>",
        "id": 244741248,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625250607
    },
    {
        "content": "<p>Good point.</p>",
        "id": 244741316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625250650
    },
    {
        "content": "<p>Modulo the distinction between rings and semirings, it seems that the indexing type for a pseudonormed foo should be an ordered foo</p>",
        "id": 244741562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625250793
    },
    {
        "content": "<p>Why <code>ordered foo</code>?  Isn't the order on the filtration determined by inclusion of sets?</p>",
        "id": 244741690,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625250871
    },
    {
        "content": "<p>Maybe <code>foo</code> below is enough?</p>",
        "id": 244741707,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625250884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> You want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>V</mi><mrow><mo>≤</mo><msub><mi>c</mi><mn>1</mn></msub></mrow></msub><mo>⊂</mo><msub><mi>V</mi><mrow><mo>≤</mo><msub><mi>c</mi><mn>2</mn></msub></mrow></msub></mrow><annotation encoding=\"application/x-tex\">V_{\\le c_1} \\subset V_{\\le c_2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29517899999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29517899999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>≤</mo><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">c_1 \\le c_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 244741994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625251044
    },
    {
        "content": "<p>Oops, sorry!  My mistake!  And we did not even need Lean to expose this one!</p>",
        "id": 244742152,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625251118
    },
    {
        "content": "<p>Maybe I should not add another comment, but, if the base of the filtration satisfies<code>has_exist_add_of_le</code>, then the inclusion is a consequence of the remaining containments, right?  If <code>a ≤ b</code>, then <code>b = c+a</code> (by <code>exist_...</code>), so <code>R_b</code> contains <code>R_c + R_a</code> and <code>R_c</code> contains <code>0</code>.  If the hypothesis that Johan mentioned is the only place where an order of the filtering <code>foo</code> plays a role, it may not be needed that there is an order on it.   I'm not sure if this is useful or not, but it is less structure to carry around, if the eventual application is with <code>ℝ≥0</code>.</p>",
        "id": 244748144,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625254403
    },
    {
        "content": "<p>At least, this might allow to split the arguments into a multiplicative one, the corresponding <code>to_additive</code> and a further layer dealing with a monotone map of ordered stuff, right?</p>",
        "id": 244749052,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625254927
    },
    {
        "content": "<p>I think I agree with Damiano's comment. In fact, I never explicitly asked for this monotonicity (but did check for myself that it follows, as Damiano observes)</p>",
        "id": 244749251,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625255071
    },
    {
        "content": "<p>While we are at it, should the union of the <code>R_a</code> equal <code>R</code>?  I guess that I always assume this in my mental picture, but it probably should be a requirement, right?</p>",
        "id": 244750233,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625255667
    },
    {
        "content": "<p>How would this work for, say, pseudonormed multiplicative monoids?</p>",
        "id": 244751099,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625256089
    },
    {
        "content": "<p>don't we need to be able to say something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>∈</mo><msub><mi>R</mi><mi>a</mi></msub></mrow><annotation encoding=\"application/x-tex\">1 \\in R_a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">1 \\le a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>?</p>",
        "id": 244751255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625256164
    },
    {
        "content": "<p>There might be a trick along the lines that Damiano is suggesting, but I don't see it.</p>",
        "id": 244751360,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625256219
    },
    {
        "content": "<p>Hmm. Good question. I never considered the purely multiplicative version... it seems a bit strange.</p>",
        "id": 244751478,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625256278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I didn't put the condition as I didn't need it, even though it's satisfied in all examples.</p>\n<p>Generally, feel free to change the definition to what you feel is best or is most easily formalized.</p>",
        "id": 244751727,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625256409
    },
    {
        "content": "<p>Adam, I had not fully developed the idea of splitting algebraic operations and order, it just seemed like it might be a good way of separating different parts of the argument.  I am not sure what is a good answer to your question on monoids.  With the additive version, you can invoke the \"opposite\" axiom, but the multiplicative version seems trickier...</p>",
        "id": 244752123,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625256645
    },
    {
        "content": "<p>Maybe this is one of those cases where you might want to assume the monotonicity in general, since in the applications you have it...</p>",
        "id": 244752293,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625256752
    },
    {
        "content": "<p>Peter, interesting that the condition on the union is not needed!</p>",
        "id": 244752399,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625256830
    },
    {
        "content": "<p>Anyway, I'm off to bed: good night all!</p>",
        "id": 244752480,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625256867
    },
    {
        "content": "<p>I guess that's like an enorm, that can take the value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>.</p>",
        "id": 244752561,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625256924
    },
    {
        "content": "<p>Mostly for my own sake, I thought of making a definition.  Feel free to disregard!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">filtr</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mul_filtr</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">filtr</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">filtr</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">filtr</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"bp\">*</span> <span class=\"n\">f₂</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">add_filtr</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">filtr</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">filtr</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">filtr</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"bp\">+</span> <span class=\"n\">f₂</span><span class=\"o\">))</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">mul_filtr</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semiring_filtration</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_filtr</span> <span class=\"n\">filtr</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_filtr</span> <span class=\"n\">filtr</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">filtr</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">filtr</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">filtration</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_filtr</span> <span class=\"n\">filtr</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_filtr</span> <span class=\"n\">filtr</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"n\">filtr</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">filtr</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mem</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">filtr</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 244781158,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625288969
    },
    {
        "content": "<p>That indeed looks like the thing we want in <code>Type</code>. Next challenge: wite these defs in <code>Cond</code> <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 244781683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625289734
    },
    {
        "content": "<p>At least, I am glad that I learned enough Lean to formulate the easy version of definitions!</p>",
        "id": 244787799,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625297221
    },
    {
        "content": "<p>Maybe sheaves of modules are a good example to keep in mind. A sheaf of rings/abelian groups can be described in two ways: as a sheaf taking values in the category of rings/abelian groups, or as a ring/ab_group object in the category of set-valued sheaves.<br>\nBut if you have a sheaf of rings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>, then a sheaf of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>-modules is not a \"sheaf valued in foo-modules\" (I guess you could take values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>R</mi></msub><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mi>R</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_R \\mathrm{Mod}_R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17862099999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Mod</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, but that will be a tricky definition). So a sheaf of modules seems to push us in the directions of \"module object over the ring object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>\".</p>",
        "id": 244900938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625468657
    },
    {
        "content": "<p>Note that we still don't have sheaves of modules in mathlib.</p>",
        "id": 244903471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625470729
    },
    {
        "content": "<p>Note also that the sigma type trick is what we ultimately used when defining the structure sheaf on an affine scheme (we defined sections on U\\sub Spec(R) to be a map from U to the disjoint union of the R_P with some properties -- this is not the definition in the stacks project</p>",
        "id": 244903666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625470865
    },
    {
        "content": "<p>I thought we had all the ingredients available to say:</p>",
        "id": 246183732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626409933
    },
    {
        "content": "<ul>\n<li>A ring is a monoid object in <code>Ab</code>, so</li>\n<li>A sheaf of rings is the same as a sheaf of monoid objects in <code>Ab</code></li>\n<li>A sheaf of monoid objects in C is a monoid object in sheaves in C</li>\n<li>Hence a sheaf of rings is a monoid object in sheaves in <code>Ab</code></li>\n<li>and we have module objects for monoid objects, hence we have sheaves of modules?</li>\n</ul>",
        "id": 246183762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626410036
    },
    {
        "content": "<p>I haven't looked at this recently, maybe one or more of these ingredients is still missing.</p>",
        "id": 246183803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626410058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Ooh, I forgot that we already had module objects!<br>\nAnyway, I guess that we will still need a bit of API around this to make it usable. Stacking all those constructions on top of each other, it will be quite annoying (for example) to write down <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">M(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> for some sheaf of modules <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</p>",
        "id": 246184160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626410604
    },
    {
        "content": "<p>Yes, I agree this is only a \"in principle the definition can be built out of existing lego\" statement, nothing stronger about that being a good idea. :-)</p>",
        "id": 246184216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626410668
    },
    {
        "content": "<p>somewhat similar to Adam's <code>singular_homology</code> definition :-)</p>",
        "id": 246184234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626410703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/pseudonormed.20hierarchy/near/246183762\">said</a>:</p>\n<blockquote>\n<ul>\n<li>A ring is a monoid object in <code>Ab</code>, so</li>\n<li>A sheaf of rings is the same as a sheaf of monoid objects in <code>Ab</code></li>\n<li>A sheaf of monoid objects in C is a monoid object in sheaves in C</li>\n<li>Hence a sheaf of rings is a monoid object in sheaves in <code>Ab</code></li>\n<li>and we have module objects for monoid objects, hence we have sheaves of modules?</li>\n</ul>\n</blockquote>\n<p>I don't think we have your second point or third point yet? I'd definitely like to see these though</p>",
        "id": 246243236,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626451489
    },
    {
        "content": "<p>Do we even have the tensor product of sheaves in <code>Ab</code>?</p>",
        "id": 246244015,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626451844
    },
    {
        "content": "<p>I'm assuming we don't, since we can't sheafify yet.</p>",
        "id": 246244220,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626451938
    },
    {
        "content": "<p>Hmm, okay. I was being wildly optimistic. I'm hoping to get back to mathlib soon, maybe I'll look in this direction for a bit.</p>",
        "id": 246296580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626485008
    }
]