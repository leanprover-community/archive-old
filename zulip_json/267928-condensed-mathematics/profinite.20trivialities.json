[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/pseudo_normed_group/FiltrationPow.lean#L69\">https://github.com/leanprover-community/lean-liquid/blob/master/src/pseudo_normed_group/FiltrationPow.lean#L69</a> defines <code>Pow</code> which takes powers of profinite sets.</p>\n<ul>\n<li>We'll need <code>Pow_mul</code> and <code>Pow_mul'</code> which give functorial isos <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mrow><mi>m</mi><mi>n</mi></mrow></msup><mo>≅</mo><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mi>m</mi></msup><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mo>≅</mo><msup><mi>X</mi><mrow><mi>n</mi><mi>m</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">X^{mn} \\cong (X^m)^n \\cong X^{nm}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span></span>.</li>\n<li>Do we already have <code>iso_of_homeomorph</code> for <code>Profinite</code>?</li>\n</ul>",
        "id": 233928754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618033517
    },
    {
        "content": "<p>In the cech_stuff branch, I added iso_of_bijective <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 233953828,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618059999
    },
    {
        "content": "<p>I am trying to prove that a certain set is open in the space of bounded Laurent measures. If I look at these as a \"honest\" inverse limit, I know how to do, because my set is a product of some subsets of finitely many components, and then the whole component elsewhere, using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.is_topological_basis.is_open_iff\">docs#topological_space.is_topological_basis.is_open_iff</a> . I also get that the topology on the bounded Laurent measures is induced from that on the limit cone (the two types are equivalent), and I wonder if there is a painless way to describe this limit cone as a subtype of the <code>Pi</code> type.</p>",
        "id": 279833990,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639154
    },
    {
        "content": "<p>There is a homeomorphism between the two. I'm not near Lean right now, but it should be somewhere close to the definition of the topology.</p>",
        "id": 279834603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650639399
    },
    {
        "content": "<p>Well, I can find <code>laurent_measures_bdd_homeo { F : ℒ S | ∥F∥₊ ≤ c } ≃ₜ\n  (Profinite.limit_cone (laurent_measures_bdd_functor r S c ⋙ Fintype.to_Profinite)).X</code>, is it the one you are referring to?</p>",
        "id": 279834730,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639452
    },
    {
        "content": "<p>This is actually not very useful, I think: it is basically tautological, because the topology on laurent measures is <em>defined</em> as the topology on the limit cone.</p>",
        "id": 279834844,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Are you working with a subset of one of the filtered pieces of Laurent measures? I suppose so, because otherwise there is no topology!</p>",
        "id": 279835327,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650639656
    },
    {
        "content": "<p>Yes, indeed.</p>",
        "id": 279835392,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639682
    },
    {
        "content": "<p>Note that <code>Profinite.limit_cone</code> is defeq to the \"usual\" limit, i.e. as a closed subset of the pi type</p>",
        "id": 279835395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650639685
    },
    {
        "content": "<p>Really <code>defeq</code>?!</p>",
        "id": 279835433,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639702
    },
    {
        "content": "<p>Yeah, it should be</p>",
        "id": 279835444,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650639707
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/631890bf90e76818b80c57c00291380c0329143d/src/topology/category/Profinite/default.lean#L161\">https://github.com/leanprover-community/mathlib/blob/631890bf90e76818b80c57c00291380c0329143d/src/topology/category/Profinite/default.lean#L161</a></p>",
        "id": 279835553,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650639734
    },
    {
        "content": "<p>Wow, so I can blindly apply your result on the basis of the topology of a <code>Pi.top</code> space and get somewhere? I did not even dare trying... <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 279835570,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/profinite.20trivialities/near/279835553\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/631890bf90e76818b80c57c00291380c0329143d/src/topology/category/Profinite/default.lean#L161\">https://github.com/leanprover-community/mathlib/blob/631890bf90e76818b80c57c00291380c0329143d/src/topology/category/Profinite/default.lean#L161</a></p>\n</blockquote>\n<p>Oh nice!</p>",
        "id": 279835634,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639771
    },
    {
        "content": "<p>Thanks</p>",
        "id": 279835635,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639773
    },
    {
        "content": "<p>well, first you apply ssome lemma about the induced topology</p>",
        "id": 279835639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650639775
    },
    {
        "content": "<p>Yes yes, this I thought.</p>",
        "id": 279835667,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639787
    },
    {
        "content": "<p>since you need to pass from the subspace to the ambient pi type</p>",
        "id": 279835682,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650639793
    },
    {
        "content": "<p>It all boils down to the following construction<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/631890bf90e76818b80c57c00291380c0329143d/src/topology/category/Top/limits.lean#L40\">https://github.com/leanprover-community/mathlib/blob/631890bf90e76818b80c57c00291380c0329143d/src/topology/category/Top/limits.lean#L40</a></p>",
        "id": 279835726,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650639812
    },
    {
        "content": "<p>OK, I will try but it seems easy, thanks.</p>",
        "id": 279835727,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650639813
    },
    {
        "content": "<p>If you want, there is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Top.limit_cone_infi\">docs#Top.limit_cone_infi</a> which you can use in conjunction with the fact that <code>Profinite_to_Top</code> preserves limits to obtain a description of the limit Profinite set as the infimum of topologies. IIRC I also proved some lemma (in mathlib?) describing a basis for the topology of an infimum of topologies.</p>",
        "id": 279836176,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650640004
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_topological_basis_infi\">docs#is_topological_basis_infi</a></p>",
        "id": 279836266,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650640053
    },
    {
        "content": "<p>Thanks, I think the lemmas about explicit <code>Pi</code> topologies (rather than general <code>infi</code> ones) should be enough, but if not I'll try these.</p>",
        "id": 279836318,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650640074
    },
    {
        "content": "<p>Filippo -- if you're talking about what I think you're talking about, then maybe it's enough to observe that the profinite thing you have is defined as a limit, so there will be map to one of the factors (all of which are finite), and this map will be known to be continuous, and then you can take the preimage of a point in the factor and this will be open.</p>",
        "id": 279842929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650642989
    },
    {
        "content": "<p>Oh, very good point Kevin. I am indeed talking about what I think you think I am talking about... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 279843098,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650643069
    },
    {
        "content": "<p>I am grabbing this option to dwell a bit into the <code>category_theory</code> library, and construction of limits, but I will probably take your approach soon.</p>",
        "id": 279843284,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650643143
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 279843292,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650643145
    }
]