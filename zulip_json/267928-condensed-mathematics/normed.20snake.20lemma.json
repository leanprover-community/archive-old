[
    {
        "content": "<p>I pushed a statement of Proposition 9.10 (the normed snake lemma) to the file <code>normed_snake.lean</code>.<br>\n(cc <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>)</p>",
        "id": 223367423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611146632
    },
    {
        "content": "<p>Great! This looks like something not too hard</p>",
        "id": 223368267,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611147186
    },
    {
        "content": "<p>You probably forgot a <code>lemma normed_snake</code> at the of the file</p>",
        "id": 223368291,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611147203
    },
    {
        "content": "<p>I mean, you forgot to write the statement :)</p>",
        "id": 223368398,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611147264
    },
    {
        "content": "<p>ooops, forgot to save before pushing. I pushed again.</p>",
        "id": 223368510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611147356
    },
    {
        "content": "<p>In case anyone is working on this -- I just fixed the docstring (make sure to pull <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/9eca62d7c442709436ef5ce2f22a9b327c486914/src/normed_snake.lean#L28\">https://github.com/leanprover-community/lean-liquid/blob/9eca62d7c442709436ef5ce2f22a9b327c486914/src/normed_snake.lean#L28</a></p>",
        "id": 223384105,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611154920
    },
    {
        "content": "<p>I am interested in it, but still in the process of reading the \"normal\" math</p>",
        "id": 223384638,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611155051
    },
    {
        "content": "<p>Okay, I just killed the easy sorry in that file :)</p>",
        "id": 223386297,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611155603
    },
    {
        "content": "<p>I fixed a typo in the statement.</p>",
        "id": 223386747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611155778
    },
    {
        "content": "<p>In the statement of  <code>normed_snake</code> I think that the fact that <code>N</code> is the quotient <code>M'/M</code> is missing: there is <code>hg : ∀ c i, function.surjective (g.apply c i)</code>, but <code>g</code> seems unrelated to <code>M</code>. Am I missing something?</p>",
        "id": 223397514,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611160012
    },
    {
        "content": "<p>I think that's implied by the assumption <code>hg</code>, right?</p>",
        "id": 223398963,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611160642
    },
    {
        "content": "<p>Oh, maybe the assumption that <code>M</code>is the kernel of <code>g</code> is missing?</p>",
        "id": 223399124,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611160691
    },
    {
        "content": "<p>Yes <code>hg</code> says that <code>g</code> is surjective, but not that <code>M</code> is its kernel</p>",
        "id": 223399404,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611160817
    },
    {
        "content": "<p>Yeah it seems like the assumption is missing, unless I'm mmissing something...</p>",
        "id": 223399659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611160940
    },
    {
        "content": "<p>Sorry, you are right. Please add an \"exactness in the middle assumption\".</p>",
        "id": 223400860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611161422
    },
    {
        "content": "<p>Also the quotient norm I don't think satisfies the written property <code>hN : ∀ c i x, ∥g.apply c i x∥ = ∥x∥</code>: usually the norm on the quotient is the <code>inf</code> over all  the representative of an element.</p>",
        "id": 223405386,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611163306
    },
    {
        "content": "<p>I have to think a little bit about it, but we probably need something like a proposition <code>is_quotient g</code> and assume that</p>",
        "id": 223405484,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611163346
    },
    {
        "content": "<p>Yep... I wrote a hasty statement</p>",
        "id": 223406025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611163614
    },
    {
        "content": "<p>At least we want to describe the quotient, but not use a construction in the statement. That will make it easier to apply this lemma.</p>",
        "id": 223406109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611163662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223405484\">said</a>:</p>\n<blockquote>\n<p>I have to think a little bit about it, but we probably need something like a proposition <code>is_quotient g</code> and assume that</p>\n</blockquote>\n<p>I like this idea!</p>",
        "id": 223406191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611163695
    },
    {
        "content": "<p>At least the quotient is \"pointwise\" by definition if I understand where the proposition is used</p>",
        "id": 223406770,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611163967
    },
    {
        "content": "<p>Thinking out loud here: If I were planning to prove the \"usual\" snake lemma, I think the easiest assumption is to say that \"for all x, if g x = 0 then there exists y such that f y = x\" and \"for all y, g (f y) = 0\". Thoughts?</p>",
        "id": 223408907,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611164966
    },
    {
        "content": "<p>We will probably want both versions (pointy and pointfree). One is useful for proving, the other is good for applying in categorical settings.</p>",
        "id": 223409147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611165052
    },
    {
        "content": "<p>Okay, sure. I guess we should just have some basic api for quotients in <code>NormedGroup</code>.</p>",
        "id": 223409227,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611165081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> this condition is for sure necessary, but we also have to say something about the norm on the quotient</p>",
        "id": 223409304,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611165114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223409304\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> this condition is for sure necessary, but we also have to say something about the norm on the quotient</p>\n</blockquote>\n<p>Yes, I agree, but that's already there, right?</p>",
        "id": 223409369,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611165133
    },
    {
        "content": "<p>Oh right, I see your comment above now. Sorry I was away for a bit and catching up on the discussion now.</p>",
        "id": 223409467,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611165179
    },
    {
        "content": "<p>Maybe I am confused, but the  condition already there is too strong: it implies that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||x|| = ||y||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(x) = g(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 223409496,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611165193
    },
    {
        "content": "<p>sure, that condition should be removed</p>",
        "id": 223409578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611165234
    },
    {
        "content": "<p>Yeah, this is too strong -- it implies strictness, right? Hence it implies injectivity!</p>",
        "id": 223409665,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611165258
    },
    {
        "content": "<p>For usual Banach space we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>π</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||\\pi(x)|| \\leq ||x||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is the projection</p>",
        "id": 223409699,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611165276
    },
    {
        "content": "<p>Right, me stupid <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 223409709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611165281
    },
    {
        "content": "<p>But I don't think this property characterize the projection</p>",
        "id": 223409734,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611165291
    },
    {
        "content": "<p>I think your <code>inf</code> idea sounded good. But the best thing would be to define <code>is_quotient</code> and prove that it has the univ. property.</p>",
        "id": 223409799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611165328
    },
    {
        "content": "<p>Is this the idiomatic way to construct the image of a morphism (as a subgroup)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">V₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f.to_add_monoid_hom</span>\n</code></pre></div>\n<p>Seems a bit silly...</p>",
        "id": 223411646,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611166073
    },
    {
        "content": "<p>There should be <code>add_monoid_hom.image</code> but we might want to add a copy of that for <code>normed_group_hom</code>.</p>",
        "id": 223412140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611166298
    },
    {
        "content": "<p>I didn't find any such thing.... I'll look harder.</p>",
        "id": 223412178,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611166316
    },
    {
        "content": "<p>Hmm, maybe we only have it for linear maps</p>",
        "id": 223412645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611166503
    },
    {
        "content": "<p>I am pretty sure this is true, but are we 100% sure that the underlying group of the quotient as normed groups is the groups quotient?</p>",
        "id": 223417655,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611168781
    },
    {
        "content": "<p>I mean at the beginning I was wondering about what happens if the subgroup is not closed, but this is impossible since it is complete</p>",
        "id": 223417721,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611168812
    },
    {
        "content": "<p>normed groups aren't assumed to be complete</p>",
        "id": 223418105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611168996
    },
    {
        "content": "<p>Ah... I just checked, for  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">R</span></span></span></span></span>-Banach spaces the quotient exists if the subspace is closed (at least everybody seems to assume this)</p>",
        "id": 223418284,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611169084
    },
    {
        "content": "<p>But maybe it is to have the quotient complete, I have to read the proof</p>",
        "id": 223418326,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611169105
    },
    {
        "content": "<p>Something is happening here: if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mover accent=\"true\"><mi>Y</mi><mo>ˉ</mo></mover></mrow><annotation encoding=\"application/x-tex\">a \\in \\bar Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span></span></span></span> but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∉</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">a \\not \\in Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi><msub><mi mathvariant=\"normal\">∣</mi><mrow><mi>X</mi><mi mathvariant=\"normal\">/</mi><mi>Y</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">||a||_{X/Y} = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>... and indeed the fact that the subspace is closed it used in the literature to prove that the quotient norm is a norm (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">||a||=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>)</p>",
        "id": 223418840,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611169327
    },
    {
        "content": "<p>aah, in [Analytic] normed groups are not assumed to be separated</p>",
        "id": 223419136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611169449
    },
    {
        "content": "<p>so we should change the definition in Lean</p>",
        "id": 223419160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611169460
    },
    {
        "content": "<p>maybe we can call those <code>prenormed_groups</code> or something like that. (So they aren't metric spaces, because you can have a nontrivial subgroup of elements with norm <code>0</code>.)</p>",
        "id": 223419238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611169501
    },
    {
        "content": "<p>On the other hand... I think we only care about complete normed groups, for the applications of the normed snake lemma in the proof of 9.4.</p>",
        "id": 223419539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611169627
    },
    {
        "content": "<p>So when there is \"normed group\" we mean \"seminormed group\"?</p>",
        "id": 223419793,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611169759
    },
    {
        "content": "<p>maybe... this is roughly the first time in my life that I work with normed groups that are not DVR's/local fields.</p>",
        "id": 223419895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611169802
    },
    {
        "content": "<p>See the top of appendix 2 to section 8 (defn 8.16)</p>",
        "id": 223420063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611169820
    },
    {
        "content": "<p>Ah ok, it's called separated if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||x||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>",
        "id": 223420375,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611169942
    },
    {
        "content": "<p>So in Lean <code>normed_group</code> implies separated. And for the statement of 9.4 that is not a problem, because everything is complete.</p>",
        "id": 223420744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611170019
    },
    {
        "content": "<p>But one has to then take the completion of the quotient.</p>",
        "id": 223420791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611170038
    },
    {
        "content": "<p>because the subgroups might not be closed? makes sense</p>",
        "id": 223420858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611170059
    },
    {
        "content": "<p>So my guess is that we should introduce <code>seminormed_group</code> or something like that, which drops the separatedness.</p>",
        "id": 223420923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611170091
    },
    {
        "content": "<p>If you require separateness then the quotient exist for closed subspace</p>",
        "id": 223420935,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611170098
    },
    {
        "content": "<p>I guess the issue is really that the image of a morphism need not be a closed subgroup?</p>",
        "id": 223421021,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611170144
    },
    {
        "content": "<p>Or maybe it depends on what you call quotient. The gadget that satisfies the universal property will be the quotient by the closure I think</p>",
        "id": 223421059,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611170161
    },
    {
        "content": "<p>Right.... so the other option is to take the closure of the image, and take the quotient by that.</p>",
        "id": 223421153,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611170187
    },
    {
        "content": "<p>Yes, this issues exists already for \"standard\" Banach spaces</p>",
        "id": 223421185,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611170202
    },
    {
        "content": "<p>oh that's what you wrote :)</p>",
        "id": 223421189,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611170204
    },
    {
        "content": "<p>ugh, I guess we need an api for the closure of a subgroup... I don't think this exists in mathlib.</p>",
        "id": 223421628,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611170405
    },
    {
        "content": "<p>there is a thorough api for separation and completion.</p>",
        "id": 223421906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611170539
    },
    {
        "content": "<p>After a <em>very</em> quick  reading of the proof of 9.10 I have the impression that the only property of the quotient (semi)norm we need there is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>π</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||\\pi(x)|| \\leq ||x||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is the projection</p>",
        "id": 223422164,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611170659
    },
    {
        "content": "<p>maybe we should just try formalizing it</p>",
        "id": 223422398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611170766
    },
    {
        "content": "<p>the proof looks very Leanable</p>",
        "id": 223422412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611170773
    },
    {
        "content": "<p>does someone want to livestream their attempt?</p>",
        "id": 223422441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611170787
    },
    {
        "content": "<p>I am probably far too optimistic, but the proof seems very explicit. I will try to add \"by hand\" the assumption I need about the quotient to see if is doable</p>",
        "id": 223422488,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611170793
    },
    {
        "content": "<p>In <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a> one has this issue for the <em>orthogonal</em> projection, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/orthogonal_projection\">docs#orthogonal_projection</a>.  It takes a completeness hypothesis.</p>",
        "id": 223422537,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611170821
    },
    {
        "content": "<p>I think this is a sensible statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">normed_snake</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group_hom.is_strict</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">M.res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">f.apply</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- jmc: Is this ↑↑ the correct way of saying \"`N` has the quotient norm\"?</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM_adm</span> <span class=\"o\">:</span> <span class=\"n\">M.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'_adm</span> <span class=\"o\">:</span> <span class=\"n\">M'.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k_new</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k_new</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k_new</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span>\n</code></pre></div>\n<p>I've added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The image of a bounded group homomorphism. Naturally endowed with a `normed_group` instance. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">V₂</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_add_monoid_hom.range</span>\n</code></pre></div>\n<p>In <code>src/for_mathlib/normed_group_hom.lean</code> (I didn't check, but all the basic properties, like for the kernel, should be immediate).</p>",
        "id": 223427388,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611173008
    },
    {
        "content": "<p>hmmm, the <code>hN</code> still looks wrong, right?</p>",
        "id": 223427497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611173050
    },
    {
        "content": "<p>should that <code>=</code> be <code>\\le</code>?</p>",
        "id": 223427527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611173063
    },
    {
        "content": "<p>Ops, I thought I did it</p>",
        "id": 223427590,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611173103
    },
    {
        "content": "<p>We should just start proving it. I think the proof will really be fun.</p>",
        "id": 223427658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611173136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223422441\">said</a>:</p>\n<blockquote>\n<p>does someone want to livestream their attempt?</p>\n</blockquote>\n<p>I would like to, but I'm busy this afternoon.</p>",
        "id": 223427949,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611173270
    },
    {
        "content": "<p>You are really making me a bit nervous about the things I've written. Exactly as it should be! :-)<br>\nIn 9.10, the hypothesis imposed is ensuring that on separated completions, the map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is \"pro-injective\" (any element in the kernel gets killed by some (explicit) restriction map), but on the norm-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>-part arbitrary things can happen. Fortunately, the notion of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness actually only depends on the separated quotients! So I think what I wrote should be OK.</p>",
        "id": 223429197,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611173878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> so what would you suggest/prefer... that we work with the separated notion <code>normed_group</code>, or that we generalize (like in your notes) to include the non-separated case?</p>",
        "id": 223429922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611174235
    },
    {
        "content": "<p>I guess we could postpone this question for the time being.</p>",
        "id": 223429995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611174253
    },
    {
        "content": "<p>good question. it's fine to always pass to separated quotients, so I guess you can just stick with the API you have</p>",
        "id": 223432522,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611175456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223409147\">said</a>:</p>\n<blockquote>\n<p>We will probably want both versions (pointy and pointfree). One is useful for proving, the other is good for applying in categorical settings.</p>\n</blockquote>\n<p>In case it's useful, I think it's worth being aware of <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>'s work on abelian categories, and in particular his <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/abelian/diagram_lemmas/four.lean\">proof of the four lemma using pseudoelements</a></p>",
        "id": 223440165,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1611179052
    },
    {
        "content": "<p>In my previous version of the lemma I also forgot that <code>g</code> must be surjective. Here is a new statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">normed_snake</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group_hom.is_strict</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">M.res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">f.apply</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgsur</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- jmc: Is this ↑↑ the correct way of saying \"`N` has the quotient norm\"?</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM_adm</span> <span class=\"o\">:</span> <span class=\"n\">M.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'_adm</span> <span class=\"o\">:</span> <span class=\"n\">M'.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k_new</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k_new</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k_new</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span>\n</code></pre></div>",
        "id": 223501876,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611232776
    },
    {
        "content": "<p>Mmm, we should really have a definition of the \"quotient norm\".<br>\nFor me, it is the following: let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>⊆</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">Y \\subseteq X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> be an inclusion in some category equipped with quotients and a norm and let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><mi>X</mi><mo>→</mo><mi>X</mi><mi mathvariant=\"normal\">/</mi><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">\\pi \\colon X \\to X/Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> be the projection. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>π</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><msub><mo><mi>inf</mi><mo>⁡</mo></mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></msub><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">||\\pi(x)|| = \\inf_{y \\in Y}\\{||x+y||\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mop\"><span class=\"mop\">in<span style=\"margin-right:0.07778em;\">f</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">{</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mclose\">}</span></span></span></span>, so for example trivially <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>π</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||\\pi(x)|| \\leq ||x||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span>.</p>\n<p>Now, in the third line of the proof of Proposition 9.10 the authors say:</p>\n<p>Then we can write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>m</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></mrow></msubsup><mo>=</mo><msubsup><mi>f</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><msubsup><mi>m</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">)</mo><mo>+</mo><msubsup><mi>m</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">m_{k^3c}'^{i+1} = f_{k^3c}^{i+1}(m_{k^3c}^{i+1}) + m_{k^3c}''^{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi>m</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></mrow></msubsup><mi mathvariant=\"normal\">∣</mi><msub><mi mathvariant=\"normal\">∣</mi><msubsup><mi>M</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></mrow></msubsup></msub><mo>≤</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi>n</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mi mathvariant=\"normal\">∣</mi><msub><mi mathvariant=\"normal\">∣</mi><msubsup><mi>N</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup></msub></mrow><annotation encoding=\"application/x-tex\">||m_{k^3c}''^{i+1}||_{M_{k^3c}'^{i+1}} \\leq ||n_{k^3c}^{i+1}||_{N_{k^3c}^{i+1}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4978399999999998em;vertical-align:-0.6330449999999999em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4320150000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8754071428571428em;\"><span style=\"top:-2.1487999999999996em;margin-left:-0.10903em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6703142857142854em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9384399999999999em;\"><span style=\"top:-2.93844em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">3</span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.0746357142857144em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6703142857142854em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5215142857142857em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6330449999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4978399999999998em;vertical-align:-0.6330449999999999em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4320150000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8754071428571428em;\"><span style=\"top:-2.1487999999999996em;margin-left:-0.10903em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6703142857142854em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9384399999999999em;\"><span style=\"top:-2.93844em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">3</span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.0746357142857144em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6703142857142854em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5215142857142857em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6330449999999999em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>N</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">N_{k^3c}^{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span></span></span></span> is the quotient by the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>f</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">f_{k^3c}^{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span></span></span></span> and the projection of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>m</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">m_{k^3c}'^{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>n</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">n_{k^3c}^{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span></span></span></span> by definition. In particular we also have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">(</mo><msubsup><mi>m</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></mrow></msubsup><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mi>n</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">\\pi(m_{k^3c}''^{i+1}) = n_{k^3c}^{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi>m</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></mrow></msubsup><mi mathvariant=\"normal\">∣</mi><msub><mi mathvariant=\"normal\">∣</mi><msubsup><mi>M</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></mrow></msubsup></msub><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi>n</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup><mi mathvariant=\"normal\">∣</mi><msub><mi mathvariant=\"normal\">∣</mi><msubsup><mi>N</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msubsup></msub></mrow><annotation encoding=\"application/x-tex\">||m_{k^3c}''^{i+1}||_{M_{k^3c}'^{i+1}} = ||n_{k^3c}^{i+1}||_{N_{k^3c}^{i+1}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4978399999999998em;vertical-align:-0.6330449999999999em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4320150000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8754071428571428em;\"><span style=\"top:-2.1487999999999996em;margin-left:-0.10903em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6703142857142854em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9384399999999999em;\"><span style=\"top:-2.93844em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">3</span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.0746357142857144em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6703142857142854em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5215142857142857em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6330449999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4978399999999998em;vertical-align:-0.6330449999999999em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.4320150000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8754071428571428em;\"><span style=\"top:-2.1487999999999996em;margin-left:-0.10903em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6703142857142854em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9384399999999999em;\"><span style=\"top:-2.93844em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.64444em;\"></span><span class=\"mord mtight\">3</span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.0746357142857144em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6703142857142854em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5215142857142857em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6330449999999999em;\"><span></span></span></span></span></span></span></span></span></span> and in practice this means that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>inf</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\inf</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\">in<span style=\"margin-right:0.07778em;\">f</span></span></span></span></span> in the definition of the quotient norm is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>min</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\min</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"mop\">min</span></span></span></span>, attained at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>m</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">m_{k^3c}''^{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>I know that for classical Banach spaces this is not true (even if the subspace is closed). Am I missing something trivial?</p>",
        "id": 223511615,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611237910
    },
    {
        "content": "<p>Hmm, so apriori it looks like the quotient norm gives the inequality in the other direction.</p>",
        "id": 223512937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611238490
    },
    {
        "content": "<p>By quotient norm you mean you take the inf of the norms of the elements in the preimage of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>, righht?</p>",
        "id": 223513300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611238634
    },
    {
        "content": "<p>Yep, by definition we get that the quotient norm is smaller than something, rather then bigger</p>",
        "id": 223513316,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611238642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Yes, that's what I mean</p>",
        "id": 223513352,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611238658
    },
    {
        "content": "<p>And if IIRC, the \"correct\" category is separated normed abelian groups?</p>",
        "id": 223513584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611238742
    },
    {
        "content": "<p>Just trying to orient myself (I just woke up)</p>",
        "id": 223513623,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611238764
    },
    {
        "content": "<p>I am not sure if separateness is required, but in any case what I wrote above stays true</p>",
        "id": 223514046,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611238934
    },
    {
        "content": "<p>You are right, Riccardo, we need to slightly weaken that inequality, and allow some small increase in norm</p>",
        "id": 223514148,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611238987
    },
    {
        "content": "<p>But I think we can just take the infimum again at the end, so I think the lemma should stay true as stated</p>",
        "id": 223514567,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611239169
    },
    {
        "content": "<p>I should maybe also say that in the generality of this lemma (and conceivably in the relevant generality) it may happen that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>'s are nonseparated, in which case the infimum need not be attained.</p>",
        "id": 223515311,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611239508
    },
    {
        "content": "<p>Thank you, I will replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>+</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">C + \\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>, that makes this part of the proof OK, and I will take the infimum at the end.</p>",
        "id": 223515772,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611239696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Are you formalizing the proof?</p>",
        "id": 223518197,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611240757
    },
    {
        "content": "<p>I just started... new version of the statement (including the quotient norm and the very beginning of the proof)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The normed snake lemma. See Proposition 9.10 from Analytic.pdf -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">normed_snake</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group_hom.is_strict</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">M.res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">f.apply</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgsur</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"o\">})</span>\n  <span class=\"c1\">-- jmc: Is this ↑↑ the correct way of saying \"`N` has the quotient norm\"?</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM_adm</span> <span class=\"o\">:</span> <span class=\"n\">M.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'_adm</span> <span class=\"o\">:</span> <span class=\"n\">M'.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k_new</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k_new</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k_new</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"n\">hm'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hgsur</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">m₁'</span> <span class=\"o\">:=</span> <span class=\"n\">M'.d</span> <span class=\"n\">m'</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"bp\">∥</span><span class=\"n\">n₁</span><span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223518515,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611240916
    },
    {
        "content": "<p>There was some talk of live streaming? ;)</p>",
        "id": 223519278,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611241205
    },
    {
        "content": "<p>Is there a good reason to introduce <code>k_new</code> separately?</p>",
        "id": 223519649,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611241352
    },
    {
        "content": "<p>I am redoing the proof on pen and paper right now, but very carefully :)</p>",
        "id": 223519705,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611241379
    },
    {
        "content": "<p>Perhaps you should push the corrected statement of the theorem?</p>",
        "id": 223519825,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611241433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223519649\">said</a>:</p>\n<blockquote>\n<p>Is there a good reason to introduce <code>k_new</code> separately?</p>\n</blockquote>\n<p>Maybe not. But it helps with the <code>[fact]</code>.</p>",
        "id": 223519944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611241482
    },
    {
        "content": "<p>I guess we should just teach lean that powers and sums of reals bigger than 1 are also bigger than 1.</p>",
        "id": 223520027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611241523
    },
    {
        "content": "<p>But I was in a hurry when I wrote the first version of that statement.</p>",
        "id": 223520053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611241538
    },
    {
        "content": "<p>Sure, I guess we need </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 223520108,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611241559
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 223520392,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611241667
    },
    {
        "content": "<p>But more generally, we could provide two instances: one for <code>k^n</code> and one for <code>k + k'</code>.</p>",
        "id": 223520772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611241816
    },
    {
        "content": "<p>Okay, here's a quick sketch for that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">one_le_add</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">ha</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">one_le_pow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_refl</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_le_mul_right'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">hn</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 223521402,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242056
    },
    {
        "content": "<p>Is <code>one_le_pow</code> not yet in mathlib? <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> Anyway, please add these to <code>facts.lean</code></p>",
        "id": 223521699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611242159
    },
    {
        "content": "<p>will do.</p>",
        "id": 223521886,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223521699\">said</a>:</p>\n<blockquote>\n<p>Is <code>one_le_pow</code> not yet in mathlib? <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> Anyway, please add these to <code>facts.lean</code></p>\n</blockquote>\n<p>I didn't check.... I probably should :)</p>",
        "id": 223522050,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242277
    },
    {
        "content": "<p>Ah okay, I can use this: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/one_le_pow_iff\">docs#one_le_pow_iff</a></p>",
        "id": 223522173,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242312
    },
    {
        "content": "<p>Oh, but that has an annoying assumption that <code>n</code>is nonzero... (which is used for the implication that we don't need.)</p>",
        "id": 223522485,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242413
    },
    {
        "content": "<p>If you are also modifying the statement I don't if using <code>Inf</code> as I did is the more convenient way of stating that property (I've never used <code>Inf</code>)</p>",
        "id": 223522613,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611242464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I was going to avoid modifying the file, since I didn't want to cause a merging nightmare for you.</p>",
        "id": 223522730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242511
    },
    {
        "content": "<p>I am working on a copy :)</p>",
        "id": 223522778,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611242523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> My copy of the repo doesn't like  <code>(f.apply c i).range</code>.</p>",
        "id": 223523541,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242795
    },
    {
        "content": "<p>I've added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The image of a bounded group homomorphism. Naturally endowed with a `normed_group` instance. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">V₂</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_add_monoid_hom.range</span>\n</code></pre></div>\n<p>In <code>src/for_mathlib/normed_group_hom.lean</code></p>",
        "id": 223523671,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611242847
    },
    {
        "content": "<p>One should probably add the other properties, as for the kernel</p>",
        "id": 223523716,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611242865
    },
    {
        "content": "<p>Sure.</p>",
        "id": 223523731,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242871
    },
    {
        "content": "<p>Well, let me push my changes to <code>facts.lean</code>. After that, I suggest changing the statement of the normed snake lemma to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The normed snake lemma. See Proposition 9.10 from Analytic.pdf -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">normed_snake</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group_hom.is_strict</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">M.res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">f.apply</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgsur</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"o\">})</span>\n  <span class=\"c1\">-- jmc: Is this ↑↑ the correct way of saying \"`N` has the quotient norm\"?</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM_adm</span> <span class=\"o\">:</span> <span class=\"n\">M.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'_adm</span> <span class=\"o\">:</span> <span class=\"n\">M'.admissible</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">--(k_new : ℝ≥0) [fact (1 ≤ k_new)] (hk : k_new = k^3 + k) :</span>\n  <span class=\"n\">N.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 223523912,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242929
    },
    {
        "content": "<p>pushed.</p>",
        "id": 223523959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611242955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> can you push what you have? If you don't want to push to <code>master</code>, feel free to create <code>snake</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>  <span aria-label=\"snake\" class=\"emoji emoji-1f40d\" role=\"img\" title=\"snake\">:snake:</span></p>",
        "id": 223523998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611242977
    },
    {
        "content": "<p>Let me figure out how to do it (no help needed, sooner or later I have to learn how to do such things)</p>",
        "id": 223524632,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611243206
    },
    {
        "content": "<p>I guess I need an invitation, or something like that (I can also use my repository if you prefer)</p>",
        "id": 223525289,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611243457
    },
    {
        "content": "<p>ooh, sorry... I'll send you an invite</p>",
        "id": 223525798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611243662
    },
    {
        "content": "<p>I am riccardobrasca on GitHub</p>",
        "id": 223525825,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611243672
    },
    {
        "content": "<p>invitation sent</p>",
        "id": 223525927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611243721
    },
    {
        "content": "<p>Pushed to branch <code>snake</code></p>",
        "id": 223526346,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611243870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> FWIW, regarding using <code>Inf</code>, my limited experience with it is that the api for <code>Inf</code> is very pleasant to use.</p>",
        "id": 223529478,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611245041
    },
    {
        "content": "<p>Good to know!</p>",
        "id": 223529696,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611245128
    },
    {
        "content": "<p>I finished checking the proof with pen and paper and I am confident that there will be no surprises, it's a lot of clever diagram chasing, but it is completely explicit</p>",
        "id": 223529874,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611245196
    },
    {
        "content": "<p>At the end we need that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi><mo>+</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">a \\leq b + \\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\varepsilon &lt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a \\leq b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>. I don't know if this is in mathlib, but it is unrelated to the proof</p>",
        "id": 223529973,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611245247
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_forall_le_of_dense\">docs#le_of_forall_le_of_dense</a> ?</p>",
        "id": 223531179,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611245739
    },
    {
        "content": "<p>or even closer, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_forall_pos_le_add\">docs#le_of_forall_pos_le_add</a></p>",
        "id": 223531479,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611245864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> perfect, thank's!</p>",
        "id": 223531562,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611245888
    },
    {
        "content": "<p>I have to do other things now, but I will resume working on this in a few hours</p>",
        "id": 223531619,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611245918
    },
    {
        "content": "<p>If I understand the discussion above correctly, I think this is at least a start toward the proof (building on <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> 's code):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>LONG</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The normed snake lemma. See Proposition 9.10 from Analytic.pdf -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">normed_snake</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group_hom.is_strict</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">M.res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">f.apply</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgsur</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM_adm</span> <span class=\"o\">:</span> <span class=\"n\">M.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'_adm</span> <span class=\"o\">:</span> <span class=\"n\">M'.admissible</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">k_new</span> <span class=\"o\">:=</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">hknew</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∥</span> <span class=\"n\">N.res</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">N.d</span> <span class=\"n\">y</span> <span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">real.le_Inf</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"n\">hε</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n          <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n          <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n          <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"n\">hε</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n          <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">real.le_Inf</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">r</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"n\">hε</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hy</span> <span class=\"n\">_</span> <span class=\"n\">hε</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"n\">hε</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"n\">hm'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hgsur</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">m₁'</span> <span class=\"o\">:=</span> <span class=\"n\">M'.d</span> <span class=\"n\">m'</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"bp\">∥</span><span class=\"n\">n₁</span><span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 223535873,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611247428
    },
    {
        "content": "<p>This has a lot of duplicate code that can be moved outside the proof...</p>",
        "id": 223535981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611247463
    },
    {
        "content": "<p>And the first sorry seems like it it should use something from mathlib (which I could'nt find). Actually, the whole proof after the \"suffices\" block should follow easily from some stuff that should be in mathlib.</p>",
        "id": 223536013,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611247478
    },
    {
        "content": "<p>It's possible the order of quantifiers is wrong in the <code>suffices</code> statement.</p>",
        "id": 223537166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611248000
    },
    {
        "content": "<p>It seems good to me</p>",
        "id": 223537291,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611248055
    },
    {
        "content": "<p>Okay great :)</p>",
        "id": 223537318,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611248070
    },
    {
        "content": "<p>I mean it was not clear to me how the proof would work with the quantifiers the other way around...</p>",
        "id": 223537360,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611248091
    },
    {
        "content": "<p>The proof of the suffices statement should be an immediate consequence of <code>le_of_forall_pos_le_add</code>, but Lean is not happy about it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">le_of_forall_pos_le_add'</span>\n</code></pre></div>",
        "id": 223540509,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611249219
    },
    {
        "content": "<p><code>le_of_forall_pos_le_add'</code> is in <code>algebra.ordered_group</code> in mathlib, but not in the file <code>algebra.ordered_group</code> of the project</p>",
        "id": 223540608,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611249248
    },
    {
        "content": "<p>If I modify that file to include <code>le_of_forall_pos_le_add'</code> then I get  <code>excessive memory consumption detected at 'replace'</code> everywhere  <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 223541624,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611249676
    },
    {
        "content": "<p>Yeah I ran into the same issue with le_of_forall_pos_le_add not found. Maybe we need to bump mathlib?</p>",
        "id": 223541835,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611249781
    },
    {
        "content": "<p>Trying to update mathlib now...</p>",
        "id": 223542024,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611249851
    },
    {
        "content": "<p>I see that you put mathlib in  <code>_target/...</code> that makes clear to me you did something I don't understand <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 223542106,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611249892
    },
    {
        "content": "<p>Okay, that worked. I'll finish off that first sorry</p>",
        "id": 223542143,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611249908
    },
    {
        "content": "<p>How can I update mathlib?</p>",
        "id": 223542968,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611250301
    },
    {
        "content": "<p>I used <code>leanproject upgrade-mathlib</code></p>",
        "id": 223543499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611250527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> This is a mess....</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>LONG</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The normed snake lemma. See Proposition 9.10 from Analytic.pdf -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">normed_snake</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group_hom.is_strict</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">M.res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">f.apply</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgsur</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">g.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM_adm</span> <span class=\"o\">:</span> <span class=\"n\">M.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'_adm</span> <span class=\"o\">:</span> <span class=\"n\">M'.admissible</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">k_new</span> <span class=\"o\">:=</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">hknew</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">N.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∥</span> <span class=\"n\">N.res</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">N.d</span> <span class=\"n\">y</span> <span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">real.le_Inf</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">z</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"n\">hε</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n          <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n          <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n          <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"n\">hε</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n          <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">norm_zero</span><span class=\"o\">,</span> <span class=\"n\">exists_and_distrib_right</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n          <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n            <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">hr</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n          <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span> <span class=\"o\">},</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_of_forall_pos_le_add</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">real.Inf_le</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n          <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"n\">hε</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n          <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"n\">apply</span> <span class=\"n\">div_pos</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n          <span class=\"n\">rwa</span> <span class=\"n\">norm_pos_iff</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">],</span>\n          <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">real.le_Inf</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">r</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"n\">hε</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hy</span> <span class=\"n\">_</span> <span class=\"n\">hε</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n      <span class=\"n\">rintros</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span><span class=\"n\">hε</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_add_iff_nonneg_right</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">n₁</span> <span class=\"o\">:=</span> <span class=\"n\">N.d</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"n\">hm'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hgsur</span> <span class=\"o\">(</span><span class=\"n\">k_new</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">m₁'</span> <span class=\"o\">:=</span> <span class=\"n\">M'.d</span> <span class=\"n\">m'</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"bp\">∥</span><span class=\"n\">n₁</span><span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 223544244,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611250885
    },
    {
        "content": "<p>I pushed to the branch <code>AT-snake</code> in case you want access to the code.</p>",
        "id": 223544413,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611250959
    },
    {
        "content": "<p>Mmm... I think that the epsilon is in the part with the norm, not in the parti with <code>k</code></p>",
        "id": 223545781,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611251592
    },
    {
        "content": "<p><code>∥ N.res n - N.d y ∥ ≤ k_new * (∥ N.d n ∥+ ε)</code></p>",
        "id": 223545836,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611251620
    },
    {
        "content": "<p>Ah right.</p>",
        "id": 223546030,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611251713
    },
    {
        "content": "<p>Let me fix that. one sec.</p>",
        "id": 223546273,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611251830
    },
    {
        "content": "<p>Okay, I fixed the statement and cleaned it up significantlyy.</p>",
        "id": 223547746,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611252396
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/a1e2f37c01b35849b90072e09a29443ed0ae0dea/src/normed_snake.lean#L50\">https://github.com/leanprover-community/lean-liquid/blob/a1e2f37c01b35849b90072e09a29443ed0ae0dea/src/normed_snake.lean#L50</a></p>",
        "id": 223547813,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611252422
    },
    {
        "content": "<p>Given <code>ε</code>, assuming <code>∥ N.res n - N.d y ∥ ≤ k_new * (∥ N.d n ∥+ ε1)</code> for all <code>ε1</code>, why doesn't apply it for <code>ε1= ε/ k_new</code>?</p>",
        "id": 223548118,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611252562
    },
    {
        "content": "<p>I mean, there are of course problems with <code>0≤...</code> but mathematically that's what I would do</p>",
        "id": 223548207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611252596
    },
    {
        "content": "<p>OK, that's what you did, sorry</p>",
        "id": 223548434,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611252714
    },
    {
        "content": "<p>Wait a minute... maybe you were right and the order of the quantifier should be reversed (and I agree that then the proof is not clear)</p>",
        "id": 223552001,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611254334
    },
    {
        "content": "<p>I mean, all the elements constructed in the third line of the proof depend on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> so also all the others depend on it</p>",
        "id": 223553444,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611254976
    },
    {
        "content": "<p>Yeah exactly. This is what I was worried about.</p>",
        "id": 223554704,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611255518
    },
    {
        "content": "<p>I <em>think</em> the order of the quantifiers can probably be reversed if one assumes completeness, because then for each epsilon you would get an element and eventually have to prove that those elements converge (I don't know if the details would actually work out).</p>",
        "id": 223555104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611255705
    },
    {
        "content": "<p>I was thinking to it, but I am really sure this doesn't work for making the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>inf</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\inf</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\">in<span style=\"margin-right:0.07778em;\">f</span></span></span></span></span> in the definition of the quotient norm a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>min</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\min</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"mop\">min</span></span></span></span>. Of course it can still work for our elements for some reasons but still, something has to be done</p>",
        "id": 223555379,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611255830
    },
    {
        "content": "<p>Ah!</p>",
        "id": 223582710,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611269659
    },
    {
        "content": "<p>Sorry, indeed you caught something there. Let me think about this.</p>",
        "id": 223582758,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611269694
    },
    {
        "content": "<p>One option might be to change the meaning of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness, to also include an inf</p>",
        "id": 223582790,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611269711
    },
    {
        "content": "<p>Hmm. It should be possible to fix this by a small tweaking of some definition, but let me try to figure out a good global fix to this. I'll keep you posted.</p>",
        "id": 223583163,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611269973
    },
    {
        "content": "<p>Probably this is just my mind making up a solution as I want to go to bed, but I think the following fix ought to work. Leave all the statements and definitions essentially unchanged, but replace all normed abelian groups with complete normed abelian groups. In particular, in 9.10, the quotient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>=</mo><msup><mi>M</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">/</mi><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">N=M'/M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is implicitly completed. Then I think 9.10 stays true as stated, except that one may have to replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>3</mn></msup><mo>+</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k^3+k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> by something slightly different.</p>",
        "id": 223587418,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611273058
    },
    {
        "content": "<p>I'll try to update the file tomorrow</p>",
        "id": 223587422,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611273065
    },
    {
        "content": "<p>I haven't followed the discussion closely, but let me still mention this: even in the setting of real Banach spaces and closed subspaces, the quotient norm is not always realized. I.e., there exists a closed hyperplane of <code>c_0</code>, say (the space of sequences tending to <code>0</code> with its sup norm) and a closed hyperplane <code>H</code> such that a point in <code>c_0 / H</code> of norm <code>1</code> has no preimage of norm <code>1</code> in <code>c_0</code>. Take <code>H</code> the kernel of the linear form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>↦</mo><mo>∑</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">(x_n) \\mapsto \\sum 2^{-n} x_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.021341em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, for instance.</p>",
        "id": 223612568,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611302541
    },
    {
        "content": "<p>Equivalently, points in <code>c_0</code> but not in <code>H</code> don't have any distance-minimizing projection on <code>H</code> (because the would-be projection would be in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">ℓ</mi><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\ell^\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span>, but not in <code>c_0</code>).</p>",
        "id": 223612690,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611302660
    },
    {
        "content": "<p>OK, the fix still seems to work this morning. See the updated version of <a href=\"http://www.math.uni-bonn.de/people/scholze/Analytic.pdf\">www.math.uni-bonn.de/people/scholze/Analytic.pdf</a></p>",
        "id": 223620900,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611309220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> great! so you only changed 9.10, right?</p>",
        "id": 223621065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611309311
    },
    {
        "content": "<p>Because you considered changing the def of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\le k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness, but it looks like that wasn't necessary?</p>",
        "id": 223621200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611309372
    },
    {
        "content": "<p>Yes, I only changed 9.10 (and added the word \"complete\" in 9.6)</p>",
        "id": 223621360,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611309512
    },
    {
        "content": "<p>(If I had to change the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness, to include some infimum basically, the implication 9.4 --&gt; 9.1 wouldn't have been obvious anymore. I'm glad it worked this way now! Let's see what other problems will come up...)</p>",
        "id": 223622107,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611309938
    },
    {
        "content": "<p>Very nice! I see that the statement is now a little less elementary: we should probably think about how to say in Lean that we take the quotient by the closure of the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>.</p>",
        "id": 223630862,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611316028
    },
    {
        "content": "<p>So it sounds like we should introduce the category <code>CompleteNormedGroup</code>?</p>",
        "id": 223642543,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611323142
    },
    {
        "content": "<p>Can't we just add <code>[complete_space M]</code> etc...?</p>",
        "id": 223642766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611323270
    },
    {
        "content": "<p>In <code>src/locally_constant/Vhat.lean</code> there is already a lot of stuff</p>",
        "id": 223642830,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611323289
    },
    {
        "content": "<p>My guess is that it will be easier if we try to stay in one category.</p>",
        "id": 223642885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611323322
    },
    {
        "content": "<p>Maybe we should add <code>complete_system_of_complexes</code> or something like that (we can also assume completeness for all objects)</p>",
        "id": 223643041,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611323407
    },
    {
        "content": "<p>Sure, we could extend <code>system_of_complexes</code> to a new structure that includes <code>[\\forall X, complete_space X]</code> as a field.</p>",
        "id": 223644496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611324164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223622107\">said</a>:</p>\n<blockquote>\n<p>(If I had to change the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness, to include some infimum basically, the implication 9.4 --&gt; 9.1 wouldn't have been obvious anymore. I'm glad it worked this way now! Let's see what other problems will come up...)</p>\n</blockquote>\n<p>Thinking more about this, that fix would work as well: i.e., in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness, weaken the condition to say that for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\epsilon&gt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, one can find blah such that some inequality holds, where now the right-hand side contains a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">+\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord mathnormal\">ϵ</span></span></span></span>. With this modification, I think all of 9.4 (and 9.6, 9.10 etc) should stay true as originally stated (so without completeness), but all of the proofs would now (necessarily) include some extra quantification over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span>'s.</p>\n<p>On the other hand, one can prove that this weakened of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness holds for a system of complexes of normed abelian groups if and only if it holds for its completion, and that if this weakened notion holds for a system of complexes of <em>complete</em> normed abelian groups, then the strong version holds, up to replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k^2+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> or so. In this sense, the statements with the weak notion of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness, stated without completeness hypothesis, and the statements with strong notion of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness, stated with completeness hypothesis, are equivalent (up to slightly changing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>). It is not clear to me which one is easier to formalize; maybe there's not much difference?</p>",
        "id": 223741211,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611395106
    },
    {
        "content": "<p>In my opinion proposition 9.10 with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\"> + \\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord mathnormal\">ε</span></span></span></span>-definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness should be easy to formalize, I try doing it today. I don't know for the implication for complete spaces, but, at least in mathlib, we usually prefer cutting proofs in small pieces and stating explicitly all lemmas we use in the proofs, so my preferences is for this new approach.</p>",
        "id": 223748980,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611407553
    },
    {
        "content": "<p>I would be inclined to use complete normed groups. If we change the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\le k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exactness this then changes the statement of the \"main\" theorem in the repo, and some additional work would be required to prove the equivalence with the original definition for complete normed groups. On the other hand, it's possible we will have to do that additional work anyway... </p>\n<p>For what it's worth, we at least have the universal property of completion already in the repo, so my guess is changing the snake lemma to assume completeness would be (slightly) less work.</p>",
        "id": 223752995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611413257
    },
    {
        "content": "<p>I mean something like defining defining <code>is_weak_bdd_exact_for_bdd_degree_above_idx</code> using the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>, proving proposition 9.10 with this one (I am sure it works without troubles) and proving that for complete things <code>is_weak_bdd_exact_for_bdd_degree_above_idx</code> implies <code>is_bdd_exact_for_bdd_degree_above_idx</code>, with a slightly different bound.</p>",
        "id": 223753215,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611413553
    },
    {
        "content": "<p>But of course no problem if you think it is better have completed normed groups everywhere</p>",
        "id": 223753231,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611413570
    },
    {
        "content": "<p>If someone is interested I have uploaded here <a href=\"https://github.com/leanprover-community/lean-liquid/blob/snake/src/normed_snake.lean\">https://github.com/leanprover-community/lean-liquid/blob/snake/src/normed_snake.lean</a> some progress to prove the weakened statement that uses <code>is_weak_bdd_exact_for_bdd_degree_above_idx</code>.</p>",
        "id": 223768463,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611429849
    },
    {
        "content": "<p>It's rather messy and I put some stupid lemmas before Proposition 9.10 that should be somewhere else, but it really seems that this weakened version poses no trouble</p>",
        "id": 223768616,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611429955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> nice work, I'm looking at it now</p>",
        "id": 223770206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611430804
    },
    {
        "content": "<p>at some point you suggested introducing <code>def is_quotient</code>, and I think this is a good idea.</p>",
        "id": 223770260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611430829
    },
    {
        "content": "<p>Some remark if you really want to read it:<br>\nI see that Peter has already updated the file on his website, I am following the following version<br>\n<a href=\"/user_uploads/3121/XXuKniSsXD4qSQu8g7RkJEZt/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XXuKniSsXD4qSQu8g7RkJEZt/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XXuKniSsXD4qSQu8g7RkJEZt/image.png\"></a></div>",
        "id": 223770531,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611431001
    },
    {
        "content": "<p>The proof stops at the formula before \"where similarly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>m</mi><mrow><msup><mi>k</mi><mn>3</mn></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>+</mo><mn>2</mn></mrow></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">m_{k^3c}''^{i+2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.202415em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864795em;\"><span style=\"top:-2.36238em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1031310000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span></span></span></span> is the differential of...\"</p>",
        "id": 223770627,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611431048
    },
    {
        "content": "<p>Yes, I think introducing <code>is_quotient</code> will be useful in any case. I think we will  the lemma <code>quotient</code>, whose proof can for surely be golfed a lot.</p>",
        "id": 223770766,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611431141
    },
    {
        "content": "<p>so now <code>snake</code> assumes the strong exactness condition, and the result gives the weak version. Should we make the assumptions weak as well?</p>",
        "id": 223771076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611431315
    },
    {
        "content": "<p>Ah, you're right, this is probably harmless. In any case if we really use <code>weak...</code> at some point we need to prove that this implies the non weak version for complete groups</p>",
        "id": 223771587,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611431617
    },
    {
        "content": "<p>Also I have the impression that <code>Hf</code> should hold with <code>(hi : i ≤ m + 2)</code> since all our indexes are shifted, but maybe I am lost with all the notation</p>",
        "id": 223771699,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611431677
    },
    {
        "content": "<p>I pushed to your branch: the easy lemma that strong exactness implies weak exactness</p>",
        "id": 223771775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611431732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223771699\">said</a>:</p>\n<blockquote>\n<p>Also I have the impression that <code>Hf</code> should hold with <code>(hi : i ≤ m + 2)</code> since all our indexes are shifted, but maybe I am lost with all the notation</p>\n</blockquote>\n<p>Ooh, that's a good point. We shouldn't forget about that</p>",
        "id": 223771870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611431779
    },
    {
        "content": "<p>Now I think it's OK <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 223772004,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611431878
    },
    {
        "content": "<p>It's probably better to have <code>let c_new := k * (k * (k * c)),</code> to apply <code>Hf</code> without having to use <code>system_of_complexes.congr</code> a lot</p>",
        "id": 223773269,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611433160
    },
    {
        "content": "<p>I've added the inequality before \"On the other hand...\". It's becoming a little slow... maybe I will try to cut the proof in pieces</p>",
        "id": 223776187,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611436135
    },
    {
        "content": "<p>Sometimes slowness can be the fault of just one tactic. Can you push and show me where it's slow? I can try and see if I can see what is making it slow. Trying to write code when you have to wait 5 seconds after every line is not fun</p>",
        "id": 223779480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611439314
    },
    {
        "content": "<p>It's here <a href=\"https://github.com/leanprover-community/lean-liquid/blob/snake/src/normed_snake.lean\">https://github.com/leanprover-community/lean-liquid/blob/snake/src/normed_snake.lean</a><br>\nNote that I use some other definition in the branch <code>snake</code>.<br>\nIn any case the code is 1) not that slow, it is still usable 2) very messy and probably difficult to follow</p>",
        "id": 223781044,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611440155
    },
    {
        "content": "<p>I am stopping working on it for today. If someone is interested feel free to continue, the end is not that far, but the rest of the work is not that interesting, it's a matter of not getting lost with all the variables and assumptions.</p>",
        "id": 223782242,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611441935
    },
    {
        "content": "<p>I'm filling in some sorries</p>",
        "id": 223783295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611443447
    },
    {
        "content": "<p>It's very possible that there is a coherent and clever way of killing a lot of the stupid inequalities I need, I din't really thought about it</p>",
        "id": 223783382,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611443587
    },
    {
        "content": "<p>I'm just methodically killing them in dull ways</p>",
        "id": 223783388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611443611
    },
    {
        "content": "<p>You can use <code>haveI</code> instead of <code>letI</code> for Props, and it's sometimes easier to use <code>set a := blah with ha</code> than <code>let a := blah</code> because then you can <code>rw ha</code> to replace <code>a</code> by <code>blah</code> rather than just relying on the fact that they are defeq.</p>",
        "id": 223783550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611443860
    },
    {
        "content": "<p>i killed a few but now I have to stop too</p>",
        "id": 223783693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611444063
    },
    {
        "content": "<p>I believe I made some progress (though I haven't followed the maths I thought it would be fun to have a go) I changed one sorry for the fact that N is admissible (which is mentioned in the theorem statement), if this looks good and you don't mind giving me push access I'll push it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Darcs Patch\"><pre><span></span><code>diff --git a/src/normed_snake.lean b/src/normed_snake.lean\nindex cbfac16..401e9e5 100644\n<span class=\"gd\">--- a/src/normed_snake.lean</span>\n<span class=\"gi\">+++ b/src/normed_snake.lean</span>\n@@ -91,7 +91,7 @@ begin\n     rw add_mul,\n     convert (le_add_iff_nonneg_right (k^3 * c)).2 (zero_le') using 1,\n     ring },\n<span class=\"gd\">-  let n := @system_of_complexes.res _ _ c_new _ _ norig,</span>\n<span class=\"gi\">+  set n := @system_of_complexes.res _ _ c_new _ _ norig with hn,</span>\n   set n₁ := N.d n with hn₁,\n   let C := ∥n₁∥,\n   haveI : fact (c ≤ c_new) := by\n@@ -100,7 +100,21 @@ begin\n     refine le_trans _ (le_mul_of_one_le_left' hk),\n     refine le_trans (le_refl _) (le_mul_of_one_le_left' hk) },\n   suffices hnorig : ∃ (y : (N.X c i)), ∥(N.res) n - (N.d) y∥ ≤ (k ^ 3 + k) * C + ε,\n<span class=\"gd\">-  { sorry },</span>\n<span class=\"gi\">+  { refine Exists.imp _ hnorig,</span>\n<span class=\"gi\">+    rintro a ha,</span>\n<span class=\"gi\">+    simp only [system_of_complexes.res_res] at ha,</span>\n<span class=\"gi\">+    calc _ ≤ _ : ha</span>\n<span class=\"gi\">+       ... ≤ _ : _,</span>\n<span class=\"gi\">+    simp only [C, hn₁, hn, nnreal.coe_add, add_le_add_iff_right, nnreal.coe_pow],</span>\n<span class=\"gi\">+    apply mul_le_mul_of_nonneg_left,</span>\n<span class=\"gi\">+    { rw system_of_complexes.d_res,</span>\n<span class=\"gi\">+      have hN_adm : N.admissible :=</span>\n<span class=\"gi\">+      begin</span>\n<span class=\"gi\">+        sorry,</span>\n<span class=\"gi\">+      end,</span>\n<span class=\"gi\">+      convert hN_adm.res_norm_noninc _ _ _ _ (N.d norig),</span>\n<span class=\"gi\">+      simp, },</span>\n<span class=\"gi\">+    { exact_mod_cast (nnreal.coe_nonneg (k^3 + k)), }, },</span>\n   obtain ⟨m', hm'⟩ := hgsur _ _ n,\n   let m₁' := M'.d m',\n   have hm₁' : g.apply _ _ m₁' = n₁,\n</code></pre></div>",
        "id": 223793906,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611460395
    },
    {
        "content": "<p>Thank you! Writing a small API to deal with quotients is in my TODO list, this result should definitely be there</p>",
        "id": 223806399,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611482869
    },
    {
        "content": "<p>Dear All,</p>\n<p>having finally pushed out of my queue some chores that I had left, I am very interested in joining this project!</p>\n<p>I get the impression that you have been working on a branch called snake: is it ok if I also take a look?</p>\n<p>Thanks!</p>",
        "id": 223874313,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611568101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> certainly!</p>",
        "id": 223874801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611568390
    },
    {
        "content": "<p>the <code>snake</code> branch is devoted to proving the \"normed snake lemma\"</p>",
        "id": 223874821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611568407
    },
    {
        "content": "<p>but feel free to also look at the other sorrys</p>",
        "id": 223874835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611568418
    },
    {
        "content": "<p>I'll send you an invite for the repo</p>",
        "id": 223874842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611568425
    },
    {
        "content": "<p>Ok, I will look through the various files, not just in the snake branch!  Thanks!</p>",
        "id": 223874867,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611568442
    },
    {
        "content": "<p>Hi! I am working on the proof of the snake lemma right now (I don't know if we are going to keep this version at end, but this is going to be useful anyway I think).  There are something like 15 variables and assumptions so it is probably not reasonable for someone else to read it (and moreover it is not that fun...). If you are looking for something easy to do, in the file <code>normed_snake.lean</code> of the <code>sneak</code> branch there are two lemmas, <code>commutes</code> and <code>commutes_res</code> that are easy and that should be moved somewhere else (and with better names...). <code>commutes_res</code> moreover doesn't have a proof <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 223877078,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611569724
    },
    {
        "content": "<p>sounds like <code>d_apply</code> and <code>res_apply</code> (-; and the can probably go after the defn of <code>apply</code>.</p>",
        "id": 223877428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611569902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> If you do it, can you please not touch <code>normed_snake.lean</code>? Just to make my <code>git</code> happy... I will erase them from there once they are somewhere else</p>",
        "id": 223878532,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611570626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I filled in a simple sorry in your branch. Are you happy for me to push to your branch on github?</p>",
        "id": 223908115,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611586748
    },
    {
        "content": "<p>Go ahead! In five minutes I will push a semicomplete proof</p>",
        "id": 223908406,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611586879
    },
    {
        "content": "<p>(after merging what you have done)</p>",
        "id": 223908439,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611586891
    },
    {
        "content": "<p>semicomplete = the sorrys are unrelated to the snake lemma</p>",
        "id": 223908492,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611586912
    },
    {
        "content": "<p>Okay, pushed.</p>",
        "id": 223908594,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611586937
    },
    {
        "content": "<p>I'll try to fill in the <code>commutes_res</code>lemma too whhile I'm at it.</p>",
        "id": 223908784,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611587017
    },
    {
        "content": "<p>I just pushed the proof</p>",
        "id": 223909562,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611587326
    },
    {
        "content": "<p>Oh :)</p>",
        "id": 223909587,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611587340
    },
    {
        "content": "<p>There are five <code>sorry</code> in the file:<br>\n<code>commutes_res</code>: easy (and should be somewhere else)<br>\n<code>N.admissible</code>: the quotient of admissible stuff is admissible. Easy I think, it should be in the API of quotients<br>\n<code>hzerok</code>,  <code>hε₁</code>  and <code>kccnew</code> are very easy inequalities about reals numbers</p>",
        "id": 223910011,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611587516
    },
    {
        "content": "<p>Of course the proof can probably be golfed <em>a lot</em></p>",
        "id": 223910096,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611587547
    },
    {
        "content": "<p>But at least this is a reality check that we able to handle similar things</p>",
        "id": 223910146,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611587569
    },
    {
        "content": "<p>And in any case I just called the lemma <code>weak_normed_snake</code>, since it uses <code>is_weak_bdd_exact_for_bdd_degree_above_idx</code></p>",
        "id": 223910398,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611587692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223909562\">said</a>:</p>\n<blockquote>\n<p>I just pushed the proof</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  I meant the almost complete proof of <code>weak_normed_snake</code>. <code>commute_res</code> is still a sorry.</p>",
        "id": 223910592,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611587766
    },
    {
        "content": "<p>Gotcha. I'm filling in the sorrys in the main proof now.</p>",
        "id": 223911057,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611588000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> this is really interesting. Riccardo started things off (obviously building on your work), and then people have just been dropping in and filling in <code>sorry</code>s (me, Alex, Adam at least). What else is ready for this kind of game?</p>",
        "id": 223911524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611588178
    },
    {
        "content": "<p>9.7</p>",
        "id": 223911620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611588219
    },
    {
        "content": "<p>I'm working on the statement of 9.8</p>",
        "id": 223911637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611588227
    },
    {
        "content": "<p>And people can start looking at the statement of 9.6</p>",
        "id": 223911659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611588235
    },
    {
        "content": "<p>now that <code>snake</code> is almost ready</p>",
        "id": 223911706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611588243
    },
    {
        "content": "<p>we'll need double complexes for that</p>",
        "id": 223911725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611588250
    },
    {
        "content": "<p>so copy-paste the file on system_of_complexes, and make suitable modifications</p>",
        "id": 223911762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611588272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> It is probably more convenient to replace <code>hzerok</code> by <code>(0 : ℝ) &lt; ↑k ^ 3 + 2 * ↑k + 1</code>, so <code>hε₁</code> should be immediate, and using <code>ne_of_lt hzerok</code> (or whatever is needed) at the end</p>",
        "id": 223912944,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611588737
    },
    {
        "content": "<p>Okay, I killed the easy sorrys in the proof.</p>",
        "id": 223913378,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611588900
    },
    {
        "content": "<p>The admissibility is the only sorry left in the main proof. I also didn't do commute_res.</p>",
        "id": 223913707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611589023
    },
    {
        "content": "<p>Unfortunately, that's all the time I have for now.</p>",
        "id": 223913768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611589051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223911524\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> this is really interesting. Riccardo started things off (obviously building on your work), and then people have just been dropping in and filling in <code>sorry</code>s (me, Alex, Adam at least). What else is ready for this kind of game?</p>\n</blockquote>\n<p>When will GPT2 be able to play this kind of game? :)</p>",
        "id": 223914638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611589378
    },
    {
        "content": "<p>I also have to stop :( <br>\nFor the quotient, do you think that's better having an instance <code>[is_quotient]</code> or a  normal assumption?</p>",
        "id": 223916101,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611589986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> do you think it would already be a good time to merge everything into <code>master</code>? or would you rather finish all the <code>sorry</code>s first?</p>",
        "id": 223943590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611601187
    },
    {
        "content": "<p>I think we should at least move the lemmas about the composition of a morphism with <code>d</code> and <code>res</code>, with a reasonable name. They have nothing to do in that file</p>",
        "id": 223945862,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611602167
    },
    {
        "content": "<p>ok, sure</p>",
        "id": 223945884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611602182
    },
    {
        "content": "<p>BTW I have slightly reorganized the proof, now the easy inequalities are all at the beginning of the proof. If someone want to improve them they are there :)</p>",
        "id": 223945957,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611602228
    },
    {
        "content": "<p>I think it would be good to move things (roughly) into place, and merge into master. That would make it easier to keep the total overview.</p>",
        "id": 223946214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611602354
    },
    {
        "content": "<p>I can do it... hoping to not destroy everything changing/merging branch...</p>",
        "id": 223947673,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611602984
    },
    {
        "content": "<p>If you prefer I can modify <code>snake</code> and let you do the merge into <code>master</code></p>",
        "id": 223947752,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611603005
    },
    {
        "content": "<p>whatever you like best</p>",
        "id": 223947912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611603085
    },
    {
        "content": "<p>In principle <code>git</code> should allow us to fix anything we break</p>",
        "id": 223947938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611603101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223911762\">said</a>:</p>\n<blockquote>\n<p>so copy-paste the file on system_of_complexes, and make suitable modifications</p>\n</blockquote>\n<p>I had a go at this last night in fact, I've now pushed it to <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/system_of_double_complexes.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/system_of_double_complexes.lean</a> there was one key lemma I couldn't prove due to not being familiar enough with mathlibs category/homological machinery, <code>d_comp_res</code> for the vertical differential, due to the setup of double complexes as chain complexes of chain complexes there is a break in the symmetry which made one proof harder than the other for me. If someone wants to have a go at that, that would be great, I'm sure the proof is a 1-liner I just can't find the right way to fit the pieces together myself.</p>",
        "id": 223948841,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611603491
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 223949562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611603837
    },
    {
        "content": "<p>I tried to put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">M'</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⟶</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"bp\">⟶</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">category_theory.has_hom.hom.apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⟶</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f.app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">M'</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">d_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⟶</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.d</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M.d</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">M.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">f.app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">m</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">f.app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">M.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">coe_comp</span> <span class=\"o\">((</span><span class=\"n\">M.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">f.app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">homological_complex.comm_at</span> <span class=\"o\">(</span><span class=\"n\">f.app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">res_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⟶</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">system_of_complexes.res</span> <span class=\"n\">N</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">system_of_complexes.res</span> <span class=\"n\">M</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>inside <code>src/system_of_complexes.lean</code>, but Lean is not happy with <code>N.d</code> and <code>f.apply</code>, and I don't understand why... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 223950819,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611604394
    },
    {
        "content": "<p>Did you paste it into the system_of_complexes namespace or after?</p>",
        "id": 223951501,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611604658
    },
    {
        "content": "<p>I think the category def would have to be outside that namespace at least</p>",
        "id": 223951551,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611604677
    },
    {
        "content": "<p>Thank you, now it works</p>",
        "id": 223951986,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611604842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I just pushed to <code>snake</code> a reorganization of some definition</p>",
        "id": 223954044,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611605863
    },
    {
        "content": "<p>Now <code>d_apply</code> and <code>res_apply</code> are in <code>src/system_of_complexes.lean</code>, where there is also a <code>quotient</code>section with the two results I used (we have to write the definition explicitely)</p>",
        "id": 223954176,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611605930
    },
    {
        "content": "<p>I also moved <code>normed_group_hom.is_strict</code> and <code>is_strict.injective</code> to <code>src/for_mathlib/normed_group_hom.lean</code>, so in practice in <code>normed_snake.lean</code> there is just the snake lemma</p>",
        "id": 223954410,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611606059
    },
    {
        "content": "<p>lgtm</p>",
        "id": 223954592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611606171
    },
    {
        "content": "<p>let's merge it into <code>master</code></p>",
        "id": 223954603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611606182
    },
    {
        "content": "<p>any other fixes can be done afterwards</p>",
        "id": 223954624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611606190
    },
    {
        "content": "<p>merged, pushed</p>",
        "id": 223954651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611606213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> thanks for all the great work!</p>",
        "id": 223954885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611606347
    },
    {
        "content": "<p>It was my pleasure... and this is just the beginning! :)</p>",
        "id": 223955279,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611606561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/223948841\">said</a>:</p>\n<blockquote>\n<p>there was one key lemma I couldn't prove due to not being familiar enough with mathlibs category/homological machinery, <code>d_comp_res</code> for the vertical differential, due to the setup of double complexes as chain complexes of chain complexes there is a break in the symmetry which made one proof harder than the other for me. If someone wants to have a go at that, that would be great, I'm sure the proof is a 1-liner I just can't find the right way to fit the pieces together myself.</p>\n</blockquote>\n<p>done</p>",
        "id": 223958465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611608093
    },
    {
        "content": "<p>So, to summarise what's left with regards to the snake lemma:</p>\n<ul>\n<li>define <code>is_quotient</code>, and use it</li>\n<li>a sorry about admissibility</li>\n<li>prove that weak exactness is the same as strong exactness, in the complete case</li>\n<li>derive the strong snake lemma for complete systems from the weak version.</li>\n</ul>",
        "id": 223958979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611608314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> please correct <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> if I got something wrong or missed something</p>",
        "id": 223959022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611608334
    },
    {
        "content": "<p>except that you probably mean complete instead of compact I agree</p>",
        "id": 223959079,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611608364
    },
    {
        "content": "<p>The first two points are not difficult I think (the first one is just to write a definition as a <code>def</code>, and the second one seems immediate)</p>",
        "id": 223959249,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611608425
    },
    {
        "content": "<p>Ah, concerning completions we will need that it preserves all the assumptions in the weak snake lemma (for example admissibility, strictness...)</p>",
        "id": 223959612,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611608561
    },
    {
        "content": "<p><code>res_apply</code> is done</p>",
        "id": 223960594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611608994
    },
    {
        "content": "<p>Time to rest a bit for me. Tomorrow I have to prepare my teaching but if I have time and no one has already done it I will work on the definition and basic properties of quotients</p>",
        "id": 223965870,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611611573
    },
    {
        "content": "<p>I'm not sure we will even need a construction of the quotient... we'll have to see.</p>",
        "id": 223966154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611611712
    },
    {
        "content": "<p>I mean, write down the definition by hand, without any complicated property as stated in the snake lemma (to be able to put <code>is_quotient g</code> or similar) and prove that  the quotient of an admissible thing is admissible</p>",
        "id": 223966449,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611611847
    },
    {
        "content": "<p>I have created a new branch <code>riccardobrasca</code> where I just put the definition of quotient of systems of complexes and the proof that the quotient of an admissible system of complexes is admissible. I think it can be merged to master, but if someone wants to check it is better :)</p>",
        "id": 224031764,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611664337
    },
    {
        "content": "<p>Note that I had to upgrade mathlib to use <code>le_of_forall_pos_le_add</code></p>",
        "id": 224031792,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611664357
    },
    {
        "content": "<p>Indeed CI is not happy with <code>error: unknown identifier 'le_of_forall_pos_le_add'</code></p>",
        "id": 224032163,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611664564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> how did you upgrade mathlib?</p>",
        "id": 224032204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611664594
    },
    {
        "content": "<p>I don't see any changes to <code>leanpkg.toml</code>.</p>",
        "id": 224032218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611664605
    },
    {
        "content": "<p>The recommended way is <code>leanproject up</code>. This will change the <code>toml</code> for you.</p>",
        "id": 224032237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611664624
    },
    {
        "content": "<p><code>leanproject upgrade-mathlib</code></p>",
        "id": 224032251,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611664631
    },
    {
        "content": "<p>Does <code>git status</code> show you uncommitted changes?</p>",
        "id": 224032286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611664661
    },
    {
        "content": "<p>Yes, the <code>toml</code> file... I ignored it since I didn't know what it is</p>",
        "id": 224032361,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611664689
    },
    {
        "content": "<p>I am pushing it</p>",
        "id": 224032372,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611664696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224032361\">said</a>:</p>\n<blockquote>\n<p>Yes, the <code>toml</code> file... I ignored it since I didn't know what it is</p>\n</blockquote>\n<p>It keeps track of which version of lean and mathlib you want to use <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 224032424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611664727
    },
    {
        "content": "<p>downloading the cache... with avg speeds of 318 kb/s <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 224032616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611664838
    },
    {
        "content": "<p><code>('Connection broken: OSError(\"(104, \\'ECONNRESET\\')\")', OSError(\"(104, 'ECONNRESET')\"))</code></p>",
        "id": 224032649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611664863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> lgtm. You already put it in the <code>normed_group_hom</code> namespace, right?<br>\nSo we can use dot-notation and write <code>(hf : f.is_quotient)</code>.</p>",
        "id": 224033197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611665171
    },
    {
        "content": "<p>Feel free to merge</p>",
        "id": 224033202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611665178
    },
    {
        "content": "<p>There are two <code>is_quotient</code>, the first one is <code>normed_group_hom.is_quotient</code>and the second one is <code>system_of_complexes.is_quotient</code>, with the obvious relation between the two.</p>",
        "id": 224033431,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611665330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> When working on mathlib directly, other people look after the toml for you. But when working on a different project which uses mathlib as a dependency it's really important that the project keeps track of exactly which commit of mathlib we are expecting the code to use. As mathlib moves on and makes no attempt at backwards compatibility, the contributors to the liquid project have to keep changing the toml manually and making sure that code which once compiled doesn't get broken. It's more of a juggling act than working on mathlib directly.</p>\n<p>However we are lucky here that there are several people working on the liquid project who keep a careful eye on what is happening in mathlib and hopefully, if we keep \"bumping\" mathlib regularly (ie changing the toml so it points to today's mathlib) then any problems will be spotted quickly and fixed.</p>\n<p>Nowadays we even have \"continuous integration\"which means that if a new change to mathlib breaks our project then people get notified quickly. This is a great improvement from back in the perfectoid days, when we would update mathlib once a month and discover that tons of things were broken and sometimes none of us knew why. This was bad for both the project and for mathlib, because we were writing code which should have been PRed to mathlib but we didn't get around to it, and any PR would of course break our code anyway. </p>\n<p>It is for reasons like this that when someone comes along saying \"can I do cyclotomic polynomials\" we strongly encourage them to work on a mathlib branch directly, to avoid all these problems.</p>",
        "id": 224033453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611665344
    },
    {
        "content": "<blockquote>\n<p>downloading the cache... with avg speeds of 318 kb/s <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>When I was a post-doc we used to dream of such fast speeds, at least for our home internet.</p>",
        "id": 224033557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611665405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thank's for the explanation!</p>",
        "id": 224033590,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611665439
    },
    {
        "content": "<p>When I was a PhD student we used to get 2400</p>",
        "id": 224033596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611665443
    },
    {
        "content": "<p>Merged into master, the proof of the weak snake lemma is now sorry free. Fun fact: there is no need of assuming that <code>M</code> is admissible (<code>M'.admissible</code> suffices).</p>",
        "id": 224033983,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611665693
    },
    {
        "content": "<p>Great job!</p>",
        "id": 224034242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611665851
    },
    {
        "content": "<p>Great!</p>",
        "id": 224034792,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611666144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> I think you are interested in optimizing the constants, right? And this is one of the strengths of having a computer keep track of all the details. So that is certainly something I would like to support.</p>\n<p>In that regard, it's better to work with weak exactness as long as possible, right?</p>",
        "id": 224034977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611666250
    },
    {
        "content": "<p>Yes, that's right</p>",
        "id": 224035539,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611666548
    },
    {
        "content": "<p>In fact, in the implicit deduction of the real form of 9.4 (involving profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>) from the one you formalize (involving finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>), one also implicitly goes back to the weak form and deduces the strong form</p>",
        "id": 224035654,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611666600
    },
    {
        "content": "<p>So at this point one only really needs the weak form for finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, so you should optimize that</p>",
        "id": 224035731,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611666621
    },
    {
        "content": "<p>Ok, thanks for pointing that out</p>",
        "id": 224035769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611666641
    },
    {
        "content": "<p>If it's fine for you, I'll however keep the strong form in Analytic.pdf, as it's more readable (fewer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span>'s floating around)</p>",
        "id": 224035836,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611666674
    },
    {
        "content": "<p>certainly</p>",
        "id": 224035853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611666684
    },
    {
        "content": "<p>In the normed snake lemma, both the hypothesis and the claim are now about the weak form, right?</p>",
        "id": 224036109,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611666769
    },
    {
        "content": "<p>yes, <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/normed_snake.lean#L13\">https://github.com/leanprover-community/lean-liquid/blob/master/src/normed_snake.lean#L13</a></p>",
        "id": 224036256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611666826
    },
    {
        "content": "<p>I think it would be helpful to have more information about which constants you want to keep track of. And also whether keeping track is only knowing which constant depend on which constant or whether you are interested in actual formulas relating the different constants. I haven't looked closely at the lecture notes so feel free to ignore this comment if you think you already provided this information.</p>",
        "id": 224036466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611666904
    },
    {
        "content": "<p>I think it's also about explicit bounds</p>",
        "id": 224036563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611666961
    },
    {
        "content": "<p>So there is no need of proving that weak exact implies exact for complete stuff? It shouldn't be difficult</p>",
        "id": 224036641,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611666979
    },
    {
        "content": "<p>One does need that! But it might be just outside the scope of what you are trying to formalize right now</p>",
        "id": 224036679,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611667003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Is Question 9.9 in <a href=\"http://www.math.uni-bonn.de/people/scholze/Analytic.pdf\">www.math.uni-bonn.de/people/scholze/Analytic.pdf</a> enough information? I'd like to understand how large the various things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> etc., in the proof of 9.5), have to be. The input variables are, I guess, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>.</p>",
        "id": 224036980,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611667137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224036641\">said</a>:</p>\n<blockquote>\n<p>So there is no need of proving that weak exact implies exact for complete stuff? It shouldn't be difficult</p>\n</blockquote>\n<p>This is probably a good sanity check in any case.</p>",
        "id": 224036981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611667139
    },
    {
        "content": "<p>I agree</p>",
        "id": 224037002,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611667152
    },
    {
        "content": "<p>Question 9.9 is probably not enough but combining with what you just wrote is better (having an explicit list of inputs and outputs). So possible answers could look like: \"In Theorem 9.5, one can promise k is no larger than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mo>+</mo><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(r + r')\\exp(\\exp(m))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>\" or \"There is some unknown universal constant C such that In Theorem 9.5, one can promise k is no larger than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo>+</mo><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(r + r')\\exp(\\exp(m))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>\", right?  (I'm inventing stupid formulas here, not claiming anything)</p>",
        "id": 224037976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611667598
    },
    {
        "content": "<p>Yes, that's what I have in mind. (Unfortunately, everything will also depend on the auxiliary constants <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">c_0,c_1,\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span> that are \"suitable\" for the Breen-Deligne data. But Johan Commelin has an explicit example of such data, so one should be able to make these constants explicit as well, so one can get rid of this dependency.)</p>",
        "id": 224038312,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611667765
    },
    {
        "content": "<p>Ok, thanks for clarifying. This is typically something that will be much easier and safer with a formalization than on paper.</p>",
        "id": 224039275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611668234
    },
    {
        "content": "<p>This must be my fault, but I just realized that I don't see how to prove (with pen and paper) that a complete system of complexes that is weakly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exact is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mo stretchy=\"false\">?</mo></mrow><annotation encoding=\"application/x-tex\">\\leq ?</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mclose\">?</span></span></span></span>-exact. This seemed easy yesterday, but now I am a little lost.</p>",
        "id": 224041385,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611669344
    },
    {
        "content": "<p>Assume first that in this statement saying that for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> there is some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>, you would also have some bound on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||y||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||x||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span>. Then I think it should follow by a direct Cauchy sequence argument.</p>",
        "id": 224041642,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611669449
    },
    {
        "content": "<p>Now you don't a priori have this bound, but if you replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> (to apply a deeper restriction), you can use weak exactness in one cohomological degree lower to change <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> in order to achieve such a bound</p>",
        "id": 224041784,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611669505
    },
    {
        "content": "<p>So do we need something like admissibility? In principle there are no bounds on the norm of the restriction</p>",
        "id": 224042234,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611669714
    },
    {
        "content": "<p>Sure, admissibility is always assumed</p>",
        "id": 224042304,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611669729
    },
    {
        "content": "<p>hmm, getting the bound on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> seems OK, but now I'm also confused about how to finish it off!</p>",
        "id": 224052428,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611673916
    },
    {
        "content": "<p>Hmm... maybe one has to prove 9.4 and 9.5 directly for profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, which seems fine -- in the key lemma 9.8, one can indeed make the passage from finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> by an application of Tychonoff. Let me check whether there is not a different way of getting the strong exactness after the fact. (Right now it seems to me that one has to carefully chase the strong exactness everywhere. Sorry for all the confusion!!)</p>",
        "id": 224053609,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611674390
    },
    {
        "content": "<p>No worries! You should blame Lean (-;</p>",
        "id": 224053737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611674428
    },
    {
        "content": "<p>Of course this is exactly what I was hoping for!</p>",
        "id": 224053822,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611674468
    },
    {
        "content": "<p>But getting the statement of 9.4/9.5 for profinite <code>S</code> would require reworking <code>Mbar</code> a bit. That's fine. We would have to do that anyway if we aim for 9.1 as <code>second_target</code>.</p>",
        "id": 224053907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611674504
    },
    {
        "content": "<p>hmm, I think one <em>can</em> deduce strong exactness from weak exactness in the complete case (more precisely, weak exactness for a system of complexes of non-complete groups implies strong exactness of the completion)... let me try to write the argument here</p>",
        "id": 224055137,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611674983
    },
    {
        "content": "<p>For the snake lemma following the approach in the current version of the file is not a problem. We can prove your preliminary observation as you do. Modifying the current proof of the weak version to a proof of the strong version should then be straightforward (it is almost literally the same I think)</p>",
        "id": 224056437,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611675486
    },
    {
        "content": "<p>OK, here's an argument that weak exactness of a system of complexes of non-complete groups gives strong exactness of the completion, up to replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> by some other constant like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>4</mn></msup><mo>+</mo><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^4+k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> or whatever.</p>\n<p>In general, any element of the completion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> can be written as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">x=x_0+x_1+\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>C</mi><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||x_i||\\leq C 2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Then one can find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(x_i)-d(y_i)||\\leq k||d(x_i)||+2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. In that case, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup><mo>≤</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||d(y_i)||\\leq (k+1)||x||+2^{-i} \\leq ((k+1)C+1)2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.960634em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> as all maps are norm-nonincreasing, and then the weak exactness one degree lower means that we can find some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">z_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(y_i)-d(z_i)||\\leq (k((k+1)C+1)+1)2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>=</mo><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">y_i'=\\mathrm{res}(y_i)-d(z_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x_i)-d(y_i')||\\leq k||d(x_i)||+2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||y_i'||\\leq (k((k+1)C+1)+1)2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Thus <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><msubsup><mi>y</mi><mn>0</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>+</mo><msubsup><mi>y</mi><mn>1</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>+</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">y'=y_0'+y_1'+\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> exists and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x)-d(y')||\\leq k||d(x)|| + 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. Replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span> in this argument, one gets weak exactness of the completed complex, with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> replaced by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>Now comes the more interesting part, getting strong exactness. The only difference to weak exactness is that one needs to prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">||d(x)||=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then one can find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{res}(x)=d(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>. We know that for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, we can find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(x)-d(y_i)||\\leq 2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. For each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, we have in particular <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><msup><mn>2</mn><mrow><mn>1</mn><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||d(y_i-y_{i+1})||\\leq 2^{1-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>, and by using weak exactness one degree lower, we can find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">z_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mn>1</mn><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(y_i-y_{i+1})-d(z_i)||\\leq (k+1)2^{1-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>=</mo><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">y_i'=\\mathrm{res}(y_i)+d(z_i)+d(z_{i+1})+\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span>. Then one has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x)-d(y_i')||\\leq 2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">d^2=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, while the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">y_i'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span> form a Cauchy sequence. We can thus define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> as the limit of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">y_i'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>, and then get in the limit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{res}^2(x)=d(y')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>This is what we wanted, except for having replaced <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{res}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{res}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, which just means replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 224056956,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611675692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Can you take a close look at this argument? I hope it's OK...</p>",
        "id": 224057250,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611675811
    },
    {
        "content": "<p>I will try to formalize  :)</p>",
        "id": 224057843,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611676050
    },
    {
        "content": "<p>That should settle it hopefully! :-)</p>",
        "id": 224057975,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611676085
    },
    {
        "content": "<p>If it works, you should stick with the weak version in the rest of the argument (in particular, in the current main goal)</p>",
        "id": 224058203,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611676156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224056956\">said</a>:</p>\n<blockquote>\n<p>OK, here's an argument that weak exactness of a system of complexes of non-complete groups gives strong exactness of the completion, up to replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> by some other constant like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>4</mn></msup><mo>+</mo><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^4+k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> or whatever. [...]</p>\n</blockquote>\n<p>Just a warning that there's still something off here, namely I did not check that the sum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">d(z_i)+d(z_{i+1})+\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> converges.</p>",
        "id": 224061579,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611677342
    },
    {
        "content": "<p>OK, I don't currently see how to do that argument. So for now it seems that one has to prove the strong version, and one has to do it directly for all profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. Overall, the argument still looks fine to me, but I did not foresee these very subtle convergence questions; I had assumed the estimates that are in place are strong enough to handle them. Let's see what happens.</p>\n<p>Note that I updated <a href=\"http://www.math.uni-bonn.de/people/scholze/Analytic.pdf\">www.math.uni-bonn.de/people/scholze/Analytic.pdf</a> to reflect the required changes</p>",
        "id": 224066488,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611679265
    },
    {
        "content": "<p>OK :)<br>\nFor the snake lemma what remains to do is formalize the \"preliminary observation\" in the current version of the pdf and then modifying the proof of the weak version to prove directly the strong one. The latter should really be easy, the proof is formally the same, without the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span>'s and with a different bound</p>",
        "id": 224071715,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611681372
    },
    {
        "content": "<p>Once this is done we can probably throw away the definition of <code>weak_...</code></p>",
        "id": 224071803,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611681427
    },
    {
        "content": "<p>Actually, the confusion carries on: I think weak exactness in the complete case <em>does</em> imply strong exactness. Let me modify my argument from earlier:</p>",
        "id": 224077384,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611683732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224056956\">said</a>:</p>\n<blockquote>\n<p>OK, here's an argument that weak exactness of a system of complexes of non-complete groups gives strong exactness of the completion, up to replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> by some other constant like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>4</mn></msup><mo>+</mo><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^4+k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> or whatever.</p>\n</blockquote>\n<p>Modified:</p>\n<p>In general, any element of the completion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> can be written as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">x=x_0+x_1+\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>C</mi><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||x_i||\\leq C 2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Then one can find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(x_i)-d(y_i)||\\leq k||d(x_i)||+2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. In that case, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup><mo>≤</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||d(y_i)||\\leq (k+1)||x||+2^{-i} \\leq ((k+1)C+1)2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.960634em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> as all maps are norm-nonincreasing, and then the weak exactness one degree lower means that we can find some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">z_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(y_i)-d(z_i)||\\leq (k((k+1)C+1)+1)2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>=</mo><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">y_i'=\\mathrm{res}(y_i)-d(z_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x_i)-d(y_i')||\\leq k||d(x_i)||+2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||y_i'||\\leq (k((k+1)C+1)+1)2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Thus <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><msubsup><mi>y</mi><mn>0</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>+</mo><msubsup><mi>y</mi><mn>1</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>+</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">y'=y_0'+y_1'+\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> exists and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x)-d(y')||\\leq k||d(x)|| + 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. Replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span> in this argument, one gets weak exactness of the completed complex, with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> replaced by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>Now comes the more interesting part, getting strong exactness. The only difference to weak exactness is that one needs to prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">||d(x)||=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then one can find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{res}(x)=d(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>. We know that for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, we can find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(x)-d(y_i)||\\leq 2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. For each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, we have in particular <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><msup><mn>2</mn><mrow><mn>1</mn><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||d(y_i-y_{i+1})||\\leq 2^{1-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>, and by using weak exactness one degree lower, we can find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">z_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mn>1</mn><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(y_i-y_{i+1})-d(z_i)||\\leq (k+1)2^{1-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>=</mo><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mo>…</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">y_i'=\\mathrm{res}(y_i)-d(z_{i-1})-\\ldots-d(z_0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. Then one has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x)-d(y_i')||\\leq 2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">d^2=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, while the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">y_i'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span> form a Cauchy sequence. We can thus define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> as the limit of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">y_i'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>, and then get in the limit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{res}^2(x)=d(y')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>This is what we wanted, except for having replaced <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{res}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{res}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, which just means replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 224077539,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611683787
    },
    {
        "content": "<p>I have read just the first part, it seems good to me. I don't if we have enough theory about convergent series to write it, but this is our problem :)</p>",
        "id": 224081207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611685344
    },
    {
        "content": "<p>See <code>tsum</code>, there is quite a lot about it</p>",
        "id": 224081546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611685518
    },
    {
        "content": "<p>The \"gotcha\" with <code>tsum</code> is that it needs absolute convergence (1-1/2+1/3-1/4+.. will have a <code>tsum</code> of some junk value, rather than the limit of the finite sums from 1 to n, because it doesn't converge absolutely) but this shouldn't be an issue here.</p>",
        "id": 224081922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611685687
    },
    {
        "content": "<p>I was thinking about the first sentence about writing an element of the completion as a series controlling the norm of the general term</p>",
        "id": 224086715,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611687727
    },
    {
        "content": "<p>Hmm, maybe someone who knows that analysis library knows if something like that is in mathlib already. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ?</p>",
        "id": 224087032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687855
    },
    {
        "content": "<p>I'm certainly no expert in the analysis part of mathlib, but I don't recall seeing any api around complete normed abelian groups, so I suspect mathlib has no such fact.</p>",
        "id": 224087283,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611687972
    },
    {
        "content": "<p>To be honest I have to think to see why it is true <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 224087334,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611688005
    },
    {
        "content": "<p>It seems something like if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>→</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x_n \\to x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> then consider the sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">x_0, x_1-x_0, x_2-(x_0 + x_1), \\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></p>",
        "id": 224087508,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611688092
    },
    {
        "content": "<p>Yeah, it's not so trivial to formalize right? I guess one can construct the sequence of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> recursively.</p>",
        "id": 224087514,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611688098
    },
    {
        "content": "<p>There is some API for complete normed groups (which are abelian in mathlib, by definition), for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable_iff_vanishing_norm\">docs#summable_iff_vanishing_norm</a>.  But I'm not sure there's anything about the <em>completion</em>; do we even have its structure as a normed group?  (Or have you guys recently added this?)</p>",
        "id": 224089154,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611688902
    },
    {
        "content": "<p>hah, that might be in the liquid repo <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 224089425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611689030
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/81b10397d3c0d26b951ba0c4ea8a1aac382bc490/src/locally_constant/Vhat.lean#L18\">https://github.com/leanprover-community/lean-liquid/blob/81b10397d3c0d26b951ba0c4ea8a1aac382bc490/src/locally_constant/Vhat.lean#L18</a></p>",
        "id": 224089553,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611689086
    },
    {
        "content": "<p>But I guess <code>summable_iff_vanishing_norm</code> gets us at least halfway to the statement we want.</p>",
        "id": 224089584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611689101
    },
    {
        "content": "<p>Even better:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/81b10397d3c0d26b951ba0c4ea8a1aac382bc490/src/for_mathlib/locally_constant.lean#L40\">https://github.com/leanprover-community/lean-liquid/blob/81b10397d3c0d26b951ba0c4ea8a1aac382bc490/src/for_mathlib/locally_constant.lean#L40</a></p>",
        "id": 224089739,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611689185
    },
    {
        "content": "<p>Trying to read the argument you linked ... what is <code>res</code>?</p>",
        "id": 224090019,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611689319
    },
    {
        "content": "<p><code>res</code> is typically a restriction map. But where are you seeing it?</p>",
        "id": 224090212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611689405
    },
    {
        "content": "<p>ooh, you mean in Peter's post? Yes, those are restriction maps in a \"system of complexes\"</p>",
        "id": 224090343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611689477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224077539\">said</a>:</p>\n<blockquote>\n<p>In general, any element of the completion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> can be written as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">x=x_0+x_1+\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>C</mi><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||x_i||\\leq C 2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Then one can find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">y_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(x_i)-d(y_i)||\\leq k||d(x_i)||+2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. In that case, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup><mo>≤</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||d(y_i)||\\leq (k+1)||x||+2^{-i} \\leq ((k+1)C+1)2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.960634em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> as all maps are norm-nonincreasing, and then the weak exactness one degree lower means that we can find some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">z_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}(y_i)-d(z_i)||\\leq (k((k+1)C+1)+1)2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>=</mo><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>z</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">y_i'=\\mathrm{res}(y_i)-d(z_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x_i)-d(y_i')||\\leq k||d(x_i)||+2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi>C</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">||y_i'||\\leq (k((k+1)C+1)+1)2^{-i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span></span>. Thus <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><msubsup><mi>y</mi><mn>0</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>+</mo><msubsup><mi>y</mi><mn>1</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>+</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">y'=y_0'+y_1'+\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> exists and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x)-d(y')||\\leq k||d(x)|| + 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. Replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span> in this argument, one gets weak exactness of the completed complex, with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> replaced by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<p>This is the argument you're discussing, is that right?</p>",
        "id": 224090348,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611689479
    },
    {
        "content": "<p>yep</p>",
        "id": 224090362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611689488
    },
    {
        "content": "<p>In the above proof what we need is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>r</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||res(x)|| \\leq ||x||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span></p>",
        "id": 224090416,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611689514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> see <a href=\"https://math.commelin.net/web/index.html#system_of_complexes\">https://math.commelin.net/web/index.html#system_of_complexes</a> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 224090482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611689527
    },
    {
        "content": "<p>Sorry, there is no <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span></p>",
        "id": 224090527,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611689548
    },
    {
        "content": "<p>The same is true for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span></p>",
        "id": 224090628,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611689593
    },
    {
        "content": "<p>Is the point you need a lemma for, the existence of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">y'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>?  If so, what about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/summable_of_norm_bounded\">docs#summable_of_norm_bounded</a>?</p>",
        "id": 224091357,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611689942
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sum.norm_le_of_bounded\">docs#has_sum.norm_le_of_bounded</a> would control its norm.</p>",
        "id": 224091407,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611689965
    },
    {
        "content": "<p>There are a lot of computations like that around the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_preimage_norm_le\">docs#exists_preimage_norm_le</a>, but I don't think we have exactly this statement.</p>",
        "id": 224091533,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611690009
    },
    {
        "content": "<p>There's also material on series whose terms are bounded by a geometric series, such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cauchy_seq_finset_of_geometric_bound\">docs#cauchy_seq_finset_of_geometric_bound</a></p>",
        "id": 224091558,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611690022
    },
    {
        "content": "<p>My impression is that we decide if we want to formalize this proof, that seems doable but with some work, or follow the approach currently in analytic.pdf: there are still Cauchy sequences, but no series (but we got a weaker result)</p>",
        "id": 224093217,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611690815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224087508\">said</a>:</p>\n<blockquote>\n<p>It seems something like if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>→</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x_n \\to x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> then consider the sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">x_0, x_1-x_0, x_2-(x_0 + x_1), \\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></p>\n</blockquote>\n<p>I think you're making it more complicated than it needs to be (and less correct too). What about starting with a sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> which goes to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, and starts at zero for convenience. Then extract a sub sequence that converges sufficient fast (still starting at zero) and set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><msub><mi>y</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>y</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_n = y_{n+1} - y_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 224094739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611691456
    },
    {
        "content": "<p>I you need that argument I could formalize it.</p>",
        "id": 224094835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611691506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224094739\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224087508\">said</a>:</p>\n<blockquote>\n<p>It seems something like if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>→</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x_n \\to x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> then consider the sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">x_0, x_1-x_0, x_2-(x_0 + x_1), \\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></p>\n</blockquote>\n<p>I think you're making it more complicated than it needs to be (and less correct too). What about starting with a sequence $y$ which goes to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, and starts at zero for convenience. Then extract a sub sequence that converges sufficient fast (still starting at zero) and set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><msub><mi>y</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>y</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_n = y_{n+1} - y_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<p>What prevents me from taking an (eventually) constant sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>?</p>",
        "id": 224095047,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611691572
    },
    {
        "content": "<p>I assume we want the sequence to be in the original group, not the completion...</p>",
        "id": 224095153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611691614
    },
    {
        "content": "<p>I don't have any context here, I read only the first sentence quoted by Heather.</p>",
        "id": 224095372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611691696
    },
    {
        "content": "<p>I see. I was envisioning formalizing the following statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">has_sum</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∥</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 224095399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611691704
    },
    {
        "content": "<p>I was under the impression that we were going to assume everything was complete from the get go. But maybe I misunderstood some of the discussion above.</p>",
        "id": 224095507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611691755
    },
    {
        "content": "<p>I would be extremely surprised if this is the intended statement.</p>",
        "id": 224095511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611691756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Sorry, there's been considerable confusion (on my part) over the structure of the argument</p>",
        "id": 224095572,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611691788
    },
    {
        "content": "<p>In particular, the argument that will now be formalized is different from the one in <a href=\"http://www.math.uni-bonn.de/people/scholze/Analytic.pdf\">www.math.uni-bonn.de/people/scholze/Analytic.pdf</a></p>",
        "id": 224095659,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611691815
    },
    {
        "content": "<p>What will happen in the project is that the notion of \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness\" of a system of complexes is replaced by a weakened notion, which includes some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">+\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord mathnormal\">ϵ</span></span></span></span> in the main inequality</p>",
        "id": 224095758,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611691859
    },
    {
        "content": "<p>Then 9.4 and 9.5 are formulated with this weaker version, and in this formulation, both easily reduce to the case that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is finite</p>",
        "id": 224095832,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611691894
    },
    {
        "content": "<p>Oh, so do we no longer need the fact that \"weak\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\le k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exactness is equivalent to \"strong\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\le k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exactness for complete normed abelian groups?</p>",
        "id": 224095963,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611691945
    },
    {
        "content": "<p>Then 9.4 and 9.5 as stated in the lecture notes are recovered using the fact that for systems of complexes of <em>complete</em> abelian groups, the weak version implies the strong version (as stated in the lecture notes), up to changing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (which is harmless)</p>",
        "id": 224095968,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611691947
    },
    {
        "content": "<p>There's been confusion over whether this is actually true, but I posted an argument about 2 hours ago, and I think this one is actually sound</p>",
        "id": 224096034,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611691977
    },
    {
        "content": "<p>So in the lecture notes, I use the strong version everywhere, and demand completeness everywhere, but in the argument that will be formalized, one uses the weak version everywhere, and then omit completeness hypotheses. One reason is that this will also give better constants in the end (while the version in the lecture notes is slightly cleaner to read, as there are fewer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span>'s floating around).</p>",
        "id": 224096485,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611692166
    },
    {
        "content": "<p>Okay, I think I'm following the discussion a bit better now. Thanks!</p>",
        "id": 224096830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611692299
    },
    {
        "content": "<p>You're welcome! And sorry again for this little mess, I'm just not good at estimates...</p>",
        "id": 224097045,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611692403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224095399\">said</a>:</p>\n<blockquote>\n<p>I see. I was envisioning formalizing the following statement:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">has_sum</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∥</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It is enough to prove this for some positive <code>C</code> if  I am following the proof correctly, but the rest seems the correct statement</p>",
        "id": 224097202,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611692493
    },
    {
        "content": "<p>Won't the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> depend on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>?</p>",
        "id": 224097300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611692532
    },
    {
        "content": "<p>Ah, and <code>x i</code> should be in the original group... so <code>A</code> is not complete but <code>a</code> is in the completion</p>",
        "id": 224097362,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611692571
    },
    {
        "content": "<p>Yes, that I understand now. But I still think we might want it for arbitrary positive <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>.</p>",
        "id": 224097405,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611692591
    },
    {
        "content": "<p>I guess that in practice this will be OK since <code>x i</code> will be constructed using a Cauchy sequence converging to <code>a</code></p>",
        "id": 224097431,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611692606
    },
    {
        "content": "<p>You can't take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> arbitrary as the sum will be bounded in norm by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">2C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></p>",
        "id": 224097551,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611692659
    },
    {
        "content": "<p>For arbitrary <code>C</code> it is false I think, the norm of the sum will be less than <code>2 * C</code></p>",
        "id": 224097557,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611692665
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> yes of course</p>",
        "id": 224097600,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611692684
    },
    {
        "content": "<p>So this is what I wrote, right?</p>",
        "id": 224097676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611692725
    },
    {
        "content": "<p>(Also, there's probably other ways to argue, closer to what you have in mathlib -- I just wrote down the first argument that came to mind. You probably don't need such precise control on the convergence)</p>",
        "id": 224097729,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611692757
    },
    {
        "content": "<p>That lemma seems very reasonable to have anyway (in a more general setting of course).</p>",
        "id": 224097942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611692848
    },
    {
        "content": "<p>sure!</p>",
        "id": 224098097,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611692915
    },
    {
        "content": "<p>Okay, now I'm confused again. What is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>? I guess the assertion is that this is true for any sufficiently large <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>?</p>",
        "id": 224098213,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611692975
    },
    {
        "content": "<p>Yes</p>",
        "id": 224098256,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611692993
    },
    {
        "content": "<p>I think you can take the norm of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></p>",
        "id": 224098318,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611693003
    },
    {
        "content": "<p>The point is that the norm of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> shouldn't explode</p>",
        "id": 224098344,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611693015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> 's proof looks good to me</p>",
        "id": 224098380,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611693040
    },
    {
        "content": "<p>Ok, let's say I'll handle that.</p>",
        "id": 224098616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611693142
    },
    {
        "content": "<p>Maybe it's best to formalize the version where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>n</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||x_n||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n&gt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is bounded by any nullsequence of positive reals, given in advance? (and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mn>0</mn></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||x_0||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> bounded by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||x||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span>)</p>",
        "id": 224099107,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611693378
    },
    {
        "content": "<p>Sure, that's part of going to a more general version.</p>",
        "id": 224099550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611693607
    },
    {
        "content": "<p>can you filterize the statement?</p>",
        "id": 224099587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611693627
    },
    {
        "content": "<p>And if this goes to mathlib then it will probably start with a version where we have a uniform space with a countable basis of entourages.</p>",
        "id": 224099598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611693642
    },
    {
        "content": "<p>OK, I see that this is all done in the proper way :-)</p>",
        "id": 224099623,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611693658
    },
    {
        "content": "<p>Indeed Johan, that means filters.</p>",
        "id": 224099627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611693660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> In the project <code>normed_group</code> means that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn><mo>⇒</mo><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">||x|| = 0 \\Rightarrow x = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, right? I am asking because as we noted some days ago this is not the same terminology used in the paper</p>",
        "id": 224106275,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611696542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> the answer is yes, and this actually comes from mathlib <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_group\">docs#normed_group</a></p>",
        "id": 224119018,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611703274
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_eq_zero\">docs#norm_eq_zero</a></p>",
        "id": 224119038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611703294
    },
    {
        "content": "<p>If we really want to consider pseudo-normed abelian groups in the project the earlier we make the change the better it is I think... otherwise we risk to have to modify a lot of proofs</p>",
        "id": 224160049,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611741683
    },
    {
        "content": "<p>Which change?</p>",
        "id": 224160649,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611741991
    },
    {
        "content": "<p>Both concepts are relevant! There is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal M}(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> that is pseudo-normed, and there is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{V}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> that is normed</p>",
        "id": 224160704,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611742028
    },
    {
        "content": "<p>for the normed snake lemma, the normed spectral sequence, it's all about normed things</p>",
        "id": 224160732,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611742055
    },
    {
        "content": "<p>Yes, I mean to introduce the concept of pseudo-normed abelian group, that we currently don't have</p>",
        "id": 224160739,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611742060
    },
    {
        "content": "<p>I think Johan Commelin is working on the pseudo-normed things; to be able to go cleanly from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Λ</mi><mo separator=\"true\">,</mo><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Hom}(\\Lambda,\\overline{\\mathcal M}(S))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">H</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">m</span></span><span class=\"mopen\">(</span><span class=\"mord\">Λ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> to the complex of 9.5, one has to give this beast the structure of a pseudo-normed group (where each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∙</mo><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\bullet_{\\leq c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.689629em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mbin\">∙</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> is a profinite set)</p>",
        "id": 224160873,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611742142
    },
    {
        "content": "<p>Good! In any case my remark is really Lean-oriented, without any significant mathematical content. Unfortunately sentences like \"all our theorem are about normed groups, but we had never used this property so they hold true for psuedo-normed groups\" are a pain to formalize if there are a lot of dependecies</p>",
        "id": 224161165,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611742364
    },
    {
        "content": "<p>This will not come up!</p>",
        "id": 224161307,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611742447
    },
    {
        "content": "<p>The normed and the pseudo-normed things appear in separate contexts</p>",
        "id": 224161324,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611742459
    },
    {
        "content": "<p>Even better!</p>",
        "id": 224161386,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611742506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> We want to use pseudo-normed groups, but they appear in another part, I think. Not in the snake lemma</p>",
        "id": 224161645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611742666
    },
    {
        "content": "<p>oops, I had a lot of lag... so I missed the discussion above. Ignore my message</p>",
        "id": 224161725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611742692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> If you search for <code>pseudo_normed_group</code> in the repo, then you'll see that we already have it (-;</p>",
        "id": 224161797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611742743
    },
    {
        "content": "<p>But we'll need to pack some special pseudo-normed groups into a category, and this has not been done yet. That category will serve as \"input\" for the construction that applies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> and builds the system of complexes (of \"ordinary\" complete normed groups)</p>",
        "id": 224161955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611742831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Are you working on weak exactness implies exactness? If not I can start doing it, assuming the lemma about writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> as a sum of terms with controlled norm</p>",
        "id": 224319939,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611837679
    },
    {
        "content": "<p>I'll be a little relieved when that lemma is formalized <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 224320435,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611837974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I started playing with it a couple of days ago. I can send you what I got so far in a few mins. Unfortunately, I won't have any time at all today for lean.</p>",
        "id": 224327488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611841776
    },
    {
        "content": "<p>I would be happy to fill some sorry</p>",
        "id": 224327950,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611841995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span aria-label=\"down\" class=\"emoji emoji-2b07\" role=\"img\" title=\"down\">:down:</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>long</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">cauchy_seq_tendsto_of_complete</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">d_res_commute</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">C.d</span> <span class=\"o\">(</span><span class=\"n\">C.res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C.X</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C.res</span> <span class=\"o\">(</span><span class=\"n\">C.d</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">weak_iff_strong_of_complete</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">C.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">adm</span> <span class=\"o\">:</span> <span class=\"n\">C.admissible</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_weak_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"bp\">→</span> <span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">cond</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">cond'</span> <span class=\"o\">:=</span> <span class=\"n\">cond</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">C.res</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∥</span> <span class=\"n\">C.d</span> <span class=\"n\">x</span> <span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hh</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span> <span class=\"n\">C.d</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    intros j,</span>\n<span class=\"cm\">    rw (show C.d (f j - f (j+1)) = (C.res x - C.d (f (j+1))) + -(C.res x - C.d (f j)), by simp),</span>\n<span class=\"cm\">    rw (show (2 : ℝ)/2^j = 1 / 2^j + 1 / 2^j, by ring),</span>\n<span class=\"cm\">    refine le_trans (norm_add_le _ _) (add_le_add _ _),</span>\n<span class=\"cm\">    refine le_trans _ (_ : (1 : ℝ) / 2^(j+1) ≤ _),</span>\n<span class=\"cm\">    convert classical.some_spec (cond ((1 : ℝ) / 2^(j + 1)) _),</span>\n<span class=\"cm\">    simp,</span>\n<span class=\"cm\">    simp,</span>\n<span class=\"cm\">    right,</span>\n<span class=\"cm\">    rw [d_res_commute, hh],</span>\n<span class=\"cm\">    simp,</span>\n<span class=\"cm\">    sorry,</span>\n<span class=\"cm\">    rw norm_neg,</span>\n<span class=\"cm\">    convert classical.some_spec (cond ((1 : ℝ) / 2^j) _),</span>\n<span class=\"cm\">    simp,</span>\n<span class=\"cm\">    simp,</span>\n<span class=\"cm\">    right,</span>\n<span class=\"cm\">    rw [d_res_commute, hh],</span>\n<span class=\"cm\">    simp,</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">C.X</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">cond'</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">cond'</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span> <span class=\"n\">C.res</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">C.d</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">cond'</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">this</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mul_le_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"c1\">--refine le_trans (hf j) _, -- we now have eq.rec issues :(</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 224328137,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611842081
    },
    {
        "content": "<p>Feel free to build on it and/or completely ignore it!</p>",
        "id": 224328215,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611842118
    },
    {
        "content": "<p>I didn't get very far.</p>",
        "id": 224328231,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611842129
    },
    {
        "content": "<p>A few things to note:</p>\n<ol>\n<li>I was only focusing on the second paragraph of Peter's argument, so assuming everything is complete ahead of time.</li>\n<li>I'm not sure if the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> is needed. I put it there just to get started.</li>\n<li>I'm not sure if I chose the correct real numbers (like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>⋅</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">k \\cdot c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>, etc.) in some places.</li>\n<li>As you can see, there may be some <code>heq</code> issues, since I construct some sequence in <code>C.X _ i</code> which I then need to identify with <code>C.X _ (i-1+1)</code>.</li>\n</ol>",
        "id": 224328546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611842286
    },
    {
        "content": "<p>Oh, and the <code>#check cauchy_seq_tendsto_of_complete</code> at the top was just for myself to remember the name of this useful lemma :)</p>",
        "id": 224328790,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611842406
    },
    {
        "content": "<p><code>d_res_commute</code> is already there, it is called <code>d_res</code></p>",
        "id": 224329146,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611842570
    },
    {
        "content": "<p>Yeah, I figured we had it somewhere, but was too lazy to search.</p>",
        "id": 224329182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611842585
    },
    {
        "content": "<p><code>library_search</code> found it for me :)</p>",
        "id": 224329279,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611842623
    },
    {
        "content": "<p>I guess I was REALLY lazy then! <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 224329309,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611842641
    },
    {
        "content": "<p>Concerning the <code>i-1+1+1</code> etc, in the proof the weak version I was able to completely avoid these problems : I never rewrote the indexes, so I had <code>C ... (i + 1 + 1 + 1)</code> but this is virtually invisible since you can always write <code>_</code>, Lean was very good at guessing and I let <code>i</code> be the smallest one, to avoid subtraction. Also, it was useful to write <code>k^3*c</code> as <code>k * (k * (k * c))</code>, since the lemmas are written this way. Otherwise you end up using <code>congr</code> a lot</p>",
        "id": 224330038,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611842964
    },
    {
        "content": "<p>This comes up from the argument since you first obtain some <code>y</code> in <code>C.X _ i</code>, but then you need to consider the sequence one index below, which puts you in <code>i-1</code>, and then you apply <code>d</code> which puts you back at <code>i-1+1</code>.</p>",
        "id": 224330229,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611843050
    },
    {
        "content": "<p>Mmh, yeah, here it can be inevitable</p>",
        "id": 224330465,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611843148
    },
    {
        "content": "<p>There is <code>C.congr</code> to help with these annoyances</p>",
        "id": 224330506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611843167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/224330506\">said</a>:</p>\n<blockquote>\n<p>There is <code>C.congr</code> to help with these annoyances</p>\n</blockquote>\n<p>Good to know!</p>",
        "id": 224330534,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611843184
    },
    {
        "content": "<p>Sure, it is not a serious problem, but we are lazy :D</p>",
        "id": 224330539,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611843186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span>  Zulip is not happy if I try to quote your message for some reason, so you have to find it, sorry...</p>\n<p>Just to be sure to understand the math. You write \"...<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x)-d(y')||\\leq k||d(x)|| + 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>\". We can write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mo>∑</mo><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x = \\sum x_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><mo>∑</mo><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">y' = \\sum y_i'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>, so we get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>y</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo>∑</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">s</mi></mrow><mn>2</mn></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msubsup><mi>y</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mo>∑</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup><mo>≤</mo><mo>∑</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mi>C</mi><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>i</mi></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mi>k</mi><mi>C</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">||\\mathrm{res}^2(x)-d(y')|| \\leq \\sum ||\\mathrm{res}^2(x_i)-d(y'_i)|| \\leq \\sum k||d(x_i)||+2^{-i} \\leq \\sum(k C2^{-i} + 2^{-i}) = 2kC +2 </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064118em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">s</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.960634em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.074674em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>. The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>'s are not a problem, we can put <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> instead, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is there. We can probably take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">C= ||x||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> or something similar, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> can be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. I didn't check if the argument in the second part of your post can deal with this case since you wrote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>…</mo><mo>≤</mo><mi>k</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\ldots \\leq k||d(x)|| + 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. Am I missing something?</p>",
        "id": 224345326,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611848992
    },
    {
        "content": "<p><a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma</a><br>\nI can at least put a link :)</p>",
        "id": 224345485,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611849046
    },
    {
        "content": "<p>Sorry, I guess one should choose the sequence better, so that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||x-x_0||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> is already very small. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||d(x_0)||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> is close to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||d(x)||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span>, and the rest of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||d(x_i)||</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span></span></span></span> also contribute little.</p>",
        "id": 224352394,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611851517
    },
    {
        "content": "<p>Ah yes, that seems to work. Analysis was easier when I was a student <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 224358200,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611853402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> At the end I didn't had time to do anything except reading the argument. In any case I don't think <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> is necessary.</p>",
        "id": 224376948,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611860984
    },
    {
        "content": "<p>Quick note: I haven't forget that I promised to formalize a lemma here, but I haven't found any time yet. I hope I'll do it tomorrow.</p>",
        "id": 224400219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611871674
    },
    {
        "content": "<p>I wrote Peter's argument that weak <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness implies weak <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\leq k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>-exactness for the completion with full details here<br>\n<a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/blueprint.pdf\">https://webusers.imj-prg.fr/~riccardo.brasca/files/blueprint.pdf</a><br>\nin lemma 4.15. (I have to do other modifications before putting it in the official blueprint).<br>\nThe proof is quite elementary, but  I don't know how painful it is doing estimates of series in mathlib....<br>\nSome remarks:</p>\n<ul>\n<li>at the beginning of the proof I write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> a sum of elements in the uncompleted group,  we really need the three properties (in particular we need that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> is close enough to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>).</li>\n<li>we need to prove that, under admissibility, <code>d</code> and <code>res</code> are continuous and hence commutes with infinite sum.</li>\n</ul>",
        "id": 224467343,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611925648
    },
    {
        "content": "<p>thanks a lot for doing this!</p>",
        "id": 224467977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611925960
    },
    {
        "content": "<p>I rewrote all Peter's argument in the stream, everything seems to be OK.<br>\nBut now I forgot why we are doing this instead of following the current strategy in the pdf file (i.e. proving the preliminary observation and adapting the proof of the weak snake lemma to get a proof of the strong version): I thought this was to get better constants, but I have the impression are going in the  opposite direction! </p>\n<ul>\n<li>The current (full proved) weak snake lemma says: quotient of weak <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exact stuff is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><msup><mi>k</mi><mn>3</mn></msup><mo>+</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k^3 + k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> weak exact.</li>\n<li>The version in the pdf says: completion of quotient of  complete <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exact stuff is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msup><mi>k</mi><mn>4</mn></msup><mo separator=\"true\">,</mo><msup><mi>k</mi><mn>3</mn></msup><mo>+</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\leq \\max(k^4 , k^3 +k + 1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> exact.</li>\n<li>Weak <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exactness implies weak <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\leq k^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> exactness of completion.</li>\n<li>Weak <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exactness and complete implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k^2 + \\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> exactness</li>\n<li>Together, the  last two points give that weak <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exactness implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><msup><mi>k</mi><mn>4</mn></msup><mo>+</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k^4 + \\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> exactness of completion. (We can probably modify the proof to obtain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k^2 + \\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> exactness).<br>\nNow, in the strong snake lemma we assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to be complete and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exacts, but the weak version gives weak <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><msup><mi>k</mi><mn>3</mn></msup><mo>+</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k^3 + k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> exactness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mo stretchy=\"false\">(</mo><msup><mi>k</mi><mn>3</mn></msup><mo>+</mo><mi>k</mi><msup><mo stretchy=\"false\">)</mo><mn>4</mn></msup><mo>+</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\leq (k^3+k)^4 + \\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> exactness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>N</mi><mo>ˉ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\bar N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span></span></span></span>. Even if we get to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mo stretchy=\"false\">(</mo><msup><mi>k</mi><mn>3</mn></msup><mo>+</mo><mi>k</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>+</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\leq (k^3+k)^2 + \\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> exactness, this is worst than  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msup><mi>k</mi><mn>4</mn></msup><mo separator=\"true\">,</mo><msup><mi>k</mi><mn>3</mn></msup><mo>+</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\leq \\max(k^4 , k^3 +k + 1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> exactness.</li>\n</ul>\n<p>Now I am confused <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 224498978,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611938407
    },
    {
        "content": "<p>Especially since the proof of the preliminary observation seems really easier then the other arguments</p>",
        "id": 224503433,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611940197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> The point is that 9.10 will be applied <em>very</em> often, while that final argument will be applied precisely once</p>",
        "id": 224529547,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611952627
    },
    {
        "content": "<p>Also, in the file one has to seriously use profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> now, while in what Johan stated as the goal, finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> are enough</p>",
        "id": 224529746,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611952743
    },
    {
        "content": "<p>(one could also make a reduction to finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, but it would then once more require that thing you just formalized</p>",
        "id": 224529877,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611952813
    },
    {
        "content": "<p>I'm very glad this worked, by the way!</p>",
        "id": 224529914,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611952834
    },
    {
        "content": "<p>What I propose is to forget this new notion of weak exactness that we introduced as a fix to the problems in the original proof of 9.10 and to keep your actual proof, unless you see other reasons to keep it. This amounts to prove your \"preliminary observation\" about the quotient norm and then doing the rest of the proof using this.<br>\nProving the preliminary observation is for sure easier than proving the third and fourth points of my previous message (the argument are similar and definitely easy, there are no series, just sequences): I checked these with pen and paper, but almost nothing is done in Lean. Modifying the current proof of the weak snake lemma is not a lot work.<br>\nAnd this is not only laziness,  I have the impression that the strategy using weak exactness gives worst bounds. Of course I know only a very little part of the paper, essentially just Proposition 9.10,  so my opinion can very well be irrelevant :)</p>",
        "id": 224532416,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611953909
    },
    {
        "content": "<p>I just pushed a proof of the <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/sequences.lean#L178-L189\">controlled sum thing</a>. Riccardo, could you check this is what you need?</p>",
        "id": 224533439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611954380
    },
    {
        "content": "<p>Well, I don't mind much either way, but here are the arguments for doing the weak version:</p>\n<p>a) Until the very last step, you can assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is finite. This is surely making things a little easier. For example, whoever is trying to formalize 9.8 will probably appreciate that this profinite to finite reduction in the current version of Analytic.pdf will not have to be done (and instead a much easier profinite to finite reduction is done at the very end). Also, writing down the complexes of 9.4/9.5 is considerably easier when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is finite.</p>\n<p>b) It <em>does</em> give better constants. You observed that 9.10 gives roughly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> vs. roughly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span>, while that argument for weak exact =&gt; exact raises <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> to the fourth power. So if you applied both once, the latter argument costs more. But 9.10 will be applied very very often in the argument, while the weak exact =&gt; exact argument will be applied exactly one time, at the very end.</p>",
        "id": 224533534,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611954439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> That's seems perfect, thank you!</p>",
        "id": 224534391,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611954809
    },
    {
        "content": "<p>OK, I think I misunderstood the whole strategy: I thought you need in any case the strong snake lemma for completion (and the path weak snake lemma, then completions gives <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>12</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^{12}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> instead of the current <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span>), but what you propose is to use weak exactness everywhere and at the very end go to strong exactness.</p>",
        "id": 224536202,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611955750
    },
    {
        "content": "<p>Exactly, everything is weak up until the very end</p>",
        "id": 224536331,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611955818
    },
    {
        "content": "<p>By \"weak exact =&gt; exact for complete\" you could always at will pass to the strong version, but this would cost some constants</p>",
        "id": 224536400,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611955859
    },
    {
        "content": "<p>I will let someone that knows better than me the analysis part of mathlib decide how difficult it is to formalize the arguments of  4.15 and 4.16 of <a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/blueprint.pdf\">https://webusers.imj-prg.fr/~riccardo.brasca/files/blueprint.pdf</a><br>\nThe file contains currently the best of the two approaches, and if we have proofs of 4.15 and 4.16 we can surely do the beginning of 4.18 very quickly (and I can take care of the rest). Note that the beginning of 4.15 (writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> as a sum) has been done by Patrick, the rest is very elementary but with a lot of small calculations.</p>",
        "id": 224538089,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611956762
    },
    {
        "content": "<p>It all looks straightforward to formalize. I don't say it will be fun, but it looks totally doable without too much thinking.</p>",
        "id": 224538562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611957026
    },
    {
        "content": "<p>This is very possible! But I remember when I literally spent two hours to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>15</mn><mo separator=\"true\">,</mo><mn>21</mn><mo separator=\"true\">,</mo><mn>35</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1, 3, 5, 7, 15, 21, 35 \\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">7</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mclose\">}</span></span></span></span> has <del>six</del> seven elements (now I know that <code>refl</code> can do it) and now I prefer to ask <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 224540285,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611957748
    },
    {
        "content": "<p>it has 7 tho</p>",
        "id": 224540409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611957793
    },
    {
        "content": "<p>ROTF</p>",
        "id": 224540748,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611957882
    },
    {
        "content": "<p>That's what we call number theorists those days...</p>",
        "id": 224540988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611957954
    },
    {
        "content": "<p>It reminds me of a colloquium by Jean-Yves Welschinger about real enumerative geometry where he spent one hour explaining his job was to count geometric objects and then failed to draw five lines on the board (I don't remember whether he drew 4 or 6 lines).</p>",
        "id": 224541396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611958081
    },
    {
        "content": "<p>Anyway, if you are sure those lemmas 4.15 and 4.16 are what you want and if you formalize the statements then I can probably handle the proofs at some point during the week.</p>",
        "id": 224541770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611958195
    },
    {
        "content": "<p>But now I should go to bed.</p>",
        "id": 224541927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611958232
    },
    {
        "content": "<p>As you said this is not going to be fun, so I prefer that someone else check that this is really what we want</p>",
        "id": 224542097,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611958290
    },
    {
        "content": "<p>The strictness assumption in 9.10 (normed snake) can be relaxed to norm-nonincreasing. I guess this is useful for our application in 9.6.</p>",
        "id": 230150643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615627435
    },
    {
        "content": "<p>Hmm... we assume exactness at <code>M'</code> in the statement of <code>weak_snake_lemma</code>. But I think we should refactor this to say that kernel of <code>g</code> is the topological closure of the range of <code>f</code>.</p>",
        "id": 230164738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615644245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Does this weakened hypothesis look plausible to you?</p>",
        "id": 230304123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615793346
    },
    {
        "content": "<p>I didn't yet look into whether the proof can easily be refactored</p>",
        "id": 230304136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615793360
    },
    {
        "content": "<p>I will have a look at it later today, but I think we have everything we need to refactor the proof</p>",
        "id": 230311314,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615798172
    },
    {
        "content": "<p>Concerning the refactor using the kernel of <code>g</code>, we should first of all prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><msub><mi>M</mi><mn>1</mn></msub><mo>→</mo><msub><mi>M</mi><mn>2</mn></msub><mo>→</mo><msub><mi>M</mi><mn>3</mn></msub><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">0 \\to M_1 \\to M_2 \\to M_3 \\to</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span></span></span></span> is exact (in some sense) then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is isomorphic to the quotient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub><mi mathvariant=\"normal\">/</mi><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_2/M_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Another possibility is to prove the lemma directly for the quotient, without introducing a new complex</p>",
        "id": 230313538,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615799368
    },
    {
        "content": "<p>Nah, it's best to use the predicate, like we have now. Because in the application in 9.6 we don't get something that is definitionally the quotient. All the objects will be definitionally the quotient, but the system of complexes will probably not be.</p>",
        "id": 230313821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615799532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> we learnt this from the theory of localisation. If you define the field of fractions of an integral domain and then prove things about it, you can't deduce anything for the rational numbers because they're not literally equal to the field of fractions of the integers in the sense that they're not literally a built as a localisation.</p>",
        "id": 230314680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615800055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  The assumption in the normed snake lemma is already norm-nonincreasing, isn't it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">weak_normed_snake</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"n\">k''</span> <span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"n\">K''</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hk'</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hk''</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k''</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_weak_bounded_exact</span> <span class=\"n\">k'</span> <span class=\"n\">K'</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'_adm</span> <span class=\"o\">:</span> <span class=\"n\">M'.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">M'</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">norm_noninc</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">k''</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">K''</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">N</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"n\">f.apply.range</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgquot</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes.is_quotient</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.is_weak_bounded_exact</span> <span class=\"o\">(</span><span class=\"n\">k''</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K'</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">K''</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 230340331,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615813494
    },
    {
        "content": "<p>Yes, I did that part</p>",
        "id": 230340685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615813693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> But we need another refactor, namely <code>hg</code> should be weakened</p>",
        "id": 230340735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615813713
    },
    {
        "content": "<p>OK, I had a look at it, and it is slightly longer than I thought: we need to prove Peter's \"preliminary observation\" (at the beginning of the proof of 9.10 in Analytic.pdf). This will modify some of the constants in the result (with something like <code>k^4</code> if we use a single constant). If you're happy with this result I can work on it</p>",
        "id": 230346822,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615816203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Sounds good! It is one of the missing bits to complete the proof of 9.6.</p>",
        "id": 230347588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615816472
    },
    {
        "content": "<p>Hmm, the preliminary observation seems to require completeness . If this is the versions of the snake lemma we need I don't see point of having the notion of weak exactness. (Note that proving the strong snake lemma modifying the proof of the weak one is not that much work.)</p>",
        "id": 230351584,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615817944
    },
    {
        "content": "<p>Ah, I see you also said that in the end we don't really need the weak version</p>",
        "id": 230351863,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615818052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> What do you think? Should we just assume completeness everywhere?</p>",
        "id": 230351875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818060
    },
    {
        "content": "<p>I didn't follow this discussion closely. It seemed to me that completeness shouldn't be needed, if one uses the weak notion of exactness</p>",
        "id": 230352024,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818110
    },
    {
        "content": "<p>where do you now use completeness?</p>",
        "id": 230352082,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818123
    },
    {
        "content": "<p>(Not using completeness should give slightly better constants in the end; I think this was the main argument for not assuming it.)</p>",
        "id": 230352159,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818150
    },
    {
        "content": "<p>The constants can't get worse by adding the extra assumption, right?</p>",
        "id": 230352329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818222
    },
    {
        "content": "<p>Hmm they can, because the snake lemma more easily gives weak exactness than strong exactness</p>",
        "id": 230352426,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818246
    },
    {
        "content": "<p>or do you mean assume completeness + strong exactness?</p>",
        "id": 230352501,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818270
    },
    {
        "content": "<p>In the normed snake lemm we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo><mover><mo><mo>→</mo></mo><mi>f</mi></mover></mo><msup><mi>M</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo><mover><mo><mo>→</mo></mo><mi>g</mi></mover></mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\stackrel{f}{\\to} M' \\stackrel{g}{\\to} N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.200086em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.200086em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">→</span></span></span><span style=\"top:-3.613978em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.01537em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01537em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">→</span></span></span><span style=\"top:-3.613978em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> and we assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>im</mtext><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>ker</mtext><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{im}(f) = \\text{ker}(g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">im</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">ker</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 230352549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818291
    },
    {
        "content": "<p>Concerning the  normed  snake lemma we have a version (completely proved) for weak exactness, that assumes that the image of <code>f</code> is closed</p>",
        "id": 230352563,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615818298
    },
    {
        "content": "<p>wait, why should the image of f be closed?</p>",
        "id": 230352596,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818314
    },
    {
        "content": "<p>But I think we need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ker</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mover accent=\"true\"><mrow><mtext>im</mtext><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\ker(g) = \\overline{\\text{im}(f)}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">ker</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2000000000000002em;vertical-align:-0.25em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">im</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.87em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25em;\"><span></span></span></span></span></span></span></span></span></p>",
        "id": 230352599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818315
    },
    {
        "content": "<p>right, we assume that it is, but in the proof of 9.6 we don't have that assumption. So there is a little hole there.</p>",
        "id": 230352686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818351
    },
    {
        "content": "<p>hmm wait</p>",
        "id": 230352701,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818357
    },
    {
        "content": "<p>it's OK</p>",
        "id": 230352740,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/230352501\">said</a>:</p>\n<blockquote>\n<p>or do you mean assume completeness + strong exactness?</p>\n</blockquote>\n<p>I meant assume completeness + weak exactness, and prove weak exactness.</p>",
        "id": 230352776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818373
    },
    {
        "content": "<p>In the inductive step of 9.6, you just shouldn't take the quotient by the closure of the image</p>",
        "id": 230352798,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818380
    },
    {
        "content": "<p>Just take the quotient by the image</p>",
        "id": 230352816,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818390
    },
    {
        "content": "<p>But then the quotient isn't a normed group, is it?</p>",
        "id": 230352878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818412
    },
    {
        "content": "<p>I was only taking the closure to keep things complete (as in the manuscript, everything is complete, and I want strong exactness)</p>",
        "id": 230352885,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818413
    },
    {
        "content": "<p>It is, I think</p>",
        "id": 230352899,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818419
    },
    {
        "content": "<p>Ooh, in your generalised sense!</p>",
        "id": 230352909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818427
    },
    {
        "content": "<p>Wait, I'm confused...</p>",
        "id": 230352938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818437
    },
    {
        "content": "<p>What's the Lean definition of a normed group?</p>",
        "id": 230353216,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818542
    },
    {
        "content": "<p>Right, you can't prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>=</mo><mn>0</mn><mi mathvariant=\"normal\">∥</mi><mi mathvariant=\"normal\">∣</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\||x = 0\\|| \\iff x = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">∥</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> if the subgroup isn't closed</p>",
        "id": 230353227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818546
    },
    {
        "content": "<p>Yes</p>",
        "id": 230353252,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818554
    },
    {
        "content": "<p>And lean assumes that axiom</p>",
        "id": 230353259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818557
    },
    {
        "content": "<p>Ah</p>",
        "id": 230353271,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818562
    },
    {
        "content": "<p>But it doesn't assume completeness?</p>",
        "id": 230353297,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818576
    },
    {
        "content": "<p>Nope</p>",
        "id": 230353315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818582
    },
    {
        "content": "<p>So separated, but not complete</p>",
        "id": 230353330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818589
    },
    {
        "content": "<p>Right</p>",
        "id": 230353352,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818595
    },
    {
        "content": "<p>That's a weird convention then</p>",
        "id": 230353393,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818602
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A normed group is an additive group endowed with a norm for which `dist x y = ∥x - y∥` defines</span>\n<span class=\"sd\">a metric space structure. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_norm</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 230353501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818632
    },
    {
        "content": "<p>I think it is because with this definition you can <code>extends metric_space</code></p>",
        "id": 230353532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818648
    },
    {
        "content": "<p>wait, a metric space also requires that?</p>",
        "id": 230353578,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818663
    },
    {
        "content": "<p>Yes....</p>",
        "id": 230353622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818677
    },
    {
        "content": "<p>Weird... OK</p>",
        "id": 230353671,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818700
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Metric space</span>\n\n<span class=\"sd\">Each metric space induces a canonical `uniform_space` and hence a canonical `topological_space`.</span>\n<span class=\"sd\">This is enforced in the type class definition, by extending the `uniform_space` structure. When</span>\n<span class=\"sd\">instantiating a `metric_space` structure, the uniformity fields are not necessary, they will be</span>\n<span class=\"sd\">filled in by default. In the same way, each metric space induces an emetric space structure.</span>\n<span class=\"sd\">It is included in the structure, but filled in by default.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_dist</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">dist_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">dist_triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">edist_dist</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">edist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">ennreal.of_real</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">control_laws_tac</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_uniform_space</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">uniform_space_of_dist</span> <span class=\"n\">dist</span> <span class=\"n\">dist_self</span> <span class=\"n\">dist_comm</span> <span class=\"n\">dist_triangle</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">uniformity_dist</span> <span class=\"o\">:</span> <span class=\"bp\">𝓤</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">⨅</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">𝓟</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">}</span> <span class=\"bp\">.</span> <span class=\"n\">control_laws_tac</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230353683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818706
    },
    {
        "content": "<p>It seems that this is also the wikipedia definition</p>",
        "id": 230353688,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818711
    },
    {
        "content": "<p>The second axiom</p>",
        "id": 230353703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818716
    },
    {
        "content": "<p>right</p>",
        "id": 230353718,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818722
    },
    {
        "content": "<p>In Leiden they also taught me that axiom for metric spaces</p>",
        "id": 230353790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818736
    },
    {
        "content": "<p>It may very well be the standard</p>",
        "id": 230353855,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> what do you think... does it make sense to relax this axiom in mathlib?</p>",
        "id": 230353918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818782
    },
    {
        "content": "<p>Maybe I am confused, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn><mo>⇒</mo><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">d(x,y) = 0 \\Rightarrow x = y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> seems pretty standard <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 230353987,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615818803
    },
    {
        "content": "<p>I think algebraic geometers somehow got off the normal tracks when they changed from \"prescheme/scheme\" to \"scheme/separated scheme\"</p>",
        "id": 230354006,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Can we easily see how much of the library we need to duplicate if we want to roll our own <code>normed_group</code>?</p>",
        "id": 230354164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818862
    },
    {
        "content": "<p>We can just call it <code>seminormed_group</code>...</p>",
        "id": 230354224,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615818885
    },
    {
        "content": "<p>Sure, but how many library lemmas do we need to reprove?</p>",
        "id": 230354267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818899
    },
    {
        "content": "<p>Just joking <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 230354334,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615818926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> But if we use weak exactness + complete normed groups, the constants should still be the good ones</p>",
        "id": 230354340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818928
    },
    {
        "content": "<p>Hmm, I guess so</p>",
        "id": 230354368,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615818944
    },
    {
        "content": "<p>And for the final application it doesn't matter either</p>",
        "id": 230354371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818944
    },
    {
        "content": "<p>So that might be the easy way out (-;</p>",
        "id": 230354401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818954
    },
    {
        "content": "<p>Hmm, OK, then indeed one has to modify 9.10 a bit to incorporate some passage to the completion</p>",
        "id": 230354588,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615819012
    },
    {
        "content": "<p>I think that would actually make the constants slightly worse there</p>",
        "id": 230354612,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615819021
    },
    {
        "content": "<p>I saw this being called a pseudometric space <a href=\"https://en.m.wikipedia.org/wiki/Pseudometric_space\">https://en.m.wikipedia.org/wiki/Pseudometric_space</a></p>",
        "id": 230355319,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615819259
    },
    {
        "content": "<p>I <em>really</em> don't think it is a good idea to change the metric space definition in mathlib, which is the standard one. Whenever you do analysis, having unique limits is extremely useful! (That's why in all analysis books the <code>L^p</code> space is a space of equivalence classes of functions, for instance).</p>",
        "id": 230355415,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615819294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> But if we call them <code>pseudometric_space</code>?</p>",
        "id": 230355471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615819321
    },
    {
        "content": "<p>85% of the lemmas will still be about <code>metric_space</code>, but some of the general facts can be proven for <code>pseudometric_space</code></p>",
        "id": 230355577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615819364
    },
    {
        "content": "<p>Sure, why not. It's a little bit like non-separated topological groups: they show up sometimes, but whenever you want to do something serious, like extending a uniformly continuous function, you have to go to the separated quotient first.</p>",
        "id": 230355644,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615819389
    },
    {
        "content": "<p>OK, I think that should be the solution: Just also introduce <code>pseudometric_space</code> and <code>seminormed_group</code> and use these things instead</p>",
        "id": 230355665,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615819395
    },
    {
        "content": "<p>And similarly, we could then have <code>seminormed_group</code>. (It seems that <code>pseudo_normed_group</code> has recently be claimed...)</p>",
        "id": 230355682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615819402
    },
    {
        "content": "<p>Ok, great. Then we don't change the normed snake lemma.</p>",
        "id": 230355954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615819506
    },
    {
        "content": "<p>Any volunteers for the refactor? Otherwise I'll do it when I don't have inspiration for something else.</p>",
        "id": 230356426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615819677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  OK, I definitely don't want to change the definition of <code>metric_space</code>. It's just that from my experience in algebraic geometry, I always tend to explicitly think of separatedness as something that should not be included in the most primitive definition, only added later on top. This is probably an irrelevant consideration when doing analysis, but maybe a little relevant when setting up something like mathlib, so I think it would be good to include <code>pseudometric_space</code> now.</p>",
        "id": 230356702,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615819788
    },
    {
        "content": "<p>But in any case for the snake lemma we cannot assume that <code>f</code> has closed image, right? And for that I have the impression that completeness is needed... or not?</p>",
        "id": 230357340,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615819990
    },
    {
        "content": "<p>It certainly can't hurt. And indeed I've already been longing for this class to be in mathlib several times (for instance to put a uniform structure on the space of integrable functions).</p>",
        "id": 230357369,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615820002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> The current version is fine with the generalised definitions</p>",
        "id": 230357411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615820017
    },
    {
        "content": "<p>We can't assume that <code>f</code> has closed image. But we shouldn't need it...</p>",
        "id": 230357442,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615820031
    },
    {
        "content": "<p>Because we can then drop <code>is_closed</code> from the <code>instance</code> of <code>seminormed_group</code> for quotients</p>",
        "id": 230357528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615820048
    },
    {
        "content": "<p>I like the distinction <code>metric</code> vs <code>pseudo-metric</code>.  For a specific example, the Kobayashi pseudo-metric is usually referred to as a <em>pseudo</em>-metric, even though the title (but not the body) of the Wikipedia page says otherwise:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Kobayashi_metric\">https://en.wikipedia.org/wiki/Kobayashi_metric</a></p>",
        "id": 230357836,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615820162
    },
    {
        "content": "<p>Ah sure! In that case I will give a try to the refactor!</p>",
        "id": 230358164,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615820265
    },
    {
        "content": "<p>What is the general strategy? Introduce <code>pseudometric_space</code> and check by hand what stay true in this generality?</p>",
        "id": 230358334,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615820310
    },
    {
        "content": "<p>One complication is whether we also want <code>pseudo_emetric_space</code>...</p>",
        "id": 230358954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615820477
    },
    {
        "content": "<p>(allowing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span> as distance)</p>",
        "id": 230359010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615820495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> yes, that's the strategy that I would use. It might mean reorganizing a bunch of things into different sections, and maybe even split into different files</p>",
        "id": 230359234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615820561
    },
    {
        "content": "<p>I don't think infinite distances are relevant to what we're doing here... maybe leave that for another day then?</p>",
        "id": 230359583,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615820663
    },
    {
        "content": "<p>It's not relevant for this project, I agree. But if we dive into a refactor, we might want to do both in one go...</p>",
        "id": 230359732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615820717
    },
    {
        "content": "<p>A pseudo_emetric shows for example up in topological data analysis.</p>",
        "id": 230360710,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1615821037
    },
    {
        "content": "<p>I didn't expect topological data analysis to come up in this stream ;-)</p>",
        "id": 230360850,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615821091
    },
    {
        "content": "<p>Apperently in mathlib these things are called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/premetric_space\">docs#premetric_space</a></p>",
        "id": 230362861,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615821674
    },
    {
        "content": "<p>Ooh! So we have them already in some sense?</p>",
        "id": 230363052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615821724
    },
    {
        "content": "<p>That means we only need to do the <code>seminormed_group</code> stuff?</p>",
        "id": 230363074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615821734
    },
    {
        "content": "<p>Not really, nothing is proved for them, but at least we don't have to chose the name :D</p>",
        "id": 230363338,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615821837
    },
    {
        "content": "<p>Should we call them <code>prenormed_group</code> as well?</p>",
        "id": 230363350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615821841
    },
    {
        "content": "<p>Because <code>seminormed_group</code> sounds like it might have something to do with seminorms</p>",
        "id": 230363423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615821859
    },
    {
        "content": "<p>Which isn't really the point that we try to make</p>",
        "id": 230363458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615821871
    },
    {
        "content": "<p>Isn't this exactly a seminorm?</p>",
        "id": 230363898,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615822051
    },
    {
        "content": "<p>I thought a seminorm was exactly a norm without the assumption that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn><mo>⇒</mo><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">||x|| = 0 \\Rightarrow x=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>",
        "id": 230363913,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615822058
    },
    {
        "content": "<p>Also, \"pseudometric space\" seems the standard name in the literature, so why use \"premetric space\" instead?</p>",
        "id": 230364006,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615822084
    },
    {
        "content": "<p>ooh, you are right. so <code>seminormed_group</code> it is! <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 230364105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615822120
    },
    {
        "content": "<p>Note that nothing is proved currently on <code>premetric_space</code>, I only introduced it some time ago as a gadget to construct metric spaces by taking a suitable quotient. For instance, there is currently no uniform space structure on a premetric space.</p>",
        "id": 230364127,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615822125
    },
    {
        "content": "<p>We can rename <code>premetric_space</code></p>",
        "id": 230364195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615822153
    },
    {
        "content": "<p>It will be a little bit strange to have <code>pseudometric_space</code> and <code>seminormed_space</code>, but hey, we all know that mathematics terminology is not always coherent :-)</p>",
        "id": 230364415,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615822232
    },
    {
        "content": "<p>It is! But those seem to be the standard names...</p>",
        "id": 230364588,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615822301
    },
    {
        "content": "<p>I gave a little try to understand what is needed for the refactor about <code>pseudometric_space</code> (or whatever name we choose), and I think I can do it. If I understand correctly how mathlib is set up, <code>emetric_space</code> is more fundamental than <code>metric_space</code> (this is clear looking at the imports), so I will start there</p>",
        "id": 230377575,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615825783
    },
    {
        "content": "<p>Are there <code>pre_emetric_space</code>s already? Otherwise, I think you can choose to skip that step. Whichever you prefer.</p>",
        "id": 230377784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615825850
    },
    {
        "content": "<p>No, there aren't, but it doesn't seem very complicated to do both</p>",
        "id": 230378213,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615826042
    },
    {
        "content": "<p>If someone wants to have a look I created <a href=\"https://github.com/leanprover-community/mathlib/issues/6694\">#6694</a>, for extended pseudo metric spaces.</p>",
        "id": 230413564,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615840308
    },
    {
        "content": "<p>Thanks, I left 1 comment (-;</p>",
        "id": 230414806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615840828
    },
    {
        "content": "<p>Hooray! <code>normed_group_hom</code> in mathlib is now refactored to work for semi normed groups.<br>\nMajor thanks to Riccardo for the 5 or 6 PRs that performed the refactor!</p>",
        "id": 233318805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617715925
    },
    {
        "content": "<p>I have some time today to work on <code>semi_normed_group</code> in the LTE! <code>leanproject upgrade-mathlib</code> is all I have to do to ugrade mathlib? I am working in my branch</p>",
        "id": 233319257,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617716083
    },
    {
        "content": "<p>Yes, <code>leanproject up</code> should get you started. But there might be unexpected breakage.</p>",
        "id": 233319652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617716231
    },
    {
        "content": "<p>So I can help with bumping mathlib, if you want.</p>",
        "id": 233319711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617716257
    },
    {
        "content": "<p>Hmm, we need to wait a bit longer. <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span></p>",
        "id": 233319931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617716339
    },
    {
        "content": "<p>The oleans aren't available yet.</p>",
        "id": 233319953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617716349
    },
    {
        "content": "<p>No problem :)</p>",
        "id": 233319964,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617716355
    },
    {
        "content": "<p>Now they are there, it seems</p>",
        "id": 233322522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617717336
    },
    {
        "content": "<p><code>leanproject up</code> did its job. If I try to build the project I get a lot of errors, but I can work normally on <code>normed_group_quotient.lean</code></p>",
        "id": 233323048,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617717525
    },
    {
        "content": "<p>I'll look at the other errors</p>",
        "id": 233323190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617717582
    },
    {
        "content": "<p>Is your branch clean?</p>",
        "id": 233323219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617717595
    },
    {
        "content": "<p>Or is there other stuff on it too, that might make a merge a bit more complicated?</p>",
        "id": 233323289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617717608
    },
    {
        "content": "<p>I created a new branch, but it's very possibile that I messed up with <code>leanproject build</code>.</p>",
        "id": 233323554,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617717707
    },
    {
        "content": "<p>The first error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">imjprgpool</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">brasca</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">abelian</span><span class=\"bp\">/</span><span class=\"n\">additive_functor.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">imjprgpool</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">brasca</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">abelian</span><span class=\"bp\">/</span><span class=\"n\">additive_functor.lean'</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">search</span> <span class=\"n\">path</span>\n</code></pre></div>\n<p>So it's probably my fault</p>",
        "id": 233323649,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617717730
    },
    {
        "content": "<p>No, I got the same.</p>",
        "id": 233323713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617717749
    },
    {
        "content": "<p>That file moved in mathlib. I'm fixing those errors in LTE right now (-;</p>",
        "id": 233323754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617717763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I've pushed some fixes to <code>bump-mathlib-2021-04-06</code></p>",
        "id": 233324350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617717979
    },
    {
        "content": "<p>But now the errors are about <code>NormedGroup</code> and such</p>",
        "id": 233324405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617717998
    },
    {
        "content": "<p>So that's probably more related to what you are doing</p>",
        "id": 233324439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617718015
    },
    {
        "content": "<p>Yes, that looks like a real error caused by something about <code>normed_group_hom</code>, that now accepts <code>semi_normed_group</code>. I am playing with it to see if I can fix it without too much work... I am not very familiar to declaration like <code>def NormedGroup : Type (u+1) := bundled normed_group</code>.</p>",
        "id": 233327636,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617719217
    },
    {
        "content": "<p>I think you should just generalize it to <code>semi_normed_group</code></p>",
        "id": 233327761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617719256
    },
    {
        "content": "<p>And see what breaks after that (-;</p>",
        "id": 233327781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617719264
    },
    {
        "content": "<p>I started in the branch <code>semi_normed</code> the refactor to include <code>semi_normed_group</code> in the LTE. What I did is to generalize the files <br>\n<code>src/for_mathlib/normed_group</code> <code>src/for_mathlib/normed_group_hom_equalizer</code>, <code>src/for_mathlib/normed_group_hom</code> and <code>src/for_mathlib/normed_group_quotient</code>: no problem here.</p>\n<p>Then I started working on <code>src/normed_group/NormedGroup</code>: I essentially wrote <code>semi</code> everywhere (but I didn't change the name of the category, even if this should be done) and erased the lemma <code>coker.exists_norm_le</code> that is useless since now we take the algebraic quotient (without taking the closure).</p>\n<p>Now Lean complains about other places where <code>NormedGroup</code> is used, for example in <code>src/locally_constant/NormedGroup</code>.  I am not very familiar with the category theory part of mathlib, so it probably makes more sense if someone else look at this, at least to have a plan of what we have to do. For example, do we want locally constant functions with values in a <code>pseudo_metric_space</code>? Do we need both the category <code>SemiNormedGroup</code> and the category <code>NormedGroup</code>?</p>",
        "id": 233353284,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617727913
    },
    {
        "content": "<p>I guess the authors of almost everything in this part of the project are <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  and <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span></p>",
        "id": 233353439,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617727967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I can take a look in about an hour.</p>",
        "id": 233353716,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617728090
    },
    {
        "content": "<p>Well, just looking very quickly, it seems that there is no seminormed_group instance on locally constant functors, and that's the source of the issue in <code>src/locally_constant/NormedGroup.lean</code></p>",
        "id": 233354304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617728395
    },
    {
        "content": "<p>Yes, the problem is for sure that one. What confuses me is that there is a <code>normed_group</code> instance, and so also a <code>semi_normed_group</code> instance. In any case the question is if we should generalize everything to <code>semi_normed_group</code> or rather convince Lean that here everything is automatically a <code>semi_normed_group</code>.</p>",
        "id": 233354850,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617728598
    },
    {
        "content": "<p>But the instance is there only for locally constant functions into a <em>normed group</em>.</p>",
        "id": 233355012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617728658
    },
    {
        "content": "<p>So <code>locally_constant/analysis.lean</code> should be generalised.</p>",
        "id": 233355080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617728692
    },
    {
        "content": "<p>looks like <code>locally_constant.pseudo_metric_space</code> is missing</p>",
        "id": 233355623,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617728906
    },
    {
        "content": "<p>I pushed a fix</p>",
        "id": 233355928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617729020
    },
    {
        "content": "<p>I just did it, <code>locally_constant/analysis.lean</code> is now for <code>pseudo_metric_space</code>.</p>",
        "id": 233355957,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617729033
    },
    {
        "content": "<p>But maybe we want to keep the results for <code>metric_space</code></p>",
        "id": 233355997,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617729053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> ooh, you might want to pull</p>",
        "id": 233356017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617729060
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"bp\">↥</span><span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233356226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617729162
    },
    {
        "content": "<p>This is hopefully in mathlib?</p>",
        "id": 233356249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617729172
    },
    {
        "content": "<p>Is this true?</p>",
        "id": 233356364,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617729241
    },
    {
        "content": "<p>I thought about that, but <code>complete</code> means <code>t1</code> in mathlib</p>",
        "id": 233356367,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617729242
    },
    {
        "content": "<p>And maybe even in standard mathematics, I am not sure</p>",
        "id": 233356430,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617729254
    },
    {
        "content": "<p>But that is not a problem right?</p>",
        "id": 233356484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617729284
    },
    {
        "content": "<p>It means that is probably even a <code>normed_group</code></p>",
        "id": 233356702,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617729381
    },
    {
        "content": "<p>Right, I think that the completion of a <code>semi_normed_group</code> is always a <code>normed_group</code>.</p>",
        "id": 233356792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617729430
    },
    {
        "content": "<p>So we might need another mathlib PR that generalizes <code>topology.metric_space.completion</code></p>",
        "id": 233356877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617729480
    },
    {
        "content": "<p>Yes <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 233356953,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617729503
    },
    {
        "content": "<p>I can do it very quickly</p>",
        "id": 233356968,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617729510
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7066\">#7066</a></p>",
        "id": 233357731,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617729882
    },
    {
        "content": "<p>Wow! I expected a much larger diff.</p>",
        "id": 233357951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617730006
    },
    {
        "content": "<p>Don't forget the backbone of all this is the general uniform space completion that doesn't see any difference between pseudo-norms and norms, it way more general.</p>",
        "id": 233358224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617730138
    },
    {
        "content": "<p>Hmmm, so now we are stuck for a couple of hours... or can we quickly duplicate this instance in some <code>for_mathlib/temp.lean</code>?</p>",
        "id": 233358569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617730274
    },
    {
        "content": "<p>Dinner time for me, but fell free to modify my branch</p>",
        "id": 233359059,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617730459
    },
    {
        "content": "<p>I did this, but now we need to do a bit of maths.</p>",
        "id": 233361805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617731800
    },
    {
        "content": "<p><code>Completion.lift</code> uses <code>is_closed_eq</code> in its proof.</p>",
        "id": 233361891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617731839
    },
    {
        "content": "<p>This no longer works. So I need to think about what is the correct move.</p>",
        "id": 233361937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617731870
    },
    {
        "content": "<p>Is this pushed to the branch?</p>",
        "id": 233361953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617731880
    },
    {
        "content": "<p>yes</p>",
        "id": 233362026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617731898
    },
    {
        "content": "<p>Ooh, it's actually quite obvious. We should just assume that the target of the lift is a <code>t2_space</code></p>",
        "id": 233362057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617731916
    },
    {
        "content": "<p>Because clearly you can't lift <code>V -&gt; W</code> to the completion of <code>V</code> for arbitrary <code>W</code>.</p>",
        "id": 233362099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617731935
    },
    {
        "content": "<p>Doesn't complete imply t2?</p>",
        "id": 233362139,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617731951
    },
    {
        "content": "<p>Hmm, maybe it does, because t1 =&gt; t2 for groups?</p>",
        "id": 233362210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617732000
    },
    {
        "content": "<p>But mathlib doesn't seem to realize this</p>",
        "id": 233362288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617732012
    },
    {
        "content": "<p>hmmm....</p>",
        "id": 233362371,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617732040
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion\">docs#uniform_space.completion</a> says \"Hausdorff completion of <code>α</code>\",  so it should be <code>t2</code>... I think</p>",
        "id": 233362604,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617732134
    },
    {
        "content": "<p>Idem dito, it can't find <code>[separated_space W]</code>. So we are missing <code>complete_space =&gt; separated_space</code></p>",
        "id": 233362621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617732139
    },
    {
        "content": "<p>I've just added these redundant hyps with a comment. So we can remove them later.</p>",
        "id": 233362882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617732245
    },
    {
        "content": "<p>Pushed.</p>",
        "id": 233362886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617732248
    },
    {
        "content": "<p>Why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion.separated_space\">docs#uniform_space.completion.separated_space</a> doesn't work?</p>",
        "id": 233363075,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617732353
    },
    {
        "content": "<p>Hm, I see</p>",
        "id": 233363139,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617732369
    },
    {
        "content": "<p>Yeah, it's a bit silly.</p>",
        "id": 233363304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617732456
    },
    {
        "content": "<p>Should we call <code>NormedGroup</code> <code>SemiNormedGroup</code> (and maybe recreate <code>NormedGroup</code>)? This will break a lot of files of course, but it is more clear</p>",
        "id": 233363622,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617732591
    },
    {
        "content": "<p>NB. <a href=\"https://github.com/leanprover-community/mathlib/blob/d7f6bd6188fc10f085bbcfcf513942467a071dc3/src/topology/uniform_space/completion.lean#L453\">https://github.com/leanprover-community/mathlib/blob/d7f6bd6188fc10f085bbcfcf513942467a071dc3/src/topology/uniform_space/completion.lean#L453</a></p>",
        "id": 233363862,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617732688
    },
    {
        "content": "<p>The correct thing to do is the following I think: if <code>M</code> and <code>N</code> are <code>semi_normed_group</code> (or <code>pseudo_metric_space</code>, or whatever), and <code>f : M → N</code> then the induced map <code>completion M → completion N</code> is given by considering the natural map <code>i : N → completion N</code>, so now <code>i ∘ f : M → completion N</code> can be extendend.</p>",
        "id": 233364682,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617733015
    },
    {
        "content": "<p>That's fine for the completion functor, but not for lift</p>",
        "id": 233365306,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617733256
    },
    {
        "content": "<p>On the other hand, I don't know whether we actually need <code>Completion.lift</code>?</p>",
        "id": 233365347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617733270
    },
    {
        "content": "<p>Ah sorry, you're right. But complete <em>means</em> separated, so that's OK anyway</p>",
        "id": 233365775,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617733441
    },
    {
        "content": "<p>Is this actually true for arbitrary uniform spaces?</p>",
        "id": 233366548,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617733777
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.completion.separated_space\">docs#uniform_space.completion.separated_space</a> seems to say this</p>",
        "id": 233366821,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617733900
    },
    {
        "content": "<p>I just pushed <code>fix rescale.normed_group</code></p>",
        "id": 233366839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617733911
    },
    {
        "content": "<p>If complete implies equal to the completion</p>",
        "id": 233366849,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617733918
    },
    {
        "content": "<p>It seems that there are 3 or 4 errors left</p>",
        "id": 233367757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617734249
    },
    {
        "content": "<p>Oups, one error is my fault, I erased <code>NormedGroup.coker.exists_norm_le</code></p>",
        "id": 233368138,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617734399
    },
    {
        "content": "<p>Another one is trickier. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">to_exact</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">C.is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">c₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">→</span>\n    <span class=\"n\">C.d</span> <span class=\"n\">_</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi₀</span> <span class=\"o\">:</span> <span class=\"n\">i₀</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i₀</span><span class=\"o\">),</span> <span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">C.d</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">C.is_bounded_exact</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is no longer obviously true</p>",
        "id": 233368576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617734558
    },
    {
        "content": "<p>Which is used in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">strong_of_complete</span> <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hk'</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">C.is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hC'</span> <span class=\"o\">:</span> <span class=\"n\">admissible</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">C.is_bounded_exact</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 233368837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617734681
    },
    {
        "content": "<p>These proofs currently make actual use of <code>norm_eq_zero_iff</code> and friends</p>",
        "id": 233368876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617734709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> But <code>exists_norm_le</code> maybe also needs a bit of refactoring, right?</p>",
        "id": 233369122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617734814
    },
    {
        "content": "<p>The lemma says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coker.exists_norm_le</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y₁</span> <span class=\"n\">y₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">coker.π</span> <span class=\"n\">y₁</span> <span class=\"o\">:</span> <span class=\"n\">coker</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">coker.π</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">y₁</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">y₂</span><span class=\"bp\">∥</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 233369174,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617734847
    },
    {
        "content": "<p>Now it is true even for <code>ε = 0</code>, isn't it?</p>",
        "id": 233369227,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617734863
    },
    {
        "content": "<p>The <code>ε </code> does not come from the quotient norm, it comes from the closure of the kernel</p>",
        "id": 233369320,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617734889
    },
    {
        "content": "<p>So the proof simplifies?</p>",
        "id": 233369371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617734911
    },
    {
        "content": "<p>I mean that the statement is completely trivial, if <code>y₁</code> and  <code>y₂</code> are equal in the cokernel the difference is in the image of <code>f</code>, since we are taking the algebraic quotient</p>",
        "id": 233369676,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617735031
    },
    {
        "content": "<p>I have to stop now, sorry!</p>",
        "id": 233370170,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617735225
    },
    {
        "content": "<p>Ooh, of course <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> I forgot what the statement actually said.</p>",
        "id": 233370816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617735506
    },
    {
        "content": "<p>That problem is now solved: <code>git commit -am \"fix src/system_of_complexes/truncate.lean\"</code></p>",
        "id": 233372625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617736256
    },
    {
        "content": "<p>So now there are two errors left, related to this <code>strong_of_complete</code></p>",
        "id": 233372661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617736277
    },
    {
        "content": "<p>Besides that, this mathlib bump is finished.</p>",
        "id": 233372679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617736294
    },
    {
        "content": "<p>Do you still have questions about completeness and separation?</p>",
        "id": 233374415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617737071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/233362621\">said</a>:</p>\n<blockquote>\n<p>Idem dito, it can't find <code>[separated_space W]</code>. So we are missing <code>complete_space =&gt; separated_space</code></p>\n</blockquote>\n<p>This implication is not correct (at least not with our definition of complete, which is also Bourbaki's definition of complete). However <code>completion X</code> is always separated, even if <code>X</code> isn't.</p>",
        "id": 233374530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617737140
    },
    {
        "content": "<p>The subcategory of complete but not necessarily separated uniform spaces has no good categorical properties.</p>",
        "id": 233374608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617737166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> So <code>completion</code> can do something nontrivial to a complete space?</p>",
        "id": 233376728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738091
    },
    {
        "content": "<p>No, it can make it smaller</p>",
        "id": 233376859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617738145
    },
    {
        "content": "<p>In <code>strong_of_complete</code> we are assuming that we have <code>complete_space</code> and <code>semi_normed_group</code>.<br>\nThat should still imply <code>normed_group</code>, because <code>t1</code> implies <code>t2</code> for topological groups.</p>",
        "id": 233376872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738155
    },
    {
        "content": "<p>But turning this into an instance is of course tricky. Because it will start looping.</p>",
        "id": 233376913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738173
    },
    {
        "content": "<p>Yes, t1 implies t2 for topological groups.</p>",
        "id": 233376977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617738199
    },
    {
        "content": "<p>Is there code to fix? On which branch?</p>",
        "id": 233377289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617738335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <code>semi_normed</code> is the branch</p>",
        "id": 233377739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738531
    },
    {
        "content": "<p>I just checked: the final <code>sorry</code> in <code>normed_spectral</code> (9.6) just vanished completely <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 233377887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738598
    },
    {
        "content": "<p>Is there anything to fix then?</p>",
        "id": 233378005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617738631
    },
    {
        "content": "<p>Yes</p>",
        "id": 233378025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738641
    },
    {
        "content": "<p><code>strong_of_complete</code> is broken</p>",
        "id": 233378042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738648
    },
    {
        "content": "<p>Because it assumes that the objects are <code>normed_group</code>s</p>",
        "id": 233378077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738666
    },
    {
        "content": "<p>And Lean doesn't know that <code>semi_normed_group</code> + <code>complete_space</code> implies <code>normed_group</code>.</p>",
        "id": 233378125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738685
    },
    {
        "content": "<p>We'll even have to think about how to state that implication without creating loops or diamonds.</p>",
        "id": 233378180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738709
    },
    {
        "content": "<p>This isn't true</p>",
        "id": 233378297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617738743
    },
    {
        "content": "<p>I think you mean semi_normed_group + separated implies normed_group</p>",
        "id": 233378333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617738759
    },
    {
        "content": "<p>But <code>complete_space</code> implies <code>t1</code>, right?</p>",
        "id": 233378367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738778
    },
    {
        "content": "<p>why?</p>",
        "id": 233378410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617738795
    },
    {
        "content": "<p>I thought someone said that. I didn't check mathlib.</p>",
        "id": 233378432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738806
    },
    {
        "content": "<p>Is it not true that a complete pseudo_metric_space is T2?</p>",
        "id": 233378481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617738832
    },
    {
        "content": "<p>I agree about general uniform spaces btw</p>",
        "id": 233378552,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617738852
    },
    {
        "content": "<p>It is certainly true if you put separation in the definition of complete, but a priori I don't see why it would be automatic</p>",
        "id": 233378879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617738970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/233378432\">said</a>:</p>\n<blockquote>\n<p>I thought someone said that. I didn't check mathlib.</p>\n</blockquote>\n<p>I said that... I thought that the completion of a complete space was the same as the space <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 233378920,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617738990
    },
    {
        "content": "<p>Right, defn 8.16(3) puts separated in the definition of complete.</p>",
        "id": 233378932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617738994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> For me it's fine if we prove <code>strong_of_complete</code> assuming <code>separated</code>. Because we will only ever apply it to <code>completion foobar</code>.</p>",
        "id": 233379033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739047
    },
    {
        "content": "<p>But to make the proof work, we still need some glue to move from <code>separated_space</code> to <code>norm_eq_zero_iff</code>.</p>",
        "id": 233379115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739078
    },
    {
        "content": "<p>The name <code>completion</code> is maybe a bit unfortunate, but <code>separated_completion</code> seemed too long.</p>",
        "id": 233379219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617739108
    },
    {
        "content": "<p>And of course Bourbaki calls it completion only.</p>",
        "id": 233379597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617739256
    },
    {
        "content": "<p>Assuming <code>semi_normed</code> and <code>separated</code> is a bit silly, this is equivalent to <code>normed_group</code>, right?</p>",
        "id": 233379674,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617739288
    },
    {
        "content": "<p>Yes, but you are handed a <code>system_of_complexes</code>, whose objects are by definition <code>semi_normed_group</code>.</p>",
        "id": 233379952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739400
    },
    {
        "content": "<p>If <code>normed_group</code> was a mixin on top of <code>semi_normed_group</code>, there wouldn't be a problem. But of course that would be a gigantic refactor, and it's not even clear if it is desirable from a UX point of view.</p>",
        "id": 233380013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739435
    },
    {
        "content": "<p>I see</p>",
        "id": 233380181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617739512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Do you want to give it a shot?</p>",
        "id": 233380443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739628
    },
    {
        "content": "<p><code>cauchy_seq_of_le_geometric</code> is also used there, so it's not only about elements with norm zero.</p>",
        "id": 233380493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617739660
    },
    {
        "content": "<p>Maybe we can write a <code>def normed_group_of_separated</code> and lift the <code>semi_normed_group</code> structure to a <code>normed_group</code> manually?</p>",
        "id": 233380651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739741
    },
    {
        "content": "<p>Then we just add a line to the top of the proof, and hopefully the rest of the proof just works.</p>",
        "id": 233380742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739791
    },
    {
        "content": "<p>That sounds like a cheap workaround, but actually this situation may be quite rare and not deserving a big refactor.</p>",
        "id": 233380775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617739804
    },
    {
        "content": "<p>So maybe we should be lazy</p>",
        "id": 233380803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617739812
    },
    {
        "content": "<p>Do we already have a def upgrading a pseudo normed group to a normed group using a proof of norm x = 0 implies  x = 0?</p>",
        "id": 233380916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617739883
    },
    {
        "content": "<p>pseudo normed groups don't even have a <code>has_norm</code> at the moment. (And note that there can be elements with norm <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>).</p>",
        "id": 233381063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739951
    },
    {
        "content": "<p>Or did you mean <code>semi_normed_group</code>?</p>",
        "id": 233381073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739958
    },
    {
        "content": "<p>In the latter case, <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> did you write such a constructor?</p>",
        "id": 233381101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617739974
    },
    {
        "content": "<p>Yes, I meant semi normed group</p>",
        "id": 233381357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617740104
    },
    {
        "content": "<p>I don't remember writing it, but maybe it is more or less already there. The difference between <code>semi_normed_group</code> and <code>normed_group</code> is that the first extends <code>pseudo_metric_space</code>, the latter <code>metric_space</code></p>",
        "id": 233381710,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617740285
    },
    {
        "content": "<p>And <code>metric_space</code> extends <code>pseudo_metric_space</code></p>",
        "id": 233381771,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617740317
    },
    {
        "content": "<p>I need to do something else, but you should feel free to use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">norm_le_zero_iff'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"n\">g</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">closure</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">separated_space.out</span><span class=\"o\">,</span> <span class=\"n\">mem_id_rel</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">group_separation_rel</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">normed_group.mem_closure_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">forall_lt_iff_le'</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_eq_zero_iff'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"n\">g</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">norm_le_zero_iff'</span> <span class=\"o\">},</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233383215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617740972
    },
    {
        "content": "<p>I'll come back to this tomorrow night if there is something to do</p>",
        "id": 233383248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617740989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> thanks! I'll add the to <code>for_mathlib</code></p>",
        "id": 233383451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617741058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/normed.20snake.20lemma/near/233380493\">said</a>:</p>\n<blockquote>\n<p><code>cauchy_seq_of_le_geometric</code> is also used there, so it's not only about elements with norm zero.</p>\n</blockquote>\n<p>This seems to be the only problem now</p>",
        "id": 233384754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617741600
    },
    {
        "content": "<p>I guess <code>analysis/specific_limits</code> can be (partly?) generalised to <code>pseudo_metric_space</code>.</p>",
        "id": 233385870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617742047
    },
    {
        "content": "<p><code>cauchy_seq_of_le_geometric</code> might just be true for <code>pseudo_metric_space</code>s</p>",
        "id": 233385900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617742068
    },
    {
        "content": "<p>I'm done for today. If someone wants to look at this last bit, please go ahead</p>",
        "id": 233388509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617742957
    },
    {
        "content": "<p>This seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">metric.cauchy_seq_iff'.2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">ε</span> <span class=\"n\">εpos</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hd</span> <span class=\"k\">in</span> <span class=\"n\">H.tendsto_sum_nat.cauchy_seq</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">metric.cauchy_seq_iff'.1</span> <span class=\"n\">hd</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">N</span> <span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsum</span> <span class=\"o\">:=</span> <span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.dist_eq</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">sum_Ico_eq_sub</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hsum</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dist_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"n\">N</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">dist_le_Ico_sum_of_dist_le</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Ico</span> <span class=\"n\">N</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_abs_self</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">hsum</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">sign_cases_of_C_mul_pow_nonneg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist_nonneg.trans</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">C₀</span><span class=\"o\">,</span> <span class=\"n\">r₀</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">has_sum_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">has_sum.mul_left</span> <span class=\"n\">C</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">has_sum_geometric_of_lt_1</span> <span class=\"n\">r₀</span> <span class=\"n\">hr</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_seq</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">test</span> <span class=\"n\">_</span> <span class=\"n\">hu</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">test1</span> <span class=\"n\">hr</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The third lemma is  <code>cauchy_seq_of_le_geometric</code> for <code>pseudo_metric_space</code>. If we only need this lemma I think we can just add it, to avoid to do a quite long refactor in mathlib.</p>",
        "id": 233390201,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617743370
    },
    {
        "content": "<p>I just copy/paste from mathlib the lemmas needed to prove it</p>",
        "id": 233390303,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617743402
    },
    {
        "content": "<p>I pushed to the <code>semi_normed</code> branch this modification. The lemmas are in <code>for_mathlib/pseudo_metric.lean</code>. It should now compile...</p>",
        "id": 233396910,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617746089
    },
    {
        "content": "<p>No errors! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 233398637,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617746954
    },
    {
        "content": "<p>Fantastic!</p>",
        "id": 233429838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617769824
    },
    {
        "content": "<p>I merged this branch into master</p>",
        "id": 233430404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617770390
    },
    {
        "content": "<p>We can do the little cleanups later, when things like <a href=\"https://github.com/leanprover-community/mathlib/issues/7066\">#7066</a> are merged into mathlib</p>",
        "id": 233430453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617770414
    },
    {
        "content": "<p>I'm now trying to see if the project compiles when we generalise <code>polyhedral_lattice</code> to <code>semi_normed_group</code>.</p>",
        "id": 233431208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617771142
    },
    {
        "content": "<p>It looks like the proof of lem9.8 (combinatorial lemma) becomes a bit more complicated.</p>",
        "id": 233443573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617779872
    },
    {
        "content": "<p>We'll need to pass to the <code>separated_quotient</code> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>.</p>",
        "id": 233443633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617779892
    },
    {
        "content": "<p>Which might not be worth it. But if we keep <code>normed_group</code> in the defn of <code>polyhedral_lattice</code>, then we need to show that when we form the cosimplicial polyhedral lattice, all the quotients are by closed subgroups.</p>",
        "id": 233443700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617779940
    },
    {
        "content": "<p>This is of course math-trivial, because <code>normed_group_polyhedral_lattices</code> are discrete.</p>",
        "id": 233443732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617779961
    },
    {
        "content": "<p>But convincing Lean of that fact doesn't look like much fun.</p>",
        "id": 233443747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617779972
    },
    {
        "content": "<p>An algebraic compromise might be to require that all the (nonzero?) generators of the polyhedral norm actually have nonzero norm.</p>",
        "id": 233443957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617780079
    },
    {
        "content": "<p>This is math-equivalent to being a <code>normed_group</code>. But now we can just take the quotient as <code>semi_normed_group</code>.</p>",
        "id": 233444010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617780110
    },
    {
        "content": "<p>I don't exactly what we need in the definition of  <code>polyhedral_lattice</code>, but maybe the quotient by the closure will do it?</p>",
        "id": 233448814,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617782954
    },
    {
        "content": "<p>I think it will make proofs later on uglier.</p>",
        "id": 233450294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617783727
    },
    {
        "content": "<p>Because you would like to know that taking the closure didn't do anything.</p>",
        "id": 233450323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617783743
    },
    {
        "content": "<p>I finished this refactor, and pushed to master.</p>",
        "id": 233451689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617784535
    },
    {
        "content": "<p>I am trying to generalize <code>for_mathlib/normed_group_hom_completion.lean</code> to <code>semi_normed_group</code>, but someow it doesn't find the instance you added to  <code>for_mathlib/normed_group.lean</code>  (the PR is on the queue).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">completion.remove_me_soon</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">completion.remove_me_soon</span> <span class=\"n\">G</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">G</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So it seems to be something related to universes... and so something I don't understand <span aria-label=\"hurt\" class=\"emoji emoji-1f915\" role=\"img\" title=\"hurt\">:hurt:</span></p>",
        "id": 233469031,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617793816
    },
    {
        "content": "<p>I just used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">remove_me_soon</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(with <code>Type u</code> instead of <code>Type*</code>) and now it works.</p>",
        "id": 233472190,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617795666
    },
    {
        "content": "<p>The everlasting magic of the Universe...</p>",
        "id": 233472955,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617796126
    },
    {
        "content": "<p><code>src/for_mathlib/normed_group_hom_completion.lean</code> is now generalized to <code>semi_normed_group</code>. The first part of the proof of <code>normed_group_hom.ker_completion</code> (where we deal with the stupid case <code>C ≤ 0</code>, that is now a little less stupid) has now a lot of duplicate code... I don't know, probably there is a better proof.. or maybe we can just assume <code>0 ≤ C</code>.</p>",
        "id": 233499165,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617806313
    },
    {
        "content": "<p>This is in the <code>semi_normed</code> branch.</p>",
        "id": 233499194,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617806327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> since you proved it already, I would just leave it like it is for now</p>",
        "id": 233521151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617813089
    },
    {
        "content": "<p>But there shouldn't be any harm in assuming <code>0 \\le C</code>.</p>",
        "id": 233521177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617813102
    },
    {
        "content": "<p>I upgrade mathlib (<a href=\"https://github.com/leanprover-community/mathlib/issues/7066\">#7066</a> has been merged). There is some problem in  <code>toric/lem97.lean</code>... maybe <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>  wants to have a quick look? It doesn't seem anything serious</p>",
        "id": 233521694,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617813295
    },
    {
        "content": "<p>I will have a look immediately</p>",
        "id": 233525455,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617814739
    },
    {
        "content": "<p>It's in the branch <code>semi_normed</code></p>",
        "id": 233526535,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617815150
    },
    {
        "content": "<p>I can't find the branch. Is it part of the <code>lean-liquid</code> project?</p>",
        "id": 233527046,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617815352
    },
    {
        "content": "<p>Yes. You should probably do <code>git remote update origin --prune</code> to update the branch list</p>",
        "id": 233527297,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617815470
    },
    {
        "content": "<p>(I see that also in <code>master</code> the file <code>toric'/lem97.lean</code> does not compile at any rate...)</p>",
        "id": 233527309,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617815478
    },
    {
        "content": "<p>Found! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 233527360,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617815511
    },
    {
        "content": "<p>You also have to do <code>leanproject get-mathlib-cache</code>... and maybe also <code>leanproject get-cache</code> (I am not completely sure about the difference).</p>",
        "id": 233527738,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617815668
    },
    {
        "content": "<p>(it actually worked without it)</p>",
        "id": 233528812,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617816113
    },
    {
        "content": "<p>Ok, solved and pushed to <code>semi_normed</code>.</p>",
        "id": 233530838,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617816921
    },
    {
        "content": "<p>(I have actually seen that the same issue shows up in <code>master</code> as well; when are you going to merge the two branches?)</p>",
        "id": 233530909,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617816952
    },
    {
        "content": "<p>I think that it shows up for you in master because your VS Code uses the cached olean files from <code>semi_normed</code>. But the \"real\" master compiles without errors</p>",
        "id": 233533274,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617817873
    },
    {
        "content": "<p>If you checkout master and get the correct olean it should work (but maybe I have misunderstood how this works)</p>",
        "id": 233533470,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617817945
    },
    {
        "content": "<p>it could be, although I got the issue in <code>master</code> before being able to <code>checkout</code> to <code>semi_normed</code>. So the problem should be elsewhere.</p>",
        "id": 233533926,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617818116
    },
    {
        "content": "<p>I am trying to get the \"right\" <code>olean</code> though, let's see.</p>",
        "id": 233533967,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617818131
    },
    {
        "content": "<p>Nope, it was still broken. I ended up making the same small modification in  <code>master</code> and <code>pushing</code> there as well.</p>",
        "id": 233539682,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617820440
    },
    {
        "content": "<p>Ah, I just merged into master <code>semi_normed</code>!</p>",
        "id": 233539806,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617820465
    },
    {
        "content": "<p>Maybe it just realized that the two modification are the same and so everything works automagically.</p>",
        "id": 233539884,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617820503
    },
    {
        "content": "<p>I think so! After all, I copied-pasted, so if it did not realize they are equal, there is something autotragic going on...</p>",
        "id": 233539989,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617820561
    },
    {
        "content": "<p>In any case  I erased the part that was in <a href=\"https://github.com/leanprover-community/mathlib/issues/7066\">#7066</a>, and now I have the impression that everything is for <code>semi_normed_group</code>.</p>\n<p>I lost a little bit the big picture: <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> is there something else to do related to <code>semi_normed_group</code>?</p>",
        "id": 233540262,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617820674
    },
    {
        "content": "<p>I think almost everything is now done</p>",
        "id": 233540575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617820798
    },
    {
        "content": "<p>We might still find some small bits... but we can fix them on the go</p>",
        "id": 233540648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617820811
    },
    {
        "content": "<p>Thanks again for the massive refactor!</p>",
        "id": 233540664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617820819
    }
]