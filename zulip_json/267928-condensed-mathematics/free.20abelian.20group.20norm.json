[
    {
        "content": "<p>There is a map <code>free_abelian_group X → ℕ</code> that sends <code>∑ a_i [x_i]</code> to <code>∑ |a_i|</code>.</p>",
        "id": 288641761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657098104
    },
    {
        "content": "<p>We need a bunch of properties of this norm map. I pushed a bunch of self-contained sorries to <code>free_abelian_exact.lean</code>.</p>",
        "id": 288641842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657098134
    },
    {
        "content": "<p>Things like <code>norm_add : (a+b).norm ≤ a.norm + b.norm</code></p>",
        "id": 288641883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657098157
    },
    {
        "content": "<p>I will work on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">norm_eq_succ_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a.norm</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">of</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">b.norm</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 288641938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657098209
    },
    {
        "content": "<p>The right to left implication is not true (if <code>b = - of x</code>, for instance...)</p>",
        "id": 288642414,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1657098508
    },
    {
        "content": "<p>Yes, I just realized.</p>",
        "id": 288642774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657098734
    },
    {
        "content": "<p>Luckily I don't need it <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 288642781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657098740
    },
    {
        "content": "<p>Ok, the left-to-right implication is done</p>",
        "id": 288647000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657101468
    },
    {
        "content": "<p>I am taking on the first two <code>norm_of</code> and <code>norm_add</code></p>",
        "id": 288648860,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657102611
    },
    {
        "content": "<p>I wonder if this is an argument towards having an API for nat-valued norms, since <span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> wanted one for hamming codes too.</p>",
        "id": 288672124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657115123
    },
    {
        "content": "<p>It could be, in the meanwhile for what concerns this very file I have almost killed all sorry's.</p>",
        "id": 288672295,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657115166
    },
    {
        "content": "<p>Either that, or the norm in question ought to be defined as a real instead</p>",
        "id": 288672671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657115289
    },
    {
        "content": "<p>(I mean this as a suggestion for a follow-up for reintegration into mathlib, not something LTE needs to care about right now)</p>",
        "id": 288672729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657115318
    },
    {
        "content": "<p>I need it <code>ℕ</code>-valued because I want to do induction on the norm</p>",
        "id": 288672922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657115382
    },
    {
        "content": "<p>You could prove the norm is equal to a casted nat and do induction on that</p>",
        "id": 288672960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657115399
    },
    {
        "content": "<p>But arguably it would be cleaner to just allow arbitrary-typed norms, since then the norm on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_abelian_group\">docs#free_abelian_group</a> would just be a special case of an L1-norm on finsupp.</p>",
        "id": 288673234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657115500
    },
    {
        "content": "<p>OK, I am done, the file is sorry-free.</p>",
        "id": 288674379,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657115931
    },
    {
        "content": "<p>Yeah, nat-valued norms are useful in compsci stuff.</p>",
        "id": 288681538,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657118918
    },
    {
        "content": "<p>The difficulty would be, like, presumably you'd only want to allow for one has_norm instance for a type, but then how do you signify what its value type is?</p>",
        "id": 288681783,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657119009
    },
    {
        "content": "<p><code>has_norm the_return_type the_normed_type</code>?</p>",
        "id": 288696964,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657125391
    },
    {
        "content": "<p>Sure, but what will the type of <code>norm x</code> be? Or do you want the return type to be an <code>out_param</code>? Or do you want to write <code>norm ℝ x</code> and <code>norm ℕ x</code>, etc?</p>",
        "id": 288697335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657125596
    },
    {
        "content": "<p>We already have this problem for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner\">docs#inner</a>, right? And the answer there is \"localized notation\".</p>",
        "id": 288699971,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657126800
    },
    {
        "content": "<p>Or a global notation for the real-valued norm (which is the right norm in 99% of the cases), and specialized notation like we have for <code>nnnorm</code>.</p>",
        "id": 288702400,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1657127889
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 288705386,
        "sender_full_name": "Joël Riou",
        "timestamp": 1657129353
    },
    {
        "content": "<p>I think <code>norm ℝ x</code> is reasonable, keeping the existing notation for the norm and nnnorm special cases</p>",
        "id": 288708737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657130922
    },
    {
        "content": "<p>I think we might end up in a nasty diamond mess if we're not careful though</p>",
        "id": 288708765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657130943
    },
    {
        "content": "<p>Every real-norm induces an nnreal-norm, but the nnreal-norm induced on the product won't end up defeq to the one induced from the real-norm on the product.</p>",
        "id": 288708883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657131004
    },
    {
        "content": "<p>Same for nat-norms inducing both other norms</p>",
        "id": 288708916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657131021
    },
    {
        "content": "<p>You could use something a bit like that you use for linear maps, like, ||.||[N]</p>",
        "id": 288783847,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1657186799
    }
]