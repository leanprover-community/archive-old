[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Top_to_Condensed</span> <span class=\"o\">:</span> <span class=\"n\">Top</span> <span class=\"bp\">⥤</span> <span class=\"n\">CondensedSet</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is now sorry-free (modulo some general stuff about the condensed sheaf condition) in <code>condensed/top_comparison.lean</code>. Still missing is the proof that this is faithful, in case anyone wants to take a look.</p>",
        "id": 267218186,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641577152
    },
    {
        "content": "<p>This was easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The condensed abelian group associated with a topological abelian group -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">of_top_ab</span> <span class=\"o\">:</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">of_top_ab.presheaf</span> <span class=\"n\">A</span> <span class=\"bp\">⋙</span> <span class=\"n\">Ab.ulift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">category_theory.presheaf.is_sheaf_iff_is_sheaf_forget</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">Ab</span><span class=\"o\">),</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">Top.of</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">presheaf.is_sheaf</span> <span class=\"n\">_</span> <span class=\"n\">B.to_Condensed.val</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">B.to_Condensed.cond</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 271318352,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644428729
    },
    {
        "content": "<p>Was that the <code>sorry</code> that was advertised as <code>-- this one will be hard</code>?</p>",
        "id": 271318594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644428799
    },
    {
        "content": "<p>No, that's the next one ;)</p>",
        "id": 271318616,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644428806
    },
    {
        "content": "<p>Oooh, good luck!!</p>",
        "id": 271318638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644428814
    },
    {
        "content": "<p>Yeah, this next one might require additional <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span></p>",
        "id": 271319042,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644428953
    },
    {
        "content": "<p>done</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">to_Condensed</span> <span class=\"o\">:</span> <span class=\"n\">CompHausFiltPseuNormGrp₁.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Presheaf</span> <span class=\"n\">A</span> <span class=\"bp\">⋙</span> <span class=\"n\">Ab.ulift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n    <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"n\">Presheaf_comp_ulift_is_sheaf</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">whisker_right</span> <span class=\"o\">(</span><span class=\"n\">Presheaf.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>There is some golfing room with this proof, if anyone wants to take a look.</p>",
        "id": 271327454,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644432111
    },
    {
        "content": "<p>What did you put into your coffee <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> ?</p>",
        "id": 271328048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644432353
    },
    {
        "content": "<p>I still have 1/2 a cup left.</p>",
        "id": 271328127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644432372
    },
    {
        "content": "<p>But that has to be reserved for my office hours...</p>",
        "id": 271328154,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644432388
    },
    {
        "content": "<p>I suppose we will need the functor from <code>CompHausFiltPseuNormGrp</code> (without the 1) as well, but the proof of the sheaf condition should be identical. So once we have the underlying presheaf, we could just reuse <code>Presheaf_comp_ulift_is_sheaf</code>.</p>",
        "id": 271328863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644432689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Topological.20spaces/near/271328863\">said</a>:</p>\n<blockquote>\n<p>I suppose we will need the functor from <code>CompHausFiltPseuNormGrp</code> (without the 1) as well, but the proof of the sheaf condition should be identical. So once we have the underlying presheaf, we could just reuse <code>Presheaf_comp_ulift_is_sheaf</code>.</p>\n</blockquote>\n<p>I just did this, so now we have the following two defs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">CompHausFiltPseuNormGrp.to_Condensed</span> <span class=\"o\">:</span> <span class=\"n\">CompHausFiltPseuNormGrp.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Presheaf</span> <span class=\"n\">A</span> <span class=\"bp\">⋙</span> <span class=\"n\">Ab.ulift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n    <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"n\">Presheaf_comp_ulift_is_sheaf</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">whisker_right</span> <span class=\"o\">(</span><span class=\"n\">Presheaf.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CompHausFiltPseuNormGrp₁.to_Condensed</span> <span class=\"o\">:</span>\n  <span class=\"n\">CompHausFiltPseuNormGrp₁.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">CompHausFiltPseuNormGrp₁.enlarging_functor</span> <span class=\"bp\">⋙</span> <span class=\"n\">CompHausFiltPseuNormGrp.to_Condensed</span>\n</code></pre></div>\n<p>This should take care of the node <code>CHPNG-to-cond</code> on the dep. graph.</p>",
        "id": 271619286,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644604821
    },
    {
        "content": "<p>I'll update it</p>",
        "id": 271622565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644606323
    },
    {
        "content": "<p>ooh, you already did. So I added a <code>\\leanok</code></p>",
        "id": 271622698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644606375
    }
]