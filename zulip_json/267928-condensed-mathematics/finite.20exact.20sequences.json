[
    {
        "content": "<p>The following code compiles, but it seems like we can maybe improve the UX a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.homology.exact</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_images</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_kernels</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">exact_seq</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">},</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span>  <span class=\"o\">:</span> <span class=\"n\">exact_seq</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact_seq</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgL</span> <span class=\"o\">:</span> <span class=\"n\">exact_seq</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)),</span>\n              <span class=\"n\">exact_seq</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 255346876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632895549
    },
    {
        "content": "<p>I really don't like the underscores in <code>(⟨_,_,f⟩ :: ⟨_,_,g⟩ :: L)</code></p>",
        "id": 255346886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632895560
    },
    {
        "content": "<p>Ideally, we would have a way to write <code>exact_seq [f, g, h, f', g', h']</code> with minimal extra decoration to make it typecheck.</p>",
        "id": 255346968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632895604
    },
    {
        "content": "<p>The definition <code>exact_seq</code> doesn't have to make sure that the sources and targets of the morphisms line up.</p>",
        "id": 255347005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632895630
    },
    {
        "content": "<p>We could use arrow categories, maybe? But I fear that this mean we need to write <code>arrow.mk</code> all over the place. Which is also bad UX.</p>",
        "id": 255347027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632895657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have a suggestion how to magically improve our lives here?</p>",
        "id": 255347762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632896176
    },
    {
        "content": "<p>Ooh, wow! <code>arrow.mk</code> is available as a <code>coe</code>! Let me try that.</p>",
        "id": 255348481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632896724
    },
    {
        "content": "<p>Sweet! This looks pretty nice, I think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">exact_seq</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">arrow</span> <span class=\"bp\">𝒞</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span>  <span class=\"o\">:</span> <span class=\"n\">exact_seq</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact_seq</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgL</span> <span class=\"o\">:</span> <span class=\"n\">exact_seq</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)),</span>\n              <span class=\"n\">exact_seq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exact_iff_exact_seq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"n\">exact_seq</span> <span class=\"bp\">𝒞</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">exact_seq.cons</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exact_seq.single</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hfg</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span> <span class=\"n\">exact</span> <span class=\"n\">hfg</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255348991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632897130
    },
    {
        "content": "<p>I now have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.homology.exact</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Returns the sublist of `L` starting at index `m` of length `n`</span>\n<span class=\"sd\">(or shorter, if `L` is too short). -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">extract</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">L.drop</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">take</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">extract_nil</span> <span class=\"o\">:</span> <span class=\"o\">[]</span><span class=\"bp\">.</span><span class=\"n\">extract</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">extract_zero_right</span> <span class=\"o\">:</span> <span class=\"n\">L.extract</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">extract_cons_succ_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">extract</span> <span class=\"n\">m.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">L.extract</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">extract</span> <span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝒞</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_images</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_kernels</span> <span class=\"bp\">𝒞</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A sequence `[f, g, ...]` of morphisms is exact if the pair `(f,g)` is exact,</span>\n<span class=\"sd\">and the sequence `[g, ...]` is exact.</span>\n\n<span class=\"sd\">Recall that the pair `(f,g)` is exact if `f ≫ g = 0`</span>\n<span class=\"sd\">and the natural map from the image of `f` to the kernel of `g` is an epimorphism</span>\n<span class=\"sd\">(equivalently, in abelian categories: isomorphism). -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">exact_seq</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">arrow</span> <span class=\"bp\">𝒞</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>    <span class=\"o\">:</span> <span class=\"n\">exact_seq</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact_seq</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgL</span> <span class=\"o\">:</span> <span class=\"n\">exact_seq</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)),</span>\n              <span class=\"n\">exact_seq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">𝒞</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exact_iff_exact_seq</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"n\">exact_seq</span> <span class=\"bp\">𝒞</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">exact_seq.cons</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exact_seq.single</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hfg</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span> <span class=\"n\">exact</span> <span class=\"n\">hfg</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">exact_seq</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">extract</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">arrow</span> <span class=\"bp\">𝒞</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">exact_seq</span> <span class=\"bp\">𝒞</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">exact_seq</span> <span class=\"bp\">𝒞</span> <span class=\"o\">(</span><span class=\"n\">L.extract</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">nil</span><span class=\"o\">)</span>               <span class=\"n\">m</span>     <span class=\"n\">n</span>     <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">list.extract_nil</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nil</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">f</span><span class=\"o\">)</span>          <span class=\"n\">m</span>     <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">f</span><span class=\"o\">)</span>          <span class=\"mi\">0</span>     <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">single</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">f</span><span class=\"o\">)</span>          <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">nil</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hfg</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span>     <span class=\"o\">:=</span> <span class=\"n\">extract</span> <span class=\"n\">hL</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hfg</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hfg</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"n\">single</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hfg</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hfg</span> <span class=\"o\">(</span><span class=\"n\">L.take</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">extract</span> <span class=\"n\">hL</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">exact_seq</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 255356412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632901672
    },
    {
        "content": "<p>I hope that we can use this to make talking about pretty explicit finite exact sequences a bit smoother.</p>",
        "id": 255356523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632901726
    },
    {
        "content": "<p>Beautiful!</p>",
        "id": 255377932,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632912829
    },
    {
        "content": "<p>Uh oh... I now need <code>exact_seq.unop</code> which takes an exact sequence in <code>Cᵒᵖ</code> and returns the corresponding exact sequence in <code>C</code>.</p>",
        "id": 255459678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632943779
    },
    {
        "content": "<p>I don't think we have anything like <code>exact f g ↔ exact g.op f.op</code> so far <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 255459872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632943835
    },
    {
        "content": "<p>Uggh, we don't even know that the opposite of an abelian category is abelian <span aria-label=\"crying cat\" class=\"emoji emoji-1f63f\" role=\"img\" title=\"crying cat\">:crying_cat:</span></p>",
        "id": 255461457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632944486
    },
    {
        "content": "<p>Oh gosh!</p>",
        "id": 255461928,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632944674
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/abelian/opposite.html#category_theory.opposite.abelian\">https://leanprover-community.github.io/mathlib_docs/category_theory/abelian/opposite.html#category_theory.opposite.abelian</a></p>",
        "id": 255462277,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632944819
    },
    {
        "content": "<p>Isn't it what you want?</p>",
        "id": 255462439,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632944881
    },
    {
        "content": "<p>Nothing an extra import can't fix <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 255462490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632944888
    },
    {
        "content": "<p>Next question: can we go from <code>arrow Cᵒᵖ</code> to <code>arrow C</code> already?</p>",
        "id": 255462566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632944928
    },
    {
        "content": "<p>Do you mean the arrow category or simply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.hom.op\">docs#quiver.hom.op</a>?</p>",
        "id": 255462902,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632945043
    },
    {
        "content": "<p>And actually, with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.kernel_op_op\">docs#category_theory.kernel_op_op</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.cokernel_op_op\">docs#category_theory.cokernel_op_op</a> is it really hard to show that the opposite of a SES is a SES?</p>",
        "id": 255463136,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632945126
    },
    {
        "content": "<p>I meant the actual <code>arrow</code> category.</p>",
        "id": 255464008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632945466
    },
    {
        "content": "<p>We'll need something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_op</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">arrow</span> <span class=\"bp\">𝒜</span><span class=\"o\">)},</span> <span class=\"n\">exact_seq</span> <span class=\"bp\">𝒜ᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">L.reverse.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"n\">exact_seq</span> <span class=\"bp\">𝒜</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 255464297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632945583
    },
    {
        "content": "<p>I see... I am now finishing to work on the surjectivity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> and coming up with the SES we discussed the other day. But I might try to have a look when I am fed up with real numbers...</p>",
        "id": 255464542,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632945643
    },
    {
        "content": "<p>Although I guess that someone else (you?) will be done before I even start ... <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span></p>",
        "id": 255464625,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632945680
    },
    {
        "content": "<p>I just pushed that <code>sorry</code>. It's in <code>for_mathlib/exact_seq</code></p>",
        "id": 255464639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632945686
    },
    {
        "content": "<p>No, I'm done for the day</p>",
        "id": 255464665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632945694
    },
    {
        "content": "<p>You mean you are finally having breakfast, now? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 255464710,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632945709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/finite.20exact.20sequences/near/255462566\">said</a>:</p>\n<blockquote>\n<p>Next question: can we go from <code>arrow Cᵒᵖ</code> to <code>arrow C</code> already?</p>\n</blockquote>\n<p>I think we might have a general thing about comma categories?</p>",
        "id": 255467189,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632946717
    }
]