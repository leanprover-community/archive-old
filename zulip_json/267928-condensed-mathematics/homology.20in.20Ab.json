[
    {
        "content": "<p>Here's a stupid little lemma that we'll need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- somewhere in `src/system_of_complexes/shift_sub_id.lean`</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.category_theory.homology.π_eq_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Ab</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">kernel_subobject</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">arrow</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">homology.π</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281477036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651861663
    },
    {
        "content": "<p>It's a bit annoying, since <code>homology</code> is defined using category theory, and so it's not defeq to a group quotient.</p>",
        "id": 281477112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651861685
    },
    {
        "content": "<p>This is probably easier in <code>Module</code> where there is as bit more API. I'd try it there first then port to <code>Ab</code>. I think I have an old branch that does similar things, I'll try to recover it.</p>",
        "id": 281489989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651868847
    },
    {
        "content": "<p>Ooh, I just remembered that we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">AddCommGroup.homology_iso</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">homology</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">≅</span> <span class=\"n\">AddCommGroup.of</span> <span class=\"o\">(</span><span class=\"n\">g.ker</span> <span class=\"bp\">⧸</span> <span class=\"o\">(</span><span class=\"n\">f.range.comap</span> <span class=\"n\">g.ker.subtype</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>in <code>derived/example.lean</code></p>",
        "id": 281517417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651896164
    }
]