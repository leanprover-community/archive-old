[
    {
        "content": "<p>I started the work to refactor LTE to get rid of <code>bound_by</code>, in branch <code>byebye-bound_by</code>. I started working on a random place where it was used, just to have an idea about what I have to do, and I chose <code>double_complex.d_one_norm_noninc</code> in <code>src/thm95/double_complex.lean</code>.</p>\n<p>Can someone have a look of what I've done, just to check that is reasonable? <a href=\"https://github.com/leanprover-community/lean-liquid/commit/066b4543e5334f3fe7c0e8932829e45489cb5bdc\">This</a> is the relevant commit. To start with, I decided to keep <code>norm_noninc</code>, adding <code>norm_noninc_iff_norm_le_one</code>. Of course sooner or later we should also get rid of <code>norm_noninc</code>.</p>",
        "id": 241927858,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623162438
    },
    {
        "content": "<p>Nice branch name <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <br>\nMaybe <code>norm_noninc</code> can stay? I don't know. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  what do you think? With <code>norm_noninc</code> you don't have the <code>1 * _</code> appearing that you would otherwise.</p>",
        "id": 241928629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623162716
    },
    {
        "content": "<p>Ah yes, that's why we introduce it!</p>",
        "id": 241929722,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623163131
    },
    {
        "content": "<p>I understand the <code>1 * _</code> can be annoying if it comes up a lot. I also understand this special case has nicer composition behavior so maybe we need some category using this as morphisms.</p>",
        "id": 241930843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623163539
    },
    {
        "content": "<p>I think having <code>bound_by</code> duplicating the operator norm stuff is ridiculous, but the <code>norm_noninc</code> special case may be worth the trouble.</p>",
        "id": 241930993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623163578
    },
    {
        "content": "<p>We have the category with non increasing morphisms in mathlib</p>",
        "id": 241931546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623163765
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/SemiNormedGroup₁\">docs#SemiNormedGroup₁</a></p>",
        "id": 241931819,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623163861
    },
    {
        "content": "<p>My inclination is still that SemiNormedGroup should be considered as something like a seminormed category a la </p>\n<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/semi-normed-category/src/for_mathlib/seminormed_category/basic.lean\">https://github.com/leanprover-community/lean-liquid/blob/semi-normed-category/src/for_mathlib/seminormed_category/basic.lean</a></p>\n<p>along with the notion of bounded (co)limits, or something similar. But this is probably too experimental even for the LTexperiment…</p>",
        "id": 241933403,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623164411
    },
    {
        "content": "<p>OK, I will keep <code>norm_noninc</code></p>",
        "id": 241934975,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623164943
    },
    {
        "content": "<p>I will start merging my branch to master if the build succeed. <code>bound_by</code> is used a lot, but replacing it with the norm condition it's not difficult.</p>",
        "id": 241962845,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623176090
    },
    {
        "content": "<p>LTE is <code>normed_group_hom.bound_by</code> free. (Note that if you search <code>bound_by</code> you still get a lot of results, some of them are in the <code>for_mathlib</code> folder and are useless, and the others refer to different notion of <code>bound_by</code>).</p>",
        "id": 242002356,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623196503
    },
    {
        "content": "<p>If someone has some time I noticed two simple cleanups:</p>\n<ul>\n<li>all the stuff about completion of <code>normed_group</code> in <code>src/locally_constant/Vhat.lean</code> are already in the <code>for_mathlib</code> folder.</li>\n<li><code>src/prop_92/concrete.lean</code> contains some lemmas about geometric series that I think are in mathlib,  or at least should go to to mathlib.</li>\n</ul>\n<p>I can do them tomorrow if nobody wants to do them.</p>",
        "id": 242002583,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623196734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Great! Thanks a lot for doing this</p>",
        "id": 242016524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623212448
    },
    {
        "content": "<p>fyi: I bumped mathlib</p>",
        "id": 242023227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623220921
    },
    {
        "content": "<p>I am taking care of <code>src/locally_constant/Vhat.lean</code>.</p>",
        "id": 242028048,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623225111
    },
    {
        "content": "<p>I'll work on geometric series now</p>",
        "id": 242029583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623226085
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/7858\">#7858</a>. This takes care of <code>specific_limits</code>, <code>pseudo_metric</code> and part of <code>normed_group</code></p>",
        "id": 242048214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623237006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> So what is the status with <code>bound_by</code>? I guess we can now rip the defn out of mathlib?</p>",
        "id": 242056950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623241796
    },
    {
        "content": "<p>Yes, it is in my <code>todo</code> list</p>",
        "id": 242057055,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623241839
    },
    {
        "content": "<p><code>bound_by</code> has been removed from mathlib. This shouldn't cause any problem in the next mathlib bump :)</p>",
        "id": 242318114,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623402198
    },
    {
        "content": "<p>Bye bye <code>bound_by</code>!</p>",
        "id": 242340348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623416071
    },
    {
        "content": "<p>I'll try bumping mathlib now</p>",
        "id": 242341440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623416620
    },
    {
        "content": "<p>Done. Thanks <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, that went really smooth!</p>",
        "id": 242343623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623417609
    },
    {
        "content": "<p>I will see next week what can I do about <code>has_nnnorm</code>.</p>",
        "id": 242344801,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623418174
    },
    {
        "content": "<p>Creating the class is of course very easy, but I guess that using it everywhere in LTE requires a little work</p>",
        "id": 242344925,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623418216
    },
    {
        "content": "<p>Mathlib might be even easier. Not sure how much <code>nnnorm</code> is used there <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 242345163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623418336
    },
    {
        "content": "<p>What is a reasonale notation for <code>nnnorm</code>?  Lean doesn't like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_nnnorm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nnnorm</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_nnnorm</span> <span class=\"o\">(</span><span class=\"n\">nnnorm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥₊`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>I got tons of errors in <code>analys/normed_space/basic</code> if I add these lines... I think this is because with this notation when Lean sees <code>∥x∥</code> it gets confused.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥₊`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>works, but it seems quite unnatural...</p>",
        "id": 243008239,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623932064
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7986\">#7986</a></p>",
        "id": 243149873,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624017323
    }
]