[
    {
        "content": "<p>I've been working on proving that filtered colimits of condensed sets can be computed by taking colimits pointwise (i.e. no sheafification required) in the file <code>condensed/filtered_colimits.lean</code>. This file now has 10 sorry's, which are essentially about checking that some diagrams commute (all sorry's are props).</p>",
        "id": 278985005,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649952107
    },
    {
        "content": "<p>These sorrys all lead to the following theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_sheaf_colimit_presheaf</span> <span class=\"o\">:</span>\n  <span class=\"n\">presheaf.is_sheaf</span> <span class=\"n\">proetale_topology</span> <span class=\"o\">(</span><span class=\"n\">colimit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Sheaf_to_presheaf</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 278985164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649952181
    },
    {
        "content": "<p>And finally it all culminates in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">filtered_cocone</span> <span class=\"o\">:</span> <span class=\"n\">cocone</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">colimit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Sheaf_to_presheaf</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">is_sheaf_colimit_presheaf</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">ι</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">Sheaf.hom.mk</span> <span class=\"bp\">$</span> <span class=\"n\">colimit.ι</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Sheaf_to_presheaf</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">filtered_cocone_is_colimit</span> <span class=\"o\">:</span> <span class=\"n\">is_colimit</span> <span class=\"o\">(</span><span class=\"n\">filtered_cocone</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">desc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Sheaf.hom.mk</span> <span class=\"bp\">$</span> <span class=\"n\">colimit.desc</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Sheaf_to_presheaf</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">Sheaf_to_presheaf</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_cocone</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"n\">fac'</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"n\">uniq'</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 278986394,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649952755
    },
    {
        "content": "<p>Any help with the sorrys in this fiile would be much appreciated!</p>",
        "id": 278986528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649952822
    },
    {
        "content": "<p>There are now a few additional sorties at the bottom of <code>condensed/ab.lean</code>.</p>",
        "id": 279032580,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649977768
    },
    {
        "content": "<p>I tried looking at the first one on the commute home and its statement was over a page long! I figured out what the statement of the lemma itself said but then realised I'd just missed my stop :-)</p>",
        "id": 279038190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649983035
    },
    {
        "content": "<p>Oops, your Lean addiction is starting to derail your life in serious ways <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 279054699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650005699
    },
    {
        "content": "<p><code>condensed/filtered_colimits.lean</code> is sorry-free.<br>\nAs a bonus, we now also have the following sorry-free</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Condensed_Ab_to_CondensedSet_preserves_limits_of_shape_of_filtered</span> <span class=\"o\">:</span>\n  <span class=\"n\">preserves_colimits_of_shape</span> <span class=\"n\">J</span> <span class=\"n\">Condensed_Ab_to_CondensedSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(the forgetful functor from condensed abelian groups to condensed sets preserves filtered colimits)</p>",
        "id": 279093442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650038170
    },
    {
        "content": "<p>This is so cool that we can do this stuff. This sort of thing is a real stress test for the category theory library. And the final theorem about the ext groups will be a stress test for the homological algebra library.</p>",
        "id": 279094443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650038732
    },
    {
        "content": "<p>We see filtered colimits in this work -- do cofiltered limits ever show up naturally?</p>",
        "id": 279094592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650038834
    },
    {
        "content": "<p>See the bottom of <code>condensed/ab</code> :)</p>",
        "id": 279094642,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650038873
    },
    {
        "content": "<p>They're in some sense the main type of colimit we consider: It's a colimit of condensed sets inddexed by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\geq 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9341em;vertical-align:-0.2452em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 279094700,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650038898
    },
    {
        "content": "<p>Oops, I misrread your cofiltered limits as filtered colimits.</p>",
        "id": 279094753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650038933
    },
    {
        "content": "<p>For <em>all</em> limits, we already know that the forgetful functor to condensed sets preserves those by general nonsense (since it's a right adjoint)</p>",
        "id": 279094817,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650038973
    },
    {
        "content": "<p>Cool! Another todo that can be ticked off!</p>",
        "id": 279094923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650039032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Filtered.20colimits.20of.20condensed.20sets/near/279094443\">said</a>:</p>\n<blockquote>\n<p>This is so cool that we can do this stuff. This sort of thing is a real stress test for the category theory library. And the final theorem about the ext groups will be a stress test for the homological algebra library.</p>\n</blockquote>\n<p>I must say that this was not as smooth as I would have liked.<br>\nMost of the proofs here involved using the fact that some functor preserves colimits, but the diagrams were essentially alwasy (d)simplified, so rewriting with <code>is_colimit.fac</code> or whatever almost never worked. I had to manually do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_colimit_of_preserves</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fac</span> <span class=\"n\">_</span> <span class=\"n\">baz</span><span class=\"o\">,</span>\n<span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">slice_lhs</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>about 37 times.<br>\nIt's not that bad, but I wish the automation could somehow do this for us.</p>",
        "id": 279095359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650039297
    }
]