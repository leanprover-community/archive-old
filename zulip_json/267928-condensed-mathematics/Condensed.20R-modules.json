[
    {
        "content": "<p>We'll need to work with Ext-groups in the category of condensed <code>ℤ[T⁻¹]</code>-modules. So if we start attacking the sorries that show that <code>Condensed Ab</code> is an abelian category with enough projectives, we should try to do it in the generality that also covers this case.</p>",
        "id": 256473210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633549826
    },
    {
        "content": "<p>with the way our universes are set up right now, does <code>Condensed Ab</code> have enough projectives?</p>",
        "id": 256595489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633619895
    },
    {
        "content": "<p>Maybe not. We really need to sort out those universes. I'll try to think about this as soon as I have gotten other urgent tasks off my todolist.</p>",
        "id": 256595754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633619992
    },
    {
        "content": "<p>The universe parameters are <code>Condensed Ab.{u+1} : Type (u+2)</code> and it has a <code>category.{u+1}</code> instance. If I understand the argument from <code>condensed.pdf</code> correctly, we would have to take a direct sum of projectives indexed by <code>J : Type (u+2)</code> to obtain a projective presentation of some random object <code>X : Condensed Ab.{u+1}</code>.</p>",
        "id": 256595765,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633619996
    },
    {
        "content": "<p>I've not been following because I'm in teaching hell for the next three and a bit weeks. Is the issue that we actually need to do all this careful colimits over certain large(ish) cardinals nonsense or is it something else?</p>",
        "id": 256654260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633642736
    },
    {
        "content": "<p>The way we have (co)limits set up is that when <code>C : Type u</code> is a <code>category.{v} C</code>, we can speak about (co)limits of functors <code>J</code> to <code>C</code> where <code>J : Type v</code> is a small category. </p>\n<p>In this case, we have <code>Condensed Ab.{u+1} : Type (u+2)</code> is a <code>category.{u+1}</code>, which means we can a priori only take colimits along diagrams indexed by small categories <code>J : Type (u+1)</code>. So if we need to take a direct sum indexed by <code>J : Type (u+2)</code>, then we're out of luck.</p>\n<p>The good news is that the objects we're reallly interested in turn out to be sheaves whose associated presheaf is essentially a functor from <code>Profinite.{u}</code> to <code>Ab.{u}</code>, but needs to be promoted via some ulift-like constructions to an object in <code>Condensed Ab.{u+1}</code>, so the direct sums we need to take to show that <em>these particilar objects</em> have a projective resolution are sufficiently small.</p>",
        "id": 256672992,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633654494
    },
    {
        "content": "<p>Of course, I could just be misunderstanding the general argument, and it's possible we don't need to take a large direct sum to show that <code>Condensed Ab.{u+1}</code> has enough projectives</p>",
        "id": 256673098,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633654567
    },
    {
        "content": "<p>My math understanding is that <code>Condensed Ab.{u+1}</code> ought to be functors from <code>Profinite.{u}</code>to <code>Ab.{u+1}</code>, and then the index set <code>J</code> that appears will be, for a presheaf <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, the disjoint union over all isomorphism classes of objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> of <code>Profinite.{u}</code> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>. Now in ZFC universes, this disjoint union still lies in the <code>u+1</code> universe.</p>\n<p>But what you say above indicates that this is also true, as long as the index set of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>'s is still in universe <code>u</code>. Well, it isn't quite -- it's a bit larger, but still much smaller than <code>u+1</code> in terms of ZFC universes.</p>\n<p>So maybe that it helps to take instead functors from <code>Profinite.{u}</code> to <code>Ab.{u+2}</code>? Then I'm pretty sure <code>Profinite.{u}</code> lies in <code>Type.{u+1}</code>, so that disjoint union of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>'s above should lie in <code>Type.{u+2}</code>, and this should be good enough.</p>",
        "id": 256690530,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1633670868
    },
    {
        "content": "<p>Hmm, that could an interesting \"hack\" to solve it. (-;</p>",
        "id": 256692061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633672237
    },
    {
        "content": "<p>I don't know why I thought the index set would be in <code>u+2</code> (I think I had in mind to quantify over subobjects or something), but this indeed works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.category.Profinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Group</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}),</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"c1\">--Σ (S : Profinite), ↥(F.obj (opposite.op S)) : Type (u+1)</span>\n</code></pre></div>\n<p>Sorry for the noise. We will have enough projectives :)</p>",
        "id": 256737219,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633698726
    }
]