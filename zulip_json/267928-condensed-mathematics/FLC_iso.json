[
    {
        "content": "<p>Could someone please speed up <code>FLC_iso</code> in <code>src/prop819.lean</code>? It's currently timing out on some peoples hardware</p>",
        "id": 241562866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622825227
    },
    {
        "content": "<p>I'll have a look</p>",
        "id": 241563365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622825468
    },
    {
        "content": "<p>I can work on it later too if it's still a problem (since I defined it in the first place... <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>)</p>",
        "id": 241565415,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622826315
    },
    {
        "content": "<p>I get <code>elaboration of FLC_iso took 30.4s</code> on <code>master</code> but I'm beginning to make progress.</p>",
        "id": 241565873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622826491
    },
    {
        "content": "<p>IIRC the main slowdown is the <code>dsimp [FLC_iso._match_1]</code> in the first line of the proof.</p>",
        "id": 241566003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622826564
    },
    {
        "content": "<p>Yes</p>",
        "id": 241566020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622826572
    },
    {
        "content": "<p><code>dsimp only [FLC_iso._match_1]</code> kills one of the two goals really quickly, but doesn't make progress with the other, even though it's what <code>squeeze_dsimp</code> is reporting.</p>",
        "id": 241566120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622826608
    },
    {
        "content": "<p><code>squeeze_dsimp</code> is rarely helpful, I've found</p>",
        "id": 241566207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622826670
    },
    {
        "content": "<p>Is it faster with <code>change</code> rather than <code>dsimp</code>?</p>",
        "id": 241566541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622826844
    },
    {
        "content": "<p>Rather surprisingly, changing your non-terminal <code>tac1; tac2; tac3; dsimp [foo]</code>(which changes 1 goal to 4 to 2 to 2 to 1) to a logically equivalent thing with fewer semicolons has immediately pulled the runtime down from 30 seconds to 6 seconds. This is very odd.</p>",
        "id": 241566559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622826853
    },
    {
        "content": "<p>Hmmm... Maybe it's because the single dsimp is looking at lemmas applicable to any of the branches created by the semicolons? I don't really know how dsimp works...</p>",
        "id": 241567024,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622827101
    },
    {
        "content": "<p>Hmm I think I've misunderstood some output. semicolons are confusing :-/</p>",
        "id": 241567240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622827207
    },
    {
        "content": "<p>It's still no faster but I've got rid of the evil <code>dsimp [FLC_iso._match_1]</code></p>",
        "id": 241569519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622828291
    },
    {
        "content": "<p>So there are now two non-terminal <code>dsimp</code>s, at least one of which is super-slow. I'll now try Patrick's <code>change</code> idea.</p>",
        "id": 241569650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622828374
    },
    {
        "content": "<p>I've pushed the <code>_match_1</code> removal to branch <code>FLC_iso</code>. I'm still working on it. I can't get <code>change</code> to work, the output of dsimp is super-unwieldy and is not round-tripping from the prettyprinter back into Lean</p>",
        "id": 241572461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622829720
    },
    {
        "content": "<p>I've got it down to 11 seconds and I managed to remove one of the two non-terminal dsimps. The other one is just a mystery to me. I don't know how to look at the trace of what it's doing (<code>trace.simplify.rewrite</code> doesn't seem to work) and <code>dsimp only</code> doesn't work. I pushed to the <code>FLC_iso</code> branch.</p>",
        "id": 241577398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622832272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> if you take a look at it you might see some tricks I'm missing because you'll know more of the details of the argument.</p>",
        "id": 241577461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622832316
    },
    {
        "content": "<p>I'm looking now...</p>",
        "id": 241577861,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622832514
    },
    {
        "content": "<p>The branch compiles for me BTW</p>",
        "id": 241578186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622832704
    },
    {
        "content": "<p>Ok, I got it to a somewhat reasonable speed.</p>",
        "id": 241578936,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622833094
    },
    {
        "content": "<p>still slow, but not crazy</p>",
        "id": 241578951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622833100
    },
    {
        "content": "<p>Oh, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I noticed you made some changes. Instead of pushing, here's my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">This is a strict (i.e. norm-preserving) isomorphism between `FLC F M` and</span>\n<span class=\"sd\">the cochain complex obtained by mapping `FL F M` along the `Completion` functor.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">FLC_iso</span> <span class=\"o\">:</span> <span class=\"n\">strict_iso</span> <span class=\"o\">((</span><span class=\"n\">Completion.map_homological_complex</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">FL</span> <span class=\"n\">F</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">FLC</span> <span class=\"n\">F</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">iso</span> <span class=\"o\">:=</span> <span class=\"n\">homological_complex.iso_of_components</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">eq_to_iso</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_to_iso</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">w</span><span class=\"o\">⟩)</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span>\n        <span class=\"n\">delta</span> <span class=\"n\">FLC</span> <span class=\"n\">FL</span><span class=\"o\">,</span>\n        <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n          <span class=\"n\">cosimplicial_object.augmented.whiskering</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.augmented.whiskering_obj</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.augmented.to_cocomplex</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.augmented.to_cocomplex_obj</span><span class=\"o\">,</span>\n          <span class=\"n\">cochain_complex.of</span><span class=\"o\">,</span>\n          <span class=\"n\">functor.map_homological_complex</span> <span class=\"o\">],</span>\n        <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">category.id_comp</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">],</span>\n        <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cosimplicial_object.augmented.to_cocomplex_d</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.augmented.drop</span><span class=\"o\">,</span> <span class=\"n\">comma.snd</span><span class=\"o\">,</span> <span class=\"n\">cosimplicial_object.whiskering</span><span class=\"o\">,</span>\n          <span class=\"n\">whiskering_right</span><span class=\"o\">,</span> <span class=\"n\">cosimplicial_object.coboundary</span><span class=\"o\">,</span> <span class=\"n\">functor.const_comp</span><span class=\"o\">,</span> <span class=\"n\">LCC</span><span class=\"o\">],</span>\n        <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span>\n        <span class=\"n\">delta</span> <span class=\"n\">FLC</span> <span class=\"n\">FL</span><span class=\"o\">,</span>\n        <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n          <span class=\"n\">cosimplicial_object.augmented.whiskering</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.augmented.whiskering_obj</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.augmented.to_cocomplex</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.augmented.to_cocomplex_obj</span><span class=\"o\">,</span>\n          <span class=\"n\">cochain_complex.of</span><span class=\"o\">,</span>\n          <span class=\"n\">functor.map_homological_complex</span> <span class=\"o\">],</span>\n        <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">category.id_comp</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">],</span>\n        <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span>\n          <span class=\"n\">cosimplicial_object.augmented.to_cocomplex_d</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.augmented.drop</span><span class=\"o\">,</span>\n          <span class=\"n\">comma.snd</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.whiskering</span><span class=\"o\">,</span>\n          <span class=\"n\">whiskering_right</span><span class=\"o\">,</span>\n          <span class=\"n\">cosimplicial_object.coboundary</span><span class=\"o\">,</span>\n          <span class=\"n\">LCC</span> <span class=\"o\">],</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Completion.map_sum</span><span class=\"o\">],</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">funext</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Completion.map_gsmul</span><span class=\"o\">],</span>\n        <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">FLC_iso_helper</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">is_strict</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">strict_hom'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 241579259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622833221
    },
    {
        "content": "<p>I pushed to a branch, feel free to push to the same branch, a different branch, or whatever.</p>",
        "id": 241579362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622833276
    },
    {
        "content": "<p>ok, pushed to <code>FLC_iso_2</code>. Someone else should verify whether it's faster on their side before merging to master</p>",
        "id": 241579523,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622833344
    },
    {
        "content": "<p><code>elaboration of FLC_iso took 9.89s</code></p>",
        "id": 241579999,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622833608
    },
    {
        "content": "<p>(on my unplugged  underpowered laptop)</p>",
        "id": 241580014,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622833616
    },
    {
        "content": "<p>I heard no objections in the last 2.5 hours, so I merged this 9.89 second proof to master</p>",
        "id": 241596506,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622842973
    },
    {
        "content": "<p>Thanks a lot for the speedup!</p>",
        "id": 241615193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622867122
    }
]