[
    {
        "content": "<p>I am trying to prove the existence of 2-step projective resolutions of modules over PIDs using the \"submodules of free modules are free\" statement.<br>\nI could produce <code>P : chain_complex (Module.{v} R) ℕ</code>and  <code>π : P ⟶ ((chain_complex.single₀ (Module.{v} R)).obj (of R M))</code> and prove projectivity of all elements of <code>P</code>, but am currently stuck proving exactness.</p>\n<p>My problem is mainly that <code>P</code> is defined using two nested <code>ite</code>. Therefore, when proving exactness at high degrees,  the goal has the perfectly innocent form <code>category_theory.exact 0 0</code> (with zero morphisms between zero objects) and could math-wise be closed using <code>category_theory.exact_of_zero (f : A ⟶ 0) (g : 0 ⟶ C) : category_theory.exact f g</code>. However, the middle element is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"bp\">↥</span><span class=\"o\">((</span><span class=\"n\">free_module_natural_map</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in the presence of <code>hn : n = 1</code>, and not defeq to the zero required by <code>category_theory.exact_of_zero</code>.</p>\n<p>Would you recommend proving propositionally that the term above equals zero, and rewriting / casting along that proof, or give up on equality rewriting and instead use <code>category_theory.preadditive.exact_of_iso_of_exact</code> and prove that there exists an iso to <code>0 -&gt; 0 -&gt; 0</code>using the same proofs?</p>\n<p>I am asking because I assume you have had to deal with lots of such defeq / propeq problems in the homological algebra library. Otherwise, I will just try out both approaches and see which one succeeds first :)</p>",
        "id": 273330677,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645869127
    },
    {
        "content": "<p>does <code>is_zero_object</code> help here?</p>",
        "id": 273331154,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645869681
    },
    {
        "content": "<p><code>replacement_nat</code>?</p>",
        "id": 273331250,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645869833
    },
    {
        "content": "<p>We have <code>preadditive.exact_of_iso_of_exact'</code> somewhere in the LTE, that is slightly more usable than the version in mathlib. I would use that.</p>",
        "id": 273332458,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645871518
    },
    {
        "content": "<p>Yes!</p>\n<p>This works for the high degrees, but I cannot get exactness at degree 1 (the only interesting one) with the same approach:</p>\n<p>The sequences look like<br>\n<code>0 -&gt; ker -&gt; RM</code><br>\nand<br>\n<code>0 -&gt; ker' -&gt; (RM)'</code>,<br>\nwhere the primed versions are the ones with <code>ite</code>inside.</p>\n<p>When applying <code>preadditive.exact_of_iso_of_exact'</code>, I prove <code>ker ≅ ker'</code>and <code>RM ≅ (RM)'</code> by rewriting <code>iso.refl</code> which gives the commutative square <code>ker -&gt; RM -&gt; (RM)' = ker -&gt; ker' -&gt; (RM)'</code>which cannot be shown to commute because three of its four edges are <code>cast</code>s.</p>",
        "id": 273338648,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645879527
    },
    {
        "content": "<p>I could replace the module <code>ker</code> by the category theoretical <code>kernel</code>, then exactness should be for free.<br>\nBut I fear this shifts the problem over to proving projectivity of <code>kernel</code>...</p>",
        "id": 273338892,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1645879842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210057\">@Fabian Glöckle</span> Isn't it easier to use the equation compiler instead of <code>ite</code>?</p>",
        "id": 273340481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645881920
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">AddCommGroup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">AddCommGroup</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">free_abelian_group</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ker</span> <span class=\"n\">blabla</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 273340542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645881992
    },
    {
        "content": "<p>There is <code>AddCommGroup.exact_iff</code> somewhere in LTE. That would reduce you to the \"normal\" <code>range</code> and <code>ker</code> for additive group homs.</p>",
        "id": 273340572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645882063
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">AddCommGroup</span><span class=\"bp\">/</span><span class=\"n\">exact.lean</span>\n<span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"kd\">theorem</span> <span class=\"n\">exact_iff</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"n\">f.range</span> <span class=\"bp\">=</span> <span class=\"n\">g.ker</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 273340639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645882132
    },
    {
        "content": "<p>Yes, Amelia taught me this trick when making small complexes -- the defeqs are much better if you use the equation compiler. But of course at some point we're going to have to figure out how to do this.</p>",
        "id": 273343699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645885633
    }
]