[
    {
        "content": "<p>Have we already defined the <code>module.free</code> instance of the zero module over R? It does not seem to follow  directly from the <code>pi</code> instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.free.pi\">docs#module.free.pi</a>. I will add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[instance]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">free_zero</span> <span class=\"o\">:</span> <span class=\"n\">module.free.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">module.free.of_basis</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">empty</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">obviously</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- Left to show: provide a `multiset empty` with a `nodup` proof.</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finset.empty.nodup</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>somewhere in the <code>for_mathlib</code> folder.</p>",
        "id": 273428966,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646001122
    },
    {
        "content": "<p>It is a dangerous instance, right? How can Lean guess <code>R</code>?</p>",
        "id": 273429099,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646001310
    },
    {
        "content": "<p><code>R</code> would be known from the instance we're looking for</p>",
        "id": 273429171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646001393
    },
    {
        "content": "<p>the only thing I can say is that without this instance, the type class search failed in my case and with it it succeeded</p>",
        "id": 273429186,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646001460
    },
    {
        "content": "<p>i.e. R was known from the context</p>",
        "id": 273429226,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646001486
    },
    {
        "content": "<p>I do not know if this breaks other things, though</p>",
        "id": 273429229,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646001499
    },
    {
        "content": "<p>I vaguely remember having thought about that, but it's very possible I was just wrong not adding it, so please go ahead</p>",
        "id": 273429235,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646001530
    },
    {
        "content": "<p>At worst the linter will complain</p>",
        "id": 273429242,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646001546
    },
    {
        "content": "<p>that's true :D let's see</p>",
        "id": 273429249,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646001561
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.free.of_subsingleton\">docs#module.free.of_subsingleton</a>... <code>punit</code> doesn't have a <code>subsingleton</code> instance?</p>",
        "id": 273429455,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646001874
    },
    {
        "content": "<p>it does</p>",
        "id": 273429544,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646002046
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/punit.subsingleton\">docs#punit.subsingleton</a></p>",
        "id": 273429548,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646002056
    },
    {
        "content": "<p>so i get<br>\n<code>invalid apply tactic, failed to synthesize type class instance for\n  module.projective R punit</code><br>\nthe story should be <code>subsingleton -&gt; free -&gt; projective</code><br>\nwhat can have gone wrong?<br>\n(I have no model of how typeclass search actually works)</p>",
        "id": 273429668,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646002217
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">free_zero</span> <span class=\"o\">:</span> <span class=\"n\">module.free.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">punit</span> <span class=\"o\">:=</span>\n<span class=\"n\">module.free.of_subsingleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>works, but <code>apply_instance</code> doesn't.</p>",
        "id": 273429669,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646002238
    },
    {
        "content": "<p>I don't know why <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 273429673,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646002252
    },
    {
        "content": "<p>maybe because of universe polymorphism or something similar..</p>",
        "id": 273429860,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646002578
    },
    {
        "content": "<p>but that one-liner certainly looks better</p>",
        "id": 273429879,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646002624
    },
    {
        "content": "<p>It's possible. We should fix it in mathlib</p>",
        "id": 273430186,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646002834
    },
    {
        "content": "<p>Maybe it's because of the low priority, but I don't understand these things well enough</p>",
        "id": 273430303,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646003013
    },
    {
        "content": "<p>I'll ask on general</p>",
        "id": 273430360,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646003071
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/.5Bmodule.2Efree.20punit.5D\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.5Bmodule.2Efree.20punit.5D</a></p>",
        "id": 273430605,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646003410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210057\">Fabian Glöckle</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/.5Bmodule.2Efree.200.5D/near/273429860\">said</a>:</p>\n<blockquote>\n<p>maybe because of universe polymorphism or something similar..</p>\n</blockquote>\n<p>there's no universe metavariables, so this should probably not be the problem</p>",
        "id": 273430631,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646003519
    },
    {
        "content": "<p>anyway, thank you and good night!</p>",
        "id": 273430672,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646003532
    }
]