[
    {
        "content": "<p>I just got bitten by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">abelian.has_zero_object.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">AddCommGroup.large_category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">AddCommGroup.category_theory.abelian.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n <span class=\"bp\">=</span>\n<span class=\"n\">AddCommGroup.has_zero_object.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 278816841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649849610
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <br>\nThis showed up in a version of <code>homology = homology</code></p>",
        "id": 278817296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649849887
    },
    {
        "content": "<p>Should <code>has_zero_object</code> be a <code>Prop</code>?</p>",
        "id": 278817334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649849924
    },
    {
        "content": "<p>Yes. :-)</p>",
        "id": 278817356,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649849939
    },
    {
        "content": "<p>I guess it was missed in the big Prop-ification of the limits API.</p>",
        "id": 278817372,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649849952
    },
    {
        "content": "<p>I had a quick go at this. I run into trouble because this helpful <code>@[simp]</code> lemma is no longer true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">functor.zero_obj</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">тед</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 278919243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649907126
    },
    {
        "content": "<p>Because <code>0</code> is now produced using choice, there is no reason to expect <code>(0 : B тед C).obj X</code> should be the previously chosen <code>0</code>: it should be any other (isomorphic) zero object.</p>",
        "id": 278919274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649907179
    },
    {
        "content": "<p>I think resolving this cleanly will requiring installing the <code>is_zero_object</code> predicate in mathlib. If no one has tackled this in a week I will try to get to it then.</p>",
        "id": 278920345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649908542
    },
    {
        "content": "<p>Thanks for diving into this. Note that there is already a lot of API for <code>is_zero(_object)</code> in LTE.</p>",
        "id": 278921694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649910071
    },
    {
        "content": "<p>Pity it's not in mathlib. :-)</p>",
        "id": 278922755,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649911596
    },
    {
        "content": "<p>Here's a first PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/13511\">https://github.com/leanprover-community/mathlib/pull/13511</a></p>",
        "id": 279391064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650364548
    },
    {
        "content": "<p>I'm working on turning <code>has_zero_object</code> into a <code>Prop</code>. There are way too many instances of this class in mathlib <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 279410288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650375705
    },
    {
        "content": "<p>Here's the next PR:</p>\n<blockquote>\n<p>refactor(category_theory): make has_zero_object a Prop <a href=\"https://github.com/leanprover-community/mathlib/pull/13517\">#13517</a></p>\n</blockquote>",
        "id": 279416299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650378487
    }
]