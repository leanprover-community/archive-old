[
    {
        "content": "<p>We need the fact that filtered limits commute with finite limits in condensed sets.<br>\nI added a skeleton for this in <code>condensed/filtered_limits_commute_with...</code> with the following main sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_iso_colim_to_lim_component</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_iso</span> <span class=\"o\">((</span><span class=\"n\">colim_to_lim</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.app</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  The forgetful functor to presheaves preserves filtered colimits and all limits,</span>\n<span class=\"cm\">  while the same holds for evaluation, hence this morphism should be isomoprhic to</span>\n<span class=\"cm\">  `colimit_limit_to_limit_colimit` which is an isomorphism.</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The proof should use the fact that evaluation of a condensed set at any profinite set preserves filtered colimits and all limits to reduce the issue to the usual claim that filtered colimits commute with finite limits in the category of sets.</p>\n<p>The main place we need this iis in showing that the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>↦</mo><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">X \\mapsto X^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> (with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> finite) preserves filtered colimits, and the relevant sorry is located in the file <code>condensed/bd_ses</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pow_functor_preserves_filtered_colimits</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">preserves_filtered_colimits</span>\n  <span class=\"o\">(</span><span class=\"n\">pow_functor</span> <span class=\"n\">CondensedSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any help would be much appreciated here!</p>",
        "id": 288852156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657220981
    },
    {
        "content": "<p>(the sorries have been moved to <code>condensed/filtered_limits_commute_with...</code>)</p>",
        "id": 288859201,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657224588
    },
    {
        "content": "<p>I tried to look at the first one. There seems to be bit of general API missing about preserving limits in a functorial manner.</p>",
        "id": 288891416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657249521
    },
    {
        "content": "<p>I've made some progress here</p>",
        "id": 288913340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657269849
    },
    {
        "content": "<p>I'll push in a moment.</p>",
        "id": 288913358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657269862
    },
    {
        "content": "<p>This sorry is now closed</p>",
        "id": 288929768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657281219
    },
    {
        "content": "<p>Nice!</p>",
        "id": 288936661,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657285276
    },
    {
        "content": "<p>Are you also working on the remaining sorries in that file?</p>",
        "id": 288937510,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657285675
    },
    {
        "content": "<p>No, I switched to <code>Qprime_isoms2</code></p>",
        "id": 288938037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657285940
    },
    {
        "content": "<p>Note that there is only 1 sorry left in your file. About powers preserving filtered colimits.</p>",
        "id": 288938068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657285962
    },
    {
        "content": "<p>right</p>",
        "id": 288938152,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657286007
    },
    {
        "content": "<p>the last SES I built yesterday involved this</p>",
        "id": 288938186,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657286022
    },
    {
        "content": "<p>Okay, this file is now sorry-free.</p>",
        "id": 288945210,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657289432
    },
    {
        "content": "<p>Great! What's left for the Q' SES?</p>",
        "id": 289000298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657319090
    },
    {
        "content": "<p>Glue!</p>",
        "id": 289000618,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657319329
    },
    {
        "content": "<p>Great! Can you state the glue? Then I can try to kill the sorries.</p>",
        "id": 289002867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657321166
    },
    {
        "content": "<p>I probably won't t have time this weekend, but I'll give it a go on Monday</p>",
        "id": 289003215,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657321483
    }
]