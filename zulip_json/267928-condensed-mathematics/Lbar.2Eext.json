[
    {
        "content": "<p>Is there a place in the blueprint where I can read about the mathematics happening in this file <code>src/Lbar/ext.lean</code>? I can jump from blueprint to lean but I don't know how to go the other way</p>",
        "id": 277626544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648991281
    },
    {
        "content": "<p>It's here: <a href=\"https://github.com/leanprover-community/lean-liquid//blob/7b52aede05ed63114efdd1b3c613b8efbb4a10cd/src/Lbar/ext.lean#L33\">https://github.com/leanprover-community/lean-liquid//blob/7b52aede05ed63114efdd1b3c613b8efbb4a10cd/src/Lbar/ext.lean#L33</a></p>",
        "id": 277685902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649052589
    },
    {
        "content": "<p>But I included this file in the list of \"easy\" sorries by mistake.</p>",
        "id": 277685948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649052605
    },
    {
        "content": "<p>Has there been a misunderstanding here? I am asking about <a href=\"https://leanprover-community.github.io/liquid/\">the blueprint</a>. I can jump from the blueprint to github but I don't know how to jump back.</p>",
        "id": 277756289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649089314
    },
    {
        "content": "<p>You cannot jump back.</p>",
        "id": 277758350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649090110
    },
    {
        "content": "<p>If you are frustrated about getting stuck on Github pages you can try to add your voice to <a href=\"#narrow/stream/113488-general/topic/Rendered.20source\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Rendered.20source</a>, hoping that Mario or Gabriel will pity us.</p>",
        "id": 277758438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649090159
    },
    {
        "content": "<p>At the bottom of <code>Lbar/ext.lean</code> are 6 easy <code>SELFCONTAINED</code> sorries (all Props). There is one <code>SELFCONTAINED</code> above that, which is a bit less trivial.</p>",
        "id": 286771970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1655718552
    },
    {
        "content": "<p>There are now 11 <code>SELFCONTAINED</code> sorries in this file.</p>",
        "id": 286807752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1655737488
    },
    {
        "content": "<p>Now it's time to catch a train.</p>",
        "id": 286807770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1655737498
    },
    {
        "content": "<p>I'll take a look at this, I've had some time to do other admin now</p>",
        "id": 286811910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655739585
    },
    {
        "content": "<p>I can also have a look, but they don't seem to me totally self contained, they depend on a lot of previous definitions and I was quickly lost. Am I missing something easy?</p>",
        "id": 286812241,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655739739
    },
    {
        "content": "<p>At least the 6 at the end should be really straightforward.</p>",
        "id": 286821038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1655745355
    },
    {
        "content": "<p>The others require fooling around with functors, but I think you only need to know that the functor is additive.</p>",
        "id": 286821108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1655745388
    },
    {
        "content": "<p>Ah yes,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ι'</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>proved 3 of them. Let me have a look at the others</p>",
        "id": 286822020,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655745971
    },
    {
        "content": "<p>I pushed a slight restructure of some of the earlier ones.</p>",
        "id": 286832391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1655753486
    },
    {
        "content": "<p>I'm attacking these sorries atm.</p>",
        "id": 289040926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657372489
    },
    {
        "content": "<p>I've filled in almost all of the data.</p>",
        "id": 289054020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657389072
    },
    {
        "content": "<p>But now I hit an annoying roadbump: <code>LCC_iso_Cond_of_top_ab</code> is not universe polymorphic.</p>",
        "id": 289054037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657389102
    },
    {
        "content": "<p>And my laptop is complaining when I ask it to recompile large parts of the system.</p>",
        "id": 289054086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657389130
    },
    {
        "content": "<p>Whats the statement?</p>",
        "id": 289055007,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657390352
    },
    {
        "content": "<p>Of what?</p>",
        "id": 289055120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657390511
    },
    {
        "content": "<p>My laptop is about as fast as a spherical cow...</p>",
        "id": 289055139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657390556
    },
    {
        "content": "<p>I guess it is jet-lagged...</p>",
        "id": 289055178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657390564
    },
    {
        "content": "<p><code>LCC_iso...</code>:  <code>LCC</code> seems to be missing a composition with <code>Ab.ulift</code></p>",
        "id": 289055263,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657390697
    },
    {
        "content": "<p>Right, but making it universe polymorphic requires touching a bunch of basic files. Which turns my laptop into a toaster.</p>",
        "id": 289055282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657390789
    },
    {
        "content": "<p>Well, look at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">of_top_ab</span> <span class=\"o\">:</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">of_top_ab.presheaf</span> <span class=\"n\">A</span> <span class=\"bp\">⋙</span> <span class=\"n\">Ab.ulift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n</code></pre></div>",
        "id": 289055284,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657390797
    },
    {
        "content": "<p>Here's another piece of data that I haven't filled in yet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">preadditive_yoneda_obj_obj_CondensedSet_to_Condensed_Ab</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">preadditive_yoneda.obj</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">CondensedSet_to_Condensed_Ab.obj</span> <span class=\"o\">(</span><span class=\"n\">Profinite_to_Condensed.obj</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">≅</span>\n  <span class=\"n\">M.val.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Do we have this (additive!) isomorphism already?</p>",
        "id": 289055350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657390834
    },
    {
        "content": "<p>so <code>LCC</code> is okay, but when it gets converted into a condensed abelian group, we should compose with <code>Ab.ulift</code></p>",
        "id": 289055353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657390835
    },
    {
        "content": "<p>I think that other iso is somewhere....</p>",
        "id": 289055365,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657390859
    },
    {
        "content": "<p>I used something similar in the free pfpng stuff IIRC</p>",
        "id": 289055386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657390879
    },
    {
        "content": "<p>But you can't just update that statement, because it's defined using stuff that isn't universe polymorphic.</p>",
        "id": 289055389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657390884
    },
    {
        "content": "<p>I'm pushing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Condensed_LCC</span> <span class=\"o\">:</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">LCC.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"bp\">⋙</span> <span class=\"n\">Ab.ulift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n  <span class=\"n\">cond</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">LCC_iso_Cond_of_top_ab</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"n\">iso_whisker_right</span> <span class=\"n\">e</span> <span class=\"n\">Ab.ulift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">presheaf.is_sheaf_of_iso</span> <span class=\"n\">proetale_topology.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Condensed.of_top_ab</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 289055651,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657391246
    },
    {
        "content": "<p>And this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Condensed_LCC_iso_of_top_ab</span> <span class=\"o\">:</span>\n  <span class=\"n\">Condensed_LCC</span> <span class=\"n\">V</span> <span class=\"bp\">≅</span> <span class=\"n\">Condensed.of_top_ab</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">Sheaf.iso.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">iso_whisker_right</span> <span class=\"o\">(</span><span class=\"n\">LCC_iso_Cond_of_top_ab</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 289055718,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657391320
    },
    {
        "content": "<p>ooh, that's a nice hack!</p>",
        "id": 289055851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657391509
    },
    {
        "content": "<p>aah, you added it to that basic file <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 289055955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657391620
    },
    {
        "content": "<p>is that a problem?</p>",
        "id": 289055960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657391631
    },
    {
        "content": "<p>now I need to wait until CI gives me oleans</p>",
        "id": 289055964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657391633
    },
    {
        "content": "<p>oh, sorry!</p>",
        "id": 289055966,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657391638
    },
    {
        "content": "<p>never mind, I'll just answer a couple of emails</p>",
        "id": 289056005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657391643
    },
    {
        "content": "<p>I have basically filled the data for the Breen-Deligne homology iso for <code>eg</code> and presheaves of abelian groups. It might be easier for you <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> or <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> to pass to condensed abelian groups in <code>condensed/bd_lemma.lean</code>. There is basically only one naturality <code>sorry</code> in <code>breen_deligne/apply_Pow.lean</code>. While working on this, I introduced <code>nat_iso.map_homological_complex</code> at the same time as <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>! I have moved this definition to a separate file <code>for_mathlib/nat_iso_map_homological_complex</code>.</p>",
        "id": 289061429,
        "sender_full_name": "Joël Riou",
        "timestamp": 1657398928
    },
    {
        "content": "<p>The joys of universes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Ab.ulift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n    <span class=\"o\">((</span><span class=\"n\">forget₂</span> <span class=\"n\">SemiNormedGroup</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n       <span class=\"o\">(</span><span class=\"n\">SemiNormedGroup.Completion.obj</span> <span class=\"o\">((</span><span class=\"n\">SemiNormedGroup.LocallyConstan.obj</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X.as</span><span class=\"o\">))))</span> <span class=\"bp\">≅</span>\n  <span class=\"o\">(</span><span class=\"n\">forget₂</span> <span class=\"n\">SemiNormedGroup</span> <span class=\"n\">Ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n    <span class=\"o\">(</span><span class=\"n\">SemiNormedGroup.Completion.obj</span>\n       <span class=\"o\">((</span><span class=\"n\">SemiNormedGroup.LocallyConstant.obj</span> <span class=\"o\">(</span><span class=\"n\">SemiNormedGroup.ulift.obj</span> <span class=\"n\">V</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X.as</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 289063393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657401795
    },
    {
        "content": "<p>The last bit of data has been filled in. All the sorries in <code>Lbar/ext</code> are now Proppy.</p>",
        "id": 289116162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657476000
    }
]