[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I saw that you are working on <code>thm69.lean</code>. I think you can gain a lot from using coercions from <code>nnreal</code> to <code>real</code>, instead of writing <code>r'.1</code>. I imagine that <code>simp</code> and <code>norm_cast</code> will work better if you use coercions.</p>",
        "id": 253256880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631628389
    },
    {
        "content": "<p>Also, can't some of those results be proved by staying in <code>nnreal</code>?</p>",
        "id": 253256932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631628413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks! You're certainly right, and indeed I am refactoring almost everything by staying in <code>nnreal</code>.</p>",
        "id": 253256970,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631628433
    },
    {
        "content": "<p>I guess <code>nat_floor</code> forces you to use a ring. I wonder if it could be generalised to semirings, so that it works for <code>nnreal</code> too</p>",
        "id": 253256979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631628437
    },
    {
        "content": "<p>I think too, you're right. The problem with staying in <code>nnreal</code> is that, sometimes things become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> (when they're negative), so any expression of the form <code>x-y</code> can be a bit painful. But I hope I can work this out.</p>",
        "id": 253257248,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631628532
    },
    {
        "content": "<p>wink wink <a href=\"https://github.com/leanprover-community/mathlib/tree/floorsemiring\">https://github.com/leanprover-community/mathlib/tree/floorsemiring</a> wink wink</p>",
        "id": 253257301,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631628550
    },
    {
        "content": "<p>At any rate I agree that staying in <code>nnreal</code> is the best option.</p>",
        "id": 253257308,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631628553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Ah good, you're generalising <code>nat_floor</code> to semirings?</p>",
        "id": 253257416,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631628595
    },
    {
        "content": "<p>Yes. This was waiting for <code>has_ordered_sub</code> to come into existence, and it did. So I could come back to it, but I'm already very busy with locally finite orders and successor orders.</p>",
        "id": 253257564,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631628639
    },
    {
        "content": "<p>It would help me, indeed (I was able to make it do in a couple of cases, but if you're building a general API it will be better): that being said, I can survive for the time being, so take it easy! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 253257623,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631628667
    },
    {
        "content": "<p>(btw if anyone wants to merge <a href=\"https://github.com/leanprover-community/mathlib/issues/9119\">#9119</a> or another one of my PRs, that'll make my life easier <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> )</p>",
        "id": 253257838,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631628737
    },
    {
        "content": "<p>As a second thought, I think I can unify <code>nat_floor</code> and <code>floor</code> once we have <code>succ_order</code>. <code>floor</code>and <code>nat_floor</code> are basically thin wrappers around <code>galois_connection</code> (but specialized ones) and their main uses come from the fact that <code>n + 1</code> is the smallest thing bigger than <code>n</code>, which is the gist of <code>succ_order</code>.</p>",
        "id": 253258334,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631628896
    },
    {
        "content": "<p>Your love for Galois connections at its best...</p>",
        "id": 253258449,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631628937
    },
    {
        "content": "<p>Or maybe <code>nat_floor</code>/<code>floor</code> should stay as they are because one of the adjoints is <code>nat.cast</code>/<code>int.cast</code>.</p>",
        "id": 253258875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631629080
    },
    {
        "content": "<p>As a mathematician, I would say that not having <code>floor</code> because <code>succ_order</code> takes care of it would sound strange, even if it makes perfect sense in Lean. But I might be too old-minded...</p>",
        "id": 253259139,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631629181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/thm.2069/near/253258875\">said</a>:</p>\n<blockquote>\n<p>Or maybe <code>nat_floor</code>/<code>floor</code> should stay as they are because one of the adjoints is <code>nat.cast</code>/<code>int.cast</code>.</p>\n</blockquote>\n<p>I think they should stay. But it would be good if <code>nat_floor</code> works for semirings.</p>",
        "id": 253259513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631629312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I will try to push something a bit later to show how things look like staying in <code>nnreal</code> as much as possible.</p>",
        "id": 253259531,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631629318
    },
    {
        "content": "<p>That's not quite what I meant. I meant that what makes <code>floor</code> interesting is that:</p>\n<ol>\n<li>It is the lower adjoint of the coercion <code>ℤ → α</code>.</li>\n<li><code>ℤ</code> is a <code>succ_order</code>.</li>\n</ol>\n<p>and what makes <code>nat_floor</code> interesting is that:</p>\n<ol>\n<li>It is the lower adjoint of the coercion <code>ℕ → α</code>.</li>\n<li><code>ℕ</code> is a <code>succ_order</code>.</li>\n</ol>\n<p>Those are very much the same thing, except that their common generalization would need to take the coercion as an explicit argument, which I think is not worth it.</p>",
        "id": 253259690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631629368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I am now at the point where specializing <code>r'=1/2</code> (or actually, <code>r'=a/b : rat</code> (positive and smaller than 1) would make my life easier. I confess that it was not completely clear to me to what extent this won't be a problem .</p>",
        "id": 253644695,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631823656
    },
    {
        "content": "<p>I would believe that the fact that <code>r'=a/b : rat</code> is OK makes the whole argument work, since we can use arbitrary small <code>r'</code>. At any rate, is this version enough, on your opinion?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">θ_surj</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>  <span class=\"o\">(</span><span class=\"n\">h_rr'</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">):</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">laurent_measures</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Fintype.of</span> <span class=\"n\">punit</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"n\">r'</span> <span class=\"n\">r</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Here <code>θ</code> takes an <code>F</code> which is <code>r</code>-convergent and evaluates <code>T</code> to <code>r'</code>.</p>",
        "id": 253645493,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631823982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Yes, feel free to specialize to a rational number, or even <code>1/2</code> when you really start needing it.</p>",
        "id": 253683912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631849089
    },
    {
        "content": "<p>It's not clear to me whether <code>laurent_measures r (Fintype.of punit)</code> is the best way to talk about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. It's quite a mouthful, and it means that you will always have to evaluate at <code>punit.star</code>.</p>",
        "id": 253684062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631849258
    },
    {
        "content": "<p>It might be worth it to build the ring <code>convergernt_laurent_series r</code></p>",
        "id": 253684121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631849290
    },
    {
        "content": "<p>Thanks for the answer about <code>r'</code>!</p>",
        "id": 253706359,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631866414
    },
    {
        "content": "<p>Concerning <code>laurent_measures r (Fintype.of punit)</code>It is a indeed mouthful, you're right, but it felt to me more in the spirit of condensed Math. I'm happy at any rate to build <code>convergent_laurent_series r</code>: this is basically what the construction  <code>def laurent_measures.to_Rfct</code> tries to do, so I just need to build the type out of it. But just to be clear, do you simply want to create the type of <code>laurent_measures</code> evaluated at <code>r</code> (together with a <code>comm_ring</code> instance) or do you think we'll need to show an iso with a subring of the Laurent series as now in <code>mathlib</code>?</p>",
        "id": 253706474,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631866480
    },
    {
        "content": "<p>I haven't yet thought about that too much</p>",
        "id": 253709075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631867962
    },
    {
        "content": "<p>Maybe just continue working with the <code>punit</code> thingy for now.</p>",
        "id": 253709094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631867978
    },
    {
        "content": "<p>OK, it will be easy to modify later - thanks.</p>",
        "id": 253709223,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631868030
    },
    {
        "content": "<p>Finally this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_sum_x</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⌊</span><span class=\"o\">(((</span><span class=\"n\">y</span> <span class=\"n\">ξ</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">ξ</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⌋</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>is sorry-free in thm71</p>",
        "id": 255596766,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633016799
    },
    {
        "content": "<p>Wonderful! That was quite an adventure (-;</p>",
        "id": 255598501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633017379
    },
    {
        "content": "<p>Yeah, sorry it took that long. I am now properly stating that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> is surjective.</p>",
        "id": 255598571,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633017407
    },
    {
        "content": "<p>You should push your TeX write up to the blueprint repo!</p>",
        "id": 255598588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633017412
    },
    {
        "content": "<p>Do you have write access already?</p>",
        "id": 255598619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633017425
    },
    {
        "content": "<p>Ok, I will (I think I have access, I kind of remember I have once modified a comma or a misprint - I will check later).</p>",
        "id": 255598706,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633017459
    },
    {
        "content": "<p>BTW: How do I create a <code>def</code> with dot notation in a <code>namespace</code>? The def<code>laurent_measures.to_Rfct</code> used to work (so that <code>F.to_Rfct</code> was accepted) as long as everything was (wrongly) in <code>_root_</code> by now that everything is in the namespace <code>thm71</code> it is not recognized. It must be a stupid tweak but I can't figure out how to make it work.</p>",
        "id": 255601811,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633018577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Well, not everything was wrongly in <code>_root_</code> apparently.</p>",
        "id": 255606371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633020226
    },
    {
        "content": "<p><a href=\"#narrow/stream/267928-condensed-mathematics/topic/import.20clash.3F/near/255430475\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/import.20clash.3F/near/255430475</a> showed that certain pretty generic names were ending up in <code>_root_</code>. Those needed to be put in a namespace.</p>",
        "id": 255606545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633020279
    },
    {
        "content": "<p>Ah, I see: you mean that only generic ones need to be \"protected\"  by something particular, like laurent_measures.blabla does not and it is safer to put it in <code>_root_</code>?</p>",
        "id": 255616446,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633023812
    },
    {
        "content": "<p>It's not safer to put them in <code>_root_</code> but it's safe enough. And the big upshot is that it will make dot-notation work again.</p>",
        "id": 255617438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633024168
    },
    {
        "content": "<p>Can't you simply append <code>thm71</code>? Or is the problem that you need the same def accross different theorem namespaces?</p>",
        "id": 255625363,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633026909
    },
    {
        "content": "<p>I tried but somewhat could not make it work. I certainly don't need the same def across different namespaces.</p>",
        "id": 255625476,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633026952
    },
    {
        "content": "<p>The</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">θ_surjective</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ξ</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>  <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">laurent_measures</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Fintype.of</span> <span class=\"n\">punit</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"n\">ξ</span> <span class=\"n\">r</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is also sorry-free. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> : would you agree in deleting the first lines (15 to 55) with the \"old\" approach?</p>",
        "id": 255658811,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633040824
    },
    {
        "content": "<p>This is great! But I'm a little confused -- where can I find the assumption that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ξ</mi><mo>&lt;</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">\\xi &lt; r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04601em;\">ξ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>?</p>",
        "id": 255663747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633043480
    },
    {
        "content": "<p>(I assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ξ</mi></mrow><annotation encoding=\"application/x-tex\">\\xi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04601em;\">ξ</span></span></span></span> corresponds to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> from Analytic.pdf?)</p>",
        "id": 255663784,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633043517
    },
    {
        "content": "<p>Oh, I guess that assumption is not needed for the surjectivity. Nice! (I suppose we will need this when we go to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> is a morphism.</p>",
        "id": 255682666,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633057324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Great work!</p>\n<p>And yes, those lines 15-55 can now be removed. How about <code>src/laurent_measures/thm69_bad.lean</code>? Do you want to keep that around?</p>",
        "id": 255687845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633061948
    },
    {
        "content": "<p>If that is not a problem, I'd like to keep it around until we/I finish the  construction of the SES, because there were some ideas there which might be relevant. I will delete it at that point.</p>",
        "id": 255704867,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633074978
    },
    {
        "content": "<p>I am also removing the lines in question.</p>",
        "id": 255704888,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633074989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Yes, indeed: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ξ</mi></mrow><annotation encoding=\"application/x-tex\">\\xi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04601em;\">ξ</span></span></span></span> is the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> (when discussing with <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  it was a bit of an headache to distinguish the two, so I picked up a different name); and the assumption <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>i</mi><mo>&lt;</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">xi &lt; r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> is not needed for surjectivity, since the series surjecting to any given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> can be chosen to converge on the whole open unit disk.</p>",
        "id": 255705016,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633075069
    },
    {
        "content": "<p>OK, I am now trying to set up the route to produce the SES. I think that we still need the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comphaus_filtered_pseudo_normed_group</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>bcause the <code>apply_instance</code> doesn't find anything for <code>ℝ</code>. And then the second point will be to prove the </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">comphaus_filtered_pseudo_normed_group_hom</span> <span class=\"n\">θ</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> can you confirm these are the next steps?What troubles me is that at a certain point we will need to move away from <code>laurent_measures</code> supported on the singleton to general profinite <code>S</code> but I can't see when.</p>",
        "id": 255710579,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633078029
    },
    {
        "content": "<p>We need a map from <code>laurent_measures r S</code> to <code>real_measure p S</code>, right? So why would you need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comphaus_filtered_pseudo_normed_group</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 255711104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633078290
    },
    {
        "content": "<p>I don't think we <em>actually</em> need the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo>→</mo><mi mathvariant=\"normal\">R</mi></mrow><annotation encoding=\"application/x-tex\">ℤ((T))_r → ℝ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord amsrm\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord amsrm\">R</span></span></span></span>. I'm suggesting we move on to the modules right away.</p>",
        "id": 255711223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633078340
    },
    {
        "content": "<p>Ah, I see - I guess this is the point.</p>",
        "id": 255711255,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633078356
    },
    {
        "content": "<p>Are you suggesting that we construct the right arrow in </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>0</mn><mo>→</mo><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">)</mo><mover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mo>⋅</mo><msub><mi>f</mi><mi>x</mi></msub></mrow></mpadded></mover><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mi mathvariant=\"script\">M</mi><msup><mi>p</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0 \\to \\mathcal M(S, \\Z((T))_{r&#x27;}) \\xrightarrow{\\cdot f_x} \\mathcal M(S, \\Z((T))_{r&#x27;}) \\to \\mathcal M_{p&#x27;}(S) \\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3581079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mtight\">⋅</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.010999999999999899em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32798em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>and prove its surjectivity as first step? And this for every profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>?</p>",
        "id": 255711516,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633078488
    },
    {
        "content": "<p>I guess we first do it for finite <code>S</code>, and hopefully magic will extend it to profinite <code>S</code>.</p>",
        "id": 255711947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633078689
    },
    {
        "content": "<p>OK, good; also because I was looking at the file <code>real_measures</code> and there <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> always seems to be a <code>Fintype</code>.</p>",
        "id": 255712018,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633078731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/thm.2069/near/255711947\">said</a>:</p>\n<blockquote>\n<p>I guess we first do it for finite <code>S</code>, and hopefully magic will extend it to profinite <code>S</code>.</p>\n</blockquote>\n<p>FWIW: \"Magic\" = <code>Profinite.extend_nat_trans</code> in <code>for_mathlib/Profinite/extend.lean</code></p>",
        "id": 255748383,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633096802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> But will that also extend the fact that it is an epi?</p>",
        "id": 255748550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633096829
    },
    {
        "content": "<p>So to use it we would need to show <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> is natural in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span></p>",
        "id": 255748576,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633096838
    },
    {
        "content": "<p>No, proving it's an epi will require more work</p>",
        "id": 255748590,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633096844
    },
    {
        "content": "<p>We need a version that extends SES's, I think.</p>",
        "id": 255748660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633096872
    },
    {
        "content": "<p>Well, in general there would be a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi>lim</mi><mo>⁡</mo></mrow><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\lim^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8984479999999999em;vertical-align:0em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8984479999999999em;\"><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> term?</p>",
        "id": 255748747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633096906
    },
    {
        "content": "<p>Hmmz, you mean we need to do some actual maths again? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 255749031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633097010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/thm.2069/near/253257416\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> Ah good, you're generalising <code>nat_floor</code> to semirings?</p>\n</blockquote>\n<p>I am now working on this.</p>",
        "id": 256481365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633553105
    },
    {
        "content": "<p>I am trying to have a look at Prop 7.2, as I believe that it will be crucial for uploading <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> to a <code>comp_haus_blabla</code> morphism.  I have a small doubt about point (3), is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> the evaluation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> (so, what it is called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>θ</mi><mi>x</mi></msub><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\theta_x(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> in Thm 6.9?)</p>",
        "id": 257190556,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1634040035
    },
    {
        "content": "<p>Yup, that seems to make sense.</p>",
        "id": 257191069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634040312
    },
    {
        "content": "<p>Note that what we really want is a nonexisting Prop 7.2' which does everything for spaces of measures (instead of the base rings)</p>",
        "id": 257191292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634040414
    },
    {
        "content": "<p>But this should hopefully be a straightforward adaptation of Prop 7.2</p>",
        "id": 257191348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634040443
    },
    {
        "content": "<p>Do you mean Thm 6.9 (2) or something more?</p>",
        "id": 257192079,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1634040845
    },
    {
        "content": "<p>No, that's what I mean.</p>",
        "id": 257192189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634040908
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 257192604,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1634041106
    },
    {
        "content": "<p>I have just pushed a possible approach to the SES of Theorem 6.9. I don't know if it is the best one, and comments are welcome!</p>",
        "id": 259147157,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635275787
    },
    {
        "content": "<p>Two major points that I see are:<br>\n1) Although I am happy to work purely with abelian groups, the definition of the first map in the SES is \"multiplication by a generator of  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">k</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">r</mi></mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{ker}\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">ker</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>\". I think it would be reasonable to add an</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">laurent_measures</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Fintype.of</span> <span class=\"n\">punit</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">laurent_measures</span> <span class=\"n\">r</span> <span class=\"n\">S</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and this is currently done on line 364. It is quite straightforward, the only nasty thing is that we need to prove that this is actually a <code>CompHausFiltPseuNormGroup</code> action (so, additive, sending <code>0</code> to <code>0</code> and respecting filtration+topology). The other option would be to \"explicitely describe\" this multiplication, by noting that the above generator is something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>−</mo><mi>ξ</mi></mrow><annotation encoding=\"application/x-tex\">T-\\xi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04601em;\">ξ</span></span></span></span> (or perhaps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>−</mo><msup><mi>ξ</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T-\\xi^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04601em;\">ξ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>), but I believe that this would not be much cheaper, the above four conditions would still need to be checked.<br>\n2) I was unable to find an <code>instance</code> that the category <code>CompHausFiltPseuNormGrp</code> has kernels, zeroes and images. Am I right or did I look at the wrong places?</p>",
        "id": 259147161,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635275789
    },
    {
        "content": "<p>I think I am done for tonight, but will resume working on this tomorrow.</p>",
        "id": 259147191,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635275809
    },
    {
        "content": "<p>I have just pushed some more material towards the SES of Thm6.9. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  can you confirm that its current formulation (l.  67 of <code>thm69.lean</code>) is what you had in mind?</p>",
        "id": 259265022,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635351605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Yes, that's looking good! Even though I had in mind just an unbundled version.</p>",
        "id": 259268848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635353094
    },
    {
        "content": "<p>I would do the bundling afterwards, I think.</p>",
        "id": 259268884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635353107
    },
    {
        "content": "<p>Note that <code>add_monoid_hom.mk'</code> allows you to skip the <code>map_zero'</code> field. That might be a useful intermediate step when constructing a comphausly_hom</p>",
        "id": 259268969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635353147
    },
    {
        "content": "<p>Thanks! But what do you mean by \"unbundled version\"?</p>",
        "id": 259272775,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635354600
    },
    {
        "content": "<p>Also, do you agree that the <code>has_scalar</code> instance is needed to define multiplication by a generator of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ker</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\ker\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\">ker</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>? Or do you have another approach in mind?</p>",
        "id": 259272886,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635354637
    },
    {
        "content": "<p>unbundled = without categories.</p>",
        "id": 259273006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635354710
    },
    {
        "content": "<p>So just define the maps ad comphausly_homs. And then show that they compose to <code>0</code>. For <code>im = ker</code> we will maybe need to define what <code>im</code> and <code>ker</code> mean in this context.</p>",
        "id": 259273134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635354756
    },
    {
        "content": "<p>Ah, really in that sense? But there is no def of a SES without categories, no?</p>",
        "id": 259273141,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635354757
    },
    {
        "content": "<p>Sure, so getting an actual SES will happen in the bundling step.</p>",
        "id": 259273198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635354779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/thm.2069/near/259273134\">said</a>:</p>\n<blockquote>\n<p>So just define the maps ad comphausly_homs. And then show that they compose to <code>0</code>. For <code>im = ker</code> we will maybe need to define what <code>im</code> and <code>ker</code> mean in this context.</p>\n</blockquote>\n<p>Ah ok, I see. OK, I'll go for that.</p>",
        "id": 259273205,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635354782
    },
    {
        "content": "<p>But that step should just call to 5 earlier results, instead of inlining the proofs.</p>",
        "id": 259273247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635354798
    },
    {
        "content": "<p>OKOK, got it.</p>",
        "id": 259273304,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635354819
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 259273420,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635354854
    },
    {
        "content": "<p>I was trying to use the <code>add_monoid_hom.mk'</code> def,  but I am unable to: in tactic mode, I get five fields to be filled in. Did you mean that I should first prove that my map is a <code>add_monoid_hom</code> with  <code>add_monoid_hom.mk'</code> and then fill the <code>map_zero'</code> by simply using a field of the <code>add_monoid_hom</code> structure? I guess not, but cannot come up with anything smarter.</p>",
        "id": 259301450,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635366392
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_map_as_add_monoid_hom</span> <span class=\"o\">:</span> <span class=\"n\">blabla</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_hom.mk'</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_map_as_comphausly_thing</span> <span class=\"o\">:</span> <span class=\"n\">blabla</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">new_field1</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">my_map_as_add_monoid_hom</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 259301828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635366579
    },
    {
        "content": "<p>Ah ok: so the two dots inside the bracket make lean understand that it should look for all the missing fields in <code>my_map_as_add_monoid_hom</code>?</p>",
        "id": 259302107,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635366714
    },
    {
        "content": "<p>I have the feeling that specializing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\theta=1/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/2</span></span></span></span> slows down the computation: I have defined  <code>θ₂ r = θ (1 / 2) r</code>,  and things are really slow now. Is it possible or must the slowness come from something else?</p>",
        "id": 261793657,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637160409
    },
    {
        "content": "<p>What is strange is that the orange bars on the right disappear almost immediately, and what now takes very long to be discharged are the ones on the left.</p>",
        "id": 261796149,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637161394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Does the problem persist after compiling the full project?</p>",
        "id": 261796347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637161472
    },
    {
        "content": "<p>Yes, and it seems to be very localized to this file (all the other files  work perfectly)</p>",
        "id": 261796397,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637161499
    },
    {
        "content": "<p>Hmm, frustrating</p>",
        "id": 261796416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637161508
    },
    {
        "content": "<p>I am now trying with another version of the lemma where I keep <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ξ</mi></mrow><annotation encoding=\"application/x-tex\">\\xi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04601em;\">ξ</span></span></span></span> as a variable</p>",
        "id": 261796443,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637161520
    },
    {
        "content": "<p>Random weird idea. Would it help to use <code>def half := 1/ 2</code> and then only mention <code>half</code>? If that works, it would in some sense be quite sad.</p>",
        "id": 261796508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637161556
    },
    {
        "content": "<p>Let me try.</p>",
        "id": 261796566,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637161567
    },
    {
        "content": "<p><code>def half := 1/ 2</code> is in <code>ℕ</code>, right?</p>",
        "id": 261796733,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637161639
    },
    {
        "content": "<p>And it is probably <code>1</code></p>",
        "id": 261796753,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637161647
    },
    {
        "content": "<p>Well, I did <code>def half := (1 / 2 : ℝ)</code></p>",
        "id": 261796787,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637161663
    },
    {
        "content": "<p>(fixing a couple of errors, as soon as I have an answer I will report it)</p>",
        "id": 261796893,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637161700
    },
    {
        "content": "<p>Another option along these lines is to keep a variable but also pass a hypothesis that it's equal to 1/2</p>",
        "id": 261796896,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637161701
    },
    {
        "content": "<p>Like <code>variables (ξ : ℝ) [fact (ξ = 1/2 : ℝ)]</code>?</p>",
        "id": 261797006,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637161749
    },
    {
        "content": "<p>Or just <code>(h : ξ = 1/2)</code></p>",
        "id": 261797091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637161794
    },
    {
        "content": "<p>OK, let me try.</p>",
        "id": 261797187,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637161817
    },
    {
        "content": "<p>Well, as far as I can tell the problem does not come from the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ξ</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\xi= 1/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04601em;\">ξ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/2</span></span></span></span>: even leaving it as a variable and not specifying its value, my left bars still take very long to disappear. I will try to understand if the problem comes from somewhere else. Thanks for the suggestions, at any rate: it is somewhat a relief that the problem does not (seem to come from) specialising to a specific value.</p>",
        "id": 261798733,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637162408
    },
    {
        "content": "<p>I can reproduce the slowness. Take the following snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">θ_is_linear</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_linear_map</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"n\">ξ</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">θ₂.to_linear</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">laurent_measures</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Fintype.of</span> <span class=\"n\">punit</span><span class=\"o\">))</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">θ</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">θ_is_linear</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">θ_is_linear</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ker_θ₂_principal</span> <span class=\"o\">:</span> <span class=\"n\">submodule.is_principal</span> <span class=\"o\">((</span><span class=\"n\">θ₂.to_linear</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- constructor,</span>\n  <span class=\"k\">let</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">f₀</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">int.rec_on</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f₀</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"c1\">--   intro h_x,</span>\n<span class=\"c1\">--   obtain ⟨a, h_ax⟩ := mem_span_singleton.mp h_x,</span>\n<span class=\"c1\">--   apply mem_ker.mpr,</span>\n<span class=\"c1\">--   rw ← h_ax,</span>\n<span class=\"c1\">--   -- squeeze_simp,</span>\n<span class=\"c1\">--   simp,</span>\n<span class=\"c1\">--   apply or.intro_right,</span>\n<span class=\"c1\">--   rw θ₂.to_linear,</span>\n<span class=\"c1\">--   -- rw θ.to_linear,</span>\n<span class=\"c1\">--   simp,</span>\n<span class=\"c1\">--   rw θ,</span>\n<span class=\"c1\">--   simp,</span>\n<span class=\"c1\">--   simp_rw [laurent_measures.to_Rfct],</span>\n<span class=\"c1\">--   let S : finset ℤ := {0, 1},</span>\n<span class=\"c1\">--   have hf : function.support f₀ ⊆ S, sorry,</span>\n<span class=\"c1\">--   have hf₀ : ∀ s ∉ S, ((f₀ s) : ℝ) * ((2 ^ s) : ℝ)⁻¹ = (0 : ℝ), sorry,</span>\n<span class=\"c1\">--   rw [tsum_eq_sum hf₀],</span>\n<span class=\"c1\">--   -- rw ← [has_sum_subtype_iff_of_support_subset hf],</span>\n<span class=\"c1\">--   sorry, sorry,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261890969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637217133
    },
    {
        "content": "<p>That noncomputable def  <code>θ₂.to_linear</code> takes ~ 9s and the lemma <code>ker_θ₂_principal</code> ~7s.</p>",
        "id": 261891005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637217198
    },
    {
        "content": "<p>Any idea on why this happens?</p>",
        "id": 261898988,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637224456
    },
    {
        "content": "<p>I have no clue. The profiler says that it's spending ages on elaboration. I have no idea how to debug this further.</p>",
        "id": 261899049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637224511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> If you have some time to look into this, that would be great.</p>",
        "id": 261899068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637224534
    },
    {
        "content": "<p>Of course I can (=will!) improve the lemma, and its proof. But the definition looked quite innocent to me, and also somewhat necessary. Another option would be to immediately define <code>θ</code> as a <code>linear_map</code>, but would that be faster, on your opinion?</p>",
        "id": 261899188,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637224592
    },
    {
        "content": "<p>Do you think it might be related to the fact that the <code>lemma θ_is_linear</code> is <code>sorry</code>ed?</p>",
        "id": 261899254,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637224646
    },
    {
        "content": "<p>That shouldn't matter</p>",
        "id": 261904168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637227937
    },
    {
        "content": "<p>At this point, I really don't know where to look for the source of this problem</p>",
        "id": 261904198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637227963
    },
    {
        "content": "<p>Is it related to <a href=\"#narrow/stream/113488-general/topic/Slow.20elaboration.20-.20algebra/near/257774565\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Slow.20elaboration.20-.20algebra/near/257774565</a> which we also never got to the bottom of?</p>",
        "id": 261904537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637228182
    },
    {
        "content": "<p>Hmm, could very well be.</p>",
        "id": 261905922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637229178
    },
    {
        "content": "<p>I am teaching now, but I will try to modify the original definition of <code>θ</code> to immediately define it as a <code>linear_map</code> this afternoon, to see if that changes something.</p>",
        "id": 261906282,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637229396
    },
    {
        "content": "<p>(my logic is only that they're both \"random algebra being slow\")</p>",
        "id": 261907175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637229936
    },
    {
        "content": "<p>A small update: as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  was rightly suggesting, there has basically been no improvement when changing the definition of <code>θ</code> as a <code>linear_map</code> instead of simply a <code>map</code>.  I have the feeling  that what is really slow is the  <code>submodule.is_principal ((θₗ r).ker)</code> whereas the rest is somewhat OK. I will try to remove the lemma and just keep the relevant computation, since at any rate we know an explicit generator.</p>",
        "id": 261961434,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1637256773
    },
    {
        "content": "<p>I might not have more time this afternoon to debug, gotta move on to a couple other things for now, but a couple preliminary notes:</p>\n<ul>\n<li>You have some slow searches for <code>module ℤ (laurent_measures r (Fintype.of punit))</code> toward the beginning. Adding this as a high priority instance helps a bit but not everywhere.</li>\n<li>With <code>set_option trace.type_context.is_def_eq true</code> there are weird failures in various places (including the proof of <code>θ₂.to_linear</code>) of the form</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq</span><span class=\"o\">]</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">↑|</span><span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"bp\">⇑</span><span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">|↑</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"bp\">⇑</span><span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">↑|</span><span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"bp\">⇑</span><span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">↑|</span><span class=\"mi\">0</span> <span class=\"bp\">•</span> <span class=\"bp\">⇑</span><span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"n\">failed</span>  <span class=\"o\">(</span><span class=\"n\">approximate</span> <span class=\"n\">mode</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I can't figure out where this is coming from but it seems like it could be slow.</p>\n<ul>\n<li>In <code>ker_θ₂_principal</code>, adding <code>fconstructor, fconstructor</code> before <code>use</code> cuts the compilation time in half. <code>use</code> uses <code>fconstructor</code> under the hood, but only after it fails to unify the input with the original goal. At least one of these failures must be very slow for some reason.</li>\n</ul>",
        "id": 262125185,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1637353606
    },
    {
        "content": "<p>I will be away from my PC and my VSCode for 10 days or so, until 2022; the current status of theorem 6.9 is that I have finally managed to have all details written down on paper, and most of the lemmas are stated in the file, some sorryed out. The code is a bit of a mess, but I hope to be able to finish the full proof of Theorem 6.9 quite soon as soon as I will be back, and to polish the code afterwards.</p>",
        "id": 265897975,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1640251423
    },
    {
        "content": "<p>What will need to be done next is to state the exactness of the SES of Thm 6.9 in categorical terms; if nobody sees any obstruction, I would like to claim that part of the file as well, so as to get acquainted with the new categorical materials with which I have not worked much so far.</p>",
        "id": 265898126,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1640251512
    }
]