[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> pushed a definition of condensed sets to <code>condensed/</code>. We have some <code>sorry</code>s again!</p>",
        "id": 245959831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626269650
    },
    {
        "content": "<p>If you feel like hacking on condensed sets, please read the two files, and coordinate with Bhavik if you want to work on some of the sorries.</p>",
        "id": 245959935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626269699
    },
    {
        "content": "<p>There's a bunch of basic API from S2 of Condensed.pdf that people can start working on.</p>",
        "id": 245959984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626269722
    },
    {
        "content": "<p>A good first target might be to show that <code>Cond(Ab)</code> has enough projectives (this will keep us busy for a bit).</p>",
        "id": 245960025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626269749
    },
    {
        "content": "<p>Ooh, and we now have linters that warn about missing docstrings and such: <a href=\"https://github.com/leanprover-community/lean-liquid/runs/3067223382\">https://github.com/leanprover-community/lean-liquid/runs/3067223382</a></p>",
        "id": 245960435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626269926
    },
    {
        "content": "<p>I'm confused. How can we write down <code>Condensed A</code> for a category <code>A</code> with no further instances about existence of certain limits?</p>",
        "id": 245960793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626270097
    },
    {
        "content": "<p>Or is the sheaf condition tested in the presheaf category associated to <code>A</code>?</p>",
        "id": 245960890,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626270134
    },
    {
        "content": "<p>To say that something is a sheaf, you only need to ask that something <em>is</em> a limit; you don't need to ask that the limit exists and the map to the limit is an isomorphism</p>",
        "id": 245960953,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1626270166
    },
    {
        "content": "<p>Oh yes of course</p>",
        "id": 245961001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626270193
    },
    {
        "content": "<p>But will this definition (which uses <code>Profinite</code>) be equivalent to the other definitions using <code>ExtrDisc</code> and/or <code>CompHaus</code> if <code>A</code> has no further structure?</p>",
        "id": 245962056,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626270693
    },
    {
        "content": "<p>No, not in general.</p>",
        "id": 245962185,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1626270742
    },
    {
        "content": "<p>You need that <code>A</code> admits certain finite limits (reflexive equalizers)</p>",
        "id": 245962297,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1626270808
    },
    {
        "content": "<p>(It's actually an interesting and not completely obvious question for which kinds of categories <code>A</code> the usual notion of <code>A</code>-valued sheaves is the \"correct\" one. Certainly for abelian groups or rings, but not for finitely generated abelian groups, or for fields. Maybe instead of fields, local rings is a better example to keep in mind -- then we know what the correct notion ought to be. In those examples, it's generally better to somehow \"repeat the definition internally\".)</p>",
        "id": 245965265,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1626272005
    },
    {
        "content": "<p>But I guess it's not clear that there is one approach that covers all the use cases. Before the condensed formalism, a sheaf of topological rings really needed <code>TopCommRing</code>-valued sheaves. I don't think that could be done internally.</p>",
        "id": 245965813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626272232
    },
    {
        "content": "<p>Kevin and I discussed this quite a bit when we were trying to get the right definition for mathlib, we went with <a href=\"https://stacks.math.columbia.edu/tag/00VR\">https://stacks.math.columbia.edu/tag/00VR</a> since it makes sense for any category <code>A</code></p>",
        "id": 245965897,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626272272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> can we sheafify yet?</p>",
        "id": 245966121,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626272359
    },
    {
        "content": "<p>It's definitely the standard approach and deserves to be the mathlib-approach. I'm just trying to point out that it may not always give the intended notion (and I don't have it completely clear in my head when it does).</p>",
        "id": 245966140,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1626272368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.20sets/near/245966121\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> can we sheafify yet?</p>\n</blockquote>\n<p>Not yet. In my topos repo there's a definition of sheafification for type-valued presheaves on a site (in fact it gives sheafification on Lawvere-Tierney topologies which I then specialise to sites), but there's nothing about moving this to A-valued sheafification on a site.</p>",
        "id": 245966570,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626272522
    },
    {
        "content": "<p>My mental definition of a sheaf involves drawing some diagram involving some limits, so my mental typeclass system failed to find the correct instance <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . Anyway, I completely agree that this is the right definition.</p>",
        "id": 245968783,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626273476
    },
    {
        "content": "<p>I have a naive question. Is it always possible to sheafify a presheaf of A's? I'm assuming not, but for example is it even always possible to sheafify a presheaf of topological rings? In the theory of adic spaces one just rejects A such that the presheaf of top rings on Spa(A,A0) isn't a sheaf, rather than attempting to sheafify it</p>",
        "id": 245978245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626277462
    },
    {
        "content": "<p>I think you need certain (co)limits to exist in <code>A</code> to sheafify.</p>",
        "id": 245979993,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626278181
    },
    {
        "content": "<p>Let me find the construction in stacks</p>",
        "id": 245980046,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626278204
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/00W1\">stacks#00W1</a> is for sheaves of sets, but the idea is there.</p>",
        "id": 245980205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626278275
    },
    {
        "content": "<p>Speaking of sheafification, IIRC we need to be able to sheafify to construct the left adjoint of the forgetful functor from <code>Cond Ab</code> to <code>CondSet</code>, right? And this is probably one of the key steps to show that <code>Cond Ab</code> has enough projectives.</p>",
        "id": 245980579,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626278422
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Condensed sets</span>\n<span class=\"cm\">Defines the category of condensed sets and condensed structures.</span>\n<span class=\"cm\">*Strictly speaking* these are pyknotic, but we hope that in the context of Lean's type theory they</span>\n<span class=\"cm\">serve the same purpose.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">CondensedSet</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">SheafOfTypes.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">proetale_topology.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>I don't think the universes are correct here. It should be sheaves valued in <code>Type (u+1)</code> or something, not <code>Type u</code>.</p>",
        "id": 245986635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626281268
    },
    {
        "content": "<p>I think it's okay? Since <code>Type u : Type (u+1)</code>.</p>",
        "id": 245987943,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626281807
    },
    {
        "content": "<p>These take values in <code>Type u</code> so the type of all such should be in <code>Type (u + 1)</code></p>",
        "id": 245988022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626281844
    },
    {
        "content": "<p>Why should they take values in <code>Type (u+1)</code>?</p>",
        "id": 245988144,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626281895
    },
    {
        "content": "<p>Oh, I think I understand... If we use <code>SheafOfTypes.{u + 1} proetale_topology.{u}</code> then the morphisms would be in <code>Type (u+1)</code> which agrees with the universe level of <code>Profinite.{u}</code>.</p>",
        "id": 245988877,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626282212
    },
    {
        "content": "<p><code>CondensedSet</code> as it is won't be a topos</p>",
        "id": 245989096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626282308
    },
    {
        "content": "<p>I think it's the exponentials that are the problem. Basically, it's a bad idea to consider all (pre)sheaves on a large category, and relative to <code>u</code>, <code>Profinite.{u}</code> is a large category.</p>",
        "id": 245989331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626282420
    },
    {
        "content": "<p>Yeah I see. I thought <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> had some tricks up his sleeves using <code>small</code> or something.</p>",
        "id": 245989372,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626282438
    },
    {
        "content": "<p>I'm not entirely sure I follow. In Condensed.pdf, we are explicitly taking presheaves over the large category of profinites, and I thought the idea was that we ignore the set-theoretic issues mentioned there</p>",
        "id": 245989716,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626282592
    },
    {
        "content": "<p>I'm happy to amend if everyone else is convinced though</p>",
        "id": 245989818,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626282640
    },
    {
        "content": "<p>In any case the \"pyknotic\" approach intrinsically postulates an additional universe, so either the final result needs to be in <code>Type (u+2)</code> or there needs to be an axiom about <code>Type u</code> already containing an inaccessible (which you couldn't prove if <code>u</code> is <code>0</code>).</p>",
        "id": 245989848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626282658
    },
    {
        "content": "<p>The discussion here <br>\n<a href=\"#narrow/stream/267928-condensed-mathematics/topic/extremally.20disconnected.20sets/near/244951268\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/extremally.20disconnected.20sets/near/244951268</a><br>\nis certainly related</p>",
        "id": 245990078,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626282767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.20sets/near/245989096\">said</a>:</p>\n<blockquote>\n<p><code>CondensedSet</code> as it is won't be a topos</p>\n</blockquote>\n<p>Perhaps I'm missing something, but isn't this the whole point? Condensed sets shouldn't form a topos</p>",
        "id": 245990806,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626283050
    },
    {
        "content": "<p>There are two possibilities:</p>\n<ul>\n<li>the \"condensed\" approach is to consider <a href=\"https://ncatlab.org/nlab/show/small+presheaf\">small sheaves</a> on the large category <code>Profinite</code>; it's not described in exactly those terms in Condensed.pdf but AFAIK it's equivalent (at least if you have a universe to work within, maybe). The resulting category of condensed sets is not quite a Grothendieck topos but it has the important properties of one--IIRC it satisfies the Giraud axioms except that it's not locally presentable (only \"class-presentable\", and in particular still cocomplete and complete).</li>\n<li>the \"pyknotic\" approach is just to regard <code>Profinite.{u}</code> as being a small category in universe <code>u+1</code>, and take sheaves there, so you definitely get a real <code>u+1</code>-topos. See page 6 of <a href=\"https://arxiv.org/pdf/1904.09966.pdf\">https://arxiv.org/pdf/1904.09966.pdf</a> but in brief, one could say that the \"default size\" is <code>Type 1</code> not <code>Type 0</code>.</li>\n</ul>",
        "id": 245990980,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626283121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.20sets/near/245990806\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.20sets/near/245989096\">said</a>:</p>\n<blockquote>\n<p><code>CondensedSet</code> as it is won't be a topos</p>\n</blockquote>\n<p>Perhaps I'm missing something, but isn't this the whole point? Condensed sets shouldn't form a topos</p>\n</blockquote>\n<p>The comment I quoted claims to be taking the pyknotic approach. But currently <code>CondensedSet</code> isn't either the condensed version or the pyknotic version.</p>",
        "id": 245991114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626283188
    },
    {
        "content": "<p>What do you suggest changing then?</p>",
        "id": 245991263,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626283236
    },
    {
        "content": "<p>I was under the impression that the plan was to use the pyknotic approach, and take sheaves valued in <code>Type (u+1)</code>.</p>",
        "id": 245992035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626283589
    },
    {
        "content": "<p>I see, I think it's pretty easy to solve then</p>",
        "id": 245992520,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626283810
    },
    {
        "content": "<p>A variation would be to add a <code>constant</code> in <code>Type u</code> for an inaccessible cardinal and then restrict <code>Profinite</code> to spaces that are smaller than it, but that's probably too radical</p>",
        "id": 245992840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626283940
    },
    {
        "content": "<p>The idea would be to avoid having to write <code>Type (u+1)</code> everywhere. Maybe you should just define <code>local notation `TYPE` := Type (u+1)</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 245993002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626284003
    },
    {
        "content": "<p>Or call it <code>Set</code>, then everyone will be equally confused.</p>",
        "id": 245993165,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626284069
    },
    {
        "content": "<p>Just to clarify, the suggestion is to change the site to be on <code>pretopology (as_small.{u+1} Profinite.{u})</code>, ie Profinite.{u} but viewed as a small category:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">small_category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">as_small.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>then the category of presheaves should be <code>_ ⥤ Type (u+1)</code>?</p>",
        "id": 245993721,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626284302
    },
    {
        "content": "<p>Yes, that sounds right</p>",
        "id": 245993909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626284397
    },
    {
        "content": "<p>Got it. I think the only real barrier to implementing this is some missing instances on <code>as_small</code>.</p>",
        "id": 245994054,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626284445
    },
    {
        "content": "<p>As I've said before, I'm happy with you going the pyknotic way. But maybe one could also call it pyknotic in the Lean code then? It would seem more fair to me.</p>",
        "id": 246007367,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1626290620
    },
    {
        "content": "<p>(And \"small sheaves = the thing defined in [Condensed]\" does not need any universes/inaccessibles)</p>",
        "id": 246007506,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1626290679
    },
    {
        "content": "<p>I'm starting to be curious what your experience will be: whether it's more trouble keeping track of universes as in the pyknotic way, or occasionally having to prove smallness, as in the condensed way. Would you have enough stuff about cardinals in mathlib to talk about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>-small condensed sets for a strong limit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>, say? (and have this be a small category)</p>",
        "id": 246010454,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1626292109
    },
    {
        "content": "<p>I doubt that we have the definition of strong limit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>, but otherwise we have some API around cardinals.</p>",
        "id": 246022083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626297074
    },
    {
        "content": "<p>we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.is_inaccessible\">docs#cardinal.is_inaccessible</a> but I've never even come close to using that part of mathlib</p>",
        "id": 246023867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626297936
    },
    {
        "content": "<p>Also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.is_strong_limit\">docs#cardinal.is_strong_limit</a></p>",
        "id": 246023956,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626297978
    },
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Condensed</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>due to the valiant efforts of <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>. How far are we from showing that it is a preadditive category?</p>",
        "id": 248809551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628489360
    },
    {
        "content": "<p>I pushed a stub to <code>master</code> in <code>consendes/ab.lean</code>.</p>",
        "id": 248809871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628489814
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO (BM): put this in mathlib (it's already in a mathlib branch with API)</span>\n<span class=\"kd\">def</span> <span class=\"n\">category_theory.functor.preserves_terminal</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- TODO (BM): put this in mathlib (it's already in a mathlib branch with API)</span>\n<span class=\"kd\">def</span> <span class=\"n\">category_theory.functor.preserves_binary_products</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> can you please tell me which branch? Can you use some help with getting it into mathlib?</p>",
        "id": 249080767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628670327
    },
    {
        "content": "<p>I think the more pressing issue with the stuff in <code>condensed/*</code> is to get the universe levels correct... In the other code I've written the easiest approach I found was to use <code>(as_small.{u+1} Profinite.{u})\\op \\func Type (u+1)</code>. If I understand correctly, we're still missing a way to transport a Grothendieck topology along an equivalence of categories?</p>",
        "id": 249101046,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628685743
    },
    {
        "content": "<p>I guess so</p>",
        "id": 249101408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628685971
    },
    {
        "content": "<p>By the way, in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}(S,\\mathbb{Z}((T))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> it seems that we're exploiting the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><msub><mo stretchy=\"false\">]</mo><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S]_{\\le c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> is a profinite set and that our condensed objects are sheaves on <code>Profinite</code>. Now what happens for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}_p(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>? The analogous members of the filtration are compact Hausdorff. Are we sure we don't want to build condensed objects as sheaves on <code>CompHaus</code>?</p>",
        "id": 249103172,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628686852
    },
    {
        "content": "<p>We can still view <code>X : CompHaus</code> as a condensed set, right?</p>",
        "id": 249103348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628686919
    },
    {
        "content": "<p>What do you think would become easier?</p>",
        "id": 249103412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628686931
    },
    {
        "content": "<p>More representables?</p>",
        "id": 249103430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628686941
    },
    {
        "content": "<p>Yes exactly.</p>",
        "id": 249103606,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628687040
    },
    {
        "content": "<p>It doesn't really matter if we have a good complete API, of course.</p>",
        "id": 249103842,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628687143
    },
    {
        "content": "<p>So in the end the question is: which definitions are best for setting up the API?<br>\nI don't know the answer</p>",
        "id": 249103955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628687182
    },
    {
        "content": "<p>I'm just thinking we may want to generalize <code>ProfinitelyFilteredPseudoNormedGroup</code> to <code>CompHauslyFilteredPseudoNormedGroup</code></p>",
        "id": 249104027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628687216
    },
    {
        "content": "<p>but we only need it once, I think</p>",
        "id": 249105745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628688005
    },
    {
        "content": "<p>for this M_p construction</p>",
        "id": 249105774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628688023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.20sets/near/249104027\">said</a>:</p>\n<blockquote>\n<p>I'm just thinking we may want to generalize <code>ProfinitelyFilteredPseudoNormedGroup</code> to <code>CompHauslyFilteredPseudoNormedGroup</code></p>\n</blockquote>\n<p>Actually, <code>profinitely_filtered_pseudo_normed_group</code> could <em>easily</em> extend <code>comp_haus_filtered_pseudo_normed_group</code>. That would just be a few lines.<br>\nAnd then we need something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Cond_Ab_mk_of_chfpng</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comp_haus_filtered_pseudo_normed_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Condensed</span> <span class=\"n\">Ab</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Which would work for profinitely filtered png's as well, by typeclass inference.</p>\n<p>We can then apply this constructor to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_p(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>I'm not sure whether we want to make it functorial in general. We will only need functoriality once, I think. Because we need a \"quotient\" map</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mi mathvariant=\"script\">M</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_r) \\to \\mathcal M_p(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span></span></p>",
        "id": 249255997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628784929
    },
    {
        "content": "<p>This quotient map is the content of prop 7.2 of Analytic.pdf. We'll need to fill in a bunch of details there.</p>",
        "id": 249256170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628785015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Are you also defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>? Or only the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\">M</span></span></span></span> spaces?</p>",
        "id": 249256352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628785088
    },
    {
        "content": "<p>Of course <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is matheq to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mo>∗</mo><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(*, \\Z((T))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord\">∗</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. But I don't think that's a nice lean def.</p>",
        "id": 249256419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628785133
    },
    {
        "content": "<p>As soon as we have a def of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> together with its filtration, someone can start looking into prop 7.2.</p>",
        "id": 249256444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628785153
    },
    {
        "content": "<p>What sort of structure do we have on <code>pfpsn</code>'s?</p>",
        "id": 249266551,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628789614
    },
    {
        "content": "<p>E.g. can we take a product?</p>",
        "id": 249266566,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628789621
    },
    {
        "content": "<p>Can we take a tensor product?</p>",
        "id": 249266589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628789631
    },
    {
        "content": "<p>Because presumably we should define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> as a profinitely-filtered-pseudo-normed-<em>ring</em></p>",
        "id": 249266753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628789685
    },
    {
        "content": "<p>It's not clear to me that we need the ring structure, but we probably do...<br>\nThe reason it's not clear to me, is that the challenge is about an <code>Ext</code> in condensed abelian groups, not in condensed <code>R</code>-modules.</p>",
        "id": 249268592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628790572
    },
    {
        "content": "<p>So maybe we don't need condensed rings for this challenge.</p>",
        "id": 249268625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628790586
    },
    {
        "content": "<p>We don't need the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[T^{-1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>-module structure?</p>",
        "id": 249269019,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628790752
    },
    {
        "content": "<p>Related to this: on p. 37 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> is said to be a <em>free module</em>: I guess it is meant to be a free module over the <em>ring</em> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, no?</p>",
        "id": 249269921,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628791133
    },
    {
        "content": "<p>yes, I'm fairly certain it's free over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">))</span></span></span></span>, but that doesn't necessarily matter if we're only interested in the structure as a (condensed) abelian group.</p>",
        "id": 249270054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628791196
    },
    {
        "content": "<p>Well, I am just slightly worried that in Thm 6.9 (ii) (or Prop 7.2 Johan was referring to) it might be useful to have the language of ideals at our disposal to speak about \"principal\" kernels. But I confess I haven't dug in the details of the proof yet, you certainly have a clearer picture.</p>",
        "id": 249273738,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628792855
    },
    {
        "content": "<p>Well, if it turns out we need the ring structure, then we just add it.</p>",
        "id": 249273837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628792891
    },
    {
        "content": "<p>I mean, we need the ring structure. But I don't know whether we need it as <em>condensed</em> ring. Certainly Prop 7.2 as stated is a bunch of computations about ordinary rings.</p>",
        "id": 249273928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628792935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.20sets/near/249269019\">said</a>:</p>\n<blockquote>\n<p>We don't need the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[T^{-1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>-module structure?</p>\n</blockquote>\n<p>I think we do need this. But that might boil down to explicitly recording the endomorphism through which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> acts. Just like we had <code>normed_with_aut</code> in the first part of LTE.</p>",
        "id": 249274237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628793059
    },
    {
        "content": "<p>Yes, you're right.</p>",
        "id": 249274251,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628793065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/condensed.20sets/near/249256419\">said</a>:</p>\n<blockquote>\n<p>Of course <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is matheq to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mo>∗</mo><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(*, \\Z((T))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord\">∗</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. But I don't think that's a nice lean def.</p>\n</blockquote>\n<p>I was thinking about this again: do you mean that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mo>∗</mo><mo separator=\"true\">,</mo><mo>†</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(\\ast,\\dagger)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord\">∗</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">†</span><span class=\"mclose\">)</span></span></span></span> is the functor of \"taking global sections of the condensed ab. group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>†</mo></mrow><annotation encoding=\"application/x-tex\">\\dagger</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">†</span></span></span></span>, and that, for fixed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>†</mo></mrow><annotation encoding=\"application/x-tex\">\\dagger</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">†</span></span></span></span> it has the same value on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">\\ast</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>†</mo></mrow><annotation encoding=\"application/x-tex\">\\dagger</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">†</span></span></span></span>?</p>",
        "id": 249280858,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628796239
    },
    {
        "content": "<p>In this case, I just meant the very mundane observation that for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mtext>pt</mtext><mo>=</mo><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">S = \\text{pt} = *</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord\">pt</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">∗</span></span></span></span> the space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is canonically isom to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. I haven't thought too much about generalizing the second argument to some arbitrary <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>†</mo></mrow><annotation encoding=\"application/x-tex\">\\dagger</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">†</span></span></span></span>.</p>",
        "id": 249281361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628796474
    },
    {
        "content": "<p>Presumably we can give a construction which takes any <del>profinitely-filtered-pseudo-normed-ring</del> comphausly-filtered-pseudo-normed-ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and constructs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}(S,R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 249283920,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628797792
    },
    {
        "content": "<p>yes, I think that works. But for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-version we'll need type aliases for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><msup><mi mathvariant=\"normal\">ℓ</mi><mi>p</mi></msup></msub></mrow><annotation encoding=\"application/x-tex\">\\R_{\\ell^p}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5935428571428571em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> or something like that. I'm not sure it is worth it.</p>",
        "id": 249323105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628831207
    },
    {
        "content": "<p>A step toward fixing the universe issues: I just pushed a definition of the pro-etale topology on <code>as_small Profinite</code> in <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/condensed/proetale_site_as_small.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/condensed/proetale_site_as_small.lean</a> </p>\n<p>The code that <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> wrote works almost exactly the same, once the correct concrete_category instances were activated. The most annoying part was proving that <code>as_small Profinite</code> has pullbacks, which is still a bit of a mess (and should be generalized somehow anyway), which can be found in a more general setting in <code>for_mathlib/pulllbacks</code>.</p>",
        "id": 251816981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630638762
    },
    {
        "content": "<p>A much better approach would be to build a construction which transports a grothendieck topology across an equivalence, but the trouble I had transporting existence of pullbacks along an equivalence makes me think that this will be a very VERY annoying construction.</p>",
        "id": 251817207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630639013
    }
]