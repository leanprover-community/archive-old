[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I tried to write down a statement of Gordan's lemma together with <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>.<br>\nWe got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nat_submodule</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gordan</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">Λ</span><span class=\"n\">_tf</span> <span class=\"o\">:</span> <span class=\"n\">torsion_free</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"bp\">Λ</span><span class=\"n\">_fg</span> <span class=\"o\">:</span> <span class=\"n\">module.finite</span> <span class=\"n\">ℤ</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">dual_pairing</span> <span class=\"n\">ℤ</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dual_set</span> <span class=\"n\">nat_submodule</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Λ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fg</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229635248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615372638
    },
    {
        "content": "<p>That <code>nat_submodule</code> is a bit awkward. Do you think you can refactor the definition of <code>dual_set</code> so that we can just use <code>\\N</code> there?</p>",
        "id": 229635270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615372666
    },
    {
        "content": "<p>I will look into this, but would using <code>nnR \\Z</code>work?</p>",
        "id": 229635717,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615372906
    },
    {
        "content": "<p>That's a subsemiring, and it wants a submodule</p>",
        "id": 229636138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615373143
    },
    {
        "content": "<p>So then you need to cast, which makes me fear that you'll end up with a very annoying copy of <code>\\N</code> to work with.</p>",
        "id": 229636249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615373177
    },
    {
        "content": "<p>ah, so even if there were an instance from a subsemiring to a subsemimodule you think that it would not be useful?</p>",
        "id": 229636336,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615373226
    },
    {
        "content": "<p>Right, I think it will be unpleasant to work with in the proof of 9.7</p>",
        "id": 229636417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615373275
    },
    {
        "content": "<p>I can try to refactor <code>dual_set</code>, but what should it take as input for semimodule?</p>",
        "id": 229636420,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615373278
    },
    {
        "content": "<p>Maybe a <code>P0</code>, and a <code>is_inj_nonneg f</code> for some <code>f : P0 -&gt; P</code>?</p>",
        "id": 229636515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615373310
    },
    {
        "content": "<p>Hmm, but that gives you back the order structure on <code>P</code>, which we wanted to avoid</p>",
        "id": 229636536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615373329
    },
    {
        "content": "<p>So maybe just <code>f : P0 -&gt; P</code>, possibly injective?</p>",
        "id": 229636553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615373342
    },
    {
        "content": "<p>I guess <code>f</code> should be <code>R</code>-linear</p>",
        "id": 229636582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615373352
    },
    {
        "content": "<p>Ok, I will try to aim for \\N to simply work in this context, possibly at the cost of introducing some extra data, like an injection somewhere.</p>",
        "id": 229636670,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615373406
    },
    {
        "content": "<p>after all, Eric wants to make multiplications by \\N <em>always</em> smuls, right?  this plays in our favour here...  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 229636769,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615373475
    },
    {
        "content": "<p>But I will likely not get around to this today and probably not tomorrow either.  I should have some more time on Friday.</p>",
        "id": 229636797,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615373511
    },
    {
        "content": "<p>Sure no worries, there is no need to haste <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 229636887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615373546
    },
    {
        "content": "<p>so, if in the meantime you play some more with this and come up with something that would definitely be good for you, let me know!</p>",
        "id": 229636890,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615373549
    },
    {
        "content": "<p>I pushed a very explicit version of Gordan's lemma, that should be exactly in the shape that we need for 9.7.<br>\nWe can later work on gluing this version to whatever rolls out of Damiano's toric efforts.</p>",
        "id": 229645738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615378222
    },
    {
        "content": "<p>I am looking at what you did for the statement of Gordan's lemma.  It seems that you circumvented the problem by defining an <em>ad hoc</em> <code>dual_set</code>, right?</p>\n<p>So, in terms of refactoring, there will simply be the need for some conversion between your version and the one that is in the toric branch, am I correct?</p>",
        "id": 229680582,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615390076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> yes, I agree</p>",
        "id": 229680774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615390123
    },
    {
        "content": "<p>this will allow us to work on 9.7, and we can smoothen things once we have a proof of the \"correct, general\" version of Gordan's lemma</p>",
        "id": 229680927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615390161
    },
    {
        "content": "<p>Maybe we even want to keep this ad hoc version. Then we don't have to worry about refactoring <code>dual_set</code> for now.</p>",
        "id": 229681036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615390201
    },
    {
        "content": "<p>Sounds good!  Also, at some point, the inequalities will probably need to enter the picture anyway and I would certainly like to see the statement that you formalized proved in Lean!</p>",
        "id": 229681453,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615390292
    },
    {
        "content": "<p>If we can make the proof of Gordan's lemma constructive (it computes explicit generators of the dual submonoid, given an explicit finite list of elements), then we can make the constant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> in lemma 9.8 computable. That in turn would make all the other constants computable, as far as I can tell.</p>",
        "id": 230181150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615661139
    },
    {
        "content": "<p>I do not know much about computability, but, as I understand the proof now of Gordan's lemma, there will be two \"kinds\" of generators:</p>\n<ul>\n<li>a set of generators that is, \"up to finite index\", the correct one;</li>\n<li>some more elements to add, in order to saturate the previous set.</li>\n</ul>\n<p>The elements of the first part are, in spirit, the elements of a basis, so I would imagine that they will be computable, if basis of vector spaces are.</p>\n<p>The elements of the second set at the elements in the intersection of a \"cube\" centered at the origin with the elements of the subsemimodule.  Here is where I am not entirely how computability would work out.</p>",
        "id": 230182444,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615662439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> here I don't mean anything philosophical with computability. Just that we get an actual algorithm that you can run.</p>",
        "id": 230182890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615662906
    },
    {
        "content": "<p>I guess, if we can get an explicit bound on the radius of the \"cube\" in the second set, then we're fine.</p>",
        "id": 230182911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615662933
    },
    {
        "content": "<p>And I'm quite sure that this will work, because there are all sorts of software packages out there that can do such computations, right?</p>",
        "id": 230182924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615662956
    },
    {
        "content": "<p>In that case, the proof might indeed give an algorithm, since the \"box\" should be explicit.</p>",
        "id": 230188594,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615669300
    },
    {
        "content": "<p>Do we want Gordan's lemma in mathlib?</p>",
        "id": 267046893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641465870
    },
    {
        "content": "<p>Yes!</p>",
        "id": 267046971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641465941
    },
    {
        "content": "<p>But I think it depends on the <code>nnrat.lean</code> file about about nonnegative rationals. And that is duplicating <code>nnreal.lean</code>. So we want some API generalizing the two.</p>",
        "id": 267047076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641466004
    },
    {
        "content": "<p>If I'm not mistaken, <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> wrote stuff about a general <code>nonneg</code> subtype a while ago. But I don't think <code>nnrat.lean</code> was adapted to that.</p>",
        "id": 267047115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641466034
    },
    {
        "content": "<p>I haven't had much of a look at <code>nnrat</code>, but is it defined as <code>nonneg ℚ</code> or as coprime pairs of naturals?</p>",
        "id": 267047957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641466569
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Nonnegative rational numbers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">nnrat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">}</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation ` ℚ≥0 ` := nnrat\"</span> <span class=\"k\">in</span> <span class=\"n\">nnreal</span>\n</code></pre></div>",
        "id": 267047987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641466604
    },
    {
        "content": "<p>That looks like <code>nonneg</code> to me!</p>",
        "id": 267048027,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641466648
    },
    {
        "content": "<p>Yep, but it doesn't use <code>src/algebra/order/nonneg.lean</code> at all, because history</p>",
        "id": 267048124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641466705
    },
    {
        "content": "<p>I guess we can try adapting it then.</p>",
        "id": 267048181,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641466762
    },
    {
        "content": "<p>Almost all instances can be gotten from from <code>nonneg</code>, but it doesn't have much else yet (for lemmas you probably also prefer <code>nnrat.my_lemma</code> over <code>nonneg.my_lemma</code>). </p>\n<p>I love deleting things, so I'll make the changes.</p>",
        "id": 267084337,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641487934
    },
    {
        "content": "<p>I would really love to see Gordan's lemma in mathlib, so tell me what I can take care of.</p>",
        "id": 267085051,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641488326
    },
    {
        "content": "<p>What is the workflow for lean-liquid? Build locally and if it builds, push?</p>",
        "id": 267085358,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641488439
    },
    {
        "content": "<p>I personally only ever pushed to mathlib, but I was working on leaf files, or rather leaf declarations.</p>",
        "id": 267085596,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641488540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Yep, that's right.</p>",
        "id": 267087166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641489251
    },
    {
        "content": "<p>Sorry's are fine, but compile errors should be avoided.</p>",
        "id": 267087199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641489269
    },
    {
        "content": "<p>And please don't break the proof in <code>liquid.lean</code> (-;</p>",
        "id": 267087240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641489288
    },
    {
        "content": "<p>There were 2 minor breakages, but nowhere near <code>liquid.lean</code> :-)</p>",
        "id": 267088342,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641489816
    },
    {
        "content": "<p>I pushed.<br>\nThere is still a lot of stuff duplicated in <code>nnreal</code>/<code>nnrat</code> that could be moved to <code>nonneg</code>, but currently I think everything that is in <code>nonneg</code> is now used in <code>nnrat</code>.</p>",
        "id": 267088604,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641489942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> what do you think? would it make sense to PR this to mathlib, and deduplicate later?</p>",
        "id": 267088767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641490019
    },
    {
        "content": "<p>Yeah, I think that is completely fine.</p>",
        "id": 267089098,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1641490168
    },
    {
        "content": "<p>What even is duplicated? Lemmas? Is it a problem of not having the correct typeclass? Are you telling me I should write more order typeclasses?</p>",
        "id": 267089637,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641490475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <code>nnrat.lean</code> is currently ~ 500 lines. I would be surprised if there's more than 50 lines of lemmas that aren't exact duplicates of lemmas that hold for <code>nnreal</code>.</p>",
        "id": 267090455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641490895
    },
    {
        "content": "<p>Ohohoh!</p>",
        "id": 267090680,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641491014
    }
]