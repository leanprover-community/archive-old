[
    {
        "content": "<p>If someone feels like it, we can bump mathlib and get access to <code>lean-3.26.0</code>.</p>",
        "id": 224205377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611764165
    },
    {
        "content": "<p>The <code>lean-3.24.0</code> branch should stay on the final commit that uses that version of lean. And we can create a new <code>lean-3.26.0</code> branch to track the new version.</p>",
        "id": 224205486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611764209
    },
    {
        "content": "<p>I'll have dinner first (-;</p>",
        "id": 224205516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611764224
    },
    {
        "content": "<p><span aria-label=\"warning\" class=\"emoji emoji-26a0\" role=\"img\" title=\"warning\">:warning:</span> done</p>",
        "id": 224215793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611768352
    },
    {
        "content": "<p>so make sure to run <code>leanproject get-mathlib-cache</code> after git pulling</p>",
        "id": 224215909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611768388
    },
    {
        "content": "<p>Johan and I just bumped mathlib</p>",
        "id": 227238273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613985518
    },
    {
        "content": "<p>Nice! Did you also do it for the toric branch? That might get rid of the red x.</p>",
        "id": 227242708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613988087
    },
    {
        "content": "<p>yup, we are working on toric right now</p>",
        "id": 227247631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613990678
    },
    {
        "content": "<p>and it has a <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> now on github</p>",
        "id": 227247692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613990718
    },
    {
        "content": "<p>Nice! I'm still working on the is_scalar_tower issue. From a ring-theoretic perspective the issue is simple: if R is an A-algebra and M, N are two R-modules then Hom_R(M,N) is an R-algebra and an A-algebra and we are missing the is_scalar_tower instance which guarantees that the two actions coincide (A acts because is_scalar_tower A R N gives an A-action on Hom_R(M,N)). I tried to generalise this to A a monoid acting on a comm_semiring R blah blah blah you can guess the story, but Eric pointed out that something even more general is true: A can be a B-algebra and then the actions of A and B on Hom_R(M,N) are compatible. I've just got this working. Once 6331 is accepted, there's a random is_scalar_tower instance in toric.lean which can be removed (I just checked).</p>",
        "id": 227250898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613992453
    },
    {
        "content": "<p>We just pushed a bunch of stuff</p>",
        "id": 227252299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613993288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> so be sure to pull (-;</p>",
        "id": 227252316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613993294
    },
    {
        "content": "<p>I just did another mathlib bump, deleting 415 lines of stuff that has moved from the repo to mathlib</p>",
        "id": 227396241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614068902
    },
    {
        "content": "<p>sorry, I broke the build in my previous push, it should be fixed now</p>",
        "id": 227768580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614260712
    },
    {
        "content": "<p>I bumped mathlib and in the process bumped lean to 3.27.0c.<br>\nBe sure to <code>leanproject get-mathlib-cache</code> after pulling.</p>",
        "id": 227895654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614327798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I have the defn of <code>system_of_complexes.completion</code> ready to push to master. Just double checking it's okay to bump mathlib in the process....</p>",
        "id": 228109026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614492518
    },
    {
        "content": "<p>Okay, pushed.</p>",
        "id": 228110065,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614493824
    },
    {
        "content": "<p>With a mathlib bump!</p>",
        "id": 228110067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614493835
    },
    {
        "content": "<p>Is there a webhook or something we can set up that will announce something every time leanpkg.toml is updated on master?</p>",
        "id": 228110261,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614494101
    },
    {
        "content": "<p>mathlib bump bumps mathlib</p>",
        "id": 228363369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614668689
    },
    {
        "content": "<p>another bump, updates to the new <code>filter.tendsto</code> names after <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> fixed the namespace issue in mathlib</p>",
        "id": 228898621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614920597
    },
    {
        "content": "<p>I made a trivial but nontrivial mathlib bump</p>",
        "id": 229925758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615496778
    },
    {
        "content": "<p>I've tried bumping mathlib, but there is a nasty error in <code>breen_deligne/universal</code></p>",
        "id": 230571830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615921399
    },
    {
        "content": "<p>two instances for scalar multiplication are not defeq )-;</p>",
        "id": 230571865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615921413
    },
    {
        "content": "<p>The rest of the fixes were quite straightforward. I have pushed to <code>bump-mathlib</code></p>",
        "id": 230571895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615921434
    },
    {
        "content": "<p>I've pushed to latest mathlib, and hence we are now on lean 3.28.0c.</p>\n<p>There was one regression, in <code>breen_deligne/universal.lean</code>. I've commented that out for now.<br>\n<code>universal_map_equiv_functorial_map</code> is a huge monster of a declaration. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> would you mind taking a look? I guess it makes sense to cut it into 4 pieces or so.</p>",
        "id": 230650076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615967483
    },
    {
        "content": "<p>I'm looking now.</p>",
        "id": 230666681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615976151
    },
    {
        "content": "<p>Some default bub instance had changed to some new with_zero bub so I had to change some type class hackery. All the work is proofs, the definitions are small, I could factor out the four proofs if you like.</p>",
        "id": 230668261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615977046
    },
    {
        "content": "<p>It just might be a bit easier to maintain that way</p>",
        "id": 230668318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615977091
    },
    {
        "content": "<p>Ah, this might be the <code>smul_with_zero</code> class that I introduced?  It caused (very) minor issues on mathlib, where some proofs required an extra <code>rw smul_eq_mul</code>, an extra <code>by exact</code> instead of a fully term-mode proof, or a <code>convert</code> instead of an <code>exact</code>.</p>\n<p>I hope that the kind of fixes here were of a similar, small nature.  Sorry for the extra work.</p>",
        "id": 230668579,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615977233
    },
    {
        "content": "<p>I can probably dig out the exact changes that were needed in 3 cases for the introduction, in case it helps: CI documented this pretty explicitly!</p>",
        "id": 230668696,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615977280
    },
    {
        "content": "<p>It's OK, I fixed it already.</p>",
        "id": 230671318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615978700
    },
    {
        "content": "<p>thanks!</p>",
        "id": 230671578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615978851
    },
    {
        "content": "<p>Last night <code>fact</code> was made irreducible in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>$ git diff --stat\n leanpkg.toml                                      |  2 +-\n src/Mbar/Mbar_le.lean                             |  6 +++---\n src/Mbar/basic.lean                               |  8 ++++----\n src/Mbar/bounded.lean                             |  6 +++---\n src/combinatorial_lemma.lean                      |  2 +-\n src/facts/int.lean                                |  2 +-\n src/facts/nnreal.lean                             | 56 +++++++++++++++++++++++++++++++-------------------------\n src/facts/normed_group.lean                       |  2 +-\n src/locally_constant/Vhat.lean                    |  3 ++-\n src/normed_group/rescale.lean                     |  6 +++---\n src/normed_snake.lean                             |  8 ++++----\n src/normed_spectral.lean                          | 18 +++++++++---------\n src/polyhedral_lattice/Hom.lean                   |  2 +-\n src/polyhedral_lattice/cosimplicial.lean          |  6 ++++--\n src/polyhedral_lattice/pseudo_normed_group.lean   |  4 ++--\n src/polyhedral_lattice/rescale.lean               |  4 ++--\n src/pseudo_normed_group/Tinv.lean                 |  4 ++--\n src/pseudo_normed_group/basic.lean                |  2 +-\n src/pseudo_normed_group/profinitely_filtered.lean | 20 ++++++++++----------\n src/pseudo_normed_group/rescale.lean              |  4 ++--\n src/pseudo_normed_group/system_of_complexes.lean  |  8 ++++----\n src/pseudo_normed_group/with_Tinv.lean            |  2 +-\n src/system_of_complexes/basic.lean                | 23 ++++++++++++-----------\n src/system_of_complexes/completion.lean           | 26 ++++++++++++++------------\n src/system_of_complexes/double.lean               | 14 +++++++-------\n src/system_of_complexes/rescale.lean              | 10 +++++-----\n src/thm95/constants.lean                          | 10 +++++-----\n src/thm95/default.lean                            |  2 +-\n 28 files changed, 136 insertions(+), 124 deletions(-)\n</code></pre></div>",
        "id": 231758078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616657848
    },
    {
        "content": "<p>How many faces does a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">6</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span></span></span></span>-dimensional cube have? I think that's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>3</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">3^6</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span> -- a mere <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>729</mn></mrow><annotation encoding=\"application/x-tex\">729</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">9</span></span></span></span>. Ah, who would be afraid of that :-D</p>",
        "id": 231764553,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616661861
    },
    {
        "content": "<p>slightly non-trivial mathlib bump</p>",
        "id": 233007031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617457070
    },
    {
        "content": "<p>I just bumped mathlib</p>",
        "id": 234343003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618326292
    },
    {
        "content": "<p>I'm going to try bumping mathlib to the version that changes the definition of <code>add_monoid</code>. Wish me luck.</p>",
        "id": 234616002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618461308
    },
    {
        "content": "<p>I've hit a first diamond:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">smul_with_zero.to_has_scalar.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.semiring</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                      <span class=\"n\">int.add_comm_monoid</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero.to_smul_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.semiring</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                         <span class=\"n\">int.add_comm_monoid</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semimodule.to_mul_action_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n                <span class=\"n\">nat.semiring</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                   <span class=\"n\">int.add_comm_monoid</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.semimodule.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span> <span class=\"n\">nat.semiring</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                   <span class=\"n\">int.add_comm_monoid</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nat_semimodule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_comm_monoid</span><span class=\"o\">)))))</span>\n       <span class=\"n\">n</span>\n       <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">nat</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.has_scalar_nat.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.add_comm_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_normed_group.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.normed_comm_ring</span><span class=\"o\">))))))))</span>\n       <span class=\"n\">n</span>\n       <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234616965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618462279
    },
    {
        "content": "<p>Weird...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">smul_with_zero.to_has_scalar</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_monoid.has_scalar_nat</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- This just works</span>\n</code></pre></div>",
        "id": 234617648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618462941
    },
    {
        "content": "<p>Hmmm, I might have found the issue. Some files just compiled fine, but are still causing trouble further down the road.</p>",
        "id": 234617968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618463209
    },
    {
        "content": "<p>MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.semimodule.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"n\">nat</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span> <span class=\"n\">nat.semiring</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n    <span class=\"n\">int.add_comm_monoid</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nat_semimodule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_comm_monoid</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.nat_semimodule.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span>\n   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">))</span>\n   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">int</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">Λ</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n                <span class=\"n\">int.add_comm_monoid</span><span class=\"o\">))</span>\n  <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 234621875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618466778
    },
    {
        "content": "<p>This probably requires a fix to mathlib</p>",
        "id": 234621888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618466797
    },
    {
        "content": "<p>I haven't debugged this further, but this is what <code>diff</code> told me</p>",
        "id": 234621910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618466824
    },
    {
        "content": "<p>It's the crucial diff in the <code>pp.all</code> of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">add_monoid.to_smul_with_zero</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 234622152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618467010
    },
    {
        "content": "<p>The <code>normed_space</code> import is also important. If you replace it by <code>module.basic</code> then the <code>rfl</code> works</p>",
        "id": 234622174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618467034
    },
    {
        "content": "<p>When I've got my daughter out the door in about an hour I can look at this</p>",
        "id": 234622628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618467452
    },
    {
        "content": "<p>and this is post <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a>?</p>",
        "id": 234622633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618467456
    },
    {
        "content": "<p>Yes, I'm bumping the project to \"post <a href=\"https://github.com/leanprover-community/mathlib/issues/7084\">#7084</a> mathlib\"</p>",
        "id": 234622706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618467506
    },
    {
        "content": "<p>Unfortunately, that PR also removed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">add_comm_monoid.nat_semimodule.subsingleton</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234622849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618467629
    },
    {
        "content": "<p>Did I write that once upon a time? I seem to remember that. :-)</p>",
        "id": 234622868,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618467654
    },
    {
        "content": "<p>I think it should be brought back. At least as <code>lemma</code>, maybe as instance.</p>",
        "id": 234623245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618467948
    },
    {
        "content": "<p>Isn't the idea that you're not supposed to put it back but instead are supposed to fix the bad instance by supplying a less pathological nat action?</p>",
        "id": 234623461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618468127
    },
    {
        "content": "<p>That's why it maybe doesn't have to be an <code>instance</code>. But it would be nice if we could just use this decl as a tmp fix until mathlib is fixed.</p>",
        "id": 234623494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618468165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Let me ping you here (-;</p>",
        "id": 234629771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618471649
    },
    {
        "content": "<p>I haven't made progress yet...</p>",
        "id": 234629783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618471656
    },
    {
        "content": "<p>OK I've made it to my desk, I'll have a look</p>",
        "id": 234631126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618472391
    },
    {
        "content": "<p>Found it, and fixing it.</p>",
        "id": 234631138,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618472399
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7201\">#7201</a></p>",
        "id": 234639634,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618476815
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 234640314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618477161
    },
    {
        "content": "<p><code>n ^ 0</code> is no longer defeq to <code>1</code>... but I'm very very happy that <code>2 ^ 0</code> is still defeq to <code>1</code>.</p>",
        "id": 234642322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618478181
    },
    {
        "content": "<p>I used a hack in one file which can be removed once <a href=\"https://github.com/leanprover-community/mathlib/issues/7201\">#7201</a> lands in mathlib.<br>\nFor now, here's your latest mathlib bump:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code> leanpkg.toml                                      |  2 +-\n src/Mbar/basic.lean                               |  7 +++----\n src/breen_deligne/category.lean                   | 13 +++++++------\n src/combinatorial_lemma.lean                      | 35 +++++++++++++++++------------------\n src/for_mathlib/add_monoid_hom.lean               |  9 +++++----\n src/polyhedral_lattice/basic.lean                 |  9 ++++-----\n src/polyhedral_lattice/cech.lean                  | 13 ++++---------\n src/polyhedral_lattice/direct_sum.lean            |  2 +-\n src/polyhedral_lattice/finsupp.lean               |  7 +++----\n src/polyhedral_lattice/int.lean                   |  2 +-\n src/pseudo_normed_group/profinitely_filtered.lean |  5 +++--\n src/rescale/basic.lean                            |  2 +-\n src/rescale/normed_group.lean                     |  2 +-\n src/rescale/polyhedral_lattice.lean               |  5 ++---\n src/toric/lem97.lean                              | 84 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++---------------------------\n src/toric/module_regular.lean                     |  2 +-\n 16 files changed, 111 insertions(+), 88 deletions(-)\n</code></pre></div>",
        "id": 234643278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618478579
    },
    {
        "content": "<p>I commented in the original PR that we probably don't want to delete that subsingleton instance, but it was after we'd already decided to merge</p>",
        "id": 234673281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618492867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I'm very happy to say that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: remove this once a bug in mathlib is fixed</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hack</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">add_monoid.to_smul_with_zero</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">→+</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>can now be removed</p>",
        "id": 234790152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618545279
    },
    {
        "content": "<p>I'm now bumping mathlib. We're in for some big changes (-;<br>\nThe int-smul refactor has landed, and we no longer have <code>semimodule</code>.</p>",
        "id": 236125008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619417437
    },
    {
        "content": "<p>I'm just going to do the minimal bump to make the project compile again. But once we are done, we should adjust the <code>add_comm_group</code> instance for <code>Mbar</code> so that it takes advantage of the new int-smul refactor.</p>",
        "id": 236125722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619418177
    },
    {
        "content": "<p>The <code>semimodule</code> refactor shouldn't be too bad. I did in two projects and it was only a <code>sed</code> away.</p>",
        "id": 236130227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619421502
    },
    {
        "content": "<p>There is one proof which is timing out but other than that the refactor seems to have gone well</p>",
        "id": 236137533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619425611
    },
    {
        "content": "<p>I finished the mathlib bump. Just pushed to <code>master</code>.</p>",
        "id": 236141363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619427687
    },
    {
        "content": "<p>I just refactored the <code>add_comm_group</code> instance on <code>Mbar</code> to make use of the new <code>nsmul/gsmul</code>-powers</p>",
        "id": 236157631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619436837
    },
    {
        "content": "<p>I just bumped mathlib so I could get to a couple of Eric Wieser's recent PR's</p>",
        "id": 236558988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619635917
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 236559026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619635925
    },
    {
        "content": "<p>I was just thinking about doing that <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 236559067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619635936
    },
    {
        "content": "<p>FYI: I just bumped mathlib</p>",
        "id": 237119995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620024470
    },
    {
        "content": "<p>Johan, you are working at crazy times!</p>",
        "id": 237123108,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1620026783
    },
    {
        "content": "<p>Ooh, the mathlib bump was only 15 minutes. I didn't start early today (-;</p>",
        "id": 237124247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620027465
    },
    {
        "content": "<p>Well, I meant your first messages to David ;-)</p>",
        "id": 237124315,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1620027490
    },
    {
        "content": "<p>Johan works in a weird time zone which has nothing to do with its geographical time zone.</p>",
        "id": 237124420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620027570
    },
    {
        "content": "<p>His dinner time is even weirder.</p>",
        "id": 237124439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620027595
    },
    {
        "content": "<p>Ooh lol. 6:44... My son woke me up at 6:15.</p>",
        "id": 237124625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620027690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> My wife grew up in a village with a lot of industry and farms. On week days everyone there wakes up &lt; 6:00 and starts work 7:00 - 7:30. They are all done between 16:00 and 17:00 and have dinner around 17:15. Be kind of stuck with that. (They might go back to work at 19:00...)</p>",
        "id": 237124857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620027841
    },
    {
        "content": "<p>But my neighbour here in Germany works in road construction, and he seems to be on an even earlier schedule.</p>",
        "id": 237124946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620027883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> While I did not follow the actual code being written, I tried to keep up with which parts of the argument have been formalized.</p>\n<p>The (very) good news: To me, all the really critical parts of the argument <em>have</em> been formalized, the completion of the homotopy argument being the last sticking point. Of course, there's still a chance that there's a missing link somewhere... that seems unlikely to me, but we should definitely finish this formalization!</p>\n<p>So what is missing in order to finish LTE? Well, first the few things Johan mentioned: Gordan's lemma, some lemmas about polyhedral lattices, and (and this is the most critical of those, regarding the actual checking of the argument) the line of arguments from 8.19 --&gt; 9.2 --&gt; checking the column exactness (condition (2) of 9.6) in the proof of 9.5. (all numbers refer to Analytic.pdf)</p>\n<p>Once this is done, we have a full proof of 9.5, and 9.4. (By the way, there was a discussion about weak vs strong exactness: We need the version of 9.4 with strong exactness, so we need to leave some of this discussion about strong exactness in. But that's done, just don't delete it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>\n<p>But LTE is about 9.1! So what still remains to be done is to prove the implication 9.4 =&gt; 9.1. This will require the development of quite a few basics that have <em>just</em> been accomplished (from what I understand): Defining the category of condensed abelian groups, defining Ext-groups in abelian categories, etc. Currently, I don't have a clear picture of how much work remains to be done to get the implication 9.4 =&gt; 9.1 to work. (But it is clear that no mistake can hide there.)</p>",
        "id": 237125383,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1620028123
    },
    {
        "content": "<p>(Arguably, there's even another step, comparing the spaces of measures over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z((T))_r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with the measures <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.)</p>",
        "id": 237125560,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1620028226
    },
    {
        "content": "<p>I guess that other step will be <code>third_target</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 237125605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620028252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> ok, excellent. I thought I was missing something, and 9.4=&gt;9.1 was it (I was being lazy and not checking Analytic.pdf line by line, just going on comments/discussion here).</p>\n<p>So how are you feeling about all the fiddly explicit constants now, and the possibility you fooled yourself? I guess it's not over until it's over, but things are definitely looking firmer, no?</p>",
        "id": 237126943,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1620028977
    },
    {
        "content": "<p>Well, as you can see from the sorry-list in the other thread, there are still 10 sorries in <code>constants.lean</code>.</p>",
        "id": 237127113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620029093
    },
    {
        "content": "<p>So we certainly need to do a bit of work there.</p>",
        "id": 237127130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620029105
    },
    {
        "content": "<p>And the Cech part of the proof of 9.5 (which is still to be done) does influence the constants a bit.</p>",
        "id": 237127176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620029135
    },
    {
        "content": "<p>I don't expect any surprises, but I think I would rather do that part first, and then pin down the constants after that.</p>",
        "id": 237127211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620029159
    },
    {
        "content": "<p>Just for the record: it's dinner time.</p>",
        "id": 237179703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620055519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>commit 86cfda45062f555f73efd9361ab9f35630f4a718 (HEAD -&gt; master)\nAuthor: Johan Commelin &lt;johan@commelin.net&gt;\nDate:   Mon Jun 7 09:57:21 2021 +0000\n\n    bump mathlib\n\n leanpkg.toml                                  |   2 +-\n src/for_mathlib/Cech/adjunction.lean          | 107 -------------------------------------------------------------------------------------------\n src/for_mathlib/SemiNormedGroup.lean          |  23 --------------------\n src/for_mathlib/connected.lean                |  14 ------------\n src/for_mathlib/finite_free.lean              |   2 +-\n src/for_mathlib/grading_zero_subring.lean     |   4 ++--\n src/for_mathlib/homological_complex.lean      |  34 -----------------------------\n src/for_mathlib/nnrat.lean                    |   2 +-\n src/for_mathlib/norm_nsmul.lean               |  32 ---------------------------\n src/for_mathlib/unused/to_int_linear_map.lean |  14 ------------\n src/normed_spectral.lean                      |   5 +++--\n src/polyhedral_lattice/quotient.lean          |   4 +---\n src/prop819.lean                              |   1 -\n src/prop819/completion.lean                   |  13 ++++++-----\n src/prop819/strict_complex_iso.lean           |   4 ++--\n src/prop_92/prop_92.lean                      |   5 +++--\n src/thm95/col_exact.lean                      |   2 +-\n src/thm95/col_exact_prep.lean                 |   2 --\n 18 files changed, 21 insertions(+), 249 deletions(-)\njmc@atarrimbo:~/data/math/lean-liquid$ git push\nEnumerating objects: 47, done.\n</code></pre></div>",
        "id": 241753101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623059915
    },
    {
        "content": "<p>Note that the vast majority of the main is coming from <code>for_mathlib</code>. Well done Johan, thanks a lot for this.</p>",
        "id": 241755148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623061275
    },
    {
        "content": "<p>Well, thanks to <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> for making a whole bunch of PRs out of for_mathlib</p>",
        "id": 241758278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623063307
    }
]