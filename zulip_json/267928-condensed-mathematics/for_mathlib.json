[
    {
        "content": "<p>OK so we're not quite at <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/tree/master/src/for_mathlib\">lean-perfectoid-space levels</a> yet,but with 14 files in <code>for_mathlib</code> we are beginning to walk into the same trap which Johan, Patrick and I walked into in 2019, generating a whole bunch of stuff which was _clearly_ for mathlib, much of it even mathlib-ready, and then not PR'ing it and then it rotted and the work we put in there was, arguably, wasted (although of course it fulfilled the role of helping us formalise perfectoid spaces). Do we have a plan here, or are we just going to watch this directory fill up and then go \"oh look it happened again\"? There are over 1300 lines of code in that directory so far.</p>",
        "id": 225333068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612547723
    },
    {
        "content": "<p>My opinion is we should explicitly state that everything in the folder can be PRed to mathlib by anyone. If it means someone feel they lose credit then it means they should have made the PRing effort. Of course when things do not get PRed then the author should still be the only one to feel bad.</p>",
        "id": 225333387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612547868
    },
    {
        "content": "<p>yes, I very much agree with what Patrick said.</p>",
        "id": 225334243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612548219
    },
    {
        "content": "<p>I personally never feel that it is about \"credit\". However when I was making the <code>universal_universe</code> branch on this repo I didn't put anything in <code>for_mathlib</code>, I just made notes of what needed to be PR'ed and am slowly PR'ing it myself. I did the same today. I think there is a risk that nobody does it. Of course anyone can feel free to do it, but we all know it's hard work.  I am wondering if we need a better plan than this. Or do you think I'm overreacting and it doesn't matter?</p>\n<p>Chris Hughes has long argued that <code>free_abelian_group</code> should be defined via <code>finsupp</code>. I see now that Johan has just made the interface relating the current definition to <code>finsupp</code>. Chris won't be happy because he wanted the equality to be definitional, but I am less excited by definitional equality than he is. This is 300 lines of code though. It probably should not be lost!</p>",
        "id": 225334288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612548239
    },
    {
        "content": "<p>I agree that we should work on PRing things. But on the other hand, momentum is also a weird concept... once I have momentum working on a project like this, I just want to march forward, and not be blocked by PRs.</p>",
        "id": 225335136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612548610
    },
    {
        "content": "<p>Something I would like to experiment with, is whether we can do some sort of <code>for_mathlib</code> PR sprints.</p>",
        "id": 225335169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612548634
    },
    {
        "content": "<p>Once we reach some sort of intermediate milestone/target, we just take a step back, and create 37 PRs to mathlib. And after that we plunge forward to the next target.</p>",
        "id": 225335250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612548668
    },
    {
        "content": "<p>Johan this is exactly how I felt with perfectoid. Once I could see that it was possible to do this kind of mathematics in Lean (because in 2018 this was not yet clear, as you well remember!), I would just throw myself into a lot of focussed coding with clear well-defined goals in mind and fill up <code>for_mathlib</code> and just not worry. All three of us were doing it, and then Patrick suddenly saw sense and PR'd a whole bunch of topology into mathlib (all the Bourbaki stuff which he'd done) -- but I can't remember whether this was during the sprint to the def or after we had the def.</p>",
        "id": 225337478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612549665
    },
    {
        "content": "<p>It was during the sprint, but there was a special trick. mathlib had stuff about this, but it wasn't good enough and was actually getting in our way. That's why I was force to work on the mathlib side.</p>",
        "id": 225339749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612550865
    },
    {
        "content": "<p>I'm glad there's consensus that \"anyone should feel free to make the PRs from <code>for_mathlib</code>\". This is a chore that I don't find particularly tedious, and will make some effort at it after the weekend!</p>",
        "id": 225366742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612564181
    },
    {
        "content": "<p>Anyone looking for some PRs to make:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ find src/for_mathlib/ -name <span class=\"s1\">'*.lean'</span> <span class=\"p\">|</span> xargs wc -l\n  <span class=\"m\">189</span> src/for_mathlib/sequences.lean\n   <span class=\"m\">21</span> src/for_mathlib/category_theory.lean\n   <span class=\"m\">34</span> src/for_mathlib/tsum.lean\n   <span class=\"m\">31</span> src/for_mathlib/extend_from_nat.lean\n  <span class=\"m\">403</span> src/for_mathlib/normed_group_hom.lean\n   <span class=\"m\">55</span> src/for_mathlib/equalizers.lean\n  <span class=\"m\">114</span> src/for_mathlib/topology.lean\n   <span class=\"m\">18</span> src/for_mathlib/linear_algebra.lean\n   <span class=\"m\">19</span> src/for_mathlib/topological_group.lean\n   <span class=\"m\">62</span> src/for_mathlib/locally_constant.lean\n  <span class=\"m\">362</span> src/for_mathlib/free_abelian_group.lean\n   <span class=\"m\">40</span> src/for_mathlib/compact.lean\n   <span class=\"m\">92</span> src/for_mathlib/add_monoid_hom.lean\n <span class=\"m\">1440</span> total\n</code></pre></div>",
        "id": 225830345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612961216
    },
    {
        "content": "<p>I think I'll take on <code>free_abelian_group</code> and <code>locally_constant</code></p>",
        "id": 225830384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612961240
    },
    {
        "content": "<p>I can do <code>sequences</code></p>",
        "id": 225830739,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612961425
    },
    {
        "content": "<p>Ops, it depends on <code>locally_constant</code>, it is better to wait.</p>",
        "id": 225831307,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612961736
    },
    {
        "content": "<p>I made a PR to free_abelian_group recently, which came out of the universal maps stuff. <a href=\"https://github.com/leanprover-community/mathlib/issues/6062\">#6062</a>. It's waiting for epsilon more work by me.</p>",
        "id": 225838018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612965127
    },
    {
        "content": "<p>I ended up working on <code>for_mathlib/compact</code> first...</p>",
        "id": 225912216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612993052
    },
    {
        "content": "<p>I hope to tackle <code>locally_constant</code> asap</p>",
        "id": 225912241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612993064
    },
    {
        "content": "<p><code>for_mathlib/locally_constant</code> has now been PRd</p>",
        "id": 226062691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613080065
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6375\">#6375</a> PRs most of <code>normed_group_hom</code> to mathlib. About 20% of <code>for_mathlib</code> (-;</p>",
        "id": 227397880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614069943
    },
    {
        "content": "<p>This PR has now been merged, and so ~370 lines of <code>for_mathlib</code> were deleted this morning.</p>",
        "id": 229610437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615358302
    },
    {
        "content": "<p>Be sure to <code>git pull</code> before you work on master</p>",
        "id": 229610444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615358311
    },
    {
        "content": "<p>What is left:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"mi\">185</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">sequences.lean</span>\n   <span class=\"mi\">34</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">tsum.lean</span>\n   <span class=\"mi\">31</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">extend_from_nat.lean</span>\n   <span class=\"mi\">55</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">equalizers.lean</span>\n  <span class=\"mi\">114</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">topology.lean</span>\n   <span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pi_nat_apply.lean</span>\n   <span class=\"mi\">18</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra.lean</span>\n   <span class=\"mi\">19</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">topological_group.lean</span>\n  <span class=\"mi\">362</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group.lean</span>\n  <span class=\"mi\">319</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_quotient.lean</span>\n   <span class=\"mi\">92</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">add_monoid_hom.lean</span>\n <span class=\"mi\">1243</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 229610488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615358353
    },
    {
        "content": "<p>Things deteriorated quickly after our previous for_mathlib sprint <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ git ls-files <span class=\"p\">|</span> rg <span class=\"s2\">\"[.]lean</span>$<span class=\"s2\">\"</span> <span class=\"p\">|</span> rg <span class=\"s2\">\"for_mathlib\"</span> <span class=\"p\">|</span> xargs wc -l\n    <span class=\"m\">94</span> src/for_mathlib/Cech/adjunction.lean\n   <span class=\"m\">229</span> src/for_mathlib/Cech/split.lean\n   <span class=\"m\">635</span> src/for_mathlib/Gordan.lean\n   <span class=\"m\">314</span> src/for_mathlib/Profinite/arrow_limit.lean\n   <span class=\"m\">770</span> src/for_mathlib/Profinite/clopen_limit.lean\n   <span class=\"m\">151</span> src/for_mathlib/Profinite/compat_discrete_quotient.lean\n    <span class=\"m\">37</span> src/for_mathlib/Profinite/fibprod.lean\n    <span class=\"m\">36</span> src/for_mathlib/Profinite/locally_constant.lean\n    <span class=\"m\">75</span> src/for_mathlib/arrow.lean\n    <span class=\"m\">16</span> src/for_mathlib/arrow/iso_mk.lean\n    <span class=\"m\">19</span> src/for_mathlib/arrow/split.lean\n    <span class=\"m\">11</span> src/for_mathlib/coe_nat_abs.lean\n   <span class=\"m\">124</span> src/for_mathlib/data_setoid_partition.lean\n    <span class=\"m\">74</span> src/for_mathlib/discrete_quotient.lean\n    <span class=\"m\">47</span> src/for_mathlib/fin.lean\n   <span class=\"m\">137</span> src/for_mathlib/finite_free.lean\n    <span class=\"m\">18</span> src/for_mathlib/finsupp.lean\n   <span class=\"m\">385</span> src/for_mathlib/free_abelian_group.lean\n   <span class=\"m\">721</span> src/for_mathlib/grading.lean\n   <span class=\"m\">104</span> src/for_mathlib/grading_examples.lean\n   <span class=\"m\">477</span> src/for_mathlib/grading_zero_subring.lean\n    <span class=\"m\">93</span> src/for_mathlib/homological_complex.lean\n    <span class=\"m\">56</span> src/for_mathlib/homotopy.lean\n    <span class=\"m\">87</span> src/for_mathlib/is_locally_constant.lean\n    <span class=\"m\">90</span> src/for_mathlib/kronecker.lean\n    <span class=\"m\">65</span> src/for_mathlib/linear_algebra.lean\n   <span class=\"m\">593</span> src/for_mathlib/nnrat.lean\n    <span class=\"m\">20</span> src/for_mathlib/nnreal.lean\n   <span class=\"m\">158</span> src/for_mathlib/normed_group.lean\n    <span class=\"m\">91</span> src/for_mathlib/normed_group_hom.lean\n    <span class=\"m\">99</span> src/for_mathlib/normed_group_hom_bound_by.lean\n   <span class=\"m\">174</span> src/for_mathlib/normed_group_hom_completion.lean\n    <span class=\"m\">96</span> src/for_mathlib/normed_group_hom_equalizer.lean\n    <span class=\"m\">89</span> src/for_mathlib/order.lean\n    <span class=\"m\">34</span> src/for_mathlib/pseudo_metric.lean\n    <span class=\"m\">21</span> src/for_mathlib/quotient.lean\n   <span class=\"m\">566</span> src/for_mathlib/rational_cones.lean\n    <span class=\"m\">43</span> src/for_mathlib/simplicial/augmented.lean\n   <span class=\"m\">161</span> src/for_mathlib/simplicial/complex.lean\n    <span class=\"m\">64</span> src/for_mathlib/simplicial/iso.lean\n    <span class=\"m\">72</span> src/for_mathlib/specific_limit.lean\n   <span class=\"m\">219</span> src/for_mathlib/topology.lean\n    <span class=\"m\">34</span> src/for_mathlib/tsum.lean\n   <span class=\"m\">275</span> src/for_mathlib/unused/Profinite/functorial_limit.lean\n    <span class=\"m\">69</span> src/for_mathlib/unused/Profinite/nhds.lean\n    <span class=\"m\">45</span> src/for_mathlib/unused/Top.lean\n    <span class=\"m\">42</span> src/for_mathlib/unused/dfinsupp.lean\n    <span class=\"m\">55</span> src/for_mathlib/unused/equalizers.lean\n    <span class=\"m\">54</span> src/for_mathlib/wide_pullback.lean\n  <span class=\"m\">7939</span> total\n</code></pre></div>",
        "id": 241759346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623064007
    },
    {
        "content": "<p>I'll work on the topology and normed group stuff.</p>",
        "id": 241759910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623064314
    },
    {
        "content": "<p>I think that <code>normed_group_hom_bound_by</code> is probably not <code>for_mathlib</code>... we should have used the operator norm everywhere. But I didn't know enough functional analysis and/or mathlib. So I blundered in with my own definition <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 241760022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623064382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Are you planning on PRing the rational cones / Gordan stuff to mathlib?</p>",
        "id": 241760214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623064483
    },
    {
        "content": "<p>Certainly not immediately - I think a good portion of it ought to be generalised to the nonnegative parts of an ordered field (I did it for nonneg rationals using nnrat, but the nnreal version is useful too) so I've been waiting for the <code>ordered</code> refactor to go through first</p>",
        "id": 241760823,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1623064853
    },
    {
        "content": "<p>Ok, that certainly makes sense</p>",
        "id": 241761008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623064942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> the two lemmas about topological bases in <code>for_mathlib/topology</code> are already in mathlib (in more general form). I've also been (slowly) getting the Profinite stuff in PRs</p>",
        "id": 241773100,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623071151
    },
    {
        "content": "<p>I can definitely PR exposed faces already. Then Krein-Milman will only need Bhavik's Hahn-Banach PR.</p>",
        "id": 241826963,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623093608
    },
    {
        "content": "<p>Here is a PR with the theorem about clopen sets in cofiltered limits of profinite sets: <a href=\"https://github.com/leanprover-community/mathlib/issues/7837\">#7837</a></p>",
        "id": 241853695,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623108025
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7837\">#7837</a> should be ready to review, in case anyone has some time...</p>",
        "id": 242224582,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623338742
    },
    {
        "content": "<p>Looks good to me, but the proof is somewhat long. Are there no reusable sublemmas?</p>",
        "id": 242226484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623339543
    },
    {
        "content": "<p>I don't think there are any reusable subclaims that are worth splitting off, tbh. The proof looks long, but there are really just a few main steps and followed by several annoying formalization things. I can add a few inline comments explaining the argument</p>",
        "id": 242228379,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623340318
    },
    {
        "content": "<p>Adding comments explaining the argument is always nice</p>",
        "id": 242228516,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623340369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/for_mathlib/near/242228516\">said</a>:</p>\n<blockquote>\n<p>Adding comments explaining the argument is always nice</p>\n</blockquote>\n<p>Done</p>",
        "id": 242230814,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623341246
    },
    {
        "content": "<p>Why do you use <code>rotate</code> everywhere? Does it help with meta-variables?</p>",
        "id": 242231365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623341448
    },
    {
        "content": "<p>Do you know you can put type ascriptions in <code>obtain</code> and <code>rintros</code>? This both documents the proof and avoids <code>change</code> or <code>dsimp</code>.</p>",
        "id": 242231451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623341487
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"n\">s.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"n\">s.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec.some</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">is_clopen</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s.1</span> <span class=\"bp\">=</span> <span class=\"n\">C.π.app</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"n\">s.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec.some_spec</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>feels like you could use <code>choose</code></p>",
        "id": 242231513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623341520
    },
    {
        "content": "<p>I tried using <code>choose</code>, but it makes it much more annnoying to define <code>G</code> later on, so I don't think it's worth it</p>",
        "id": 242232758,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623342034
    },
    {
        "content": "<p>Did you try <code>choose!</code>? Note that I'm writing random comments without having run the code.</p>",
        "id": 242232840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623342070
    },
    {
        "content": "<p>I didn't try choose!</p>",
        "id": 242232859,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623342084
    },
    {
        "content": "<p>let me try it now</p>",
        "id": 242232871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623342090
    },
    {
        "content": "<p>Nope, same issue. Essentially I want to consider the type associated to the set (of sets) <code>S</code>, and choose gives me a slightly different function as a result</p>",
        "id": 242233053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623342177
    },
    {
        "content": "<p>In the line <code>let j : S \\to J</code>, choose(!) gives me a function of the form <code>\\forall {A : set ..}, A \\in S \\to J</code>. Later on I get a finset in the type associated to <code>S</code>, so it's much more convenient to just start with a function of the form <code>j : S \\to J</code>.</p>",
        "id": 242233332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623342304
    },
    {
        "content": "<p>As for the rotate, I only use it because in the <code>have ...</code> clause I introduce two new goals which I want to take care of immediately</p>",
        "id": 242233508,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623342372
    },
    {
        "content": "<p>The two <code>dsimp</code>'s were optional, so I just got rid of them</p>",
        "id": 242234065,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623342613
    },
    {
        "content": "<p>And the first <code>change</code> is a bit of a sneaky hack, since I know the topological space of an object <code>X</code> of <code>Profinite</code> is defeq to the topological space associated to <code>Profinite_to_Top.obj X</code>, and lean needs a bit of a hint to figure this out. I hope you'll let me get away with this ;)</p>",
        "id": 242234254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623342707
    },
    {
        "content": "<p>I just bumped mathlib, incorporating <a href=\"https://github.com/leanprover-community/mathlib/issues/7858\">#7858</a></p>",
        "id": 242468001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623526815
    },
    {
        "content": "<p>I tried to cleanup some more but only managed a <a href=\"https://github.com/leanprover-community/lean-liquid/commit/c64664beada5cb7ff82c7dcd06e1876fac2dad39\">tiny commit</a> because I wasn't able to easily use Adam's recent merged cofiltered limits stuff.</p>",
        "id": 242471088,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623529960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> could you now clean up <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/Profinite/clopen_limit.lean\">clopen_limit</a>?</p>",
        "id": 242471109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623530006
    },
    {
        "content": "<p>One apparent obstacle is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.is_cofiltered_of_semilattice_inf_bot\">docs#category_theory.is_cofiltered_of_semilattice_inf_bot</a>  asks for some bot element that isn't assumed in LTE.</p>",
        "id": 242471182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623530068
    },
    {
        "content": "<p>Oh, it should have one. I'll take a look</p>",
        "id": 242471188,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623530088
    },
    {
        "content": "<p>oh, that's silly. The system comes from <code>discrete_quotient</code> which is a <code>semilattice_inf_top</code>, and the <code>bot</code> in that instance is only to obtain a <code>nonempty</code> instance. So we need some more instances like <code>is_cofiltered_of_semilattice_inf_top</code></p>",
        "id": 242471276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623530202
    },
    {
        "content": "<p>Let me make a quick mathlib PR with these missing instances right now...</p>",
        "id": 242471368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623530303
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7909\">#7909</a></p>",
        "id": 242471465,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623530478
    },
    {
        "content": "<p>Oh I understand. I thought this bot requirement was weird...</p>",
        "id": 242471467,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623530481
    },
    {
        "content": "<p>Why can't we just have a <code>nonempty</code> type class parameter?</p>",
        "id": 242471521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623530533
    },
    {
        "content": "<p>and instanced saying those lattice are nonempty?</p>",
        "id": 242471539,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623530550
    },
    {
        "content": "<p>good point</p>",
        "id": 242471643,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623530736
    },
    {
        "content": "<p>It's a bit strange that there is no </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">has_top_nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⊤</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_bot_nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⊥</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 242471791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623530922
    },
    {
        "content": "<p>Is there a good reason not to have this?</p>",
        "id": 242471794,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623530936
    },
    {
        "content": "<p>weird</p>",
        "id": 242471797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623530948
    },
    {
        "content": "<p>I don't see why there shouldn't be here (with low priority as usual for catch-all instances)</p>",
        "id": 242471805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623530978
    },
    {
        "content": "<p>Okay, I'll update that PR soon</p>",
        "id": 242472030,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623531358
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib/issues/7909\">#7909</a> is updated. Should be ready to review</p>",
        "id": 242472567,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623532055
    },
    {
        "content": "<p>Another LTE PR: <a href=\"https://github.com/leanprover-community/mathlib/issues/7910\">#7910</a></p>",
        "id": 242473500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623533333
    },
    {
        "content": "<p>and <a href=\"https://github.com/leanprover-community/mathlib/issues/7911\">#7911</a> to empty a stupid file containing a single stupid lemma</p>",
        "id": 242473831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623533872
    },
    {
        "content": "<p>Doing another mathlib bump right now, and cleaning up the <code>exists_clopen</code> mess...</p>",
        "id": 242524025,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623608944
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"bashgit\"><pre><span></span><code> leanpkg.toml                                |   2 +-\n src/for_mathlib/Profinite/clopen_limit.lean | 351 +++---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 2 files changed, 6 insertions(+), 347 deletions(-)\n</code></pre></div>",
        "id": 242524233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623609184
    },
    {
        "content": "<p>If anyone wants to do another mathlib bump, please go ahead. Otherwise, I'll do it later today.</p>",
        "id": 242688201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623733153
    },
    {
        "content": "<p>I will also try to PR</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"mi\">93</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n    <span class=\"mi\">56</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homotopy.lean</span>\n</code></pre></div>\n<p>today</p>",
        "id": 242688277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623733240
    },
    {
        "content": "<p>Ooh, looks like Scott already did the first file <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 242692950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623738877
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7491\">#7491</a> is the 2nd file</p>",
        "id": 242695640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623741222
    },
    {
        "content": "<p>I'm starting the mathlib bump now</p>",
        "id": 242696167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623741591
    },
    {
        "content": "<p>Done. That was easy.</p>",
        "id": 242697111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623742255
    },
    {
        "content": "<p>Probably there is more that can be cleaned up from recent PRs, but the project compiles with latest mathlib.</p>",
        "id": 242697174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623742305
    },
    {
        "content": "<p>I can go on making both <code>kronecker</code> and <code>linear_algebra</code> land into <code>mathlib</code>, if that has not already been done.</p>",
        "id": 242840833,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1623829284
    },
    {
        "content": "<p>Created <a href=\"https://github.com/leanprover-community/mathlib/issues/7963\">#7963</a> for <code>for_mathlib/finsupp.lean</code> (in LTE the <code>sum_</code> version is needed, in the <code>PR</code> I have created the <code>prod_</code> and marked <code>@additive</code>)</p>",
        "id": 242904626,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1623860359
    },
    {
        "content": "<p>Also, I am done with a <code>PR</code> for <code>for_mathlib/linear_algebra.lean</code> but I have noticed the the lemma <code>reindex_linear_equiv_sum_empty_symm</code> is never used, so I am wondering whether to <code>PR</code> it as well. I have created a branch of <code>lean-liquid</code> to test the whole project with the above lemma commented.</p>",
        "id": 242904834,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1623860452
    },
    {
        "content": "<p>If we no longer use that lemma, feel free to leave it out of the PR. It's quite specialized.</p>",
        "id": 242904956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623860511
    },
    {
        "content": "<p>I think I made a (now-merged) PR to change the API around <code>reindex_linear_equiv</code> a while ago, and my intent was that in most cases the lemmas just be stated about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.reindex\">docs#matrix.reindex</a> and the linear_equiv version be unfolded before applying more lemmas</p>",
        "id": 242905689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623860819
    },
    {
        "content": "<p>Maybe that was the wrong choice, and it's easier to just copy every lemma about <code>reindex</code></p>",
        "id": 242905781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623860879
    },
    {
        "content": "<p>You mean that every lemma should somehow follow from the <code>reindex</code> version?</p>",
        "id": 242906167,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1623861039
    },
    {
        "content": "<p>Yes, I think so</p>",
        "id": 242906208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623861058
    },
    {
        "content": "<p>I will give it a try.</p>",
        "id": 242906236,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1623861071
    },
    {
        "content": "<p>Any lemma where the equality is between matrices should have a proof which is just <code>exact the_reindex_lemma</code></p>",
        "id": 242906458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623861175
    },
    {
        "content": "<p>Or possibly even <code>exact the_minor_lemma</code></p>",
        "id": 242906519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623861207
    },
    {
        "content": "<p>Oh sure, you mean to pass from a lemma about two reindexing equivalence being equal and the application of the equality to a matrix? I agree.</p>",
        "id": 242906698,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1623861300
    },
    {
        "content": "<p>I will try to implement these ideas in the <code>PR</code>.</p>",
        "id": 242907104,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1623861467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/for_mathlib/near/242904956\">said</a>:</p>\n<blockquote>\n<p>If we no longer use that lemma, feel free to leave it out of the PR. It's quite specialized.</p>\n</blockquote>\n<p>Indeed, it is not used; I'll leave it out.</p>",
        "id": 242913705,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1623864179
    },
    {
        "content": "<p>Big thanks to everyone who's been helping with making PRs to mathlib!</p>\n<p>Here's the latest status of <code>for_mathlib/</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_norm.lean</span>\n     <span class=\"mi\">8</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_basic.lean</span>\n    <span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nat_abs.lean</span>\n    <span class=\"mi\">18</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">augmented.lean</span>\n    <span class=\"mi\">19</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n    <span class=\"mi\">20</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnreal.lean</span>\n    <span class=\"mi\">21</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finite.lean</span>\n    <span class=\"mi\">21</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">quotient.lean</span>\n    <span class=\"mi\">34</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">tsum.lean</span>\n    <span class=\"mi\">48</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">is_locally_constant.lean</span>\n    <span class=\"mi\">54</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">wide_pullback.lean</span>\n    <span class=\"mi\">60</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group.lean</span>\n    <span class=\"mi\">64</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">iso.lean</span>\n    <span class=\"mi\">65</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">order.lean</span>\n    <span class=\"mi\">74</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">discrete_quotient.lean</span>\n    <span class=\"mi\">87</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">adjunction.lean</span>\n    <span class=\"mi\">89</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finite_free.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">kronecker.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom.lean</span>\n    <span class=\"mi\">92</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_equalizer.lean</span>\n   <span class=\"mi\">118</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">compat_discrete_quotient.lean</span>\n   <span class=\"mi\">122</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">clopen_limit.lean</span>\n   <span class=\"mi\">126</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">data_setoid_partition.lean</span>\n   <span class=\"mi\">160</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup_Completion.lean</span>\n   <span class=\"mi\">161</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">complex.lean</span>\n   <span class=\"mi\">210</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_completion.lean</span>\n   <span class=\"mi\">227</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n   <span class=\"mi\">283</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup.lean</span>\n   <span class=\"mi\">316</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">arrow_limit.lean</span>\n   <span class=\"mi\">382</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group.lean</span>\n   <span class=\"mi\">565</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">rational_cones.lean</span>\n   <span class=\"mi\">593</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnrat.lean</span>\n   <span class=\"mi\">634</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n  <span class=\"mi\">4868</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 244239689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624949576
    },
    {
        "content": "<p>What is the small blue number on the left?</p>",
        "id": 244239943,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624949787
    },
    {
        "content": "<p>Number of lines in the file?</p>",
        "id": 244240063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624949886
    },
    {
        "content": "<p>Oh, well, the <code>3</code> in <code>src/for_mathlib/int_norm.lean</code> would have never made me guess so. Not a huge one...</p>",
        "id": 244240109,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624949931
    },
    {
        "content": "<p>(I was thinking at number of occurrences of some other file in the repository to a certain file, or something like this)</p>",
        "id": 244240144,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624949973
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8117\">#8117</a> takes care of <code>3 src/for_mathlib/int_norm.lean</code></p>",
        "id": 244285022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624975198
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8118\">#8118</a> takes care of <code>src/for_mathlib/int_basic.lean</code></p>",
        "id": 244286707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624975781
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8120\">#8120</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/8121\">#8121</a> take care of <code>src/for_mathlib/nat_abs.lean</code></p>",
        "id": 244289774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624976800
    },
    {
        "content": "<p>Are you sure I didn't do that already?</p>",
        "id": 244290312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624976982
    },
    {
        "content": "<p>No</p>",
        "id": 244290343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624976998
    },
    {
        "content": "<p>I completely lost track of what has been done <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 244290460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624977025
    },
    {
        "content": "<p>The one I did about nat_abs is <a href=\"https://github.com/leanprover-community/mathlib/issues/7911\">#7911</a></p>",
        "id": 244290678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624977118
    },
    {
        "content": "<p>I see. But that one is different from what I did. There are too many stupid lemmas about nat_abs (-;</p>",
        "id": 244291061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624977258
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.norm_eq_abs\">docs#real.norm_eq_abs</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.norm_eq_abs\">docs#complex.norm_eq_abs</a> so it's probably okay to have the int version as well</p>",
        "id": 244291115,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624977286
    },
    {
        "content": "<p>A bit of progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"mi\">8</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_basic.lean</span>\n    <span class=\"mi\">10</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finite.lean</span>\n    <span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nat_abs.lean</span>\n    <span class=\"mi\">18</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">augmented.lean</span>\n    <span class=\"mi\">19</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n    <span class=\"mi\">20</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnreal.lean</span>\n    <span class=\"mi\">34</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">tsum.lean</span>\n    <span class=\"mi\">45</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">is_locally_constant.lean</span>\n    <span class=\"mi\">54</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">wide_pullback.lean</span>\n    <span class=\"mi\">60</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group.lean</span>\n    <span class=\"mi\">64</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">iso.lean</span>\n    <span class=\"mi\">65</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">order.lean</span>\n    <span class=\"mi\">74</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">discrete_quotient.lean</span>\n    <span class=\"mi\">87</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">adjunction.lean</span>\n    <span class=\"mi\">89</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finite_free.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">kronecker.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom.lean</span>\n    <span class=\"mi\">92</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_equalizer.lean</span>\n   <span class=\"mi\">118</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">compat_discrete_quotient.lean</span>\n   <span class=\"mi\">122</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">clopen_limit.lean</span>\n   <span class=\"mi\">160</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup_Completion.lean</span>\n   <span class=\"mi\">161</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">complex.lean</span>\n   <span class=\"mi\">210</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_completion.lean</span>\n   <span class=\"mi\">227</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n   <span class=\"mi\">270</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group.lean</span>\n   <span class=\"mi\">283</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup.lean</span>\n   <span class=\"mi\">316</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">arrow_limit.lean</span>\n   <span class=\"mi\">565</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">rational_cones.lean</span>\n   <span class=\"mi\">593</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnrat.lean</span>\n   <span class=\"mi\">634</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n  <span class=\"mi\">4592</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 244333291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624994439
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/simplicial/augmented.lean\"><code>for_mathlib/augmented.lean</code></a> seems to already be in mathlib <a href=\"https://github.com/leanprover-community/mathlib/blob/d521b2bc7401d907baf28ece17f959a890cd7c30/src/algebraic_topology/simplex_category.lean#L134\">here</a></p>",
        "id": 244357160,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625006150
    },
    {
        "content": "<p>Thanks! I'll get rid of it</p>",
        "id": 244357762,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625006584
    },
    {
        "content": "<p>Adam brought us under &lt; 4500</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>     <span class=\"mi\">8</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nat_abs.lean</span>\n    <span class=\"mi\">19</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n    <span class=\"mi\">20</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnreal.lean</span>\n    <span class=\"mi\">34</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">tsum.lean</span>\n    <span class=\"mi\">45</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">is_locally_constant.lean</span>\n    <span class=\"mi\">60</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group.lean</span>\n    <span class=\"mi\">64</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">iso.lean</span>\n    <span class=\"mi\">65</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">order.lean</span>\n    <span class=\"mi\">74</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">discrete_quotient.lean</span>\n    <span class=\"mi\">85</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">adjunction.lean</span>\n    <span class=\"mi\">89</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finite_free.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">kronecker.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom.lean</span>\n    <span class=\"mi\">92</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_equalizer.lean</span>\n   <span class=\"mi\">118</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">compat_discrete_quotient.lean</span>\n   <span class=\"mi\">122</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">clopen_limit.lean</span>\n   <span class=\"mi\">160</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup_Completion.lean</span>\n   <span class=\"mi\">161</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">complex.lean</span>\n   <span class=\"mi\">210</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_completion.lean</span>\n   <span class=\"mi\">227</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n   <span class=\"mi\">270</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group.lean</span>\n   <span class=\"mi\">283</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup.lean</span>\n   <span class=\"mi\">295</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">arrow_limit.lean</span>\n   <span class=\"mi\">565</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">rational_cones.lean</span>\n   <span class=\"mi\">593</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnrat.lean</span>\n   <span class=\"mi\">634</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n  <span class=\"mi\">4473</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 244612733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625166392
    },
    {
        "content": "<p>A big chunk of <code>for_mathlib/Profinite/arrow_limit</code> is about how limits commute with the Cech nerve construction, which should be done more generally if/when it's added to mathlib. I'll try to do that at some point soon.</p>",
        "id": 244612841,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625166457
    },
    {
        "content": "<p>Didn't the stuff from <code>free_abelian_group</code> get merged?</p>",
        "id": 244612892,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625166482
    },
    {
        "content": "<p>half of it</p>",
        "id": 244612944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625166488
    },
    {
        "content": "<p>ah</p>",
        "id": 244612963,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625166495
    },
    {
        "content": "<p>the other half is actually quite specific, and I'm not sure if it should go to mathlib <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 244612983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625166506
    },
    {
        "content": "<p>Could someone please take a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/8136\">#8136</a> ? I think it's ready for merging.</p>",
        "id": 244787135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625296268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  do you want to PR <code>finite_free.lean</code>? Otherwise I can do it tomorrow.</p>",
        "id": 245340253,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1625763175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I think that Scott has some ideas how to simplify the contents, see also <a href=\"#narrow/stream/267928-condensed-mathematics/topic/free.20module/near/243507549\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/free.20module/near/243507549</a></p>",
        "id": 245341008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625763533
    },
    {
        "content": "<p>Ah let's wait for him then</p>",
        "id": 245341220,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1625763613
    },
    {
        "content": "<p>I tried to bump mathlib to handle my PR from yesterday but there are now errors in the new stuff, starting with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">proetale_site.lean</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">CompHaus.mk</span> <span class=\"n\">punit</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">punit</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Sort</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Top</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246065345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626337642
    },
    {
        "content": "<p>looks related to <del>#8134</del> <a href=\"https://github.com/leanprover-community/mathlib/issues/8314\">#8314</a> (numbers are not cooperating with me this morning...)</p>",
        "id": 246065520,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626337737
    },
    {
        "content": "<p>Did you get any further here? Can you push your fixes to a branch, then I can work on whatever remains.</p>",
        "id": 246080762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626348302
    },
    {
        "content": "<p>Are you asking me? I didn't try to go further. I just pushed to bump-normed, but my work is trivial: remove one file and remove all corresponding import lines.</p>",
        "id": 246081112,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626348576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thanks. I've fixed the remaining errors, and pushed to master.</p>",
        "id": 246082512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626349569
    },
    {
        "content": "<p>About other PRs, I opened  <a href=\"https://github.com/leanprover-community/mathlib/issues/8317\">#8317</a> which should be rather easy to review. I'm currently contemplating  the <a href=\"https://github.com/leanprover-community/lean-liquid/blame/master/src/for_mathlib/tsum.lean\">tsum file</a> that you wrote. I can see you forced your way there, but clearly that's not quite the right way to do it. I think there are lemmas in mathlib's tsum file that are stated and proved for groups and should be about cancellative monoids. So I think PRing this file is pointless, there should be more changes in mathlib.</p>",
        "id": 246082793,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626349787
    },
    {
        "content": "<p>I can certainly believe that I didn't do the tsum stuff in the right generality</p>",
        "id": 246083604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626350302
    },
    {
        "content": "<p>I left a review on <a href=\"https://github.com/leanprover-community/mathlib/issues/8317\">#8317</a></p>",
        "id": 246084219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626350704
    },
    {
        "content": "<p>Thanks. Your questions there prove I may have been too lazy by not tackling an older issue: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/algebra/group_completion.lean\">topology.algebra.group_completion</a> is ancient. It does not feature bundled group homs.</p>",
        "id": 246085368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626351466
    },
    {
        "content": "<p>And I think we still don't have bundled continuous group homs. LTE jumped directly to bundled normed groups homs.</p>",
        "id": 246085439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626351491
    },
    {
        "content": "<p>Specifically I mean <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/algebra/group_completion.lean#L97-L98\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/algebra/group_completion.lean#L97-L98</a></p>",
        "id": 246085468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626351514
    },
    {
        "content": "<p>Hmm, do we want bundled continuous group homs?</p>",
        "id": 246085493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626351535
    },
    {
        "content": "<p>It's not clear to me when continuity should or should not be bundled.</p>",
        "id": 246085524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626351558
    },
    {
        "content": "<p>For now we could turn those lemmas into lemmas taking as input a bundled group hom and a continuity assumption and output a bundled group hom and an extra lemma asserting continuity.</p>",
        "id": 246085833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626351742
    },
    {
        "content": "<p>I'll think I'll do that, so let's put that PR on hold. For the nnreal sum lemmas, it seems the right conditions to make it work are a bit tricky, and there may be  no example beyond subtypes of topological groups, so maybe that the correct generality. I clearly won't have time for that soon, so let's say we shouldn't PR that tsum file for now.</p>",
        "id": 246087250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626352580
    },
    {
        "content": "<p>Ok, feel free to copy-paste your thoughts at the top of that file.</p>",
        "id": 246087370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626352650
    },
    {
        "content": "<p>I've just bumped mathlib. <code>for_mathlib/normed_group_hom_equalizer.lean</code> is gone.</p>",
        "id": 246104237,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1626360184
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/leanprover-community/mathlib/issues/7628\">#7628</a> is merged, I think that part of <code>for_mathlib/SemiNormedGroup.lean</code> can be removed.  I tried to do it, but I wasn't able to do it. In particular, with <code>f : A ⟶ B</code> and <code>A B : SemiNormedGroup</code>,  if I write <code>category_theory.limits.cokernel f</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">SemiNormedGroup</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">limits.has_cokernel</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>and I don't know how to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/SemiNormedGroup.category_theory.limits.has_cokernels\">docs#SemiNormedGroup.category_theory.limits.has_cokernels</a> to prove it. This is surely because I am not use to category theory in mathlib...</p>",
        "id": 247563909,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627552845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you have some time to look at this maybe?</p>",
        "id": 247567670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627555737
    },
    {
        "content": "<p>Skimming through <code>for_mathlib</code>, I have seen the files <code>discrete_quotient</code> (by <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> ) and <code>is_locally_constant</code> (by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ) and they both look quite short and easy to integrate directly in <code>mathlib</code>. Is there any specific reason why they're still there, or can I try to merge them?</p>",
        "id": 247568607,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1627556519
    },
    {
        "content": "<p>On my side there is a very clear reason. I started to PR stuff in this direction but I met so much obstruction from Eric Wieser that I gave up.</p>",
        "id": 247569856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627557495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I can take a look at the cokernel thing this morning. Where does the error occur?</p>",
        "id": 247575363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627561322
    },
    {
        "content": "<p>Everything compiles with the latest mathlib. But in <code>for_mathlib/SemiNormedGroup.lean</code> there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">cokernels</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">SemiNormedGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n\n<span class=\"sd\">/-- The cokernel of a morphism of seminormed groups. -/</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">coker</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SemiNormedGroup</span> <span class=\"o\">:=</span> <span class=\"n\">SemiNormedGroup.of</span> <span class=\"bp\">$</span>\n  <span class=\"n\">quotient_add_group.quotient</span> <span class=\"n\">f.range</span>\n\n<span class=\"sd\">/-- The projection onto the cokernel. -/</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">coker.π</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">coker</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.range.normed_mk</span>\n</code></pre></div>\n<p>(and other lemmas) that I <em>think</em> are useless now that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/SemiNormedGroup.category_theory.limits.has_cokernels\">docs#SemiNormedGroup.category_theory.limits.has_cokernels</a>. In particular, LTE uses now its own cokernel and not mathlib's one.</p>",
        "id": 247575730,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627561562
    },
    {
        "content": "<p>It's possible that in LTE we want the \"standard\" cokernel, meaning the one in <code>SemiNormedGroup₁</code>, I am not sure.</p>",
        "id": 247575998,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627561706
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247576005,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627561716
    },
    {
        "content": "<p>Ah I see. I think those may need to stick around. The cokernels you get as a colimit from the category theory library don't give you any control over the norms (since you can compose with an isomorphism which rescaled the norm).</p>",
        "id": 247576037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627561734
    },
    {
        "content": "<p>But I'll try to get rid of that code and see what breaks</p>",
        "id": 247576158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627561814
    },
    {
        "content": "<p>Ooh yes, it's the norm issue again.</p>",
        "id": 247576460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627561984
    },
    {
        "content": "<p>Maybe what we want is something like <code>cokernel₁</code>,  the image of the cokernel in <code>SemiNormedGroup₁</code> under the forgetful functor. This is a cokernel in <code>SemiNormedGroup</code>, so it should be possible to use all the general results, but moreover it has a nice norm.</p>",
        "id": 247577236,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627562403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/for_mathlib/near/247569856\">said</a>:</p>\n<blockquote>\n<p>On my side there is a very clear reason. I started to PR stuff in this direction but I met so much obstruction from Eric Wieser that I gave up.</p>\n</blockquote>\n<p>Oh, I see. Do you have the PR number so I can have a look?</p>",
        "id": 247577644,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1627562644
    },
    {
        "content": "<p>I think Patrick is referring to <a href=\"https://github.com/leanprover-community/mathlib/issues/7910\">#7910</a> which is now merged? Sorry for the friction there, I tried to alleviate it by making the changes Bhavik and I were asking for myself rather than burdening you with them.</p>",
        "id": 247577817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627562759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/for_mathlib/near/247577236\">said</a>:</p>\n<blockquote>\n<p>Maybe what we want is something like <code>cokernel₁</code>,  the image of the cokernel in <code>SemiNormedGroup₁</code> under the forgetful functor. This is a cokernel in <code>SemiNormedGroup</code>, so it should be possible to use all the general results, but moreover it has a nice norm.</p>\n</blockquote>\n<p>But you can only do this for norm-nonincreasing maps. So it's not a solution for the generic morphism.</p>",
        "id": 247577876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1627562781
    },
    {
        "content": "<p>Ah, of course</p>",
        "id": 247578083,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627562884
    },
    {
        "content": "<p>Yes <a href=\"https://github.com/leanprover-community/mathlib/issues/7910\">#7910</a> was the main one in this direction. Unfortunately the fact that it is now merge doesn't mean the next one won't be bikeshed to death.</p>",
        "id": 247578221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627562975
    },
    {
        "content": "<p>Defining the cokernels as a bounded colimit of some sort would probably solve the issue, but the infrastructure around that doesn't exist so I don't think it's worth it.</p>",
        "id": 247579522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627563621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I just added <code>for_mathlib/discrete_quotient</code> a couple of days ago, which is why it's still there. Feel free to make a mathlib PR with that, if you would like.</p>",
        "id": 247579791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627563746
    },
    {
        "content": "<p>I can be very wrong, but I now think that <code>SemiNormedGroup</code> (I mean, the category) is something that will be rarely used outside LTE. Someone doing analysis will absolutely not care about the fact the the kernel of a continuous linear map is the equalizer  of something. And the fact that the natural map from the kernel can not preserve the norm is ridiculous for an analyst. So in my opinion what should go to mathlib is something like <code>f.cokernel</code> where <code>f : normed_group_hom A B</code>. Note that for kernel and range we already have that</p>",
        "id": 247580576,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627564129
    },
    {
        "content": "<p>Concretely this means that <code>for_mathlib/SemiNormedGroup.lean</code> should go to mathlib, independently of <a href=\"https://github.com/leanprover-community/mathlib/issues/7268\">#7268</a></p>",
        "id": 247580749,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627564220
    },
    {
        "content": "<p>Just one small thought: with all the Liquid philosophy, isn't it possible that at a certain point people doing analysis will start caring about something being an equalizer?</p>",
        "id": 247580791,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1627564245
    },
    {
        "content": "<p>I am not sure <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 247581081,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627564420
    },
    {
        "content": "<p>Seriously, doing analysis, <em>the</em> kernel is one particular model of the equalizer, not any equalizer. It's really a non categorical notion</p>",
        "id": 247581248,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627564500
    },
    {
        "content": "<p>You mean that you can put several equivalent norms on an equalizer to end up with several objects and the kernel is one choice?</p>",
        "id": 247581430,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1627564596
    },
    {
        "content": "<p>Yes, if <code>f : normed_group_hom A B</code> you can put the \"natural\" norm on <code>ker f</code> and multiply it by <code>37</code>. This is still a kernel</p>",
        "id": 247581648,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1627564698
    },
    {
        "content": "<p>Yes, yes, I agree and I see your point.</p>",
        "id": 247581688,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1627564723
    },
    {
        "content": "<p>This was exactly what these <code>semi_normed_category</code> gadgets were supposed to solve.</p>",
        "id": 247582578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627565163
    },
    {
        "content": "<p>Well, it looks like the immediate error that <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> ran into is due to some universe nonsense. E.g. this works: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">_root_.category_theory.limits.has_cokernels</span> <span class=\"n\">SemiNormedGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">SemiNormedGroup.category_theory.limits.has_cokernels.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SemiNormedGroup</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory.limits.cokernel</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 247587895,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627567721
    },
    {
        "content": "<p>We should probably add some universe annotations to the definition of this instance in mathlib</p>",
        "id": 247588010,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627567791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/for_mathlib/near/247579791\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> I just added <code>for_mathlib/discrete_quotient</code> a couple of days ago, which is why it's still there. Feel free to make a mathlib PR with that, if you would like.</p>\n</blockquote>\n<p>Done! <a href=\"https://github.com/leanprover-community/mathlib/issues/8464\">#8464</a>.</p>",
        "id": 247594805,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1627570434
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8467\">#8467</a> fixes the universe issue and adds some API for an explicit cokernels in <code>SemiNormedGroup</code> which has the desired norm properties.</p>",
        "id": 247607224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627576188
    },
    {
        "content": "<p>I've just bumped mathlib. <code>for_mathlib/discrete_quotient.lean</code> is gone.</p>",
        "id": 248338132,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628076888
    },
    {
        "content": "<p><code>for_mathlib/normed_group_hom_completion.lean</code> is gone (it was already in mathlib).</p>",
        "id": 252297883,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631018230
    },
    {
        "content": "<p>If everybody agrees I am going to PR <code>for_mathlib/finite_free.lean</code> (after generalization). The relevant results are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">module.finite.of_basis</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module.finite</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module.finite</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module.free</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">module.free.choose_basis_index</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module.finite</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module.free</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I think the original plan was to wait for some refactor of <code>finite</code>/<code>finite_dimensional</code>, but I think we can just have these results in mathlib and doing the refactor later.</p>",
        "id": 252299595,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631019044
    },
    {
        "content": "<p>That refactor has been done. (Anne refactored basis: now it's a bundled map.)</p>",
        "id": 252299881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631019189
    },
    {
        "content": "<p>So please go ahead!</p>",
        "id": 252299893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631019194
    },
    {
        "content": "<p>I wonder if <code>lean-liquid</code> needs a <code>really_for_mathlib</code> folder, containing the stuff that is already polished and nice, and just needs someone to make a PR.</p>",
        "id": 274505376,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646724613
    },
    {
        "content": "<p>I was just having another look through today (fearing that I was doing something that already existed....)</p>",
        "id": 274505412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646724627
    },
    {
        "content": "<p>and there is a lot of stuff which I would hit <code>bors merge</code> on right away!</p>",
        "id": 274505429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1646724648
    },
    {
        "content": "<p>Yeah, we should probably organize another sprint. But I'm very short on time these days.</p>",
        "id": 274505670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646724954
    },
    {
        "content": "<p>All the free time that I have, I want to spend on finishing LTE.</p>",
        "id": 274505716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646724970
    },
    {
        "content": "<p>You can delete <code>for_mathlib/endomorphisms.lean</code>. It is already in mathlib as <code>karoubi</code>.</p>",
        "id": 275080549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647066288
    },
    {
        "content": "<p>(and apparently not used in <code>lean-liquid</code> at present)</p>",
        "id": 275080617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647066418
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 275083387,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647071173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It is indeed not used. And we will not need it. But it's not the same as <code>karoubi</code>, right? Because we don't require that the endomorphism is idempotent.</p>",
        "id": 275083448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647071291
    },
    {
        "content": "<p>Oh, you're right, I'm not paying attention sorry.</p>",
        "id": 275083454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647071338
    },
    {
        "content": "<p>I seem to remember having made exactly this same mistake previously, actually.</p>",
        "id": 275083458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647071359
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 275083462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647071363
    }
]