[
    {
        "content": "<p>We need to formalize the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mrow><mo>&gt;</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_{&gt;r})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (see top of page 37 of Analytic.pdf).<br>\nI think we can first define this as a functor on profinite sets, and then later turn it into a condensed abelian group. Formalizing these definitions might inform our decision about how to define condensed abelian groups.</p>\n<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> do you have a good name for these gadgets (it doesn't matter if it is long, we can enable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\">M</span></span></span></span> notation afterwards).</p>",
        "id": 246813964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626936445
    },
    {
        "content": "<p>Hmm, I don't know about a good name.</p>",
        "id": 246833265,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1626952170
    },
    {
        "content": "<p>Does it make sense to call them something like (overconvergent) integral measures? Sounds like a weird mix...</p>",
        "id": 246834842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626953599
    },
    {
        "content": "<p>Am I wrong or the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> in the right-hand side of the definition of  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><msub><mo stretchy=\"false\">)</mo><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal{M}}_{r&#x27;}(S)_{\\leq c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>  for finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> on page 57 of Analytic.pdf should be an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 248497498,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628179054
    },
    {
        "content": "<p>I pushed a fix</p>",
        "id": 248594298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628245528
    },
    {
        "content": "<p>I am slowly starting to think about this, do you know if some advances have already been made?</p>",
        "id": 248594396,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628245577
    },
    {
        "content": "<p>Nope... not that I know of</p>",
        "id": 248600469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628250490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> were you thinking about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mrow><mo>&gt;</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}(S,\\mathbb{Z}((T))_{&gt; r})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal{M}}_{r&#x27;}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 248615065,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628258708
    },
    {
        "content": "<p>The former (well, actually <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}(S,\\mathbb{Z}((T))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for the time being:  as defined right before Theorem 6.9 on page 37 of Analytic.pdf).</p>",
        "id": 248615296,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628258834
    },
    {
        "content": "<p>I guess the definition could start like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.laurent_series</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.category.Profinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.locally_constant.algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">locally_constant</span> <span class=\"n\">S</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- nice</span>\n\n<span class=\"c1\">-- We have this somewhere in LTE.</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_nnnorm</span> <span class=\"o\">(</span><span class=\"n\">locally_constant</span> <span class=\"n\">S</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"bp\">∥</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"bp\">∥₊</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">laurent_series</span> <span class=\"o\">(</span><span class=\"n\">locally_constant</span> <span class=\"n\">S</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- nice</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">laurent_series</span> <span class=\"o\">(</span><span class=\"n\">locally_constant</span> <span class=\"n\">S</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"bp\">|</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∥</span> <span class=\"n\">F.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">∥₊</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"c1\">-- summability</span>\n      <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span> <span class=\"n\">F.coeff</span> <span class=\"n\">n</span> <span class=\"bp\">∥₊</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">}</span> <span class=\"c1\">-- and bounded by c.</span>\n</code></pre></div>",
        "id": 248619428,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628260866
    },
    {
        "content": "<p>The stuff in <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/locally_constant/analysis.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/locally_constant/analysis.lean</a> should probably move to mathlib soon...</p>",
        "id": 248619649,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628260981
    },
    {
        "content": "<p>Ah, ok: I was starting in a somewhat different direction but your approach is more valuable, I guess. I am going to have a look in half a hour or so.</p>",
        "id": 248620127,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628261228
    },
    {
        "content": "<p>Maybe the following is better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.laurent_series</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.category.Profinite</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.locally_constant.algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">laurent_series</span> <span class=\"o\">(</span><span class=\"n\">locally_constant</span> <span class=\"n\">S</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∥</span> <span class=\"o\">(</span><span class=\"n\">F.coeff</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">∥₊</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"c1\">-- summability</span>\n                 <span class=\"o\">(</span><span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span> <span class=\"o\">(</span><span class=\"n\">F.coeff</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">∥₊</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">}</span> <span class=\"c1\">-- and bounded by c.</span>\n</code></pre></div>",
        "id": 248620329,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628261334
    },
    {
        "content": "<p>At least that should correspond to what's defined on page 36 of analytic.pdf</p>",
        "id": 248620393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628261364
    },
    {
        "content": "<p>Proving that these things are profinite sets will be a challenge... (but should go more-or-less similarly to the proof that <code>Mbar_le</code> are profinite)</p>",
        "id": 248620413,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628261376
    },
    {
        "content": "<p>I had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">c_measures</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>     <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">summable</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">s'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">bdd</span>        <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">s'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">oc_measures</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>      <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">summable</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">s'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>and then was trying to upgrade these to functors from <code>Fintype</code> to pseudo-normed groups.</p>",
        "id": 248620517,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628261413
    },
    {
        "content": "<p>But as said, your approach seems better.</p>",
        "id": 248620739,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628261532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/248620739\">said</a>:</p>\n<blockquote>\n<p>But as said, your approach seems better.</p>\n</blockquote>\n<p>I'm not sure. Your definition gives direct access to the underlying function given by the coefficients.</p>",
        "id": 248621506,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628261977
    },
    {
        "content": "<p>Yes, it does. I was also thinking that working with finite sets and then taking inv limits (as in p 37) might be easier.</p>",
        "id": 248621607,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628262011
    },
    {
        "content": "<p>I have pushed this already to the branch fae_overconvergent_measures, if you want to have a look (I have a call now and won't be able to work on this for 30-35 mins, but will be back later).</p>",
        "id": 248621735,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628262067
    },
    {
        "content": "<p>I'm actually a little confused about the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><msub><mo stretchy=\"false\">]</mo><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S]_{\\le c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> that appears at the top of page 37. Are these two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>'s really the same?</p>",
        "id": 248628165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628264942
    },
    {
        "content": "<p>Why not? I don't see immediately where the problem lies.</p>",
        "id": 248628774,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628265181
    },
    {
        "content": "<p>Well, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a condensed ring, so a priori is a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>↦</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S \\mapsto \\mathbb{Z}((T))_r(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> as defined on page 36. The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> is the free module on a, say, finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</p>",
        "id": 248629129,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628265345
    },
    {
        "content": "<p>Oh, this I agree: the two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>'s from p. 36 and 37. I took the short path and forgot about p 36, simply thinking that the functor was defined on finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and then extended by inv. limit, without checking that the definition would give back that on p 36.</p>",
        "id": 248629508,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628265501
    },
    {
        "content": "<p>Using a single S probably gives the same result, but a priori there are two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>'s in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> (one from the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> and one from the condensed structure).</p>",
        "id": 248629509,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628265501
    },
    {
        "content": "<p>Actually: what do you mean by \"the one from the condensed structure\"? That on p. 37 the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> is the free condensed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-module on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, and so that <em>a priori</em> one could evaluate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">(</mo><msup><mi>S</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S](S&#x27;)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> on any profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">S&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 248629535,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628265514
    },
    {
        "content": "<p>Ignoring the module part of the story, at the end of the day <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mo>−</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[-]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mclose\">]</span></span></span></span> is a functor sending a profinite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to a condensed set, which is a functor sending a profinite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">S&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to a set.</p>",
        "id": 248630317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628265814
    },
    {
        "content": "<p>Yes, I agree; but the way I read the sentence on l. 2 of page 37 was that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><msub><mo stretchy=\"false\">]</mo><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S]_{\\leq c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> is a functor sending a finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to some abelian group and so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to the union over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> of the values of the previous functor. So, for me, \"free-module\" meant \"free <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-module\" (because the explicit definition associates to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> a group, not a functor -- not a \"true\" one, i.e. a non-constant one).</p>",
        "id": 248630786,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628266029
    },
    {
        "content": "<p>At a different level: I am trying to improve a bit my code with the above definition, and I am trying to give the </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oc_functor</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">ProFiltPseuNormGrp.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>associating to every finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> the p-f-p-n-group <code>oc_measures r S</code> as defined above.</p>",
        "id": 248631426,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628266289
    },
    {
        "content": "<p>Maybe the equation at the top of page 37 should say the following?</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><msub><mo stretchy=\"false\">]</mo><mrow><mo>≤</mo><mi>c</mi></mrow></msub><mo>:</mo><mo>=</mo><mo stretchy=\"false\">{</mo><munder><mo>∑</mo><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mo separator=\"true\">,</mo><mi>s</mi><mo>∈</mo><mi>S</mi></mrow></munder><msub><mi>a</mi><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>s</mi></mrow></msub><msup><mi>T</mi><mi>n</mi></msup><mo stretchy=\"false\">[</mo><mi>s</mi><mo stretchy=\"false\">]</mo><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><msub><mi>a</mi><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>s</mi></mrow></msub><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mo separator=\"true\">,</mo><mtext> </mtext><munder><mo>∑</mo><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>s</mi></mrow></munder><mi mathvariant=\"normal\">∣</mi><msub><mi>a</mi><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>s</mi></mrow></msub><mi mathvariant=\"normal\">∣</mi><msup><mi>r</mi><mi>n</mi></msup><mo>≤</mo><mi>c</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S]_{\\le c} := \\{ \\sum_{n \\in \\mathbb{Z}, s \\in S} a_{n,s} T^n [s] \\ | \\ a_{n,s} \\in \\mathbb{Z}, \\ \\sum_{n,s} | a_{n,s} | r^n \\le c \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.484341em;vertical-align:-1.434336em;\"></span><span class=\"mopen\">{</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8517719999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathbb mtight\">Z</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.434336em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">]</span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4361180000000004em;vertical-align:-1.386113em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0500050000000003em;\"><span style=\"top:-1.8999949999999999em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.386113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">}</span></span></span></span></span></p>",
        "id": 248631445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628266301
    },
    {
        "content": "<p><del>But would they really be \"measures\"?</del> You are right, looking at the statement of Thm 6.9 it seems all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> must be in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span></p>",
        "id": 248631587,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628266357
    },
    {
        "content": "<p>I'm just thinking about our definition here...<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/8f444ae6d4113c8c550a9aa597a7511725a2658b/src/Mbar/basic.lean#L39\">https://github.com/leanprover-community/lean-liquid/blob/8f444ae6d4113c8c550a9aa597a7511725a2658b/src/Mbar/basic.lean#L39</a></p>",
        "id": 248631734,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628266434
    },
    {
        "content": "<p>and here<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/8f444ae6d4113c8c550a9aa597a7511725a2658b/src/Mbar/Mbar_le.lean#L34\">https://github.com/leanprover-community/lean-liquid/blob/8f444ae6d4113c8c550a9aa597a7511725a2658b/src/Mbar/Mbar_le.lean#L34</a></p>",
        "id": 248631827,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628266465
    },
    {
        "content": "<p>I agree, I actually adapted mine from there (replacing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with functions, blindly copying)</p>",
        "id": 248631939,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628266519
    },
    {
        "content": "<p>BTW: In thm 6.9, I guess the maps is as condensed groups. But how to look at an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> as a series? Evaluating it at the singleton?</p>",
        "id": 248632376,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628266732
    },
    {
        "content": "<p>If I undderstand correctly, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is a profinite set, consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>a</mi><mi>n</mi></msub><msup><mi>T</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_n a_n T^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>∈</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a_n \\in C(S,\\mathbb{Z})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span></span></span></span>, and send that series to the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>↦</mo><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">s \\mapsto \\sum_n a_n(s) r&#x27;^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051602em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 248633005,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628267034
    },
    {
        "content": "<p>I guess that's what this map (of condensed sets) is supposed to do when you apply it to a profinite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>.</p>",
        "id": 248633349,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628267155
    },
    {
        "content": "<p>Ah, where the second is an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> as a condensed set: right!</p>",
        "id": 248633350,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628267155
    },
    {
        "content": "<p>At any rate, as long as we put <code>sorries</code> everywhere, the code can very easily be adapted <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 248633645,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628267278
    },
    {
        "content": "<p>And which approach do you suggest to follow? Have you had a look to my branch?</p>",
        "id": 248634068,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628267438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> we could discuss for a bit and do some pair programming on zoom, if you would like...</p>",
        "id": 248634367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628267564
    },
    {
        "content": "<p>Yes, I have half an hour free now, if you want.</p>",
        "id": 248634430,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628267589
    },
    {
        "content": "<p>Ok, give me about 10 mins to get more coffee. I'll send you a link.</p>",
        "id": 248634453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628267599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/248631445\">said</a>:</p>\n<blockquote>\n<p>Maybe the equation at the top of page 37 should say the following?</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">[</mo><mi>S</mi><msub><mo stretchy=\"false\">]</mo><mrow><mo>≤</mo><mi>c</mi></mrow></msub><mo>:</mo><mo>=</mo><mo stretchy=\"false\">{</mo><munder><mo>∑</mo><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mo separator=\"true\">,</mo><mi>s</mi><mo>∈</mo><mi>S</mi></mrow></munder><msub><mi>a</mi><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>s</mi></mrow></msub><msup><mi>T</mi><mi>n</mi></msup><mo stretchy=\"false\">[</mo><mi>s</mi><mo stretchy=\"false\">]</mo><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><msub><mi>a</mi><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>s</mi></mrow></msub><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mo separator=\"true\">,</mo><mtext> </mtext><munder><mo>∑</mo><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>s</mi></mrow></munder><mi mathvariant=\"normal\">∣</mi><msub><mi>a</mi><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>s</mi></mrow></msub><mi mathvariant=\"normal\">∣</mi><msup><mi>r</mi><mi>n</mi></msup><mo>≤</mo><mi>c</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r[S]_{\\le c} := \\{ \\sum_{n \\in \\mathbb{Z}, s \\in S} a_{n,s} T^n [s] \\ | \\ a_{n,s} \\in \\mathbb{Z}, \\ \\sum_{n,s} | a_{n,s} | r^n \\le c \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.484341em;vertical-align:-1.434336em;\"></span><span class=\"mopen\">{</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8517719999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathbb mtight\">Z</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.434336em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">]</span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.4361180000000004em;vertical-align:-1.386113em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0500050000000003em;\"><span style=\"top:-1.8999949999999999em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.386113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">}</span></span></span></span></span><br>\n</p>\n</blockquote>\n<p>What is the difference with what is currently there?</p>",
        "id": 248648292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628273825
    },
    {
        "content": "<p>Currently it says <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(S,\\mathbb{Z})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span></p>",
        "id": 248648368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628273869
    },
    {
        "content": "<p>at least on the version on Peter's webpage (I haven't checked the version from github...)</p>",
        "id": 248648376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628273877
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>git show 5765f9e35dc03ffe24563dc86cd6f4b115d004ae\ncommit 5765f9e35dc03ffe24563dc86cd6f4b115d004ae\nAuthor: Johan Commelin &lt;johan@commelin.net&gt;\nDate:   Tue Jul 13 10:51:05 2021 +0200\n\n    fix typo in display\n\n<span class=\"gh\">diff --git a/Analytic.tex b/Analytic.tex</span>\n<span class=\"gh\">index 6c5bc42..75c7c9a 100644</span>\n<span class=\"gd\">--- a/Analytic.tex</span>\n<span class=\"gi\">+++ b/Analytic.tex</span>\n<span class=\"gu\">@@ -1180,7 +1180,7 @@ each of which is a finite set.</span>\n\n For any finite set $S$, we now write the free module $\\mathbb Z((T))_r[S]$ as the increasing union of\n \\[\n<span class=\"gd\">-\\mathbb Z((T))_r[S]_{\\leq c} := \\{\\sum_{n\\in \\mathbb Z,s\\in S} a_{n,s} T^n [s]\\mid a_{n,s}\\in C(S,\\mathbb Z), \\sum_{n\\in \\mathbb Z, s\\in S} |a_{n,s}|r^n\\leq c\\};</span>\n<span class=\"gi\">+\\mathbb Z((T))_r[S]_{\\leq c} := \\{\\sum_{n\\in \\mathbb Z,s\\in S} a_{n,s} T^n [s]\\mid a_{n,s}\\in \\mathbb Z, \\sum_{n\\in \\mathbb Z, s\\in S} |a_{n,s}|r^n\\leq c\\};</span>\n \\]\n each of these is again a profinite set. The addition defines maps\n \\[\n</code></pre></div>",
        "id": 248648596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628273966
    },
    {
        "content": "<p><code>Tue Jul 13 10:51:05 2021 +0200</code> ;)</p>",
        "id": 248648748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628274037
    },
    {
        "content": "<p>Would you mind not gitignoring the compiled pdf in that repo, so that the most up-to-date version of analytic.pdf can be obtained from github?</p>",
        "id": 248648870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628274104
    },
    {
        "content": "<p>This isn't the right solution. This repo should have CI that builds and publishes.</p>",
        "id": 248653651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628276162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/248653651\">said</a>:</p>\n<blockquote>\n<p>This isn't the right solution. This repo should have CI that builds and publishes.</p>\n</blockquote>\n<p>Yes, of course, but that takes more effort to implement.</p>",
        "id": 248653771,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628276219
    },
    {
        "content": "<p>Actually, if you know of a github ci recipe that does this, that would be great to know about!</p>",
        "id": 248653832,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628276258
    },
    {
        "content": "<p>(I had something along these lines cobbled together for some lecture notes for one of my classes last term, but it was too clunky to be useful in general)</p>",
        "id": 248653944,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628276299
    },
    {
        "content": "<p>It does already as far as I remember engineering it. You can check the github actions</p>",
        "id": 248661699,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628280320
    },
    {
        "content": "<p>Because it needs the pdf for the web interface, iirc</p>",
        "id": 248661734,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628280332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> this is a separate repo, not the bluepring... I'm referring to <a href=\"https://github.com/PeterScholze/Analytic\">https://github.com/PeterScholze/Analytic</a></p>",
        "id": 248662814,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628280876
    },
    {
        "content": "<p>I've just made a PR that does something super basic: <a href=\"https://github.com/PeterScholze/Analytic/pull/8\">https://github.com/PeterScholze/Analytic/pull/8</a></p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 248662875,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1628280908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> Thanks! I merged the PR</p>",
        "id": 248725057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628355262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> The produced artifact is a <code>.zip</code> file: <a href=\"https://github.com/PeterScholze/Analytic/actions/runs/1108315466\">https://github.com/PeterScholze/Analytic/actions/runs/1108315466</a></p>",
        "id": 248725532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628355925
    },
    {
        "content": "<p>Do you think this can be turned into simply the pdf?</p>",
        "id": 248725539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628355939
    },
    {
        "content": "<p>Have you been pushing the <code>Mbar</code> variants to a branch? What is the status there?</p>",
        "id": 248732410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628365601
    },
    {
        "content": "<p>Yes</p>",
        "id": 248732480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628365693
    },
    {
        "content": "<p>Still WIP</p>",
        "id": 248732482,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628365702
    },
    {
        "content": "<p>I just pushed some stuff a few mins ago. It's on the branch <code>fae_overconvergent_...</code></p>",
        "id": 248732496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628365743
    },
    {
        "content": "<p>Ok, thanks for the pointer!</p>",
        "id": 248732505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628365763
    },
    {
        "content": "<p>The main finiteness needed to prove that the terms in the filtration are Profinite is done, just gotta patch things together in a limit</p>",
        "id": 248732529,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628365802
    },
    {
        "content": "<p>Once we have those, we should build some api that takes a <code>profinitely_filtered_pseudo_normed_foobar</code> and turns it into a <code>condensed_foobar</code>.</p>",
        "id": 248732574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628365858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> shouldn't you be on vacation right now? What are you doing on zulip?</p>",
        "id": 248732589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628365908
    },
    {
        "content": "<p>Ooh, and we'll need to know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_r \\to \\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>↦</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">T \\mapsto \\frac12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>&gt;</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">r &gt; \\frac12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> is a surjective ring hom.</p>",
        "id": 248732632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628365933
    },
    {
        "content": "<p>(I returned from holidays... a couple of hours ago. We'll go for another week later in August. So I'll have a week to hack on LTE <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> )</p>",
        "id": 248732646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628365976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/248732632\">said</a>:</p>\n<blockquote>\n<p>Ooh, and we'll need to know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_r \\to \\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>↦</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">T \\mapsto \\frac12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>&gt;</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">r &gt; \\frac12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> is a surjective ring hom.</p>\n</blockquote>\n<p>Does mathlib have any API for this? Something like the existence of a \"decimal expansion\" of a real number?</p>",
        "id": 248732981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628366422
    },
    {
        "content": "<p>I'm not sure. I guess that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> might know this best.</p>",
        "id": 248733007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628366477
    },
    {
        "content": "<p>Doesn't ring a bell. Maybe <code>nat.digits</code> or the cardinality of the reals proof?</p>",
        "id": 248733173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628366755
    },
    {
        "content": "<p>Well... the rain let up so I'm going mountain biking. <br>\nI'll try to finish up the profiniteness of the filtration for <code>oc_measures</code> on Monday.</p>",
        "id": 248733287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628366884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/248732589\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> shouldn't you be on vacation right now? What are you doing on zulip?</p>\n</blockquote>\n<p>Wait, are holidays when you are <strong>not</strong> doing Lean?</p>",
        "id": 248733484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628367190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/248732981\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/248732632\">said</a>:</p>\n<blockquote>\n<p>Ooh, and we'll need to know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_r \\to \\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>↦</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">T \\mapsto \\frac12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>&gt;</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">r &gt; \\frac12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> is a surjective ring hom.</p>\n</blockquote>\n<p>Does mathlib have any API for this? Something like the existence of a \"decimal expansion\" of a real number?</p>\n</blockquote>\n<p>Someone on the Xena discord was working on decimal expansions of real numbers, I think it was <span class=\"user-mention\" data-user-id=\"364484\">@Deniz Aydin</span> ? Not sure if it's public anywhere.</p>",
        "id": 248733732,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1628367534
    },
    {
        "content": "<p>It's an old branch of mine. I think it was Deniz.</p>",
        "id": 248733906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628367826
    },
    {
        "content": "<p>I guess the surjectivity is easy for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>↦</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">T \\mapsto x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>≤</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">x \\le r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>. But what we actually need to use later is that the kernel is a principal ideal. And for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">x \\in \\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> that is a lot easier to prove than for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">∉</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">x \\notin \\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>.</p>",
        "id": 248734311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628368450
    },
    {
        "content": "<p>In the end, we can get away with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x = 1/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/2</span></span></span></span> for the final application.</p>",
        "id": 248734326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628368490
    },
    {
        "content": "<p>Most of the proof that <code>oc_measures r S</code> is a <code>pfpng</code> is done in the branch <code>fae_overco...</code>, but there are some silly sorry's around mostly about summability of certain series. If anyone wants to fill in some of these, that would be helpful!</p>",
        "id": 248781196,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628445306
    },
    {
        "content": "<p>I think I have filled most of them, and I have <code>merged</code> the branch to <code>master</code>. I hope to finish some of the remaining ones tomorrow.</p>",
        "id": 249143748,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628704267
    },
    {
        "content": "<p>Great! I can try to take care of some of them this afternoon.</p>",
        "id": 249145801,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628705097
    },
    {
        "content": "<p>Okay, <code>overconvergent_measures/basic.lean</code> only has two <strong>interesting</strong> sorry's left ;)</p>",
        "id": 249151503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628707591
    },
    {
        "content": "<p>These two sorry's are now squashed.</p>",
        "id": 249185334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628727031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  I was having a look at <em>bounded</em> overconvergent measures, but I can't figure out why you need them.</p>",
        "id": 249239896,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628777687
    },
    {
        "content": "<p>They're used to define the topology</p>",
        "id": 249239983,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628777735
    },
    {
        "content": "<p>Ah, ok.</p>",
        "id": 249240008,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628777745
    },
    {
        "content": "<p>Essentially it's just the collection of series <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>a</mi><mi>n</mi></msub><msup><mi>T</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_n a_n T^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is zero outside a finite set <code>T : finset \\Z</code>. If you also bound the norm, this is therefore a finite type, hence profinite if you give it the discrete topology. And the set of series <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>a</mi><mi>n</mi></msub><msup><mi>T</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_n a_n T^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> with bounded norm is the limit over such collections as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> varies.</p>",
        "id": 249240200,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628777829
    },
    {
        "content": "<p>All this still for finite <code>S</code>, though, right?</p>",
        "id": 249240425,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628777941
    },
    {
        "content": "<p>yes</p>",
        "id": 249240604,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628778009
    },
    {
        "content": "<p>To replace <code>S</code> by a profinite set, we need functoriality of these constructions in <code>S</code>.</p>",
        "id": 249240679,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628778040
    },
    {
        "content": "<p>Yes, I see. There is now an error with <code>summable_of_sum_le</code> (which apparently does not exist) and I wanted to fix this. Then I can try to set-up this compatibility, unless you've already started.</p>",
        "id": 249240782,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628778095
    },
    {
        "content": "<p>That's strange... it seemed to work for me yesterday?</p>",
        "id": 249241249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628778284
    },
    {
        "content": "<p>OK, may be I need to update <code>mathlib</code>? Is it a recent addition?</p>",
        "id": 249241308,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628778306
    },
    {
        "content": "<p>I didn't update mathlib. It should work.</p>",
        "id": 249241499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628778378
    },
    {
        "content": "<p>I have an <code>unknown identifier 'summable_of_sum_le'</code></p>",
        "id": 249241535,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628778398
    },
    {
        "content": "<p>the github ci on LTE was able to build successfully. So I think your setup is messed up somehow.</p>",
        "id": 249241866,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628778543
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/runs/3307440491\">https://github.com/leanprover-community/lean-liquid/runs/3307440491</a></p>",
        "id": 249241895,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628778555
    },
    {
        "content": "<p>Right. Let me check.</p>",
        "id": 249241915,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628778566
    },
    {
        "content": "<p>OK, I have updated mathlib and this will take a while. In the meantime, what's your feeling about functoriality wrt <code>S</code>? I guess we want <br>\n1) To prove it first for bdd measures<br>\n2) To show it extends via <code>mk_seq</code> to compatibility between the corresponding <code>to_fun</code> of o.c. ones<br>\n3) Prove these transition morphisms are continuous.<br>\nWhat do you think?</p>",
        "id": 249243791,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628779411
    },
    {
        "content": "<p>I think we should follow more-or-less the same steps I did for <code>Mbar</code>.</p>",
        "id": 249244376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628779673
    },
    {
        "content": "<p>RIght, I didn't think about checking that part. I am sorry, I'll have a look.</p>",
        "id": 249244469,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628779707
    },
    {
        "content": "<p>Here are the relevant locations:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/a5c5206bf3b50fb8468778e15c65b0fa056f4900/src/Mbar/basic.lean#L427\">https://github.com/leanprover-community/lean-liquid/blob/a5c5206bf3b50fb8468778e15c65b0fa056f4900/src/Mbar/basic.lean#L427</a><br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/a5c5206bf3b50fb8468778e15c65b0fa056f4900/src/Mbar/Mbar_le.lean#L479\">https://github.com/leanprover-community/lean-liquid/blob/a5c5206bf3b50fb8468778e15c65b0fa056f4900/src/Mbar/Mbar_le.lean#L479</a><br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/a5c5206bf3b50fb8468778e15c65b0fa056f4900/src/Mbar/bounded.lean#L239\">https://github.com/leanprover-community/lean-liquid/blob/a5c5206bf3b50fb8468778e15c65b0fa056f4900/src/Mbar/bounded.lean#L239</a></p>",
        "id": 249244661,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628779801
    },
    {
        "content": "<p>(I'm not too happy with the <code>Profinite.extend</code> stuff... I need to change that at some point)</p>",
        "id": 249244742,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628779819
    },
    {
        "content": "<p>Ok, I'll study these and come back (hopefully, in the meanwhile the problem with <code>'summable_of_sum_le'</code> will be gone).</p>",
        "id": 249244850,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628779880
    },
    {
        "content": "<p>I think a better approach is to show that <code>ProfinitelyFilteredPseudoNormedGroups</code> have the correct limits, and extend the corresponding functor <code>Fintype \\func ProfinitelyFiltered....</code>instead of extending the individual components.</p>",
        "id": 249245954,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628780340
    },
    {
        "content": "<p>Proving that the extension commutes with cofiltered limits is also a challenge which I haven't done yet.</p>",
        "id": 249246142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628780405
    },
    {
        "content": "<p>This is certainly more elegant. But what extension should commute with cofiltered limits? From bdd to o.c. measures?</p>",
        "id": 249248509,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628781413
    },
    {
        "content": "<p>Oh, I'm talking about the general construction here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/a5c5206bf3b50fb8468778e15c65b0fa056f4900/src/for_mathlib/Profinite/extend.lean#L37\">https://github.com/leanprover-community/lean-liquid/blob/a5c5206bf3b50fb8468778e15c65b0fa056f4900/src/for_mathlib/Profinite/extend.lean#L37</a></p>",
        "id": 249248704,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628781492
    },
    {
        "content": "<p>Regarding this thread: I just want to point out that to define these spaces of overconvergent measures, you should first define the spaces of convergent measures (i.e., for fixed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> resp. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>) and then take a colimit (over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> resp. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>). And only for (bounded) convergent measures you can reduce from profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> by cofiltered limits.</p>\n<p>I didn't quite follow what you are doing, but I was slightly afraid you take the colimit over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> resp. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> before taking the cofiltered limit over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>'s.</p>",
        "id": 249280832,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1628796224
    },
    {
        "content": "<p>In any case, the challenge requires only \"convergent\" measures</p>",
        "id": 249280986,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1628796286
    },
    {
        "content": "<p>Oh, the name is misleading. We haven't defined anything overconvergent yet</p>",
        "id": 249281053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628796319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> But when you speak about the space of conv. measure, do you mean it as a condensed group?</p>",
        "id": 249281128,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628796356
    },
    {
        "content": "<p>Sure</p>",
        "id": 249281181,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1628796365
    },
    {
        "content": "<p>As Johan was discussing, this should come from its structure as a profinitely filtered blah</p>",
        "id": 249281245,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1628796400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> we should probably change the name <code>oc_measures</code> (these are the convergent ones)</p>",
        "id": 249281263,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628796420
    },
    {
        "content": "<p>I see, so you mean that we should not define an \"overconvergent functor on finite sets\" (whatever it is) hoping to extend it to profinite ones, but rather first extend it to profinite, and then \"overconverge\"</p>",
        "id": 249281332,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628796456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> It's dinner time here now; I can take up some of this tomorrow, but have to go now,</p>",
        "id": 249281524,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628796567
    },
    {
        "content": "<p>Ok. I'll try to change the name.</p>",
        "id": 249281552,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628796585
    },
    {
        "content": "<p>By the way, if we try to prove that <code>ProfinFiltPseudoNormedGroup</code> has cofiltered limits, we'll probably run into issues similar to limits in seminormed groups, since the morphisms in this category need not be strictly compatible with the filtration.</p>",
        "id": 249282199,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628796918
    },
    {
        "content": "<p>So the idea above about extending the functor into <code>ProfinFiltPseudoNormedGroup</code> probably won't work</p>",
        "id": 249282232,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628796935
    },
    {
        "content": "<p>Okay, I think I'll replace <code>oc_measures</code> with <code>laurent_measures</code>. Any objections?</p>",
        "id": 249282495,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628797072
    },
    {
        "content": "<p>Okay, that's done. I also started on the functoriality</p>",
        "id": 249283669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628797655
    },
    {
        "content": "<p>Just pushed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">ProFiltPseuNormGrp.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">ProFiltPseuNormGrp.of</span> <span class=\"bp\">$</span> <span class=\"n\">laurent_measures</span> <span class=\"n\">r</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">map_hom</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 249400977,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628881987
    },
    {
        "content": "<p>I think in this case it may be worthwhile to introduce <code>ProFiltPseuNormGrp₀</code> (with maps strictly compatible with the filtration, analogous to <code>SemiNormedGroup₀</code>). The functor above really lands there, and we would be able to actually show that this category has enough limits so that the profinite variant of the above could be obtained by extension along cofiltered limits.</p>",
        "id": 249401625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628882307
    },
    {
        "content": "<p>I guess that would work. But things like multiplication by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> are not compatible with the filtration, right? So we might need to deal with those separately.</p>",
        "id": 249404797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628883893
    },
    {
        "content": "<p>True. one solution (that came up before as well) could be to introduce functors <code>F C</code> from <code>ProFiltPseuNormGrp₀</code> to itself which rescale the filtration by <code>C</code>, and have <code>T\\inv</code> be a morphism from <code>M</code>to <code>(F C).obj M</code>.</p>",
        "id": 249405421,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628884236
    },
    {
        "content": "<p>but extending <code>bounded_laurent_measures</code> to profinite <code>S</code> is easy, right?</p>",
        "id": 249406093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628884630
    },
    {
        "content": "<p>and showing that we can \"inclusion\" maps between those extensions is also not so hard.</p>",
        "id": 249406119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628884651
    },
    {
        "content": "<p>similar for addition and negation maps</p>",
        "id": 249406163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628884679
    },
    {
        "content": "<p>and then we can take a colimit in condensed sets (which exists by generic stuff done by Bhavik), and then we can build a condensed abelian group</p>",
        "id": 249406242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628884708
    },
    {
        "content": "<p>that would bypass the whole <code>ProFiltPseuNormGrp(₀)</code> stuff. I don't know if that is good or bad.</p>",
        "id": 249406308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628884745
    },
    {
        "content": "<p>I would prefer to define functor <code>ProFiltPseuNormGrp</code> to <code>Cond (Ab)</code>, and compose that with a functor to <code>ProFiltPseuNormGrp</code>.</p>",
        "id": 249406814,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628884984
    },
    {
        "content": "<p>But I guess it might be best to use <code>CompHausFiltPseuNormGrp</code></p>",
        "id": 249409951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628886453
    },
    {
        "content": "<p>As for defining the extension to Profinite, sure it's easy, but it's incredibly annoying. For example, think about what it takes to define addition -- you need to use the fact that binary products commute with limits, and that <code>category_theory.limits.binary_product</code> agrees with the usual type-theoretic product.</p>",
        "id": 249411093,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628887022
    },
    {
        "content": "<p>That's a good point.</p>",
        "id": 249413872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628888500
    },
    {
        "content": "<p>Ok, I'm now somewhat convinced that it will probably pay of to build <code>CompHausFiltPseuNormGrp₀</code> and construct a functor to that category.</p>",
        "id": 249448226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628928864
    },
    {
        "content": "<p>Of course working with <code>CompHausFiltPseuNormGrp\\0</code> isn't going to save us from doing the annoying work showing that it has enough limits, but at least we would have to only do it once!</p>",
        "id": 249459737,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628947124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Have you begun working on this <code>CompHausFiltPseuNormGrp\\0</code> category already?</p>",
        "id": 249587647,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629120220
    },
    {
        "content": "<p>No</p>",
        "id": 249587740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629120258
    },
    {
        "content": "<p>Ok; and would you suggest me starting with that or are there things which you believe to be more useful/urgent ?</p>",
        "id": 249588000,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629120415
    },
    {
        "content": "<p>If/when you start, I suggest that you slightly refactor <code>profinitely_filtered_pseudo_normed_group</code> so that it extends <code>comphaus_filtered_pseudo_normed_group</code> (which is defined as the former, but without tot.disconnectedness).</p>",
        "id": 249590973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629121892
    },
    {
        "content": "<p>Do we want a <code>ProfinFiltPseuNormGrp\\_0</code> as well? <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 249591636,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629122201
    },
    {
        "content": "<p>No, I don't think we need it.</p>",
        "id": 249591766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629122276
    },
    {
        "content": "<p>As far as I can see now</p>",
        "id": 249591783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629122283
    },
    {
        "content": "<p>Yeah, same here.</p>",
        "id": 249591844,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629122296
    },
    {
        "content": "<p>Well, morphisms in <code>CompHausFiltPseuNormGroup</code> and <code>ProfinFiltPseuNormGroup</code> are the same, and similarly with the <code>\\_0</code>, so we if have to add it in the future it will be easy once we have <code>CompHaus...\\_0</code>.</p>",
        "id": 249591951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629122363
    },
    {
        "content": "<p>I haven't checked the details, but if we want to have limits, I think we may need to add an assumption on these objects that the fiultration is exhaustive.</p>",
        "id": 249592348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629122534
    },
    {
        "content": "<p>Which it is in all the examples that we care about.</p>",
        "id": 249592427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629122570
    },
    {
        "content": "<p>Sure.</p>",
        "id": 249592442,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629122575
    },
    {
        "content": "<p>But I don't think we proved this for <code>Mbar</code>.</p>",
        "id": 249592450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629122580
    },
    {
        "content": "<p>In all our cases the filtration comes from some norm anyway, so it should be easy to obtain</p>",
        "id": 249592493,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629122601
    },
    {
        "content": "<p>If we add that to the existing definition, then we might have to prove this in quite a bunch of places.</p>",
        "id": 249592510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629122606
    },
    {
        "content": "<p>Maybe we should just add in for <code>CompHausFilt....</code> for now?</p>",
        "id": 249592543,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629122623
    },
    {
        "content": "<p>So maybe we drop my idea of having <code>profinitely_filtered_bla</code> extend <code>comphaus_filtered_bla</code>.</p>",
        "id": 249592567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629122634
    },
    {
        "content": "<p>Can't we just add exhaustiveness (?) when proving that limits exist as an extra hyp?</p>",
        "id": 249593344,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629122995
    },
    {
        "content": "<p>We could have <code>[exhaustive A]</code> as a mixin.</p>",
        "id": 249593539,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629123071
    },
    {
        "content": "<p>You mean to add a typeclass?</p>",
        "id": 249593595,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629123102
    },
    {
        "content": "<p>But <code>[has_limits C]</code>is a propoerty of a category <code>C</code>, so then we would need to make a new thing called <code>CompHausExhausFiltPseuNormGroup</code> and that's just way too long to type</p>",
        "id": 249593664,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629123130
    },
    {
        "content": "<p>Ah right</p>",
        "id": 249593714,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629123160
    },
    {
        "content": "<p>So I'm a bit lost. Do we go for these <code>CompHausFilt_bla</code>or not? At any rate, what I don't understand if how this would really help. Sure constructing limits there is probably easier since there is no issue with non-uniqueness of the norm, but then we need to show that the functor to <code>ProfFinitely_bla</code> preserves limits, no?</p>",
        "id": 249594394,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629123495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> you can start to try proving that <code>ProfinFiltPseuNormGroup</code> (without <code>\\_0</code>) has limits and see that you will get stuck pretty quickly because the morphisms in this category involve inflating the filtration index by some constant (analogous to the way morphisms are defined for semi_normed_group, where there is a similar issue). That's why we would want a <code>\\_0</code>. Next, we want one context where both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}(S,\\mathbb{Z}((t))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}_p(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> would fit in. The first one is profinitely filtered, but the second has a filtration by compact hausdorff spaces which are not totally disconnected. That's why we want <code>Comphaus_filt_blah</code>. Finally, the reason we want limits is because we first define the things above for finite <code>S</code> then take a limit. The idea is to take a limit in <code>Comhaus_filt_blah\\_0</code>, and compose with a functor from there to condensed abelian groups.</p>",
        "id": 249596096,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629124273
    },
    {
        "content": "<p>Oh thanks! Very nice summary.</p>",
        "id": 249596387,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629124430
    },
    {
        "content": "<p>Before going further, I immediately have the question as whether we really need that the category ``has limits''. For instance, I remember that in <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> ' paper on Witt vectors, they show that Witt vecs are a limit without proving it \"categorically\".</p>",
        "id": 249596593,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629124522
    },
    {
        "content": "<p>I agree this is certainly a nicer approach, but I wonder if it is needed (or if we can't just force the definition on a profinite set, although of course the problem is to show that the result is indep. of the way we write a profinite set as a limit).</p>",
        "id": 249596718,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629124573
    },
    {
        "content": "<p>You don't have to, but then you can't use the stuff from <code>for_mathlib/Profinite/extend</code> because <a href=\"https://github.com/leanprover-community/lean-liquid/blob/23e4854a4b1390672b8962018bff47af5f650ddd/src/for_mathlib/Profinite/extend.lean#L33\">https://github.com/leanprover-community/lean-liquid/blob/23e4854a4b1390672b8962018bff47af5f650ddd/src/for_mathlib/Profinite/extend.lean#L33</a></p>",
        "id": 249596737,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629124587
    },
    {
        "content": "<p>The alternative is to ignore all this nonsense and take all limits/colimits in <code>Cond Type*</code>, then manually promote to an object of <code>Cond Ab</code>.</p>",
        "id": 249596992,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629124715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/249596992\">said</a>:</p>\n<blockquote>\n<p>The alternative is to ignore all this nonsense and take all limits/colimits in <code>Cond Type*</code>, then manually promote to an object of <code>Cond Ab</code>.</p>\n</blockquote>\n<p>Maybe this is an argument for defining <code>Cond Ab</code> as the category of abelian group objects in <code>Cond Type*</code>?</p>",
        "id": 249597074,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629124759
    },
    {
        "content": "<p>By \"manually\" you mean to prove the axioms <code>add</code>, <code>has_neg</code>, etc... by hand?</p>",
        "id": 249597105,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629124782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/249597074\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/249596992\">said</a>:</p>\n<blockquote>\n<p>The alternative is to ignore all this nonsense and take all limits/colimits in <code>Cond Type*</code>, then manually promote to an object of <code>Cond Ab</code>.</p>\n</blockquote>\n<p>Maybe this is an argument for defining <code>Cond Ab</code> as the category of abelian group objects in <code>Cond Type*</code>?</p>\n</blockquote>\n<p>Or is this an argument to construct a general formalism that takes categories <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi><mo separator=\"true\">,</mo><mi mathvariant=\"script\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C},\\mathcal{D}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> and defines <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span>-objects valued in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{D}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> so that we also have condensed rings in one shot?</p>",
        "id": 249597279,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629124856
    },
    {
        "content": "<p>There is no such general formalism... See e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Mon_\">docs#Mon_</a></p>",
        "id": 249597883,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629125144
    },
    {
        "content": "<p>Ok, I was pushing it too far without solid knowledge, sorry.</p>",
        "id": 249598120,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629125241
    },
    {
        "content": "<p>(Well, you could cook up a general formalism like that for concrete categories <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span>, using representable presheaves for example, but I don't know how useful that is.)</p>",
        "id": 249598922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629125581
    },
    {
        "content": "<p>OK. I have to go soon now. I'll see where things are tomorrow to see if I can be of any help, as I haven't fully understood if we ultimately want to follow <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ' suggestion of having <code>profinitely_filtered_blah</code> extending <code>comphaus_filtered_blah</code>.</p>",
        "id": 249599158,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629125712
    },
    {
        "content": "<p>As an aside: reading on p. 38 of Analytic.pdf I see the object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mrow><mo>&gt;</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\mathbb{Z}((T))_{&gt;r})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (so, in particular, the condended ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mrow><mo>&gt;</mo><mi>r</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_{&gt;r}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span></span></span></span>. Is it by definition the colimit of all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>? I can't find a definition of it before p. 38 <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 249600148,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629126114
    },
    {
        "content": "<p>Yes, it is the \"overconvergent version, which takes the union over all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>&gt;</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r&#x27; &gt; r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>. But we don't need that ring for the time being.</p>",
        "id": 249604893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629128097
    },
    {
        "content": "<p>I've started this refactor in the branch <code>comphaus_filt_refactor</code>. So far I just made the class <code>comphaus_filt_...</code> and made <code>profinitely_filt_...</code> extend it, while ensuring everything compiles, and I also added the definition of the category <code>CompHausFiltPSeuNormGroup</code> (without <code>\\_0</code>). I still haven't generalized everything that should be generalized (such as the stuff in <code>rescale/pseudo_normed_group</code>)</p>",
        "id": 249639120,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629143819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/249604893\">said</a>:</p>\n<blockquote>\n<p>Yes, it is the \"overconvergent version, which takes the union over all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>&gt;</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r&#x27; &gt; r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>. But we don't need that ring for the time being.</p>\n</blockquote>\n<p>I guessed so, but is it me or its definition only shows up <em>after</em> p. 38?</p>",
        "id": 249727548,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629210786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  <del>I can try to define the <code>instance : comphaus_filtered_pseudo_normed_group (rescale r M)</code> for a  <code>comphaus_filtered_pseudo_normed_group  M</code> and let type-class inference deduce the old one?</del> Done.</p>",
        "id": 249728325,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629211108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Almost at the end of p37 there is</p>\n<blockquote>\n<p>On the other hand, this again indicates that for a fixed r, the theory will not work, so we pass to a colimit again.</p>\n</blockquote>\n<p>This explains how to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mrow><mo>&gt;</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_{&gt;r})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> as colimit of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_{r&#x27;})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> s. The <em>ring</em> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mrow><mo>&gt;</mo><mi>r</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\Z((T))_{&gt;r}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span></span></span></span> only shows up in S7 and this is also where it is properly defined. There are some forward refs from S6 to S7.</p>",
        "id": 249729326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629211492
    },
    {
        "content": "<p>Ah, I see, thanks. I was reading too linearly, I guess... <span aria-label=\"ruler\" class=\"emoji emoji-1f4cf\" role=\"img\" title=\"ruler\">:ruler:</span></p>",
        "id": 249729624,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629211610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/249728325\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>  <del>I can try to define the <code>instance : comphaus_filtered_pseudo_normed_group (rescale r M)</code> for a  <code>comphaus_filtered_pseudo_normed_group  M</code> and let type-class inference deduce the old one?</del> Done.</p>\n</blockquote>\n<p>Thanks! I just pushed a minor change.</p>",
        "id": 249730969,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629212184
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">profinitely_filtered_pseudo_normed_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">profinitely_filtered_pseudo_normed_group</span> <span class=\"o\">(</span><span class=\"n\">rescale</span> <span class=\"n\">r</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 249731004,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629212205
    },
    {
        "content": "<p>And do we also want the notion of a <code>comphaus_filt...</code> with an action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>? Because it seems a bit strange to me now  that for a <code>[profinitely_filtered_pseudo_normed_group_with_Tinv r' M]</code> we have an instance of  <code>comphaus_filtered_pseudo_normed_group_hom (rescale r M) (rescale r M)</code>: I agree that this makes sense,  but I wonder if we don't want it under slightly more general hyp on M</p>",
        "id": 249731018,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629212213
    },
    {
        "content": "<p>I think the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> instance is only really used for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}(S,\\mathbb{Z}((T))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, so leaving it for the profinite case should be okay.</p>",
        "id": 249731114,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629212270
    },
    {
        "content": "<p>If we want to eventually generalize, we should just do things properly and work with condensed modules over condensed rings (the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> case is for modules over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[T^{-1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>)</p>",
        "id": 249731337,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629212370
    },
    {
        "content": "<p>OK. I was just observing that it is strange to say that the morphism between the rescale is as <code>comphaus_filt..</code> as everything in sight is already a <code>profinitely_filt...</code>.</p>",
        "id": 249731641,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629212491
    },
    {
        "content": "<p>But it is certainly a minor point.</p>",
        "id": 249731678,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629212506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  as you're probably working on this right now and have a clear picture: do you want me to work on something in particular?</p>",
        "id": 249731850,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629212578
    },
    {
        "content": "<p>I actually don't have much time today unfortunately... One concrete thing that you could go for is defining <code>CompHausFiltPseuNormGroup\\_0</code> using <a href=\"https://github.com/leanprover-community/lean-liquid/blob/7060d641407fef3a0282aa05386f593d654e438d/src/pseudo_normed_group/profinitely_filtered.lean#L92\">https://github.com/leanprover-community/lean-liquid/blob/7060d641407fef3a0282aa05386f593d654e438d/src/pseudo_normed_group/profinitely_filtered.lean#L92</a></p>",
        "id": 249732714,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629212942
    },
    {
        "content": "<p>And define the functor to <code>CompHaus...</code> without the <code>0</code>.</p>",
        "id": 249732745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629212958
    },
    {
        "content": "<p>Ok, I will go for the first, either today or tomorrow morning (CET), and if I can I will define the functor.</p>",
        "id": 249732808,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629212985
    },
    {
        "content": "<p>In the meanwhile I have added a couple of lines of doc for <code>comphaus...</code> and adapted that of <code>profinitely...</code> accordingly.</p>",
        "id": 249732898,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213010
    },
    {
        "content": "<p>Oh yeah I've been very lazy about docs <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span> sorry!</p>",
        "id": 249733174,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629213135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> when defining the category, please take a look at how <code>CompHausFilt...</code> is defined using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.bundled\">docs#category_theory.bundled</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.bundled_hom\">docs#category_theory.bundled_hom</a> and try to mimic that.</p>",
        "id": 249733347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629213228
    },
    {
        "content": "<p>OK! Thanks.</p>",
        "id": 249733434,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213260
    },
    {
        "content": "<p>Using this bundled formalism, the <code>[derive ...]</code> tag will give a lot of the structure we need for free.</p>",
        "id": 249733502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629213300
    },
    {
        "content": "<p>While I was looking at your link above: I thought you wanted me to define  <code>CompHausFilt...</code> with <code>0</code> (generalising groups with <code>0</code>) but the link points to <code>strict morphisms</code>. Do I miss something?</p>",
        "id": 249733651,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213369
    },
    {
        "content": "<p>Ah no, I see.</p>",
        "id": 249733681,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213385
    },
    {
        "content": "<p>You want <em>two</em> categories, one with strict morphisms, the other with <em>usual</em> ones.</p>",
        "id": 249733715,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213401
    },
    {
        "content": "<p>(The first you call with a <code>0</code>) and a functor between the two.</p>",
        "id": 249733749,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213417
    },
    {
        "content": "<p>Right? For the usual business of uniqueness of limits, I guess.</p>",
        "id": 249733779,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213437
    },
    {
        "content": "<p>Yes, the one with nonstrict morphisms is defined here: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/60ab75bfbd20ad2323c4922a48d1664d6a8efd92/src/pseudo_normed_group/category.lean#L25\">https://github.com/leanprover-community/lean-liquid/blob/60ab75bfbd20ad2323c4922a48d1664d6a8efd92/src/pseudo_normed_group/category.lean#L25</a></p>",
        "id": 249733878,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629213484
    },
    {
        "content": "<p>Should we use <code>\\_1</code> as subscript?</p>",
        "id": 249733919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629213503
    },
    {
        "content": "<p>Ok, I got the point.</p>",
        "id": 249733928,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213507
    },
    {
        "content": "<p>That's what we do with (semi)normed groups</p>",
        "id": 249733942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629213515
    },
    {
        "content": "<p>Isn't it <code>0</code> for <code>SemiNormedgroup</code>?</p>",
        "id": 249733956,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629213518
    },
    {
        "content": "<p>I thought it was <code>\\_1</code> (because norm le one)</p>",
        "id": 249733982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629213537
    },
    {
        "content": "<p>You're right. Yes, <code>1</code> is better ;)</p>",
        "id": 249734022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629213555
    },
    {
        "content": "<p>OK, I'll call it with <code>1</code>. <span aria-label=\"one\" class=\"emoji emoji-0031-20e3\" role=\"img\" title=\"one\">:one:</span></p>",
        "id": 249734046,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213566
    },
    {
        "content": "<p>On line 40 of <code>pseudo_normed_group/category.lean</code>, shouldn't the doc say </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The category of profinitely filtered pseudo-normed groups. -/</span>\n</code></pre></div>\n<p>rather than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--CompHaus-ly-/</span>\n</code></pre></div>\n<p>?</p>",
        "id": 249734577,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213799
    },
    {
        "content": "<p>OK, I'll modify it.</p>",
        "id": 249734714,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213848
    },
    {
        "content": "<p>I have modified the name of the field <code>continuous'</code> to <code>continuous₁'</code> in the definition of strict morphism to differentiate it from the field with the same name in the definition of a \"usual\" morphism between <code>comphaus_fil...</code>.</p>",
        "id": 249738906,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629215659
    },
    {
        "content": "<p>You're really supposed to use <code>f.continuous</code> for <code>comphaus_..._hom</code> and <code>f.continuous_level</code> (or <code>f.level_continuous</code>, I don't remember) for <code>strict_..._hom</code>.</p>",
        "id": 249743682,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629217755
    },
    {
        "content": "<p>Well, but for the time being they were both called <code>continuous'</code>. Do you mean I should rename both as you suggest?</p>",
        "id": 249743888,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629217837
    },
    {
        "content": "<p>What I mean is that both having the same name shouldn't matter.</p>",
        "id": 249743932,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629217864
    },
    {
        "content": "<p>I simply find it confusing, not that it creates issues. But I suspect you wanted to say something deeper.</p>",
        "id": 249744004,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629217897
    },
    {
        "content": "<p>(I guess I see what you meant: I am currently proving axiom <code>continuous'</code> for the hom obtained from a strict_hom and I have just encountered the <code>def level</code> you're probably speaking about)</p>",
        "id": 249744476,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629218089
    },
    {
        "content": "<p>Oh, take a look at <a href=\"https://github.com/leanprover-community/lean-liquid/blob/ddfed397901ac19bf274e547c28e8e9ca376dc7e/src/pseudo_normed_group/profinitely_filtered.lean#L375\">https://github.com/leanprover-community/lean-liquid/blob/ddfed397901ac19bf274e547c28e8e9ca376dc7e/src/pseudo_normed_group/profinitely_filtered.lean#L375</a></p>",
        "id": 249744933,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629218289
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 249744981,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629218320
    },
    {
        "content": "<p>I have defined the category  <code>CompHausFiltPseuNormGrp₁</code> (I hope correctly) and I am defining the \"forgetful\" functor towards <code>CompHausFiltPseuNormGrp</code>.  I need to go now, but I can (and will!) continue tomorrow. I was not able to immediately adapt <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> ' suggestion, but, unless this is super-urgent, I am happy to continue with what I am doing since I am learning a lot about category theory in Lean (and will also be happy to delete everything for the usual one-line proof I won't have been able to find).</p>",
        "id": 249748039,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629219747
    },
    {
        "content": "<p>All this in the file <code>category.lean</code> of <code>pseudo_normed_group</code> in the branch <code>comphaus_filt_refactor</code>.</p>",
        "id": 249748049,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629219750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> sorry, I should have been more clear. The functor can be defined as follows: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">enlarging_functor</span> <span class=\"o\">:</span> <span class=\"n\">CompHausFiltPseuNormGrp₁</span> <span class=\"bp\">⥤</span> <span class=\"n\">CompHausFiltPseuNormGrp</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.to_chfpsng_hom</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>once you add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">CompHausFiltPseuNormGrp₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comphaus_filtered_pseudo_normed_group</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M.str</span>\n</code></pre></div>\n<p>I pushed the change just now.</p>",
        "id": 249748850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629220116
    },
    {
        "content": "<p>(the fields <code>map_id'</code> and <code>map_comp'</code> are filled in automatically by the auto param, since we set up the correct ext and simp lemmas)</p>",
        "id": 249748968,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629220178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  I have modified a bit <code>functor</code> because there was an error in the <code>map</code> field. It now takes values in <code>CompHausFiltPseuNormGrp</code> rather than in <code>ProFiltPseuNormGrp</code>, but this should not be a problem. As an aside, I have re-read most of the <code>profinitely_filtered</code> file  and it seems to me that it still speaks about <code>profinitely filtered pseudo-normed group hom</code> although they don't exist anymore.</p>",
        "id": 249839630,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629288754
    },
    {
        "content": "<p>Should I modify all the doc accordingly? Also, I don't understand how can Lean  know what the category  <code>ProFiltPseuNormGrp</code> is, given that the morphisms are not explicitly defined.</p>",
        "id": 249839721,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629288820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> The morphisms in <code>ProFiltPseuNormGrp</code> and <code>CompHausFiltPseuNormGrp</code> are both defined as <code>comphaus_filtered_pseudo_normed_group_hom</code>, so <code>functor</code> should really land in <code>ProFiltPseuNormGrp</code>. There is a functor from <code>ProFiltPseuNormGrp</code> to <code>CompHausFiltPseuNormGrp</code>, and the version of <code>functor</code> you just defined is the composition of <code>functor</code> as it originally was with this functor from <code>ProFiltPseuNormGrp</code> to <code>CompHausFiltPseuNormGrp</code>.</p>",
        "id": 249849870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629293819
    },
    {
        "content": "<p>The category structure on <code>ProFiltPseuNormGrp</code> is defined using the bundled hom's trick here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/4cf07bae405b23d50b6353a969dc937dd403fb07/src/pseudo_normed_group/category.lean#L78\">https://github.com/leanprover-community/lean-liquid/blob/4cf07bae405b23d50b6353a969dc937dd403fb07/src/pseudo_normed_group/category.lean#L78</a></p>",
        "id": 249850111,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629293927
    },
    {
        "content": "<p>Oh, I found the issue. When <code>CompHausFiltPseuNormGrp₁</code> was defined using <code>bundled_hom</code>, the typeclass system decided to choose that instance when defining the category structure on <code>ProFiltPseuNormGrp</code>. That's not good. I'll try to fix it now.</p>",
        "id": 249853360,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629295275
    },
    {
        "content": "<p>Okay, it should be fixed now.</p>",
        "id": 249854615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629295763
    },
    {
        "content": "<p>I reverted <code>functor</code> back to <code>ProFilt...</code> as well.</p>",
        "id": 249854641,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629295778
    },
    {
        "content": "<p>Good!</p>",
        "id": 249860121,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629297855
    },
    {
        "content": "<p>What's the status here? Can someone bring me up to speed again?</p>",
        "id": 250775452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629986083
    },
    {
        "content": "<p>We probably want to finish off and merge the refactor of <code>profinitely_filtererd_...</code> which was started in the branch <code>comphaus_filt_refactor</code>.</p>",
        "id": 250775868,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629986262
    },
    {
        "content": "<p>Both structures of <code>ProFiltPseu...</code> and <code>CompHausFiltPseu...</code> are now defined (as categories), the first also with its variants using strict, rather than continuous, homs.</p>",
        "id": 250775881,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629986271
    },
    {
        "content": "<p>Oh yes, I agree.</p>",
        "id": 250775895,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629986276
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}(S,\\mathbb{Z}((T))_r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> has also been defined as a profinitely filtered pseudo normed group, and as a functor in (again finite) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, in the branch <code>fae_overconvergent_measures</code>. </p>\n<p>I'm in the process of finish off some of the API for <code>Profinite.extend</code> (which is essentially showing that <code>Profinite</code> is equivalent to <code>Pro(Finite)</code>) and that should help us with the extensions from finite sets to profinite sets.</p>",
        "id": 250777029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629986719
    },
    {
        "content": "<p>For these extensions, we will probably want to show that <code>CompHausFiltPseuNormGroup\\_1</code> has limits, and extend a functor from <code>Fintype</code> to this. We can then define a functor from <code>CompHausFiltPseuNormGroup</code> (without the <code>\\_1</code>) to <code>Cond(Ab)</code>.</p>\n<p>(Now that I'm thinking about this again, we may  need to add a condition that the filtration is exhaustive for <code>CompHausFiltPseuNormGroup\\_1</code>.)</p>",
        "id": 250777301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629986827
    },
    {
        "content": "<p>And before doing anything with <code>Cond(Ab)</code>, we need to fix the universe issues in the definition of <code>Cond Foo</code>.</p>",
        "id": 250777365,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629986855
    },
    {
        "content": "<p>Thanks! So if I understand correctly, both <code>comphaus_filt_refactor</code> and <code>fae_overconvergent_measures</code> contain unmerged mergable material?</p>",
        "id": 250778161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629987169
    },
    {
        "content": "<p>Are there parts that shouldn't be merged?</p>",
        "id": 250778240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629987210
    },
    {
        "content": "<p>I don't think so. <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> what do you think?</p>",
        "id": 250778435,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629987274
    },
    {
        "content": "<p>If not, please go ahead and merge <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 250778491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629987295
    },
    {
        "content": "<p>I think that <code>basic</code> of <code>fae_over...</code> contains a lot of useless stuff.</p>",
        "id": 250778496,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629987297
    },
    {
        "content": "<p>OK, I can try to polish it a bit and merge in <code>master</code> the <code>fae...</code> branch.</p>",
        "id": 250778550,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629987313
    },
    {
        "content": "<p>Wait... looks like <code>laurent_measures</code> is already in master.</p>",
        "id": 250778775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629987379
    },
    {
        "content": "<p>I guess we merged it at some point ;)</p>",
        "id": 250778816,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629987394
    },
    {
        "content": "<p>So please ignore the <code>fae_overco...</code> branch.</p>",
        "id": 250778867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629987413
    },
    {
        "content": "<p>I have a general question: why don't we use the API developed for formal power series/laurent series (which is already in <code>mathlib</code>)? Just because it is useless in our setting?</p>",
        "id": 250781676,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629988489
    },
    {
        "content": "<p>I think that in principle we could certainly use it. But we still need the filtration, and the fact that it is a filtration by profinite/comphaus gadgets.</p>",
        "id": 250782025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629988602
    },
    {
        "content": "<p>I think it would be a good idea to use the existing Laurent series API if we need the ring structure, but do we actually need the ring structure?</p>",
        "id": 250782031,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629988604
    },
    {
        "content": "<p>Afaik, for the bare minimum challenge, we don't need it.</p>",
        "id": 250782119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629988635
    },
    {
        "content": "<p>I proved this lemma:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/b7c0ec4cd13dc012041cc46d50042758d1ef2dcb/src/laurent_measures/basic.lean#L287\">https://github.com/leanprover-community/lean-liquid/blob/b7c0ec4cd13dc012041cc46d50042758d1ef2dcb/src/laurent_measures/basic.lean#L287</a><br>\nwhich should let us relate the current def of <code>laurent_measures</code> to Laurent series as they appear in mathlib.</p>",
        "id": 250782326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629988699
    },
    {
        "content": "<p>OK, I see.</p>",
        "id": 250782433,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629988738
    },
    {
        "content": "<p>(note that a priori <code>laurent_measures</code> makes no restrictions on vanishing of coefficients)</p>",
        "id": 250782440,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629988741
    },
    {
        "content": "<p>The reason I was asking is that I was thinking about defining the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r\\to\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>. I guess we'll need it pretty soon, right?</p>",
        "id": 250783348,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629989065
    },
    {
        "content": "<p>I was thinking of defining it at the level of groups, but as ring-hom is probably better (surjectivity will be harder, of course). Hence the question about giving the lhs a ring structure.</p>",
        "id": 250783715,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629989147
    },
    {
        "content": "<p>For surjectivity, given some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">x \\in \\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, we should define a stream of coefficients <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>n</mi></msub><msub><mo stretchy=\"false\">)</mo><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">(a_n)_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_n a_n (\\tfrac12)^n = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>.</p>",
        "id": 250783951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629989221
    },
    {
        "content": "<p>I think that's a project that can be done independent of any other choices.</p>",
        "id": 250783995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629989237
    },
    {
        "content": "<p>But it won't be unique.</p>",
        "id": 250784011,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629989242
    },
    {
        "content": "<p>Sure, I don't care (-;</p>",
        "id": 250784036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629989252
    },
    {
        "content": "<p>OK, I am happy to give it a go.</p>",
        "id": 250784042,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629989255
    },
    {
        "content": "<p>But you can take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>∈</mo><mo stretchy=\"false\">{</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">a_n \\in \\{-1,0,1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> if you want.</p>",
        "id": 250784099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629989278
    },
    {
        "content": "<p>On the other hand, I was also thinking that <em>a priori</em> it should be a map of condensed ab. groups. Given the fact that all topologies here are nice, I guess that full faithfulness will tell us that it makes no difference, but do we intend to prove this faithfulness or is it better to define it as map of condensed ab groups?</p>",
        "id": 250784478,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629989381
    },
    {
        "content": "<p>As long as it's a map of <code>comphaus_filt_...</code> things, it will be fine on the condensed level as well.</p>",
        "id": 250784660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629989433
    },
    {
        "content": "<p>So it comes down to the compatibility of this map with the norms, which should be more-or-less clear from the definitions.</p>",
        "id": 250784839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629989498
    },
    {
        "content": "<p>Ah ok, so I will need not to  define it as map of ab. groups but as <code>comphaus_filt_..</code> things, right?</p>",
        "id": 250785067,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629989579
    },
    {
        "content": "<p>Do we already have a proof that <code>\\mathbb{R}</code> is <code>comph_filt..</code>?</p>",
        "id": 250785082,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629989585
    },
    {
        "content": "<p>Where \"more-or-less-clear\" means Prop 7.2</p>",
        "id": 250785087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629989587
    },
    {
        "content": "<p>OK, I'll go for it in the <code>fae_overconvergent..</code> branch, in a new file.</p>",
        "id": 250785196,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629989632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/250785196\">said</a>:</p>\n<blockquote>\n<p>OK, I'll go for it in the <code>fae_overconvergent..</code> branch, in a new file.</p>\n</blockquote>\n<p>make sure to merge <code>master -&gt; fae_over...</code></p>",
        "id": 250785300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629989657
    },
    {
        "content": "<p>Already done!</p>",
        "id": 250785342,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629989676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/250785087\">said</a>:</p>\n<blockquote>\n<p>Where \"more-or-less-clear\" means Prop 7.2</p>\n</blockquote>\n<p>Yeah, but look at how Prop 7.2(3) is proved (with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>3</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">C_3 = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>)</p>",
        "id": 250786383,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629990053
    },
    {
        "content": "<p>@<br>\n<span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/250785300\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/250785196\">said</a>:</p>\n<blockquote>\n<p>OK, I'll go for it in the <code>fae_overconvergent..</code> branch, in a new file.</p>\n</blockquote>\n<p>make sure to merge <code>master -&gt; fae_over...</code></p>\n</blockquote>\n<p>On the other hand, since the <code>comphaus_filt...</code> branch is not in <code>master</code>, I don't have the <code>comphaus</code> business in mine yet. It is not super-urgent, but if you can merge <code>comphaus... -&gt; master</code> may be tomorrow this would help.</p>",
        "id": 250786788,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629990181
    },
    {
        "content": "<p>I'll try to merge it at some point today.</p>",
        "id": 250787599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629990484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Did you by chance start working on 7.2 or something related?</p>",
        "id": 251539412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630493874
    },
    {
        "content": "<p>Yes, I have begun working on the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>. I am actually almost done with the proof of its surjectivity as set-theoretic map, but I need to upgrade it to a <code>comphaus_bla</code> map, which will rely on 7.2. This I planned to do in what follows.</p>",
        "id": 251544173,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630496773
    },
    {
        "content": "<p>Great! Is this also on a branch, if so which one?</p>",
        "id": 251544662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630497042
    },
    {
        "content": "<p>Do you need them now? I wanted to polish a bit my file before pushing to master.</p>",
        "id": 251544665,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630497044
    },
    {
        "content": "<p>Ah, the branch is <code>fae_overconnvergent...</code></p>",
        "id": 251544688,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630497056
    },
    {
        "content": "<p>Ok</p>",
        "id": 251544717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630497068
    },
    {
        "content": "<p>I just wanted to get a sense of what's going on.</p>",
        "id": 251544736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630497078
    },
    {
        "content": "<p>The downside of these branches is that <code>master</code> is not always an accurate depiction of where we are standing</p>",
        "id": 251544784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630497101
    },
    {
        "content": "<p>Yes, you're right.</p>",
        "id": 251544873,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630497143
    },
    {
        "content": "<p>On the other hand, I wrote a lot (lot!) of nonsense and played with many things to get used to summability, and it would have been insane to push all this to master, no?</p>",
        "id": 251544966,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630497182
    },
    {
        "content": "<p>fair enough</p>",
        "id": 251544997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630497200
    },
    {
        "content": "<p>At any rate, speaking about 6.9, will we need Harbater's theorem describing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ker</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\ker\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\">ker</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>?</p>",
        "id": 251545046,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630497228
    },
    {
        "content": "<p>(In particular, given we're not putting a ring structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)?</p>",
        "id": 251545148,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630497268
    },
    {
        "content": "<p>no, we only apply it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x = 1/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/2</span></span></span></span>, so we will be effectively modding out <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>T</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(2T - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 251546027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630497681
    },
    {
        "content": "<p>The proof in S7 is a lot more general, and shows that evaluating at non-rational numbers still has a principal ideal as kernel</p>",
        "id": 251546098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630497720
    },
    {
        "content": "<p>But in (2) of 6.9 there are both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> (I guess you meant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">r=1/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/2</span></span></span></span>), and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> changes with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>.</p>",
        "id": 251546221,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630497779
    },
    {
        "content": "<p>And soon becomes very non-rational.</p>",
        "id": 251546242,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630497795
    },
    {
        "content": "<p>No, we can keep <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> fixed in our applications.</p>",
        "id": 251546661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630498022
    },
    {
        "content": "<p>OK, this I can't understand by now: but I'll study more and see how this works, I don't want to waste your time. Just going back to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>: is it OK that I finish its surjectivity as set-theoretic map and then move on to the one as <code>comp_haus_blah...</code> (i.e. I prove it is a <code>comp_haus_blah</code> morphism)?</p>",
        "id": 251546862,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630498123
    },
    {
        "content": "<p>The strategy is as follows: we want to prove LTE for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> (i.e. a statement about Ext groups and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>). So now we set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">r&#x27; = 1/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/2</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mo stretchy=\"false\">)</mo><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">r = (r&#x27;)^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span>. And then we reduce everything to theorem 9.4 for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>&lt;</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r &lt; r&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 251546890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630498137
    },
    {
        "content": "<p>AH OK, this makes sense.</p>",
        "id": 251546928,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630498156
    },
    {
        "content": "<p>I somehow thought that to prove the full statement about Ext groups we needed to let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> vary.</p>",
        "id": 251547041,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630498209
    },
    {
        "content": "<p>No, I think that only happens when you start to worry about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mrow><mo>&lt;</mo><mi>p</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_{&lt;p}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737000000000002em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>. That's part of the statement that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> is an analytic ring, but it's not part of the LTE challenge.</p>",
        "id": 251547162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630498295
    },
    {
        "content": "<p>OK, I guess I see but as said I prefer to study more before saying nonsense. I'll let you know as soon as I push to <code>master</code> some advances on 6.9.</p>",
        "id": 251547294,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630498369
    },
    {
        "content": "<p>Going back to the discussion we had yesterday, I suppose that what we want is that <code>r'</code> does not appear in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> and that <code>r≥0</code> and <code>hr : r  &lt; 1</code> do appear. I guess they better be explicit variables, right?</p>",
        "id": 251676353,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630567800
    },
    {
        "content": "<p>Hmm, the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> very much depends on <code>r'</code>, right? It's evaluating Laurent series at <code>r'</code>.</p>",
        "id": 251677080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630568262
    },
    {
        "content": "<p>Sure, but you told me you wanted to fix <code>r' = 1/2</code>.</p>",
        "id": 251677143,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630568288
    },
    {
        "content": "<p>I guess you need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>≤</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">0 &lt; r&#x27; \\le r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.887862em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>, but I don't think you need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">r &lt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> for most of this story.</p>",
        "id": 251677169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630568309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/251677143\">said</a>:</p>\n<blockquote>\n<p>Sure, but you told me you wanted to fix <code>r' = 1/2</code>.</p>\n</blockquote>\n<p>Aaah, if you want you can specialize there directly. I think that for defining the hom it doesn't make things easier. But for the surjectivity, and for describing the kernel, it will certainly help.</p>",
        "id": 251677215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630568356
    },
    {
        "content": "<p>Yes, this was my point.</p>",
        "id": 251677234,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630568369
    },
    {
        "content": "<p>Of course, for the def is basically equivalent. But I was thinking at the best API. First, having <code>r'</code> in the proof makes things (slightly) less nice, but most importantly we have to carry it over forever, and if we only use <code>r'=1/2</code> it is better to have it fixed, no? This I meant by \" <code>r'</code> does not appear\".</p>",
        "id": 251677351,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630568440
    },
    {
        "content": "<p>On the other hand, I guess we want to have <code>r</code> (as the radius of the laurent measure mapping to a certain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> through <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span>) variable; but then my question is whether implicit or explicit.</p>",
        "id": 251677450,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630568510
    },
    {
        "content": "<p>Actually, fixing things early can sometimes make life harder. For example <code>simp</code> might start doing things to the <code>/</code> in <code>1/2</code>. Keeping it packaged in an atomic <code>r'</code> can help in those cases.</p>",
        "id": 251677806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630568725
    },
    {
        "content": "<p>So I would keep around the <code>r'</code> until specializing to <code>1/2</code> really helps.</p>",
        "id": 251677826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630568738
    },
    {
        "content": "<p>Ah, ok. I will modify accordingly. And what about implicit/explicit ones? <code>r'</code> certainly needs to be explicit if we want to specialize to <code>1/2</code> but <code>r</code> (and <code>r &lt; 1</code>, should this be needed)? I can't come up with a nice picture in my head of how we will need to apply this. Of course, it won't be very hard to change later, but if you have a suggestion I'd be happy to follow it.</p>",
        "id": 251677975,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630568842
    },
    {
        "content": "<p>I would make <code>r</code> and <code>r'</code> explicit and use <code>[fact (0 &lt; r')]</code> etc for  the conditions.</p>",
        "id": 251678486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630569172
    },
    {
        "content": "<p>OK, I was going in that direction, good. Thanks! I will <code>push</code> something later today and let you know when it's done.</p>",
        "id": 251678539,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630569206
    },
    {
        "content": "<p>I have pushed the file <code>laurent_measures/thm69.lean</code> with the basics concerning <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> and its surjectivity. I might have some time later today but at any rate I plan to finish both the surjectivity and attack  some of  thm  7.2 to show it is a <code>comp_haus_blah</code> morphism. This will need to wait until Tuesday but I will have time next week to advance.</p>",
        "id": 251700882,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630582490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measure.20.2F.20Z.28.28T.29.29_r/near/250787599\">said</a>:</p>\n<blockquote>\n<p>I'll try to merge it at some point today.</p>\n</blockquote>\n<p>Sorry it's a few (maybe more than a few ;)) days late... but this is now merged to master</p>",
        "id": 251741899,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630599463
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 251829762,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1630651480
    }
]