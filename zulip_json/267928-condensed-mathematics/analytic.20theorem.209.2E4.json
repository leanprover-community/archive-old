[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  was talking about about formalising the _statement_ of 9.4 of Analytic.pdf as a good short term goal. What needs to be done here Johan?</p>",
        "id": 219241321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607451074
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"TeX\"><pre><span></span><code>  this theorem statement requires us to formalise the following definitions:\n  <span class=\"k\">\\begin</span><span class=\"nb\">{</span>itemize<span class=\"nb\">}</span>\n    <span class=\"k\">\\item</span> <span class=\"s\">$</span><span class=\"nb\">p</span><span class=\"s\">$</span>-Banach spaces\n    <span class=\"k\">\\item</span> profinite sets\n    <span class=\"k\">\\item</span> the construction <span class=\"s\">$</span><span class=\"nb\">V </span><span class=\"nv\">\\mapsto</span><span class=\"nb\"> </span><span class=\"nv\">\\hat</span><span class=\"nb\"> V</span><span class=\"s\">$</span>\n    <span class=\"k\">\\item</span> the profinite sets <span class=\"s\">$</span><span class=\"nv\">\\bar</span><span class=\"nb\">{</span><span class=\"nv\">\\mathcal</span><span class=\"nb\"> M}_{p'}</span><span class=\"o\">(</span><span class=\"nb\">S</span><span class=\"o\">)</span><span class=\"s\">$</span>\n   <span class=\"k\">\\item</span> the statement of the Breen--Deligne resolution,\n      which feeds into:\n    <span class=\"k\">\\item</span> the complex <span class=\"s\">$</span><span class=\"nb\">C_c^</span><span class=\"nv\">\\bullet</span><span class=\"s\">$</span>\n    <span class=\"k\">\\item</span> the notion of <span class=\"s\">$</span><span class=\"nv\">\\le</span><span class=\"nb\"> k</span><span class=\"s\">$</span>-exactness in degree <span class=\"s\">$</span><span class=\"nv\">\\le</span><span class=\"nb\"> m</span><span class=\"s\">$</span>\n  <span class=\"k\">\\end</span><span class=\"nb\">{</span>itemize<span class=\"nb\">}</span>\n</code></pre></div>",
        "id": 219241539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607451181
    },
    {
        "content": "<p>that's a very brief summary</p>",
        "id": 219241570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607451197
    },
    {
        "content": "<p>Does <code> ```math </code> work?</p>",
        "id": 219241598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607451206
    },
    {
        "content": "<p><del>doesn't seem to be an option</del><br>\nresult isn't very nice</p>",
        "id": 219241644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607451230
    },
    {
        "content": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A + B = C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></span></p>",
        "id": 219241668,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607451241
    },
    {
        "content": "<p>I guess not.</p>",
        "id": 219241750,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607451265
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A + B = C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>? wrong theorem</p>",
        "id": 219241778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607451280
    },
    {
        "content": "<p><code> ```math </code> is like <code>\\[ \\]</code></p>",
        "id": 219241826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607451300
    },
    {
        "content": "<p>I guess markdown works (just typesetting Johan's message above):</p>\n<p>This theorem statement requires us to formalise the following definitions:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-Banach spaces</li>\n<li>profinite sets</li>\n<li>the construction <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo>↦</mo><mover accent=\"true\"><mi>V</mi><mo stretchy=\"true\">^</mo></mover></mrow><annotation encoding=\"application/x-tex\">V \\mapsto \\widehat V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.92333em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92333em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span><span class=\"svg-align\" style=\"top:-3.6833299999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg height=\"0.24em\" preserveAspectRatio=\"none\" viewBox=\"0 0 1062 239\" width=\"100%\"><path d=\"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22 c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\"></path></svg></span></span></span></span></span></span></span></span></span></li>\n<li>the profinite sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>p</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal M}_{p'}(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.169438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32798em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>the statement of the Breen--Deligne resolution,</li>\n</ul>\n<p>Which feeds into:</p>\n<ul>\n<li>the complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>C</mi><mi>c</mi><mo>∙</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">C_c^\\bullet</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93033em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>the notion of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\le k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exactness in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\le m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span></li>\n</ul>",
        "id": 219242012,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607451377
    },
    {
        "content": "<p>Do we have Banach spaces or is it one of those things like number fields when when you come to write down the definition you find that it's just a bunch of typeclasses and you feel a bit silly doing it? (<code>[field K] [algebra rat K] [finite_dimensional rat K]</code>)</p>",
        "id": 219242512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607451649
    },
    {
        "content": "<p>I guess we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_space\">docs#normed_space</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_space\">docs#complete_space</a></p>",
        "id": 219242799,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607451787
    },
    {
        "content": "<p>I assume there is a metric space instance induced by a normed space somewhere...</p>",
        "id": 219242870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607451835
    },
    {
        "content": "<p>you might only need a uniform space structure</p>",
        "id": 219243104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607451960
    },
    {
        "content": "<p>There is <code>to_metric_space</code> for any <code>normed_group</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_group\">docs#normed_group</a></p>",
        "id": 219243398,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1607452096
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 219243693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607452251
    },
    {
        "content": "<p>I think we can get p-banach spaces</p>",
        "id": 219245248,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607452959
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"sd\">/-- Called an `r`-Banach space in [Analytic].</span>\n\n<span class=\"sd\">Officially we need `0 &lt; r &lt; 1`, but maybe we only want to assume that in theorems.</span>\n<span class=\"sd\">Otoh, we might want to use `r : nnreal`, or maybe even `r : preal` after introducing `preal`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">quasibanach</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">normed_group</span>  <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">normed_space</span>  <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→+</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">norm_mul_T</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">T</span> <span class=\"n\">v</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"bp\">∥</span><span class=\"n\">v</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219245914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607453281
    },
    {
        "content": "<p>Is that what we want?</p>",
        "id": 219245967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607453287
    },
    {
        "content": "<p>I'm thinking to define this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.intervals.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">@[derive field]</span>\n<span class=\"kd\">def</span> <span class=\"n\">rr</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">rr</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">normed_field</span> <span class=\"o\">(</span><span class=\"n\">rr</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥^</span><span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">∥^</span><span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">edist</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">edist_dist</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">to_uniform_space</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">uniformity_dist</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">rr</span>\n</code></pre></div>",
        "id": 219246344,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607453487
    },
    {
        "content": "<p>This doesn't work does it...</p>",
        "id": 219246489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607453561
    },
    {
        "content": "<p>Take a look at definition 6.1 in analytic.pdf, item 2, for example.</p>",
        "id": 219246845,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607453747
    },
    {
        "content": "<p>I think this is incompatible with <code>[normed_space ℝ V]</code></p>",
        "id": 219246928,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607453784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> You are right. I should have taken a closer look</p>",
        "id": 219247413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607454004
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">quasinormed_space</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥^</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">v</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is hopefully a bit better (though this doesn't include the completeness from def 6.1)</p>",
        "id": 219248218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607454389
    },
    {
        "content": "<p>Maybe with completeness?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">quasinormed_space</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥^</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">v</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219248408,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607454499
    },
    {
        "content": "<p>I didn't check if that typechecks</p>",
        "id": 219248476,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607454534
    },
    {
        "content": "<p>It does</p>",
        "id": 219248623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607454604
    },
    {
        "content": "<p>My thought was to define the <code>rr p</code> gadget above, and that a \"banach space\" over <code>rr p</code> is a <code>p</code>-banach space</p>",
        "id": 219249380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607455007
    },
    {
        "content": "<p>I'm not sure it's such a good idea to have a definition where <code>V</code> already needs to have a norm, because then you're forced to only pick one <code>r</code> for the type (i.e. the one that agrees with the previously defined norm) and can't move between norms as one usually wants to do here. For example, even stating something like Hölder's inequality would be annoying with this kind of definition.</p>",
        "id": 219249932,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1607455329
    },
    {
        "content": "<p>Hmm, thanks for that remark!</p>",
        "id": 219250132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607455446
    },
    {
        "content": "<p>Also, it might make sense to move this particular discussion to a more general stream, I just had a look at this stream purely out of curiosity and stumbled on a topic I was interested in -- I'm absolutely not qualified to work on condensed mathematics!</p>",
        "id": 219252226,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1607456452
    },
    {
        "content": "<p>Functional analysis stream?</p>",
        "id": 219252287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607456489
    },
    {
        "content": "<p>Or just maths</p>",
        "id": 219252308,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1607456501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> I think we are all just trying to find our way in this new field. I don't have any experience in functional analysis. So it would be great if this becomes a joint effort of the leanprover/mathlib community.</p>",
        "id": 219255948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607458286
    },
    {
        "content": "<p>Indeed! I just meant that condensed math is pretty intimidating for people like me who aren't pure mathematicians at all and might end up missing, say, a discussion on Banach spaces to which they might actually have something to contribute.</p>",
        "id": 219259711,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1607460077
    },
    {
        "content": "<p>I was thinking some more about this p-norm issue, and I was wondering if a definition like this would make sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">normed_group_family</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">norm_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">norm</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">norm</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">norm</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">norm</span> <span class=\"n\">r</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">norm_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">norm</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">norm</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">norm</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This would be a general typeclass for families of norms that satisfy some property <code>p</code>. We could then duplicate part of the code for norms and have a function that could turn any of the members of the family into the standard norm instance on the type. For types that already have a norm defined on it, we could have another typeclass that says that the standard norm is equal to one of the members of the family.</p>",
        "id": 219261648,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1607461100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> interesting idea. (btw, there's a typo in the <code>triangle</code> field... both sides are the same)</p>",
        "id": 219262473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607461496
    },
    {
        "content": "<p>triangle equality</p>",
        "id": 219262517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607461523
    },
    {
        "content": "<p>Oops! Let me correct that.</p>",
        "id": 219262525,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1607461528
    },
    {
        "content": "<p>That new version doesn't sound like it would type-check</p>",
        "id": 219262651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607461596
    },
    {
        "content": "<p>Indeed... We'll get there! :-)</p>",
        "id": 219262720,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1607461645
    }
]