[
    {
        "content": "<p>It was high time to update the README. I might still have missed stuff that is out of date. Please review the README and <a href=\"https://github.com/leanprover-community/lean-liquid/pull/119\">https://github.com/leanprover-community/lean-liquid/pull/119</a></p>",
        "id": 295443971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661526028
    },
    {
        "content": "<p>This is now ready for review.</p>",
        "id": 296135500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661870037
    },
    {
        "content": "<p>Looking at it now!</p>",
        "id": 296138610,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661870972
    },
    {
        "content": "<p>I left a few minor comments.</p>",
        "id": 296140627,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661871575
    },
    {
        "content": "<p>Thanks</p>",
        "id": 296143743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661872476
    },
    {
        "content": "<p>Hmmm.... one question: Should we really claim that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">liquid_tensor_experiment</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">pBanach.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">ℳ_</span><span class=\"o\">{</span><span class=\"n\">p'</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"bp\">≅</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is Theorem 9.1 from Analytic.pdf?</p>",
        "id": 296145249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661872928
    },
    {
        "content": "<p>The precise statement of Theorem 9.1 is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover><mo stretchy=\"false\">)</mo><mo>=</mo><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">RHom(M(S,\\mathbb{Z}((t))_{r&#x27;}),\\hat V) = \\hat V (S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1968em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9468em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span><span style=\"top:-3.2523em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1968em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9468em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span><span style=\"top:-3.2523em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 296145563,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661873022
    },
    {
        "content": "<p>Of course, the precise statement we formalized is Theorem 1.1 of <a href=\"https://xenaproject.wordpress.com/2020/12/05/liquid-tensor-experiment/\">Peter's challenge.</a></p>",
        "id": 296145881,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661873098
    },
    {
        "content": "<p>Good point. So let's claim that instead.</p>",
        "id": 296146072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661873160
    },
    {
        "content": "<p>Fortunately, this is already correct:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/25dc13f472934009786afaaaa2392fa2c8d73e3c/src/challenge.lean#L13\">https://github.com/leanprover-community/lean-liquid/blob/25dc13f472934009786afaaaa2392fa2c8d73e3c/src/challenge.lean#L13</a></p>",
        "id": 296146441,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661873263
    },
    {
        "content": "<p>I pushed another commit fixing that bit in the readme.</p>",
        "id": 296147037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661873427
    },
    {
        "content": "<p>Thanks! I approved + enabled auto-merge</p>",
        "id": 296148048,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661873641
    }
]