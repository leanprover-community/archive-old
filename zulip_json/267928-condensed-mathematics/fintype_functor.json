[
    {
        "content": "<p>I see things like <code>(fintype_functor «r» ⋙ to_CHFPNG₁ «r») ⋙ enlarging_functor</code> which look quite intimidating to me at first. Here is a renaming proposal. </p>\n<p>Should </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">laurent_measures.fintype_functor</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv₁.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">laurent_measures</span> <span class=\"n\">r'</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">∥</span><span class=\"n\">F</span><span class=\"bp\">∥₊</span><span class=\"o\">,</span> <span class=\"n\">le_rfl</span><span class=\"o\">⟩⟩,</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>be called something like <code>Fintype.LaurentMeasure</code>? This functor actually <em>does something</em>. The other functors are forgetful functors; they could live in a <code>forgetful</code> namespace which we don't open if we want to be guided about where the meat is. Would something like that be a welcome refactor? Doing stuff like this helps me learn the code base.</p>",
        "id": 280740204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651330556
    },
    {
        "content": "<p>Oh the namespace is not quite the right idea. How about an annotation on the functor names? I'll try an experiment on a branch.</p>",
        "id": 280740773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651331389
    },
    {
        "content": "<p>What about <code>Fintype_to_PFPNGT₁</code>?</p>",
        "id": 280740888,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651331526
    },
    {
        "content": "<p>And the forgetful functors could be called <code>PFPNGT₁_to_CHFPNG₁</code> resp. <code>CHFPNG₁_to_CHFPNG</code></p>",
        "id": 280740905,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651331581
    },
    {
        "content": "<p>I also think we don't use dot notation enough... In this case, we could define <code>Fintype.to_PFPNGT₁</code> to get the <em>object</em> associated to a <code>T : Fintype</code>, so that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Fintype_to_PFPNGT₁</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.to_PFPNGT₁</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 280740978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651331678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/fintype_functor/near/280740888\">said</a>:</p>\n<blockquote>\n<p>What about <code>Fintype_to_PFPNGT₁</code>?</p>\n</blockquote>\n<p>But the name should mention \"laurent\" somewhere. Because there's also one for \"real measures\", and one for \"free_pfpng\". Etc... And they are genuinely different functors.</p>",
        "id": 280741186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651332030
    },
    {
        "content": "<p>Oh yeah good point</p>",
        "id": 280741189,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651332045
    },
    {
        "content": "<p>So change <code>Fintype.to_PFPNGT₁</code> to <code>Fintype.LaurentMeasure</code> and <code>Fintype_to_PFPNGT₁</code> to <code>Fintype_LaurentMeasures</code></p>",
        "id": 280741207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651332107
    },
    {
        "content": "<p>(Note the <code>s</code>)</p>",
        "id": 280741210,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651332111
    },
    {
        "content": "<p>And of course <code>_root_.LaurentMeasures := Profinite.extend Fintype_LaurentMeasures</code></p>",
        "id": 280741276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651332177
    },
    {
        "content": "<p>I don't know if any of these name changes make sense. The names are a complete mess, I agree, but I'm kind of used to them at this point...</p>",
        "id": 280741293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651332233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I've just got the <code>functor-refactor</code> branch compiling. What do you think? The little <code>el</code> means that this is a forgetful functor. I wanted a little <code>ge</code> for \"greater or equal\", because forgetful functors lose information, but there didn't seem to be a unicode g subscript. Probably it will rot quickly but I think I know what I'm doing now. There is more to come -- I'm about to start on the <code>enlarging_functor</code>s but that's the last thing.</p>",
        "id": 280757434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651354513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> this affects you too if you have diverged too much from master</p>",
        "id": 280757493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651354581
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/compare/functor-refactor\">Here</a>'s the diff.</p>",
        "id": 280757518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651354654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Thanks, I have now <code>pull</code>ed and everything is back on track again. I was shocked that something clearly looking <code>defeq</code> to me was not, but now I am confident again that I am understanding <em>at least something</em> of Type theory... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 280757524,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651354665
    },
    {
        "content": "<p>I am proposing changing a bunch of the functor names so they're easier for humans to understand.</p>",
        "id": 280757582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651354727
    },
    {
        "content": "<p>It certainly seems a very good idea.</p>",
        "id": 280757599,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651354782
    },
    {
        "content": "<p>Bleurgh it might not compile and I have to go and do real life for a bit. Will be back later, hoping for an all nighter</p>",
        "id": 280757686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651354898
    },
    {
        "content": "<p>Oh, wow, brave you! I am getting old, I can't go for an all nighter tonight, I am almost collapsing after 10 hours of Lean (minus a dinner)...</p>",
        "id": 280757737,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651354950
    },
    {
        "content": "<p>OK so the <code>functor-refactor</code> branch is compiling and will rot fast. Should I merge it?</p>",
        "id": 280765458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651367239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> LGTM!</p>",
        "id": 280775808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651383057
    },
    {
        "content": "<p>OK so I pushed a bunch of changes to master including the functor name refactor. Enough stuff compiles for me to be cautiously optimistic that I didn't break the build; I'll check now and fix anything up which is broken, quickly.</p>",
        "id": 280799691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651418605
    },
    {
        "content": "<p>Thanks Kevin! The names are indeed much more sensible now. <br>\nOne question: How useful do you think the subscripts <code>el</code> actually are? It seems to me that it's only used in situations where the fact that the functor in question is forgetting something can be deduced from the name of the functor itself. E.g. I think <code>CHFPNG₁_to_CHFPNG</code> is clear enough that it's just the forgetful functor.</p>",
        "id": 280804844,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651425550
    },
    {
        "content": "<p>My main objection is that it takes a total of 6 key presses to write a subscript <code>el</code>.</p>",
        "id": 280804911,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651425618
    },
    {
        "content": "<p>Well, maybe I should just finally figure out how to make custom snippets in vscode. Is there some package for vscode that's similar to emacs yasnippet?</p>",
        "id": 280805325,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651426182
    },
    {
        "content": "<p>I wanted to make a random annotation to indicate \"this is a forgetful functor\" because it helped me understand the code base. I'm quite happy for it to be removed.</p>",
        "id": 280805702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651426673
    },
    {
        "content": "<p>No, I agree that such an annotation is good in principle, but i find typing those two subscripts to be cumbersome.</p>",
        "id": 280805811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651426846
    },
    {
        "content": "<p>You can also add <code>\\el</code> as an abbreviation to the extensions. See <a href=\"https://github.com/leanprover-community/vscode-lean/pull/298\">vscode-lean#298</a></p>",
        "id": 280806196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651427424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>, can you make the linkifier point to the correct repo when it's on <code>leanprover</code> rather than <code>leanprover-community</code>?</p>",
        "id": 280806218,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651427487
    },
    {
        "content": "<p>It'd be tough I think. You can do <a href=\"https://github.com/leanprover/vscode-lean/pull/298\">leanprover/vscode-lean#298</a> though.</p>",
        "id": 280806807,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1651428268
    },
    {
        "content": "<p>There must be a way to do this locally as opposed to changing the vscode-lean package for everyone. Besides, a good snippet package would be useful for other reasons as well.</p>",
        "id": 280806891,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651428392
    },
    {
        "content": "<p>Looks like vscode has snippets built in</p>\n<p><a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets\">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p>",
        "id": 280807016,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651428561
    },
    {
        "content": "<p><del>@<strong>Filippo A. E. Nuccio</strong> I think one needs to assume that <code>0 &lt; r</code> for <code>is_open_U</code> (in which case, I have a proof)</del> Oops! I had the inequality backwards. Ignore me.</p>",
        "id": 280885212,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651503765
    },
    {
        "content": "<p>No problem! At any rate, I am advancing well with the proof (and having quite some fun opposing and unopposing categories <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> ), so I hope to push it soon.</p>",
        "id": 280896193,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651508234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I think <code>0 &lt; r</code> may actually be needed?</p>",
        "id": 280896995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651508666
    },
    {
        "content": "<p>Maybe I'm missing something.</p>",
        "id": 280896999,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651508671
    },
    {
        "content": "<p>Well, at any rate we have it in the setting where I am working (because the parameter <code>p</code> defines <code>r</code> and we have <code>lemma r_pos</code>. Or are you speaking of something else?</p>",
        "id": 280897141,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651508745
    },
    {
        "content": "<p>Oh ok, I thought <code>r</code> was just some random element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\ge 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9341em;vertical-align:-0.2452em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 280897547,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651508912
    },
    {
        "content": "<p>No, we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">r</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>where   <code>def r : ℝ≥0 := 2⁻¹ ^ (p : ℝ)</code>.</p>",
        "id": 280897657,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651508973
    },
    {
        "content": "<p>Yeah I see it now.</p>",
        "id": 280897690,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651508986
    },
    {
        "content": "<p>Here's the proof I came up with (modulo one small sorry, which uses that <code>0 &lt; r &lt; 1</code>):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_open_U</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">c</span> <span class=\"n\">F</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">truncate</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"n\">t</span> <span class=\"n\">punit.star</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">continuous_pi_iff</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">],</span>\n    <span class=\"n\">change</span> <span class=\"n\">continuous</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">laurent_measures_bdd</span> <span class=\"n\">r</span> <span class=\"n\">ϖ</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n      <span class=\"n\">t</span> <span class=\"n\">punit.star</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span> <span class=\"bp\">∘</span> <span class=\"n\">truncate</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">continuous.comp</span> <span class=\"n\">continuous_bot</span> <span class=\"o\">(</span><span class=\"n\">truncate_continuous</span> <span class=\"bp\">«</span><span class=\"n\">r</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"n\">Fintype.of</span> <span class=\"n\">punit</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n₀</span><span class=\"o\">,</span><span class=\"n\">h₀</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hH</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">∈</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n    <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n₀</span> <span class=\"bp\">→</span> <span class=\"n\">H</span> <span class=\"n\">punit.star</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n₀</span><span class=\"o\">,</span><span class=\"n\">h₀</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n₀</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n₀</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">H</span> <span class=\"n\">hH</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq_zero_of_filtration</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">hH</span> <span class=\"n\">punit.star</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">UU</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">set.pi</span> <span class=\"o\">(</span><span class=\"n\">set.Ico</span> <span class=\"n\">n₀</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ico</span> <span class=\"n\">n₀</span> <span class=\"n\">B</span> <span class=\"k\">then</span> <span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"n\">punit.star</span> <span class=\"n\">i</span> <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"bp\">⊤</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hUU</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">UU</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_open_set_pi</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finite_Ico</span> <span class=\"n\">n₀</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hUU.preimage</span> <span class=\"n\">hι</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hG</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">UU</span><span class=\"o\">,</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">hG</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">set.mem_pi</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_singleton_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hG</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hi.2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hG</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">UU</span><span class=\"o\">,</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">hG</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨⟩</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">set.mem_pi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hG</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n₀</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">h₀</span> <span class=\"n\">n</span> <span class=\"n\">G.1</span> <span class=\"n\">G.2</span> <span class=\"n\">hn'</span><span class=\"o\">,</span> <span class=\"n\">h₀</span> <span class=\"n\">n</span> <span class=\"n\">F.1</span> <span class=\"n\">F.2</span> <span class=\"n\">hn'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn''</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ico</span> <span class=\"n\">n₀</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hn'</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hG</span> <span class=\"n\">n</span> <span class=\"n\">hn''</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"n\">hn''</span> <span class=\"n\">at</span> <span class=\"n\">hG</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hG</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 280901819,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651510826
    },
    {
        "content": "<p>Oh thanks!</p>",
        "id": 280901905,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651510853
    },
    {
        "content": "<p>I think I will finish mine and then compare it with yours!</p>",
        "id": 280901922,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651510864
    },
    {
        "content": "<p>I can push it if you want.</p>",
        "id": 280901926,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651510864
    },
    {
        "content": "<p>OK, go ahead.</p>",
        "id": 280902271,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651511035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Are you taking care of the remaining <code>sorry</code> or should I?</p>",
        "id": 280904520,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651511941
    },
    {
        "content": "<p>Please go ahead!</p>",
        "id": 280904586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651511975
    }
]