[
    {
        "content": "<p>We'll need to be able to take tensor products of condensed abelian groups (and condensed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Z</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mtext>‚Åª¬π</mtext><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">‚Ñ§[T‚Åª¬π]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord amsrm\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">‚Åª¬π</span><span class=\"mclose\">]</span></span></span></span>-modules). I've created <a href=\"https://github.com/leanprover-community/lean-liquid/issues/76\">https://github.com/leanprover-community/lean-liquid/issues/76</a> to track this todo.</p>",
        "id": 263003716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638190393
    },
    {
        "content": "<p>It's great that LTE is forcing us to develop category theory like this. </p>\n<p>One thing I've never really got to the bottom of is how to do sheaves of modules over a sheaf of rings cleanly in dependent type theory -- a.k.a. an action of a sheaf of rings on a sheaf of groups. But will we need anything like this here?</p>",
        "id": 263007067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638192123
    },
    {
        "content": "<p>Not really. We need it only for constant sheaves.</p>",
        "id": 263010520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638193976
    },
    {
        "content": "<p>In fact, we need it for <code>Ab</code> and for <code>{objects of Ab + distinguished endomorphism}</code>.</p>",
        "id": 263010565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638194004
    },
    {
        "content": "<p>The latter is of course equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Z</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mtext>‚Åª¬π</mtext><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">‚Ñ§[T‚Åª¬π]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord amsrm\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">‚Åª¬π</span><span class=\"mclose\">]</span></span></span></span>-modules.</p>",
        "id": 263010584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638194018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think one reasonable approach would be to consider sheaves taking values in the category of pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A,M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> a ring and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>-module. If you compose with the forgetful functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo><mo>‚Ü¶</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">(A,M) \\mapsto A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Ü¶</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> that would give a functor from such sheaves to sheaves of rings, and we could then take something in the essential fiber of this functor over a given sheaf of rings.</p>",
        "id": 263012430,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638194866
    },
    {
        "content": "<p>I think this tensor product issue should be fairly straightforward to do. I'll give it a go once I finish getting the general version of the adjunction between sheaf categories into mathlib (which we'll need for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>‚Ü¶</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">S \\mapsto \\mathbb{Z}[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6943em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Ü¶</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> functor)</p>",
        "id": 263012796,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638195053
    },
    {
        "content": "<p>I think the question about sheaves of modules over an arbitrary sheaf of rings is interesting, but let me say again that it isn't relevant to LTE.<br>\nThat said, Adam, would your proposal be nice to work with in concrete examples? I would be inclined to copy the (long-winded and somewhat ugly) definition that appears in introductory courses: a sheaf of abelian groups, together with compatible module structures of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ùí™</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ùí™(U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.08078em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 263013705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638195497
    },
    {
        "content": "<p>I'm almost certain that Adam's proposal is the \"right\" one (also in the sense that it will be the least painful to work with in practice).</p>",
        "id": 263059292,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1638215443
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 263062154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638216886
    },
    {
        "content": "<p>This approach hadn't occurred to me before. The last time this issue was raised we ended up in some hairy discussion about how to get a presheaf to act on another presheaf. This way looks much nicer!</p>",
        "id": 263062769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638217239
    },
    {
        "content": "<p><span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <a href=\"#narrow/stream/116395-maths/topic/Free.20stuff/near/209805136\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Free.20stuff/near/209805136</a></p>",
        "id": 263062901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638217323
    },
    {
        "content": "<p>As far as I can tell, we still don't have a <code>def restrict_scalars {A B : CommRing} (f : A ‚ü∂ B) : Module B ‚•§ Module A</code> in mathlib</p>",
        "id": 263063468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638217631
    },
    {
        "content": "<p>no I remember making that as a way to mess with categories in mathlib and wondering if it was anywhere in mathlib</p>",
        "id": 263075773,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638224470
    },
    {
        "content": "<p>there's some code for it lying around somewhere</p>",
        "id": 263075783,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638224476
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/messing.20around.20with.20categories\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/messing.20around.20with.20categories</a></p>",
        "id": 263075883,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638224526
    },
    {
        "content": "<p>Probably what you were remembering Adam!</p>",
        "id": 263075902,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638224541
    }
]