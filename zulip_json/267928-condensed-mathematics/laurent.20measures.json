[
    {
        "content": "<p>I'm doing a pretty large review/refactor/golf of stuff in <code>laurent_measures/</code>. More simp-lemmas. Definition of multiplication by <code>T</code> and <code>T⁻¹</code>.</p>",
        "id": 270753760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643999300
    },
    {
        "content": "<p>I just pushed.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\">commit f1441231bde1980b6073e43339780eda3cffa7a4 (HEAD -&gt; master, origin/master, origin/HEAD)</span>\n<span class=\"w\">Author: Johan Commelin &lt;johan@commelin.net&gt;</span>\n<span class=\"w\">Date:   Fri Feb 4 18:50:34 2022 +0000</span>\n\n<span class=\"w\"> </span>   review laurent measures<span class=\"w\"></span>\n\n<span class=\"w\"> </span>src/laurent_measures/basic.lean   | 647 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-----------------------------------------------------------------------------------------<span class=\"w\"></span>\n<span class=\"w\"> </span>src/laurent_measures/bounded.lean |  73 ++++++++-------------<span class=\"w\"></span>\n<span class=\"w\"> </span>src/laurent_measures/theta.lean   |  13 ++--<span class=\"w\"></span>\n<span class=\"w\"> </span>src/laurent_measures/thm69.lean   |  79 +++++++----------------<span class=\"w\"></span>\n<span class=\"w\"> </span>4 files changed, 395 insertions(+), 417 deletions(-)<span class=\"w\"></span>\n</code></pre></div>",
        "id": 270757238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644000832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> This somewhat impacts your files. I could golf the definition of <code>ϕ</code> to a 1-liner because we now have <code>shift k</code> which is multiplication by <code>T^k</code>.</p>",
        "id": 270757386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644000896
    },
    {
        "content": "<p>OK, I see.</p>",
        "id": 270757914,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001118
    },
    {
        "content": "<p>I am now working on <code>aux_lemmas.lean</code> which does not seem impacted, right?</p>",
        "id": 270757945,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001133
    },
    {
        "content": "<p><code>thm69.lean</code> was actually sorry-free (although one lemma remains to be proved in <code>aux_lemmas</code>, so Theorem 6.9 by itself was not yet sorry-free).</p>",
        "id": 270758034,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001177
    },
    {
        "content": "<p>Aah, it somehow seemed to be broken</p>",
        "id": 270758130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001212
    },
    {
        "content": "<p>I will see what's wrong.</p>",
        "id": 270758267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001253
    },
    {
        "content": "<p>It was not compiling? I had no errors locally.</p>",
        "id": 270758270,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001254
    },
    {
        "content": "<p><code>@summable_smaller_radius _ _ F.d (F.summable s) (lt_d_eq_zero _ _) r_half</code> shows up a lot... seems like a good thing to extract into a lemma.</p>",
        "id": 270758733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001466
    },
    {
        "content": "<p>I found out my mistake. You had lemmas in the <code>aux</code> file but also commented out versions in the other file.</p>",
        "id": 270758763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001486
    },
    {
        "content": "<p>And so I somehow got confused about what I was doing, and ended up fixing the wrong lemma <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 270758807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001509
    },
    {
        "content": "<p>I apologise, I did not think you would be working on this and code was not very clean.</p>",
        "id": 270758838,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001532
    },
    {
        "content": "<p>Concerning <code>@summable_smaller_radius</code>... it is a lemma, you are saying that it calls too many varialbes, right?</p>",
        "id": 270758938,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001571
    },
    {
        "content": "<p>And that it was poorly created, because I actually call it with a <code>@</code>.</p>",
        "id": 270758985,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001599
    },
    {
        "content": "<p>My strategy now was to try to rush ASAP to having Theorem 6.9 completely sorry-free, and then to improve my code.</p>",
        "id": 270759017,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/laurent.20measures/near/270758938\">said</a>:</p>\n<blockquote>\n<p>Concerning <code>@summable_smaller_radius</code>... it is a lemma, you are saying that it calls too many varialbes, right?</p>\n</blockquote>\n<p>Yeah, I think you could have a special case that hard codes the <code>F.summable s</code> and <code>r_half</code> inputs, etc...</p>",
        "id": 270759364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001769
    },
    {
        "content": "<p>OK, how do you prefer to advance? I certainly agree with your remark (and was not satisfied about the API).</p>",
        "id": 270759536,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001854
    },
    {
        "content": "<p>Let me first fix the stuff I broke</p>",
        "id": 270759607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001883
    },
    {
        "content": "<p>I'm almost done.</p>",
        "id": 270759618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001889
    },
    {
        "content": "<p>After that, we can golf more (-;</p>",
        "id": 270759630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001895
    },
    {
        "content": "<p>No problem, I am on <code>aux_lemmas</code> right now.</p>",
        "id": 270759642,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644001904
    },
    {
        "content": "<p>pushed</p>",
        "id": 270759751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644001940
    },
    {
        "content": "<p>I have pulled, but it is a bit slow. Do you still have sorrys in <code>thm69</code>?</p>",
        "id": 270759889,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644002019
    },
    {
        "content": "<p>Nope, it's sorry-free again</p>",
        "id": 270760015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644002074
    },
    {
        "content": "<p>Ok, great, thanks. I am certainly aware that things need to be golfed, but I am somewhat in the middle of finishing the proof and I will do this later, if you agree.</p>",
        "id": 270760137,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644002136
    },
    {
        "content": "<p>Sure, totally fine</p>",
        "id": 270760232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644002166
    },
    {
        "content": "<p>I've started on the SES</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>0</mn><mo>→</mo><mi mathvariant=\"normal\">Z</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mtext>⁻¹</mtext><mo stretchy=\"false\">]</mo><mo>→</mo><msub><mi mathvariant=\"script\">L</mi><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo>ˉ</mo></mover><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0 → ℤ[T⁻¹] → ℒ_{r&#x27;}(S) → \\bar{ℳ}_{r&#x27;}(S) → 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord amsrm\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">⁻¹</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.19189em;\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328em;\"><span style=\"top:-2.55em;margin-left:-0.1919em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0868em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8368em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.15981em;\">M</span></span><span style=\"top:-3.269em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1667em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328em;\"><span style=\"top:-2.55em;margin-left:-0.1598em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>",
        "id": 270766308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644005289
    },
    {
        "content": "<p>See <code>Mbar/ses.lean</code> for a couple of sorries.</p>",
        "id": 270766363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644005320
    },
    {
        "content": "<p>It is a <code>ses</code> of what?</p>",
        "id": 270769159,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644006884
    },
    {
        "content": "<p><code>ProFiltPseuNormGrpWithTinv₁ r'</code></p>",
        "id": 270769279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644006960
    },
    {
        "content": "<p>I am done for tonight, time for dinner. Again, the code is a bit of a mess, but it will be improved!</p>",
        "id": 270770882,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644007877
    },
    {
        "content": "<p>At least, it compiles.</p>",
        "id": 270770894,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644007887
    },
    {
        "content": "<p>Ok! Enjoy your evening</p>",
        "id": 270771008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644007949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/laurent.20measures/near/270766363\">said</a>:</p>\n<blockquote>\n<p>See <code>Mbar/ses.lean</code> for a couple of sorries.</p>\n</blockquote>\n<p>This is now sorry-free again.</p>",
        "id": 270820862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644059804
    },
    {
        "content": "<p>The proof of Theorem 6.9 is now entirely sorry-free.</p>",
        "id": 270995843,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644248209
    },
    {
        "content": "<p>I still need to <span aria-label=\"golf\" class=\"emoji emoji-1f3cc\" role=\"img\" title=\"golf\">:golf:</span> it, and of course<br>\n(i) It is only for finite <code>S</code>, for the time being.<br>\n(ii) It is only a \"naive\" <code>SES</code> checked on elements, not in the right category.</p>",
        "id": 270995975,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644248269
    },
    {
        "content": "<p>Amazing! Huge congrats!</p>",
        "id": 270996203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644248347
    },
    {
        "content": "<p>In my LTE post this morning, I said that the BD-lemma is the only big milestone left. And I had this little voice nagging me, saying \"But 6.9 isn't completely done yet!\". I just replied to that voice \"I'm sure Filippo will have it done in 2 or 3 days\". Bingo!</p>",
        "id": 270996399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644248421
    },
    {
        "content": "<p>Great! BTW, I am now going to read through all your post.</p>",
        "id": 270996531,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644248476
    },
    {
        "content": "<p>This is great <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> ! Do we know that these map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\">\\theta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ψ</mi></mrow><annotation encoding=\"application/x-tex\">\\psi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ψ</span></span></span></span> are morphisms in <code>ProFilt..._1</code>? I suppose that the fact that they're additive homomorphisms should be easy, while continuity would be the most challenging thing to prove. Once we know that, we could use something similar to how Lemma 9.8 is formalized in the profinite case to obtain the profinite case of 6.9.</p>",
        "id": 270999593,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644249621
    },
    {
        "content": "<p>No, exactly, we do not know this yet. This is precisely my next goal.</p>",
        "id": 270999676,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644249650
    },
    {
        "content": "<p>I already have a blurry proof of additivity, but I am now going to upgrade them to morphisms in the right category.</p>",
        "id": 270999776,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644249692
    },
    {
        "content": "<p>It will take a little bit, but I am not too scared.</p>",
        "id": 270999807,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644249703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I guess that the right place to do this will be in <code>Mbar/ses.lean</code>, where you have written down the <code>ses</code>, right?</p>",
        "id": 271000021,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644249786
    },
    {
        "content": "<p>That <code>ses</code> is the one for <code>Mbar</code>. Theorem 6.9 is the other one, right?</p>",
        "id": 271000254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644249873
    },
    {
        "content": "<p>Oh right!</p>",
        "id": 271000288,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644249890
    },
    {
        "content": "<p>I think we should add a <code>laurent_measures/ses.lean</code> ;)</p>",
        "id": 271000326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644249907
    },
    {
        "content": "<p>OK!</p>",
        "id": 271000338,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644249912
    },
    {
        "content": "<p>Note that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ϕ</span> <span class=\"o\">:</span> <span class=\"n\">ℒ</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℒ</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"bp\">-</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>should make it easy to prove that this is a non-strict morphism.</p>",
        "id": 271004353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644251367
    },
    {
        "content": "<p>Because <code>shift (-1)</code> is a morphism. So it is <code>2 • some_morphism - id</code>.</p>",
        "id": 271004516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644251431
    },
    {
        "content": "<p>Oh great, thanks.</p>",
        "id": 271004551,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644251445
    },
    {
        "content": "<p>I am starting with <code>laurent_measures/ses.lean</code> and I will write some of the needed lemmas. I will try to immediately implement your suggestion, or at least copying it as a comment for later use.</p>",
        "id": 271004693,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644251506
    },
    {
        "content": "<p>Proving continuity of <code>θ</code> will be more work, I guess.</p>",
        "id": 271004763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644251523
    },
    {
        "content": "<p>We'll see along the way, I guess.</p>",
        "id": 271004870,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644251582
    },
    {
        "content": "<p>I see that in <code>thm69.lean</code> we now have a <code>variables [fact (0 &lt; r)]</code> as well as a  <code>lemma r_pos : 0 &lt; r :=...</code>. Do we really need the former, given the latter? I understand that as it is it cannot be found by type inference, but can't we use the lemma in some way? Otherwise it seems to me that we are adding as assumption something that we can prove, no?</p>",
        "id": 271012657,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644254931
    },
    {
        "content": "<p>You could declare it as <code>instance : fact (0 &lt; r) := ...</code> I suppose <code>fact ...</code> is needed for <code>shift</code>?</p>",
        "id": 271012960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644255041
    },
    {
        "content": "<p>Yes, indeed. I wanted to declare it as an instance, but I want to check if it is a good idea.</p>",
        "id": 271013068,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644255084
    },
    {
        "content": "<p>Yeah, instance is the way to go</p>",
        "id": 271018122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644257019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/laurent.20measures/near/271004516\">said</a>:</p>\n<blockquote>\n<p>Because <code>shift (-1)</code> is a morphism. So it is <code>2 • some_morphism - id</code>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> ooh, probably this morphism isn't even strict... so we'll need a bit more glue.</p>",
        "id": 271036372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644265136
    },
    {
        "content": "<p>I would suggest that I start implementing the API and then we'll see where the difficulties lie.</p>",
        "id": 271088299,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644303597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Yes. Just for the record, <code>comphaus_filtered_pseudo_normed_group_with_Tinv_hom</code> would be the non-strict version.</p>",
        "id": 271088723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644304012
    },
    {
        "content": "<p>I am contemplating a global search-replace that does <code>s/pseudo_normed_group/png/</code> in all these names.</p>",
        "id": 271088749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644304044
    },
    {
        "content": "<p>They are way too long.</p>",
        "id": 271088755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644304049
    },
    {
        "content": "<p>Well, they are long but it is clear what they mean...<code> p_nrm_grp</code>?</p>",
        "id": 271120980,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644324137
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> from me for changing all instances of <code>pseudo_normed_group</code> to <code>png</code> and <code>PseuNormGrp</code> to <code>PNG</code>.</p>",
        "id": 271138398,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644331703
    },
    {
        "content": "<p>Maybe also <code>profinitely_filtererd</code> to <code>pf</code>, <code>ProFilt</code> to <code>PF</code>, <code>comphaus_filtered</code> to <code>chf</code>, <code>CompHausFilt</code> to <code>CHF</code>, <code>{with_Tinv,WithTinv}</code> to <code>T</code></p>",
        "id": 271138575,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644331787
    },
    {
        "content": "<p>Ah, I detest abbreviations <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 271138737,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1644331851
    },
    {
        "content": "<p>(I'm not formalizing, so don't listen to me)</p>",
        "id": 271138773,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1644331869
    },
    {
        "content": "<p>But <code>comphaus_filtered_pseudo_normed_group_with_Tinv_hom</code> is really long...</p>",
        "id": 271138778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644331874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/laurent.20measures/near/271138737\">said</a>:</p>\n<blockquote>\n<p>Ah, I detest abbreviations <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>I usually agree, but...</p>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/laurent.20measures/near/271138778\">said</a>:</p>\n<blockquote>\n<p>But <code>comphaus_filtered_pseudo_normed_group_with_Tinv_hom</code> is really long...</p>\n</blockquote>",
        "id": 271138968,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644331949
    },
    {
        "content": "<p>I'm about to write down <code>profinitely_filtered_pseudo_normed_group_with_Tinv.to_comphaus_filtered_pseudo_normed_group_with_Tinv</code> and just that alone is longer than 100 chars which is our \"standard\" limit for line length.</p>",
        "id": 271139184,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644332044
    },
    {
        "content": "<p>I also detest abbreviations a little bit, I would propose something in between. We can look for \"speaking abbreviations\", like <code>grp</code> for group, or <code>filt</code> for filtered, <code>pro</code> for profinitely. But <code>pfg</code> for profinitely filtered group looks a bit too succint to me.</p>",
        "id": 271139308,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644332115
    },
    {
        "content": "<p>Well, it would be <code>pfpng</code></p>",
        "id": 271139357,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644332143
    },
    {
        "content": "<p>That could also be a potentially finite pro-nilpotent gauge, no?</p>",
        "id": 271139503,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644332197
    },
    {
        "content": "<p>Also, we can have docstrings that spell out the full thing</p>",
        "id": 271139514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644332201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/laurent.20measures/near/271139514\">said</a>:</p>\n<blockquote>\n<p>Also, we can have docstrings that spell out the full thing</p>\n</blockquote>\n<p>True, but are we committed to a very strict discipline on writing docstrings?</p>",
        "id": 271139623,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644332247
    },
    {
        "content": "<p>No, but we can certainly do it for these definitions.</p>",
        "id": 271139694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644332281
    },
    {
        "content": "<p>Ok, I don't want to insist too much. I am just a bit scared that we insert some Qabbalah where there is none (and there is already plenty of it).</p>",
        "id": 271139881,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644332353
    },
    {
        "content": "<p>Another option would be to come up with a short (and nice?) name for the final category where we are going to work (I guess it is <code>CompHausPseudoNormedGroupwithInvT</code>) and  to keep all the rest quite long, considering it as \"working mess\" rather than something that will be often read.</p>",
        "id": 271140336,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644332533
    },
    {
        "content": "<p>I just added <code>CompHausFiltPseuNormGroupWithTinv</code> (this was not as easy as one would have expected...). <br>\nThe strict version of that category is still missing, but I need to do other things for a little while. If anyone wants to add the strict version, that would be helpful (the functors between these should also be added)</p>",
        "id": 271152490,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644337354
    },
    {
        "content": "<p>OK, I will see if I can do something - at any rate I will need to get acquainted with all this to upgrade the actual version of 6.9 to a true <code>ses</code>.</p>",
        "id": 271155441,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1644338642
    },
    {
        "content": "<p>Can't we do this with abbreviations? I am hooked on the long names.</p>",
        "id": 271178515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644348466
    },
    {
        "content": "<p>Ok ok, we don't need to rush the renaming.</p>",
        "id": 271186014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644351969
    },
    {
        "content": "<p>But people have written <code>LRS</code> instead of <code>LocallyRingedSpace</code> for decades, probably because they wanted to save ink <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 271186093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644352021
    },
    {
        "content": "<p>I am fighting a bit against the fact that <code>(filtration (ℒ ϖ) c)</code> and <code>{ F : (ℒ ϖ) | ∥ F ∥₊ ≤ c}</code> do not seem to be identical, although they are the same subsets of <code>(ℒ ϖ)</code>: what I mean is that their coercions to <code>Type</code> are not <em>the same</em> type. So, if I define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">({</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∥</span> <span class=\"n\">F</span> <span class=\"bp\">∥₊</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>then I cannot say that <code>U F B = V F B</code> (I can get some <code>U F B == V F B</code>, with <code>heq</code> instead of <code>eq</code>). This is already a bit strange, since the fact that the second definition is accepted  seems to show that Lean undestand that they are (definitionally) equal. The problem is that the first definition is very useful for everything done so far and the second is the one directly connected to the definition of the topology, so proving <code>V</code> is open is OK, but I need this for <code>U</code>. I think this is related to the fact that the following <code>foo</code> does not type-check</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">):</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₁</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>whereas the following <code>bar</code> (with <code>==</code> instead of <code>=</code>) type-checks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">):</span> <span class=\"n\">s₁</span> <span class=\"bp\">==</span> <span class=\"n\">t₁</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Any idea?</p>",
        "id": 280748642,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651342054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Are these Laurent measures on a <em>profinite</em> set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>?</p>",
        "id": 280748868,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651342362
    },
    {
        "content": "<p>On the singleton.</p>",
        "id": 280748897,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651342407
    },
    {
        "content": "<p>Ah</p>",
        "id": 280748899,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651342414
    },
    {
        "content": "<p>Can you point me to where this is defined?</p>",
        "id": 280748941,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651342445
    },
    {
        "content": "<p>This what? <code>U</code> and <code>V</code>?</p>",
        "id": 280748947,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651342464
    },
    {
        "content": "<p><code>filtration (ℒ ϖ) c</code></p>",
        "id": 280748961,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651342483
    },
    {
        "content": "<p>I..e. where is <code> (ℒ ϖ)</code> defined?</p>",
        "id": 280748965,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651342495
    },
    {
        "content": "<p>Nevermind I found it</p>",
        "id": 280748974,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651342504
    },
    {
        "content": "<p>These seem to work for me...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"bp\">|</span> <span class=\"bp\">∥</span> <span class=\"n\">F</span> <span class=\"bp\">∥₊</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"bp\">|</span> <span class=\"bp\">∥</span> <span class=\"n\">F</span> <span class=\"bp\">∥₊</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 280749164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651342794
    },
    {
        "content": "<p><del>But if you have <code>V : set (filtration (ℒ ϖ) c)</code> and <code>U : set ({ F | ∥ F ∥₊ ≤ c })</code>, can you <em>state</em> <code>U = V</code>? They are of different types.</del></p>",
        "id": 280749229,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651342867
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">({</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">ϖ</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∥</span> <span class=\"n\">F</span> <span class=\"bp\">∥₊</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 280749236,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651342881
    },
    {
        "content": "<p>Ah ops</p>",
        "id": 280749239,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651342885
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> OK, something must be weird on my side. Thanks for checking, I will see what I have wrong here.</p>",
        "id": 280749293,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651342933
    },
    {
        "content": "<p>Note that <code>filtration (ℒ ϖ) c</code> and <code>{ F | ∥ F ∥₊ ≤ c }</code> are actually defeq, so their associated types are also defeq</p>",
        "id": 280749332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651342998
    },
    {
        "content": "<p>Yes, this is what I thought initially. But indeed by <em>copy-pasting</em> your code, my Lean complains.</p>",
        "id": 280749352,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651343042
    },
    {
        "content": "<p>In the code you posted here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">):</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₁</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>the two sets <code>s</code> and <code>t</code> are only propositionally equal, which is why you had to use <code>heq</code> for your lemma <code>bar</code>..</p>",
        "id": 280749383,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651343046
    },
    {
        "content": "<p>Hmm... I'm 36 commits behind. let me pull and try again</p>",
        "id": 280749387,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651343061
    },
    {
        "content": "<p>No, I don't think this would make any difference.</p>",
        "id": 280749397,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651343076
    },
    {
        "content": "<p>I am also a bit behind on my branch.</p>",
        "id": 280749402,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651343083
    },
    {
        "content": "<p>Let me check on master.</p>",
        "id": 280749404,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651343087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  I am having some troubles compiling and I almost need to go to dinner, so I will check again tomorrow morning. If this compiles  on your side, it will on my as well, eventually, which is precisely what I was hoping for to adapt my proof of the openness of <code>V</code> to that of <code>U</code>. Thanks for the help, I will post here tomorrow if everything went well.</p>",
        "id": 280749751,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651343523
    },
    {
        "content": "<p>I'm on the latest commit on master, and it seems to work fine for me....</p>",
        "id": 280749759,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651343544
    },
    {
        "content": "<p>OK, following <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> ' proof of <code>is_open_U</code>, I closed the last <code>sorry</code> and <code>laurent_measures/ses.lean</code>is now sorry-free (and <code>push</code>ed).</p>",
        "id": 280930691,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651524013
    },
    {
        "content": "<p>That's a milestone! Really great!</p>",
        "id": 280964930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651551301
    },
    {
        "content": "<p>I've been distracted by developing a theory of binary sequences as part of a more conceptual proof of 7.2 but I'll get there in the end, and then ses2 will also be sorry-free</p>",
        "id": 281058463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651603376
    }
]