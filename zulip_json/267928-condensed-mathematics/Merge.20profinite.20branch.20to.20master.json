[
    {
        "content": "<p>Does anyone have any objections merging <code>profinite_clopen</code> to master? <br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/compare/profinite_clopen\">https://github.com/leanprover-community/lean-liquid/compare/profinite_clopen</a></p>",
        "id": 236340881,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619531778
    },
    {
        "content": "<p>Why not? Feel free to merge it.</p>",
        "id": 236341171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619531889
    },
    {
        "content": "<p>Note that <code>for_mathlib.Fintype.basic</code> contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span>\n</code></pre></div>\n<p>I assume this is okay with everyone...</p>",
        "id": 236349912,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619534844
    },
    {
        "content": "<p>In this project, certainly. I'm not sure if mathlib will want it as global instance.</p>",
        "id": 236350290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619534985
    },
    {
        "content": "<p>Sure. But of course this doesn't imply </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">⊥</span>\n</code></pre></div>",
        "id": 236350588,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619535082
    },
    {
        "content": "<p>For mathlib we could define a <code>DiscreteFintype</code> category, and put such a global instance on those things.</p>",
        "id": 236351043,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619535235
    },
    {
        "content": "<p>How many variants of a \"fintype\" are there in Lean already?</p>",
        "id": 236353165,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619535761
    },
    {
        "content": "<p>Only one: <code>Fintype</code>.</p>",
        "id": 236353660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619535836
    },
    {
        "content": "<p>But there's also the fintype predicate on a Type?</p>",
        "id": 236353821,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619535863
    },
    {
        "content": "<p>but that's a bundled fintype, and we have a class <code>fintype</code> which, when used like this: <code>variable (X) [fintype X]</code> says that <code>X</code> is finite</p>",
        "id": 236353857,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619535871
    },
    {
        "content": "<p>yeah exactly</p>",
        "id": 236353870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619535874
    },
    {
        "content": "<p>Ooh, I see what you did there (-;</p>",
        "id": 236353982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619535904
    },
    {
        "content": "<p>As more of an outsider to Lean than Adam, I would have answered by saying that there is <code>finite</code>, <code>finset</code>, <code>fintype</code>, <code>fin n</code>...</p>",
        "id": 236353994,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619535906
    },
    {
        "content": "<p>finiteness is a HUGE mess right now IMO</p>",
        "id": 236354077,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619535925
    },
    {
        "content": "<p>So you want to say that bundled fintypes are always discrete. But random types that might be finite can have other topologies.</p>",
        "id": 236354118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619535935
    },
    {
        "content": "<p>I guess that <em>could</em> work <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 236354331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619535979
    },
    {
        "content": "<p>But someone might also discover 1.4 years from now that it's really nasty to have that global instance <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 236354449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619536009
    },
    {
        "content": "<p>The practical reason for the instance is that I got really annoyed manually telling lean that it should think of a <code>Fintype</code> as a discrete space when I was constructing a bunch of functors to <code>Top</code> or <code>Profinite</code></p>",
        "id": 236354474,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619536014
    },
    {
        "content": "<p>I would just make it a local instance.</p>",
        "id": 236354534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619536031
    },
    {
        "content": "<p>For mathlib, sure, but I'm still inclined to leave it global for LTE</p>",
        "id": 236354695,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619536075
    },
    {
        "content": "<p>Yes, in LTE I'm sure we won't consider other topologies on finite types.</p>",
        "id": 236355050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619536154
    },
    {
        "content": "<p>I'm a big fan of those, but they don't surface here</p>",
        "id": 236355207,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619536193
    },
    {
        "content": "<p>Yeah I was going to say that someone (Kevin?) was going to yell at me about the topology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">Spec A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Sp</span><span class=\"mord mathnormal\">ec</span><span class=\"mord mathnormal\">A</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> a DVR.</p>",
        "id": 236355460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619536251
    },
    {
        "content": "<p>Why only DVR's? A general <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">c</mi></mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Spec} R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Spec</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a cofiltered limit of finite topological spaces</p>",
        "id": 236355623,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619536296
    },
    {
        "content": "<p>yes of course.</p>",
        "id": 236355706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619536318
    },
    {
        "content": "<p>In this case these all come from a partial order, right? And we have the category <code>PartialOrder</code> ;)</p>",
        "id": 236355850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619536344
    },
    {
        "content": "<p>Yes</p>",
        "id": 236355886,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619536354
    },
    {
        "content": "<p>So my suggestion is that on terms of <code>PartialOrder</code> one would define the topology induced by the partial order</p>",
        "id": 236356055,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619536402
    },
    {
        "content": "<p>Topologies on a finite set are just partial orders on a finite set, that's right</p>",
        "id": 236356057,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619536402
    },
    {
        "content": "<p>Anyways, I'm off! Keep up the good work! <span aria-label=\"lift\" class=\"emoji emoji-1f3cb\" role=\"img\" title=\"lift\">:lift:</span></p>",
        "id": 236356441,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619536492
    },
    {
        "content": "<p>Actually now that Peter mentioned this, I think formalizing Hochster's theorem(s) could be a fun (and very doable) project.</p>",
        "id": 236360123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619537722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Merge.20profinite.20branch.20to.20master/near/236353821\">said</a>:</p>\n<blockquote>\n<p>But there's also the fintype predicate on a Type?</p>\n</blockquote>\n<p>It's not a predicate! It contains data, because it was written by a constructivist. But it is a subsingleton, so if <code>p : fintype X</code> and <code>q : fintype X</code> then <code>p = q</code>.</p>",
        "id": 236360709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619537918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Merge.20profinite.20branch.20to.20master/near/236354077\">said</a>:</p>\n<blockquote>\n<p>finiteness is a HUGE mess right now IMO</p>\n</blockquote>\n<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 236360856,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619537997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Merge.20profinite.20branch.20to.20master/near/236360123\">said</a>:</p>\n<blockquote>\n<p>Actually now that Peter mentioned this, I think formalizing Hochster's theorem(s) could be a fun (and very doable) project.</p>\n</blockquote>\n<p>I once asked Conrad if he'd read the proof and I was stunned to hear that he hadn't! My perception is that it's used in Huber's work, in the following situation: you want to prove some theorem about spectral spaces, and sometimes you say \"well, WLOG they're schemes, so we're done by some obscure lemma in EGA 2\". And of course the counter argument is \"it's only point set topology, how hard can it be?\"</p>",
        "id": 236361078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619538063
    },
    {
        "content": "<p>I don't think that's right. Well, I haven't checked the proof that all spectral spaces arise as the spectrum of a ring, but I've never seen a use of it. To me, this is mostly a coincidence that has an important historical role as it led Hochster to isolate the right class of topological spaces.</p>",
        "id": 236387737,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619548676
    },
    {
        "content": "<p>Writing this to you feels incredibly stupid, but I recommend you have a look at Wedhorn's lecture notes on adic spaces. In Section 3.3, every proof starting from Remark 3.21 is as Kevin described.</p>",
        "id": 236399104,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619553674
    },
    {
        "content": "<p>Note that I don't say they have to be like this, I only tell you one place where Kevin got that idea.</p>",
        "id": 236399178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1619553717
    },
    {
        "content": "<p>Right -- my impression is that these arguments as written rely on Hochster but this can be avoided.</p>",
        "id": 236401703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619554853
    },
    {
        "content": "<p>Thanks for the pointer! When I learned this stuff, Wedhorn's notes didn't exist, so I wasn't aware... I assumed these statement were always proved by direct point-set arguments. (I saw the assertions stated without proof in Huber's book, and they all seemed to be easily provable by a direct attack.)</p>",
        "id": 236413527,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619558897
    },
    {
        "content": "<p>Actually, recently Akhil Mathew explained an argument about spectral spaces to me by writing it as Spec of a ring, but again I think this was only for linguistic reasons.</p>",
        "id": 236413830,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619559031
    },
    {
        "content": "<p>it's analogous to all those people in the 40s proving lemmas in homological algebra by chasing elements :-)</p>",
        "id": 236416069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619560169
    }
]