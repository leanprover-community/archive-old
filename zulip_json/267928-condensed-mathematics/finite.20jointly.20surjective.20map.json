[
    {
        "content": "<p>What is the best way to say that a <code>presieve</code> consists of finitely many maps that are jointly surjective?</p>",
        "id": 219311862,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607505183
    },
    {
        "content": "<p>This is the pro-étale site of the point.</p>",
        "id": 219311884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607505201
    },
    {
        "content": "<p>Calle's definition in the Profinite2 branch appeared sensible off the top of my head, do you know how well it works?</p>",
        "id": 219312052,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607505324
    },
    {
        "content": "<p>We are working on that very branch and stuck at that very point.</p>",
        "id": 219312067,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607505339
    },
    {
        "content": "<p>I see</p>",
        "id": 219312117,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607505362
    },
    {
        "content": "<p>(for others coming across this, conversation moved to the discord stream)</p>",
        "id": 219312387,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607505568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/finite.20jointly.20surjective.20map/near/219312387\">said</a>:</p>\n<blockquote>\n<p>(for others coming across this, conversation moved to the discord stream)</p>\n</blockquote>\n<p>If the discord stream is not private could you please provide a link? :)</p>",
        "id": 219434847,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1607579807
    },
    {
        "content": "<p><a href=\"https://discord.gg/cQdcRm8g\">https://discord.gg/cQdcRm8g</a></p>",
        "id": 219435031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607580078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/finite.20jointly.20surjective.20map/near/219435031\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://discord.gg/cQdcRm8g\">https://discord.gg/cQdcRm8g</a></p>\n</blockquote>\n<p>I'm in, thanks!</p>",
        "id": 219435107,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1607580196
    },
    {
        "content": "<p>Oh it is private but we're happy to let in interested people</p>",
        "id": 219449270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607592846
    },
    {
        "content": "<p>that invite expires in 7 hours by the way</p>",
        "id": 219454850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607596234
    },
    {
        "content": "<p>The discord is far less serious than this place, it's mostly undergraduates, there's a bunch of other stuff going on (chess, among us, memes), for me the most interesting thing is the live streaming events -- this is the one edge it has over Zulip. A lot of the time when I'm working on Lean I just live stream (often with music on) and people watch and ask questions, and others (Bhavik, Kenny) live stream too. We made it private because we didn't want to have to police the site 24/7, but I'll happily give out invites to people who fit the bill (undergraduate mathematicians with an interest in Lean fit it 100%, and people who don't diverge too radically from that profile are often also welcome).</p>",
        "id": 219455317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607596522
    },
    {
        "content": "<p>I went with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proetale_pretopology</span> <span class=\"o\">:</span> <span class=\"n\">pretopology</span> <span class=\"n\">Profinite</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coverings</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n                         <span class=\"n\">set.finite</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">nonempty</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">}}</span> <span class=\"bp\">∧</span>\n                         <span class=\"bp\">∀</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">set.finite</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"n\">f</span><span class=\"o\">}},</span>\n</code></pre></div>\n<p>as the definition of the pretopology which is the best way I could think of at the time</p>",
        "id": 219472645,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607607778
    },
    {
        "content": "<p>I think again an inductive proposition will be more convenient</p>",
        "id": 219472834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607607861
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">finite_cover</span> <span class=\"o\">:</span> <span class=\"n\">pretopology</span> <span class=\"n\">Profinite</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"bp\">\\</span><span class=\"n\">hom</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_cover</span> <span class=\"n\">Y</span>\n</code></pre></div>",
        "id": 219472979,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607607957
    },
    {
        "content": "<p>I'll try that next, thanks</p>",
        "id": 219473116,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607608027
    },
    {
        "content": "<p>in general things that generate should be presented in a generating kind of way</p>",
        "id": 219473147,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607608047
    },
    {
        "content": "<p>Could also use <code>fintype</code> but there might be some universe awkwardness--but perhaps it doesn't matter for now</p>",
        "id": 219473726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607608368
    },
    {
        "content": "<p>You mean index the set by a type with a fintype instance?</p>",
        "id": 219473800,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607608427
    },
    {
        "content": "<p>Right</p>",
        "id": 219473874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607608461
    },
    {
        "content": "<p>I could see that working, I think both of these would work for the iso and pullback axioms</p>",
        "id": 219473946,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607608503
    },
    {
        "content": "<p>Perhaps the fintype way would be cleaner for transitivity</p>",
        "id": 219473972,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607608514
    },
    {
        "content": "<p>I guess maybe there actually isn't ever a point where you care about the size of the collection of generating covering families</p>",
        "id": 219474232,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607608645
    },
    {
        "content": "<p>except that it is bounded by the whole category, which follows from working with sieves</p>",
        "id": 219474277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607608667
    },
    {
        "content": "<p>You do care about the sizes of the individual covering families</p>",
        "id": 219474367,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607608686
    },
    {
        "content": "<p>but that doesn't change between <code>fin</code> and <code>fintype</code></p>",
        "id": 219474391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607608696
    },
    {
        "content": "<p>So maybe there's no harm to just using <code>fintype</code> and having a proper class of covering families</p>",
        "id": 219474446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607608726
    },
    {
        "content": "<p>Don't you think it makes more sense to define this pretopology on <code>CompHaus</code> and then restrict to <code>Profinite</code>via the obvious embedding?</p>",
        "id": 219481677,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607611726
    },
    {
        "content": "<p>I feel like we should define condensed sets as sheaves on one of the two extremes: either <code>CompHaus</code> or (the still nonexistent) <code>ExtrDisc</code></p>",
        "id": 219481969,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607611865
    },
    {
        "content": "<p>Or on <code>Kleisli ultrafilter</code></p>",
        "id": 219482002,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607611883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/finite.20jointly.20surjective.20map/near/219449270\">said</a>:</p>\n<blockquote>\n<p>Oh it is private but we're happy to let in interested people</p>\n</blockquote>\n<p>Could I get a discord invite?</p>",
        "id": 219780177,
        "sender_full_name": "Ben Lee",
        "timestamp": 1607891894
    },
    {
        "content": "<p>Are you a maths undergrad?</p>",
        "id": 219780201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607891951
    },
    {
        "content": "<p>i have a phd in math.....from 15 years ago.  so maybe i'm at undergrad level again!</p>",
        "id": 219783888,
        "sender_full_name": "Ben Lee",
        "timestamp": 1607896922
    }
]