[
    {
        "content": "<p>I basically have the following sorry-free</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ext_compute_with_acyclic</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">cochain_complex</span> <span class=\"bp\">ùìê</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">ùìê</span><span class=\"o\">)</span>\n  <span class=\"o\">[((</span><span class=\"n\">quotient</span> <span class=\"bp\">ùìê</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.up</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_bounded_above</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">is_zero</span> <span class=\"o\">(((</span><span class=\"n\">Ext'</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">C.X</span> <span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">of'</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">single</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">‚âÖ</span>\n  <span class=\"o\">(((</span><span class=\"n\">preadditive_yoneda.obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_op.map_homological_complex</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop.homology</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>But I'm quite terrified of proving that this is natural in <code>C</code>. Especially because the typeclass condition on <code>C</code> forbids stating this as an isom of functors.</p>",
        "id": 282939774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652971800
    },
    {
        "content": "<p>see <code>for_mathlib/acyclic</code> if you want to inspect this interactively.</p>",
        "id": 282939902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652971830
    },
    {
        "content": "<p>Nice!</p>",
        "id": 282940507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652972057
    },
    {
        "content": "<p>The preserving coproduct thing is almost done... the only sorry left for that is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">homological_complex_embed_preserves_coproducts</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">c‚ÇÅ.embedding</span> <span class=\"n\">c‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">preserves_colimits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">homological_complex.embed</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"bp\">‚•§</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 282940567,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652972082
    },
    {
        "content": "<p>(I.e. all the homotopy junk has been removed from the statementt)</p>",
        "id": 282940622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652972109
    },
    {
        "content": "<p>I'll try to finish it off, but I don't have much more lean time today, so I don't know how far I'll get.</p>",
        "id": 282940707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652972156
    },
    {
        "content": "<p>It's near the bottom of <code>for_mathlib/derived/ext_coproducts</code>,  just in case</p>",
        "id": 282940781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652972175
    }
]