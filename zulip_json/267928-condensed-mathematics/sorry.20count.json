[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ rg -l sorry <span class=\"p\">|</span> xargs -I % sh -c <span class=\"s1\">'nsorry=`rg sorry % | wc -l`; echo -n \"$nsorry\\t%\\n\"'</span>\n<span class=\"m\">1</span>       src/normed_spectral.lean\n<span class=\"m\">3</span>       src/lem97.lean\n<span class=\"m\">9</span>       src/thm95/default.lean\n<span class=\"m\">15</span>      src/thm95/constants.lean\n<span class=\"m\">5</span>       src/thm95/double_complex.lean\n<span class=\"m\">3</span>       src/toric/scarti_commentati.lean\n<span class=\"m\">5</span>       src/toric/dual_extremal_API_sorry.lean\n<span class=\"m\">10</span>      src/pseudo_normed_group/profinitely_filtered.lean\n<span class=\"m\">15</span>      src/toric/toric.lean\n<span class=\"m\">4</span>       src/polyhedral_lattice/cech.lean\n</code></pre></div>",
        "id": 231328499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616426518
    },
    {
        "content": "<p>Total: 70</p>",
        "id": 231328590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616426539
    },
    {
        "content": "<p>The 1 sorry in <code>normed_spectral</code> will dissolve when we have <code>semi_normed_group</code>s</p>",
        "id": 231328741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616426595
    },
    {
        "content": "<p>The <code>15</code> sorrys in <code>thm95/constants</code> will be fixed along the way, when we figure out the exact way the constants are increased during the proof of 9.5</p>",
        "id": 231328844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616426633
    },
    {
        "content": "<p>The <code>10</code> sorrys in <code>pseudo_normed_group/profinitely_filtered</code> are setting up products of profinitely filtered pseudo normed groups. If you enjoy showing that a space <code>(X^n)_c</code> is comp Haus tot disc because it is canonically isomorphic to <code>(X_c)^n</code> (where the claim is obvious), then feel free to kill these sorrys.</p>",
        "id": 231329186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616426731
    },
    {
        "content": "<p>The sorrys in <code>toric/*</code> are the territory of Damiano <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 231329256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616426757
    },
    {
        "content": "<p>The sorrys in <code>polyhedral_lattice/cech</code> are tricky. We need to show that a certain quotient group is free abelian.</p>",
        "id": 231329433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616426805
    },
    {
        "content": "<p>As for the <code>sorry</code>s that I own, I am not as good as \"others\", so not all are actually needed/useful and not everything that I would like is sorried, so the count there is somewhat inaccurate.  However, now that the teaching term is over, I should have some time to clean up and make some progress!</p>",
        "id": 231335101,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616428575
    },
    {
        "content": "<p>When <a href=\"https://github.com/leanprover-community/mathlib/issues/6819\">#6819</a> will be merged I can start the refactoring  of<code>for_mathlib/normed_group_quotient</code> to add quotient by non closed subspace.</p>",
        "id": 231350167,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616433618
    },
    {
        "content": "<p>I think that two or three weeks ago we have &gt; 70 sorry's in the repo. Now it's 47 <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">row_iso.lean</span>\n<span class=\"mi\">11</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_iso.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">double_complex.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">locally_constant</span><span class=\"bp\">/</span><span class=\"n\">NormedGroup.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">profinitely_filtered.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">cech.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n<span class=\"mi\">5</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_grading_lemma.lean</span>\n<span class=\"mi\">10</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n</code></pre></div>",
        "id": 236469040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619598540
    },
    {
        "content": "<p>We are on the right track <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 236469065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619598554
    },
    {
        "content": "<p>Advertising some <code>sorry</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/polyhedral_lattice/basic.lean</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">polyhedral_lattice</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">ℤ</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 236518639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619620937
    },
    {
        "content": "<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/polyhedral_lattice/cech.lean</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">saturated</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">⦄,</span> <span class=\"n\">gpow</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">closure_saturated</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">gpow</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">saturated</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">or_iff_not_imp_left</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236518655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619620940
    },
    {
        "content": "<p>In <code>src/polyhedral_lattice/cech.lean</code> there is another lemma about proving that a specific subgroup is saturated. I've stubbed out a proof, but there are still some sub-<code>sorry</code>s</p>",
        "id": 236518744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619620978
    },
    {
        "content": "<p>I can do these later today</p>",
        "id": 236520347,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619621535
    },
    {
        "content": "<p>They are mostly math-trivial. But several of them are quite fiddly, I think.</p>",
        "id": 236521443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619621942
    },
    {
        "content": "<p>Hmm... what is the proof of <code>closure_saturated</code>?</p>",
        "id": 236530672,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619624665
    },
    {
        "content": "<p>I mean, the math proof</p>",
        "id": 236530681,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619624672
    },
    {
        "content": "<p>Hmm, maybe I took a wrong turn there.</p>",
        "id": 236534494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619626045
    },
    {
        "content": "<p>I guess it is true in free groups.</p>",
        "id": 236534516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619626052
    },
    {
        "content": "<p>But maybe we should just not think about that, and try to find a different proof for <code>L_saturated</code></p>",
        "id": 236534586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619626076
    },
    {
        "content": "<p>I think we can write down an explicit basis of <code>L f m</code>.</p>",
        "id": 236534711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619626113
    },
    {
        "content": "<p>But it will be a bit nasty.</p>",
        "id": 236534735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619626120
    },
    {
        "content": "<p>And then we have to show that you can extend that basis to a basis of the full group. So that <code>L f m</code> splits off.</p>",
        "id": 236534849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619626154
    },
    {
        "content": "<p>Let me think a little bit about  <code>closure_saturated</code>. We need it for abelian groups, right?</p>",
        "id": 236541571,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619628794
    },
    {
        "content": "<p>Oh did I forget the commutativity assumption?? <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 236541853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619628937
    },
    {
        "content": "<p>Well. the definition makes sense in general <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 236544687,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619630085
    },
    {
        "content": "<p>Hm... what if we take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo><mo>⊆</mo><msup><mi mathvariant=\"bold\">Z</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\{(1,2)\\} \\subseteq \\mathbf{Z}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>? The condition seems satisfied, but the generated subgroup is not saturated.</p>",
        "id": 236546286,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619630711
    },
    {
        "content": "<p>BTW <code>instance (Λ : Type*) [polyhedral_lattice Λ] : no_zero_smul_divisors ℤ Λ</code> is now sorry free.</p>",
        "id": 236549670,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619632052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/236546286\">said</a>:</p>\n<blockquote>\n<p>Hm... what if we take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo><mo>⊆</mo><msup><mi mathvariant=\"bold\">Z</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\{(1,2)\\} \\subseteq \\mathbf{Z}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)}</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>? The condition seems satisfied, but the generated subgroup is not saturated.</p>\n</blockquote>\n<p>I think the subgroup generated by <code>(1,2)</code> will be saturated, right?</p>",
        "id": 236549923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619632138
    },
    {
        "content": "<p><del><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">2\\cdot (1,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is in the subgroup but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is not</del>. Saturated means that the quotient is torsion-free (if I didn't misunderstood everything).</p>",
        "id": 236550463,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619632363
    },
    {
        "content": "<p>Ops. OK, forget about this</p>",
        "id": 236550496,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619632382
    },
    {
        "content": "<p>I think I now have a counterexample: let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><msup><mi mathvariant=\"bold\">Z</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">G = \\mathbf{Z}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> and let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S = \\{s_1, s_2\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">s_1=(1,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">s_2=(1,3)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span>. The assumption in <code>closure_saturated</code> is satisfied since if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">k \\cdot(a,b) = s_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">i=1,2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mi>a</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">ka = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ka</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mo>±</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k = \\pm 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">±</span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>±</mo><msub><mi>s</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy=\"false\">⟨</mo><mi>S</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">(a,b) = \\pm s_i \\in \\langle S \\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\">±</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">⟩</span></span></span></span>. Now <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mo>+</mo><msub><mi>s</mi><mn>2</mn></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>∈</mo><mo stretchy=\"false\">⟨</mo><mi>S</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">s_1+s_2=(1,1)+(1,3)=(2,4)=2\\cdot(1,2) \\in \\langle S \\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">⟩</span></span></span></span>. If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>∈</mo><mo stretchy=\"false\">⟨</mo><mi>S</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">(1,2) \\in \\langle S \\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">⟩</span></span></span></span>, then there would be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">x,y \\in \\mathbf{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord mathbf\">Z</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi><mo>⋅</mo><msub><mi>s</mi><mn>1</mn></msub><mo>+</mo><mi>y</mi><mo>⋅</mo><msub><mi>s</mi><mn>2</mn></msub><mo>=</mo><mi>x</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>y</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>+</mo><mn>3</mn><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1,2) = x \\cdot s_1 + y \\cdot s_2 = x \\cdot (1,1) + y \\cdot (1,3) = (x+y,x+3y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.63889em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.63889em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mn>1</mn><mo>−</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">y = 1-x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>=</mo><mo>−</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">2 = -2x + 3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>, that is impossible. So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>S</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">\\langle S \\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">⟩</span></span></span></span> is not saturated.</p>",
        "id": 236643193,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619687926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Hmm, good example. So we can throw that lemma away.</p>",
        "id": 236656891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619695459
    },
    {
        "content": "<p>The thing we care about is <code>L_saturated</code></p>",
        "id": 236656920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619695474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Do you have an idea how to attack <code>L_saturated</code>? Otherwise I'll start thinking about it.</p>",
        "id": 236662671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698523
    },
    {
        "content": "<p>And sorry for taking that wrong turn...</p>",
        "id": 236662693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698532
    },
    {
        "content": "<p>Can you remind me of the precise statement you need here?</p>",
        "id": 236662737,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619698559
    },
    {
        "content": "<p>We have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></msup><mo>:</mo><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><msup><mo stretchy=\"false\">)</mo><mi>m</mi></msup><mi mathvariant=\"normal\">/</mi><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Lambda^{(m)} := (\\Lambda')^m / L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and to prove that this if finite free, we need to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is saturated.</p>",
        "id": 236663017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698691
    },
    {
        "content": "<p>So, I think you said some time in the past that it might be best to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> splits off from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><msup><mo stretchy=\"false\">)</mo><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">(\\Lambda')^m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 236663082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698726
    },
    {
        "content": "<p>But now we need to figure out how to execute that in practice.</p>",
        "id": 236663110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698745
    },
    {
        "content": "<p>To be honest I forgot what <code>L f m</code> means <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  I tried the other lemma since it didn't use complicated objects... but let me have a look at it</p>",
        "id": 236663129,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619698758
    },
    {
        "content": "<p>Ooh, no worries. I can also look at this one.</p>",
        "id": 236663147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698777
    },
    {
        "content": "<p>In Lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n     <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.map_range_hom</span> <span class=\"o\">(</span><span class=\"n\">int.cast_add_hom'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_subgroup.closure</span> <span class=\"bp\">$</span> <span class=\"n\">Lset</span> <span class=\"n\">f</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 236663170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698798
    },
    {
        "content": "<p>Here <code>f</code> is an arbitrary map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda \\to \\Lambda'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> with saturated image.</p>",
        "id": 236663249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698825
    },
    {
        "content": "<p>We can't really write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub><mo>:</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Λ</mi><mo>⊗</mo><msup><mi mathvariant=\"double-struck\">Z</mi><mi>m</mi></msup><msub><mo stretchy=\"false\">)</mo><mrow><mi mathvariant=\"normal\">Σ</mi><mo>=</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">L_m := (\\Lambda \\otimes \\Z^m)_{\\Sigma = 0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">Σ</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 236663349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698862
    },
    {
        "content": "<p>That would require internal tensor products of submodules (additive subgroups actually, in this Lean code).</p>",
        "id": 236663407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698898
    },
    {
        "content": "<p>How hard is it to prove that the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda\\to \\Lambda'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> splits (as abelian groups)?</p>",
        "id": 236663416,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619698904
    },
    {
        "content": "<p>We don't have that yet, so I gave a hands on definition of <code>Lset</code>.</p>",
        "id": 236663425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698914
    },
    {
        "content": "<p>In the actual application, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><msup><mi mathvariant=\"normal\">Λ</mi><mi>N</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda' = \\Lambda^N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span>, it shouldn't be hard. So here we can just assume it.</p>",
        "id": 236663579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619698991
    },
    {
        "content": "<p>I would have thought that knowing this splitting should make the desired result quite easy, as one would get an explicit splitting of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>m</mi></mrow></msup><mi mathvariant=\"normal\">/</mi><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Lambda'^m/L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>m</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda'^m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 236663584,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619698997
    },
    {
        "content": "<p>With splitting, you just mean a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>:</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">g : \\Lambda' \\to \\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>, right? Or a direct sum decomposition?</p>",
        "id": 236663696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619699044
    },
    {
        "content": "<p>A map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda\\to \\Lambda'\\to \\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span> is the identity</p>",
        "id": 236663760,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619699081
    },
    {
        "content": "<p>Right. I agree that if we have such a map, then showing that the range of <code>f</code> is saturated shouldn't be Lean-hard.</p>",
        "id": 236663814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619699114
    },
    {
        "content": "<p>Hmm, does this lead to a different definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 236664511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619699460
    },
    {
        "content": "<p>I wouldn't mind swapping out the current definition. It's not that pleasant to work with.</p>",
        "id": 236664567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619699488
    },
    {
        "content": "<p>That's not what I mean; I mean that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>m</mi></mrow></msup><mi mathvariant=\"normal\">/</mi><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Lambda'^m/L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> should also inject into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>m</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda'^m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span></span>. Let me see... take the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>m</mi></mrow></msup><mo>→</mo><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>m</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda'^m\\to \\Lambda'^m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>λ</mi><mn>1</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>λ</mi><mi>m</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mo>↦</mo><mo stretchy=\"false\">(</mo><msubsup><mi>λ</mi><mn>1</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>−</mo><mi>f</mi><mi>g</mi><mo stretchy=\"false\">(</mo><msubsup><mi>λ</mi><mn>1</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mo>+</mo><mi>a</mi><mo separator=\"true\">,</mo><msubsup><mi>λ</mi><mn>2</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>−</mo><mi>f</mi><mi>g</mi><mo stretchy=\"false\">(</mo><msubsup><mi>λ</mi><mn>2</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mo>+</mo><mi>a</mi><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>λ</mi><mi>m</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>−</mo><mi>f</mi><mi>g</mi><mo stretchy=\"false\">(</mo><msubsup><mi>λ</mi><mi>m</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mo>+</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\lambda_1',\\ldots,\\lambda_m')\\mapsto (\\lambda_1'-fg(\\lambda_1')+a,\\lambda_2'-fg(\\lambda_2')+a,\\ldots,\\lambda_m'-fg(\\lambda_m')+a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.998892em;vertical-align:-0.247em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>f</mi><mi>g</mi><mo stretchy=\"false\">(</mo><msubsup><mi>λ</mi><mn>1</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>+</mo><mo>…</mo><mo>+</mo><msubsup><mi>λ</mi><mi>m</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a=fg(\\lambda_1'+\\ldots+\\lambda_m')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. Then this vanishes on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: On <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>λ</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\lambda_i'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span> come from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mi>i</mi></msub><mo>∈</mo><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda_i\\in \\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">fg</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> doesn't do anything to them, so the map is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>λ</mi><mi>m</mi></msub><mo stretchy=\"false\">)</mo><mo>↦</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\lambda_1,\\ldots,\\lambda_m)\\mapsto (a,\\ldots,a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. The kernel is in fact exactly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>: On the kernel, all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>λ</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo>=</mo><mi>f</mi><mi>g</mi><mo stretchy=\"false\">(</mo><msubsup><mi>λ</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mo>−</mo><mi>a</mi><mo>∈</mo><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda_i'=fg(\\lambda_i')-a\\in \\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>, and then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> shows that they are in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>So indeed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>m</mi></mrow></msup><mi mathvariant=\"normal\">/</mi><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Lambda'^m/L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> injects into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>m</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda'^m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span></span> and hence is torsion-free.</p>",
        "id": 236664813,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619699589
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 236665084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619699696
    },
    {
        "content": "<p>So one <em>could</em> define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be that kernel. But it's not clear to me that this will make the \"Cech\" part of the construction easier.</p>",
        "id": 236665154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619699729
    },
    {
        "content": "<p>So maybe we should stick to the current definition for now, and formalize your argument.</p>",
        "id": 236665201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619699756
    },
    {
        "content": "<p>Sounds good to me.</p>",
        "id": 236665223,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619699764
    },
    {
        "content": "<p>Related: at some point I will need that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span> is a finite free <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-module of rank <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>:</mo><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\phi:\\Lambda\\to\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> is non-zero then the kernel is finite free of rank <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. I've been putting this off because I am dimly aware that Anne is refactoring <code>is_basis</code> (in fact I've also been putting off a ton of completely trivial things about finite free <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-modules -- anything that involves rank basically -- for the same reason).</p>",
        "id": 236666163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619700230
    },
    {
        "content": "<p>So this is the correct lemma, instead of that <code>closure_saturated</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_subgroup.ker_saturated</span> <span class=\"o\">[</span><span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">ℤ</span> <span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span> <span class=\"bp\">→+</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f.ker</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">saturated</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">gsmul_eq_smul</span><span class=\"o\">,</span> <span class=\"n\">f.map_gsmul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hg</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236668862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619701500
    },
    {
        "content": "<p>Easy to state, trivial to prove.</p>",
        "id": 236668878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619701507
    },
    {
        "content": "<p>So, now we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">L_saturated</span>\n  <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">polyhedral_lattice_hom</span> <span class=\"bp\">Λ'</span> <span class=\"bp\">Λ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f'.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">polyhedral_lattice_hom.id</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">saturated</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">f'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">finite_free.claim</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_subgroup.ker_saturated</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236669499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619701793
    },
    {
        "content": "<p>What is left is to fill in this sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">finite_free</span>\n\n<span class=\"c1\">-- move this, better names?</span>\n\n<span class=\"kd\">def</span> <span class=\"bp\">Δ</span> <span class=\"o\">:</span> <span class=\"bp\">Λ'</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_hom.mk'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finsupp.single_add_hom</span> <span class=\"n\">i</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_monoid_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_add_distrib</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ'</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"bp\">Λ'</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_hom.mk'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">finsupp.sum_add_index'</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ'</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"bp\">Λ'</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">f.comp</span> <span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ'</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finsupp.map_range_hom</span> <span class=\"bp\">$</span> <span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f.comp</span> <span class=\"n\">f'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n  <span class=\"o\">((</span><span class=\"bp\">Δ</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">claim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f'.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">polyhedral_lattice_hom.id</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finite_free</span>\n</code></pre></div>",
        "id": 236669579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619701812
    },
    {
        "content": "<p>Hmm, I actually think that defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to be that kernel is not so bad.</p>",
        "id": 236672449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619702912
    },
    {
        "content": "<p>You need to prove that this kernel plays will with morphisms from the simplex category. But that seems to be a straightforward calculation, so far.</p>",
        "id": 236672597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619702974
    },
    {
        "content": "<p>Whereas working with the additive subgroup closure of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n     <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp.map_range_hom</span> <span class=\"o\">(</span><span class=\"n\">int.cast_add_hom'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>is just painful.</p>",
        "id": 236672716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619703014
    },
    {
        "content": "<p>Why not define it as the set of elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>m</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda'^m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span></span> all of whose coordinates are in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>, and sum to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>? That's very close to the kernel of this map, but seems a bit easier to manipulate still.</p>",
        "id": 236672857,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619703079
    },
    {
        "content": "<p>Asking that the coordinates are in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span> introduces an existential. Which means that you constantly have to choose witnesses.</p>",
        "id": 236673812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619703432
    },
    {
        "content": "<p>The splitting map circumvents that in a very nice way.</p>",
        "id": 236673834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619703445
    },
    {
        "content": "<p>Aha! But the splitting map in itself is a choice... but maybe it doesn't matter so much if you just make this choice globally</p>",
        "id": 236673919,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619703483
    },
    {
        "content": "<p>Exactly, you only choose it once.</p>",
        "id": 236674274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619703620
    },
    {
        "content": "<p>These sorrys are now fixed.</p>",
        "id": 236801042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619770485
    },
    {
        "content": "<p>I'm just building locally before I push.</p>",
        "id": 236801067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619770503
    },
    {
        "content": "<p>Pushed</p>",
        "id": 236801871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619770957
    },
    {
        "content": "<p>So this takes care of the polyhedral lattice - Cech nerve?</p>",
        "id": 236802231,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619771205
    },
    {
        "content": "<p>Well, we still need to check that the quotients are polyhedral</p>",
        "id": 236802558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619771427
    },
    {
        "content": "<p>And this might need Gordan again</p>",
        "id": 236802567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619771435
    },
    {
        "content": "<p>We need to write down generators for the norm, and we need to show that the quotient is a normed group.</p>",
        "id": 236802622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619771476
    },
    {
        "content": "<p>But can you already verify that it is a Cech nerve?</p>",
        "id": 236802645,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619771494
    },
    {
        "content": "<p>(At the moment it's only semi-normed.)</p>",
        "id": 236802646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619771495
    },
    {
        "content": "<p>OK, nice</p>",
        "id": 236802661,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619771513
    },
    {
        "content": "<p>Right, we have the Cech construction. But it's a bit ad hoc, and needs to be glued to the general theory that Adam developed.</p>",
        "id": 236802718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619771533
    },
    {
        "content": "<p>Current sorry count:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">row_iso.lean</span>\n<span class=\"mi\">10</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">locally_constant</span><span class=\"bp\">/</span><span class=\"n\">NormedGroup.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">profinitely_filtered.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">cech.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_grading_lemma.lean</span>\n<span class=\"mi\">8</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_monoid_algebra.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_iso.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">40</span>\n</code></pre></div>",
        "id": 236811365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619776705
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">row_iso.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">locally_constant</span><span class=\"bp\">/</span><span class=\"n\">NormedGroup.lean</span>\n<span class=\"mi\">10</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">cech.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n<span class=\"mi\">8</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_monoid_algebra.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_grading_lemma.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">32</span>\n</code></pre></div>",
        "id": 236852973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619796263
    },
    {
        "content": "<p>The list of files is getting shorter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">locally_constant</span><span class=\"bp\">/</span><span class=\"n\">NormedGroup.lean</span>\n<span class=\"mi\">10</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">cech.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp.lean</span>\n<span class=\"mi\">8</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_monoid_algebra.lean</span>\n<span class=\"mi\">6</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_grading_lemma.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">34</span>\n</code></pre></div>",
        "id": 236993513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619898169
    },
    {
        "content": "<p>Those last four files are a work in progress. I've stated  Gordan and yesterday I also managed to state the intermediate commutative algebra lemma about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-graded rings, so things are going in the right direction. It's a long weekend in the UK and I'm away from my home and unlikely to do much, but on the other hand <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has filled in a couple of sorries in a DM so the true total is lower</p>",
        "id": 237001453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619903957
    },
    {
        "content": "<p><code>src/for_mathlib/dfinsupp.lean</code> is now sorry-free thanks to Eric's <a href=\"https://github.com/leanprover-community/mathlib/issues/7311\">#7311</a></p>",
        "id": 237010193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619912415
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">locally_constant</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup.lean</span>\n<span class=\"mi\">10</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop_92</span><span class=\"bp\">/</span><span class=\"n\">prop_92.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">topology.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">cech.lean</span>\n<span class=\"mi\">8</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_monoid_algebra.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_grading_lemma.lean</span>\n<span class=\"mi\">7</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finite_free.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop_92</span><span class=\"bp\">/</span><span class=\"n\">concrete.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">39</span>\n</code></pre></div>",
        "id": 238925295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621112593
    },
    {
        "content": "<p>As far as I can tell, all the sorry's in <code>for_mathlib</code> are for the algebraic approach to <code>Gordan</code>. So they are not on the critical path to 9.5.</p>",
        "id": 238925317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621112639
    },
    {
        "content": "<p>Yeah the int_grading sorries are not on the path to 9.5, I'm going to PR them to mathlib and move all grading stuff out of the repo now we no longer need it here (we'll need it for projective schemes though)</p>",
        "id": 238927353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621114914
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n<span class=\"mi\">10</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">locally_constant</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop_92</span><span class=\"bp\">/</span><span class=\"n\">concrete.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop_92</span><span class=\"bp\">/</span><span class=\"n\">prop_92.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">15</span>\n</code></pre></div>",
        "id": 239190179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621305781
    },
    {
        "content": "<p>Going down!</p>",
        "id": 239190917,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1621306477
    },
    {
        "content": "<p>I think it fitting that <code>constants.lean</code> is where the majority of the <code>sorry</code>s are, given Peter's original concerns :-)</p>",
        "id": 239191049,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1621306578
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>rg -l sorry <span class=\"p\">|</span> rg -v scripts <span class=\"p\">|</span> xargs -I % sh -c <span class=\"s1\">'nsorry=`rg sorry % | wc -l`; echo -n \"$nsorry\\t%\\n\"'</span><span class=\"p\">;</span> <span class=\"nb\">echo</span> -en <span class=\"s2\">\"Total:\\t\"</span><span class=\"p\">;</span> rg sorry <span class=\"p\">|</span> rg -v scripts <span class=\"p\">|</span> wc -l\n<span class=\"m\">1</span>       src/challenge.lean\n<span class=\"m\">2</span>       src/laurent_measures/basic.lean\n<span class=\"m\">3</span>       src/for_mathlib/horseshoe.lean\n<span class=\"m\">1</span>       src/for_mathlib/short_exact_sequence.lean\n<span class=\"m\">1</span>       src/for_mathlib/homological_complex.lean\n<span class=\"m\">1</span>       src/for_mathlib/ext.lean\n<span class=\"m\">4</span>       src/for_mathlib/exact_seq.lean\n<span class=\"m\">2</span>       src/for_mathlib/derived_functor.lean\n<span class=\"m\">2</span>       src/for_mathlib/abelian_group_object.lean\n<span class=\"m\">1</span>       src/for_mathlib/Profinite/extend.lean\n<span class=\"m\">3</span>       src/condensed/proj_cond.lean\n<span class=\"m\">6</span>       src/condensed/basic.lean\n<span class=\"m\">22</span>      src/condensed/ab.lean\n<span class=\"m\">1</span>       src/Mbar/functor.lean\n<span class=\"m\">1</span>       src/laurent_measures/thm69.lean\nTotal:  <span class=\"m\">51</span>\n</code></pre></div>",
        "id": 256013530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633330160
    },
    {
        "content": "<p>One downside of all the hacking in the last few months is that we haven't been writing any docstrings, which makes the linter unhappy.</p>",
        "id": 256020082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633334433
    },
    {
        "content": "<p>I wonder what the best approach is. It would be nice to have a linter check that the first part of LTE doesn't degrade. But at the same time, I want to have a sort of no-rules-just-fun approach to the second half, so that we can do many cheap experiments.</p>",
        "id": 256020173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633334492
    },
    {
        "content": "<p>And once we settle down on something, we can clean it up and document it.</p>",
        "id": 256020192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633334506
    },
    {
        "content": "<p>Has the linter managed to detect anything useful so far?</p>\n<p>One compromise might be to have the linter continue running as is, but not mark the build red if there are new linting errors. Or we could stop running it on pushes, but keep it running each day on schedule.</p>",
        "id": 256037901,
        "sender_full_name": "Ben Toner",
        "timestamp": 1633344220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> Occasionally it has been useful. But it was probably a wrong decision by me to think we would start writing docstrings on all our defs in LTE</p>",
        "id": 256041766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633346382
    },
    {
        "content": "<p>So disabling that linter is probably a good idea.</p>",
        "id": 256041779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633346392
    },
    {
        "content": "<p>Okay, I disabled the doc_blame linter.</p>",
        "id": 256177797,
        "sender_full_name": "Ben Toner",
        "timestamp": 1633409670
    },
    {
        "content": "<p>Merci!</p>",
        "id": 256178118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633409921
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">6</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">6</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">proj_cond.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">combinatorial_lemma</span><span class=\"bp\">/</span><span class=\"n\">profinite.lean</span>\n<span class=\"mi\">23</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">split_exact.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">mapping_cone.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">48</span>\n</code></pre></div>",
        "id": 267460252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641831268
    },
    {
        "content": "<p>Because I've been travelling this week, I just haven't done anything with LTE. Every 12 hrs I randomly login to my server, do a git pull, see that 1000 lines have been edited/added/etc... Start a build, and wiat for it to finish. But then something else happens, so I can't actually do something. 12 hrs later... same thing happens.</p>\n<p>It's really fun to see all this stuff happening. Even if there isn't much chat here on the stream, there's quite a bit going on behind the screens <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"tools\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"tools\">:tools:</span></p>",
        "id": 268833935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642767521
    },
    {
        "content": "<p>Time for a new sorry count, since all the nice progress in the last few days:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Mbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">sheaves_of_modules</span><span class=\"bp\">/</span><span class=\"n\">multilinear.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">14</span>\n</code></pre></div>",
        "id": 271019304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644257460
    },
    {
        "content": "<p>I just killed a bunch of sorrys from the <code>condensed</code> folder. Here is the current count:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">1</span> src/challenge.lean\n<span class=\"m\">1</span> src/condensed/exact.lean\n<span class=\"m\">21</span> src/laurent_measures/ses.lean\n<span class=\"m\">5</span> src/laurent_measures/ses2.lean\n<span class=\"m\">2</span> src/laurent_measures/thm69.lean\n<span class=\"m\">1</span> src/laurent_measures/functor.lean\n<span class=\"m\">1</span> src/Lbar/ext.lean\n<span class=\"m\">4</span> src/for_mathlib/derived/K_projective.lean\n<span class=\"m\">36</span> total\n</code></pre></div>",
        "id": 273097822,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645713791
    },
    {
        "content": "<p>Great! We're getting at a stage where all the \"basics\" are done.</p>",
        "id": 273098872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645714265
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">exact.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">eval.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">free_pfpng</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">26</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">5</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses2.lean</span>\n<span class=\"mi\">9</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">triangle_shift.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">50</span>\n</code></pre></div>\n<p>Whoohoo, a lot of annoying <code>sorry</code>s in <code>for_mathlib/derived/*</code> are gone! Thanks <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 276007244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647839780
    },
    {
        "content": "<p>Just looking at these sorrys to feel my way back into the project. The sorry in <code>condensed.exact</code> involves proving a theorem about something called <code>exact_with_constant</code>, a definition with no docstring and with no reference to either the blueprint or the Scholze lectures. Is someone in a position to add some clues?</p>",
        "id": 276060367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647873792
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/liquid/dep_graph_section_2.html\">https://leanprover-community.github.io/liquid/dep_graph_section_2.html</a></p>",
        "id": 276060815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647873967
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/liquid/sect0010.html#exact-with-constant\">https://leanprover-community.github.io/liquid/sect0010.html#exact-with-constant</a></p>",
        "id": 276060847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647873982
    },
    {
        "content": "<p>There is a <code>exact-with-constant</code> node in that graph</p>",
        "id": 276060888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874001
    },
    {
        "content": "<p>The sorry in <code>Lbar.ext</code>has a warning above <code>Ext_iso_zero</code> which seems to say \"we need this theorem in more generality\". Is it even possible to state what we need? Is there sorried data elsewhere?</p>",
        "id": 276060954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874032
    },
    {
        "content": "<blockquote>\n<p>Johan Commelin: There is a exact-with-constant node in that graph</p>\n</blockquote>\n<p>Thanks. I didn't know how to search the graph for the node corresponding to the <code>exact_with_constant</code> declaration in the project. The blueprint didn't seem to have a search and I couldn't get google site search to work. What am I missing?</p>",
        "id": 276061152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874102
    },
    {
        "content": "<p><code>Ctrl-F</code> should work</p>",
        "id": 276061178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/276060954\">said</a>:</p>\n<blockquote>\n<p>The sorry in <code>Lbar.ext</code>has a warning above <code>Ext_iso_zero</code> which seems to say \"we need this theorem in more generality\". Is it even possible to state what we need? Is there sorried data elsewhere?</p>\n</blockquote>\n<p>Aah, this now needs to be updated. It should become this statement: <a href=\"https://leanprover-community.github.io/liquid/sect0010.html#Ext-Lbar\">https://leanprover-community.github.io/liquid/sect0010.html#Ext-Lbar</a></p>",
        "id": 276061262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874147
    },
    {
        "content": "<p>You mean I have to clone the blueprint? Ctrl-F on what?</p>",
        "id": 276061278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874153
    },
    {
        "content": "<p>On the graph</p>",
        "id": 276061299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874162
    },
    {
        "content": "<p>Or just ask here. That's the best solution, I guess</p>",
        "id": 276061396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874196
    },
    {
        "content": "<p>got it, although it was 50-50 whether it was going to be part 1 or part 2 I guess</p>",
        "id": 276061491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874215
    },
    {
        "content": "<p>The graph of part 1 is completely green. It's really everything leading up to thm 9.4, which is sorry free.</p>",
        "id": 276061586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874247
    },
    {
        "content": "<p><code>Ctrl-F</code> fails for me because of the issue with hyphen v underscore</p>",
        "id": 276061611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874257
    },
    {
        "content": "<p>Good point</p>",
        "id": 276061636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874266
    },
    {
        "content": "<p>but anyway this is a very cool answer to the question</p>",
        "id": 276061705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874295
    },
    {
        "content": "<p>One \"problem\" with the <code>sorry</code> in <code>Lbar.ext</code> is that the experiments of last week taught us that we should probably switch to the new LTE definition of <code>Ext</code>.</p>",
        "id": 276061809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874320
    },
    {
        "content": "<p>I see!</p>",
        "id": 276062046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874375
    },
    {
        "content": "<p>Namely the <code>Ext'</code> from <code>src/for_mathlib/derived/K_projective.lean</code></p>",
        "id": 276062103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874404
    },
    {
        "content": "<p>Ouch you're using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊂</span></span></span></span>? That symbol terrifies me. I always use <code>ssubsetneq</code> or whatever it's called -- \"it's definitely not equal despite what some people think\"</p>",
        "id": 276062114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874406
    },
    {
        "content": "<p>Where am I using it? In the blueprint?</p>",
        "id": 276062163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874427
    },
    {
        "content": "<p>This definition of <code>Ext'</code> imports a file <code>for_mathlib/triangle_shift.lean</code>with sorries.</p>",
        "id": 276062729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874616
    },
    {
        "content": "<p>Those should be <code>by sorry; {proof}</code>.</p>",
        "id": 276062862,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647874677
    },
    {
        "content": "<p>Not all of them <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 276062921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874688
    },
    {
        "content": "<p>Oh <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 276062936,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647874694
    },
    {
        "content": "<p>Some are genuine sorries</p>",
        "id": 276062945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874696
    },
    {
        "content": "<p>They should be math-trivial. But they use lax monoidal functors. So they are very lean-nontrivial.</p>",
        "id": 276063109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874767
    },
    {
        "content": "<p>ugh</p>",
        "id": 276063223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647874781
    },
    {
        "content": "<p>I'm up for a little pair programming later if you want to tackle those.</p>",
        "id": 276063288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647874796
    },
    {
        "content": "<p>I'm in a talk...</p>",
        "id": 276063419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647874821
    },
    {
        "content": "<p>I can't do this today but next week I will have opportunities for this</p>",
        "id": 276063490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/276063288\">said</a>:</p>\n<blockquote>\n<p>...later...</p>\n</blockquote>",
        "id": 276063506,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647874843
    },
    {
        "content": "<p>Oh I see! This is the first time I've seen the <code>sorry;</code> trick in the wild! Will we notice if bumping mathlib breaks any of these sorried out proofs?</p>",
        "id": 276063745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874934
    },
    {
        "content": "<p>these are the easiest sorries I've ever killed in LTE</p>",
        "id": 276063846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647874974
    },
    {
        "content": "<p>OK there are 6 remaining, and they are all <code>Prop</code>s</p>",
        "id": 276064163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647875087
    },
    {
        "content": "<p><code>sorry; {proof}</code> is now superseded by <code>sorry { proof }</code>!</p>",
        "id": 276064760,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647875283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/276062114\">said</a>:</p>\n<blockquote>\n<p>Ouch you're using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊂</span></span></span></span>? That symbol terrifies me. I always use <code>ssubsetneq</code> or whatever it's called -- \"it's definitely not equal despite what some people think\"</p>\n</blockquote>\n<p>cf our discussion with the Isabelle team about SRL</p>",
        "id": 276065036,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647875399
    },
    {
        "content": "<p>I think that &gt; 95% of mathematicians use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">⊂</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">⊂</span></span></span></span> to mean <code>⊆</code>. I'm one of them. I know Lean disagrees with me about this symbol...</p>",
        "id": 276065311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647875509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> If you want a specific target to think about, I think this one might be easy to get started on: <a href=\"https://leanprover-community.github.io/liquid/sect0010.html#Lbar-ses\">https://leanprover-community.github.io/liquid/sect0010.html#Lbar-ses</a></p>",
        "id": 276080710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647881142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> is also working on it. So you would have to coordinate with him a bit.</p>",
        "id": 276080806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647881166
    },
    {
        "content": "<p>I'm just figuring out where we are right now</p>",
        "id": 276080820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647881171
    },
    {
        "content": "<p>I still need to make a bunch more videos and finish up other term stuff.</p>",
        "id": 276080854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647881185
    },
    {
        "content": "<p>Ok, I'll try my best to make sure that the landscape looks completely different next week. So that you can reorient all over again <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 276080986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647881251
    },
    {
        "content": "<p>New sorry count</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">exact.lean</span>\n<span class=\"mi\">27</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses2.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">free_pfpng</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">eval.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">42</span> <span class=\"n\">total</span>\n</code></pre></div>\n<p>(Note that <code>for_mathlib/triangle_shift</code> is missing from the above ;))</p>",
        "id": 276140411,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647920390
    },
    {
        "content": "<p>Marvellous!</p>",
        "id": 276147480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647929834
    },
    {
        "content": "<p>How much data is sorried, and how much data is not even defined but you know we're going to have to define it to finish the job?</p>",
        "id": 276153094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647935868
    },
    {
        "content": "<p>I was attempting to figure out the answer to the first question yesterday but then I had to go back to work stuff</p>",
        "id": 276153167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647935912
    },
    {
        "content": "<p>I think almost all of the <code>sorry</code>s in the count above are <code>Prop</code>s. But there is still data to be defined.</p>",
        "id": 276155199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647937295
    },
    {
        "content": "<p>My plan is to try and define a lot of data today.</p>",
        "id": 276155213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647937309
    },
    {
        "content": "<p><code>ses.lean</code> is  down to 4 sorrys.</p>",
        "id": 276231850,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1647972658
    },
    {
        "content": "<p>Wow!!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">exact.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">free_pfpng</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">5</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">eval.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">5</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses2.lean</span>\n<span class=\"mi\">5</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">complex_extend.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">26</span>\n</code></pre></div>",
        "id": 276232734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647972984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> That's really nice!</p>",
        "id": 276232770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647973003
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\">commit e07d5d19f77b18c5d98d99d5c2860465d696ae49 (origin/lean-3.42.0)</span>\n<span class=\"w\">Author: Filippo A. E. Nuccio &lt;filippo.nuccio@univ-st-etienne.fr&gt;</span>\n<span class=\"w\">Date:   Tue Mar 22 19:11:50 2022 +0100</span>\n\n<span class=\"w\"> </span>   killed 22 sorry<span class=\"w\"></span>\n</code></pre></div>",
        "id": 276232831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647973025
    },
    {
        "content": "<p>How would you describe the remaining 4? Are they math-trivial? Lean-hard?</p>",
        "id": 276232899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647973058
    },
    {
        "content": "<p>It took me a while, but a painful continuity business is now OK. Now I have 2 easy things, and two about which I am still unsure...</p>",
        "id": 276232926,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1647973070
    },
    {
        "content": "<p>One is certainly math-easy (not entirely trivial), and probably Lean-doable. The other I do not know yet, but I will know soon, and will report here.</p>",
        "id": 276233088,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1647973115
    },
    {
        "content": "<p>Of the two \"easy\" one was <em>very</em> easy...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 276233487,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1647973276
    },
    {
        "content": "<p><code>for_mathlib/complex_extend</code> is now sorry-free (but some of my proofs are a bit crappy; I had a bunch of motive is not type correct issues which I avoided using <code>heq</code>)</p>",
        "id": 278246488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649380640
    },
    {
        "content": "<p>proved embedding of complexes is additive (was a sorry in <code>breen_deligne/eval</code>, but I moved the content to <code>for_mathlib/complex_extend</code>)</p>",
        "id": 278252233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649387134
    },
    {
        "content": "<p>Thanks! This is cool!</p>",
        "id": 278257993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649394729
    },
    {
        "content": "<p>I'm glad you found a heq-hack Kevin!</p>",
        "id": 278258002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649394745
    },
    {
        "content": "<p>I just did the <code>comm</code> and <code>fac</code> fields in <code>functor_eval_flip_preserves_colimits_of_shape</code>, but <code>uniq</code> has me confused as usual.</p>",
        "id": 278304821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649425081
    },
    {
        "content": "<p>Where is this <code>functor_eval_flip_preserves_colimits_of_shape</code>? Just looking at the name makes me think we have something like this in mathlib alreeady</p>",
        "id": 278304948,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649425126
    },
    {
        "content": "<p>I just finished it, actually. It is in <code>breen_deligne/eval.lean</code>.</p>",
        "id": 278305577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649425442
    },
    {
        "content": "<p>Ah!</p>",
        "id": 278305632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649425452
    },
    {
        "content": "<p>The name hides the fact it is about complexes of functors; so I doubt mathlib has it. :-)</p>",
        "id": 278305658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649425469
    },
    {
        "content": "<p>Presumably we have the fact that the functor sending a complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mo>∙</mo></msub></mrow><annotation encoding=\"application/x-tex\">X_\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1611em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for a fixed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> preserves colimits? We could have used something like that along with the fact that functor evaluation preserves colimits.</p>",
        "id": 278305828,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649425535
    },
    {
        "content": "<p>Maybe we would also need something like the fact that the functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mo>∙</mo></msub><mo>↦</mo><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_\\bullet \\mapsto X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1611em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> jointly create colimits as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> varies.</p>",
        "id": 278306048,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649425619
    },
    {
        "content": "<p>I thought something like that too, but I think I was a bit confused. How would such an argument use the fact that we're looking at a complex of colimit-preserving functors?</p>",
        "id": 278306057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649425621
    },
    {
        "content": "<p>Wow, you're on fire Scott!</p>",
        "id": 278306106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649425644
    },
    {
        "content": "<p><code>breen_deligne/eval</code> is done now :-)</p>",
        "id": 278306156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649425667
    },
    {
        "content": "<p>I claim this means that there's another oval to be turned green.</p>",
        "id": 278306158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649425668
    },
    {
        "content": "<p>oooh</p>",
        "id": 278306165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649425673
    },
    {
        "content": "<p>I still can't make head or tail of the dependency graph. I wouldn't start to guess which oval. :-)</p>",
        "id": 278306275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649425697
    },
    {
        "content": "<p>Technically, to apply the result, we need to know that <code>A ↦ ℤ[A]</code> preserves filtered colimits. We'll still need to do that. (For condensed ab groups <code>A</code>.)</p>",
        "id": 278306326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649425718
    },
    {
        "content": "<p>It's <code>homology-Qprime</code>.</p>",
        "id": 278306379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649425741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/278306326\">said</a>:</p>\n<blockquote>\n<p>Technically, to apply the result, we need to know that <code>A ↦ ℤ[A]</code> preserves filtered colimits. We'll still need to do that. (For condensed ab groups <code>A</code>.)</p>\n</blockquote>\n<p>This is going to be tricky</p>",
        "id": 278306430,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649425758
    },
    {
        "content": "<p>I hope it follows formally from the same claim for the category <code>Ab</code>?</p>",
        "id": 278307520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649426171
    },
    {
        "content": "<p>Oh, yeah, that argument shouldn't be too bad -- sheafification already preserves colimits.</p>",
        "id": 278307715,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649426261
    },
    {
        "content": "<p>There was some other point where we need something to preserve filtered colimits that was more complicated, but I don't recall exactly what that was right now.</p>",
        "id": 278307808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649426295
    },
    {
        "content": "<p>Yuchai! We're back in the <code>&lt; 50 sorry</code> realm!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">real_measures</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">free_pfpng</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">free_pfpng</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">invpoly</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses2.lean</span>\n<span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">bicartesian.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les2.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les_facts.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">K_projective.lean</span>\n<span class=\"mi\">49</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 278509373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649653827
    },
    {
        "content": "<p>Major kudos to all the sorry-killers off the last few days.</p>",
        "id": 278509382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649653850
    },
    {
        "content": "<p>The total number of sorries hasn't changed much. But still, it is very fair to say that we've made huge progress since the previous post in this thread.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les2.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les_facts.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">ennreal.lean</span>\n<span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">salamander.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">invpoly</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses2.lean</span>\n<span class=\"mi\">17</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">51</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 280451366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651128054
    },
    {
        "content": "<p>I am hoping to make thm69 sorry-free today. It was sorry-free before but then two of the main definitions got refactored to make our lives easier elsewhere, which broke a very elaborate convergence argument; I've added new results to <code>for_mathlib.nnreal</code> and <code>for_mathlib.ennreal</code> in order to make the proof more conceptual but it's still pretty gnarly.</p>",
        "id": 280455128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651130836
    },
    {
        "content": "<p>The <code>sorry</code> in <code>for_mathlib.ennreal</code> is commented by the way.</p>",
        "id": 280459752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651134005
    },
    {
        "content": "<p>OK <code>thm69</code> is now sorry-free again. It was sorry-free a couple of weeks ago but then we refactored a definition and the refactor was a lot of work for me -- I had to learn how to steer <code>nnreal</code>.</p>",
        "id": 280533362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651169087
    },
    {
        "content": "<p>Yes, I agree that <code>nnreal</code>can be very painful, I went through some pain as well. But thanks for your help!</p>",
        "id": 280541351,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651172810
    },
    {
        "content": "<p>Hooray! Seems like it's time for another <code>sorry</code>-count then <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les2.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les_facts.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les.lean</span>\n<span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">salamander.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">invpoly</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses2.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">32</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 280542530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651173390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/280459752\">said</a>:</p>\n<blockquote>\n<p>The <code>sorry</code> in <code>for_mathlib.ennreal</code> is commented by the way.</p>\n</blockquote>\n<p>This is still true <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 280542787,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651173495
    },
    {
        "content": "<p>I just removed it (-;</p>",
        "id": 280542974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651173593
    },
    {
        "content": "<p>Time for an update</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">Ext_lemmas.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les3.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">is_quasi_iso.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">snake_lemma_naturality2.lean</span>\n<span class=\"mi\">15</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">26</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 283370106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653336406
    },
    {
        "content": "<p>A little progress:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>1 src/condensed/acyclic.lean\n1 src/breen_deligne/main.lean\n15 src/Lbar/ext.lean\n2 src/for_mathlib/acyclic.lean\n2 src/for_mathlib/snake_lemma_naturality2.lean\n1 src/for_mathlib/is_quasi_iso.lean\n2 src/pseudo_normed_group/QprimeFP.lean\n1 src/for_mathlib/derived/Ext_lemmas.lean\n25 total\n</code></pre></div>",
        "id": 283373890,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653338813
    },
    {
        "content": "<p>Will the reorganisation of category theory in master mean that bumping will be difficult?</p>",
        "id": 283381720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653343467
    },
    {
        "content": "<p>Yes, probably. But we might be able to postpone the bump till LTE is sorry-free.</p>",
        "id": 283693565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653362790
    },
    {
        "content": "<p>Quick update:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">11</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">snake_lemma_naturality2.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">is_quasi_iso.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">20</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 283834083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653450255
    },
    {
        "content": "<p>The <code>sorry</code> in <code>snake_lemma_naturality2.lean</code> seems very annoying <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span></p>",
        "id": 283849280,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653465682
    },
    {
        "content": "<p>I mean, there are 625 cases....</p>",
        "id": 283857765,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653470671
    },
    {
        "content": "<p>Ouch.... let me check which sorry you are talking about. This doesn't sound good.</p>",
        "id": 283862130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653473189
    },
    {
        "content": "<p><code>snake.snake_diagram</code> is defined in terms of <code>mk_functor</code> which in turn uses <code>col</code> and <code>row</code> which are using <code>fin{3,4}_functor_mk</code>. My guess is that you would have to go back to those and prove things for them first.</p>",
        "id": 283862594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653473430
    },
    {
        "content": "<p>Hopefully that allows you to take a square root out of the number of cases...</p>",
        "id": 283862625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653473451
    },
    {
        "content": "<p>Is it possible to trick the simplifier into doing all the grunt work, and only proving commutativity of  around 12 squares?</p>",
        "id": 283883509,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653485890
    },
    {
        "content": "<p><code>600 * simp = eternity?</code></p>",
        "id": 283889941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653488891
    },
    {
        "content": "<p>Indeed the first thing I tried is some <code>any_goals {... simp...}</code> hoping to decrease the number of thing to prove, but I got a <code>deterministic timeout</code>.</p>",
        "id": 283891461,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653489493
    },
    {
        "content": "<p>So I think we have to help Lean by explaining that a bunch of the grunt work is repetitive.</p>",
        "id": 283892093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653489749
    },
    {
        "content": "<p>I think something like this could help</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cast_horizontal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j.cast_succ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">cast_vertical</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i.cast_succ</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">succ_horizontal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j.succ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">succ_vertical</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">i.succ</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_succ_horizontal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cast_horizontal</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">succ_horizontal</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_succ_vertical</span> <span class=\"o\">(</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cast_vertical</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">succ_vertical</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">snake_diagram_induction</span>\n  <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"n\">motive</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">succ_horizontal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">to_succ_horizontal</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">succ_vertical</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n    <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">to_succ_vertical</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 283892320,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653489838
    },
    {
        "content": "<p>Yay, motives!</p>",
        "id": 283892484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653489894
    },
    {
        "content": "<p>I pushed this sketch to <code>snake_lemma_naturality2</code></p>",
        "id": 283893380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653490291
    },
    {
        "content": "<p>I guess we will need a similar inductive principle for morphisms in <code>fin n</code></p>",
        "id": 283893446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653490322
    },
    {
        "content": "<p>I wish Lean could auto-generate that induction lemma.</p>",
        "id": 283893596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653490392
    },
    {
        "content": "<p>Maybe we also want an induction lemma for product cats?</p>",
        "id": 283896354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653491486
    },
    {
        "content": "<p>Yeah, that <code>snake_diagram_induction</code> should just be a combination of an induction for <code>fin n</code> and an induction for product cats</p>",
        "id": 283896508,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653491534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Is either of you working on this file atm?</p>",
        "id": 283896511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653491535
    },
    {
        "content": "<p>I'm not.</p>",
        "id": 283896529,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653491541
    },
    {
        "content": "<p>Not really</p>",
        "id": 283896549,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653491551
    },
    {
        "content": "<p>Ok, I'll see if I can close some goals</p>",
        "id": 283896804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653491659
    },
    {
        "content": "<p>I have a proof of (the very easy) <code>to_succ_horizontal</code></p>",
        "id": 283897194,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653491838
    },
    {
        "content": "<p>I've pushed it (and also the other easy sorry). I am not working on the serious ones.</p>",
        "id": 283898645,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653492495
    },
    {
        "content": "<p>Ok, I have an induction lemma for prod cats, working on <code>fin (n+1)</code> now.</p>",
        "id": 283899639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653492948
    },
    {
        "content": "<p>Nooo <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span><br>\nThe category structure of <code>fin 4 × fin 3</code> is not <code>category_theory.prod</code>. It comes from the product preorder...</p>",
        "id": 283901285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653493626
    },
    {
        "content": "<p>Aren't these the same?</p>",
        "id": 283901562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653493750
    },
    {
        "content": "<p>The preorder is the product of the preorders.</p>",
        "id": 283901579,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653493757
    },
    {
        "content": "<p>It's not lex?</p>",
        "id": 283901599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653493767
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">i'</span><span class=\"o\">,</span><span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That typechecks</p>",
        "id": 283901862,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653493880
    },
    {
        "content": "<p>Also this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">snake_diagram</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">i.1</span> <span class=\"bp\">⟶</span> <span class=\"n\">j.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">i.2</span> <span class=\"bp\">⟶</span> <span class=\"n\">j.2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"n\">hom_of_le</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod.mk_le_mk</span><span class=\"o\">],</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">e.le</span><span class=\"o\">,</span><span class=\"n\">f.le</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 283902229,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653494035
    },
    {
        "content": "<p>OOkay, so I guess they're \"the same\" up to some silliness with <code>hom_of_le</code>and <code>le_of_hom</code>.</p>",
        "id": 283902370,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653494090
    },
    {
        "content": "<p>There is a defeq problem somewhere.</p>",
        "id": 283902668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653494217
    },
    {
        "content": "<p>But I just proved the induction lemma for products of preorders.</p>",
        "id": 283902711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653494233
    },
    {
        "content": "<p>I pushed. The induction lemma is now sorry-free.</p>",
        "id": 283905478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653495366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/283901285\">said</a>:</p>\n<blockquote>\n<p>Nooo <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span><br>\nThe category structure of <code>fin 4 × fin 3</code> is not <code>category_theory.prod</code>. It comes from the product preorder...</p>\n</blockquote>\n<p>I mean maybe we'll one day define <code>preorder</code> as <code>category.{0}</code>.</p>",
        "id": 283905832,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653495550
    },
    {
        "content": "<p>That's not what you think it is.</p>",
        "id": 283905869,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653495575
    },
    {
        "content": "<p><code>category.{0}</code> means morphisms are in <code>Type 0</code> not <code>Sort 0</code>.</p>",
        "id": 283905891,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653495587
    },
    {
        "content": "<p>But couldn't it be?</p>",
        "id": 283907186,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653496169
    },
    {
        "content": "<p>It could be. If I recall correctly, it was discussed when <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> was introduced, but I don't remember what happened.</p>",
        "id": 283907441,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653496277
    },
    {
        "content": "<p>IIRC <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> tried allowing <code>Prop</code>s for morphisms a couple of years ago, but then rowed back.</p>",
        "id": 283914703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653499410
    },
    {
        "content": "<p>snake delta naturality is now sorry free</p>",
        "id": 283923208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653503605
    },
    {
        "content": "<p>So now we have 37 variants of the snake lemma?! Which one should go to mathlib?</p>",
        "id": 283923375,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653503689
    },
    {
        "content": "<p>I think we really only have two variants... one was nice for being proven, the other is nice for applying in other proofs.</p>",
        "id": 283923515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653503762
    },
    {
        "content": "<p>Oh, sure, I was just using the following well-known theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">Kevin_Buzzard</span>\n</code></pre></div>",
        "id": 283924085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653504034
    },
    {
        "content": "<p>In any case, presumably the salamander lemma is the one that should go into mathlib.</p>",
        "id": 283924202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653504099
    },
    {
        "content": "<p>Time for an update:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">10</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">8</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">adjunctions2.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">adjunctions.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">abelian_sheaves</span><span class=\"bp\">/</span><span class=\"n\">exact.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">chain_complex_exact.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"kd\">example</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">truncation_Ext.lean</span>\n<span class=\"mi\">11</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">truncation.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">wide_pullback_iso.lean</span>\n<span class=\"mi\">12</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">67</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 284654225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654109580
    },
    {
        "content": "<p>That's a lot of sorries. But we are rapidly breaking down all the sorries into small pieces. There's a little bit left about tensor products of condensed abelian groups with abelian groups, and the interaction with <code>Q'(M)</code>. But apart from that, I think that all sorries are now \"small\".<br>\nMany of them are also self-contained, in the sense that you don't need a lot of context to jump into them once you are familiar with abstract homological algebra.</p>",
        "id": 284654486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654109697
    },
    {
        "content": "<p>I finished off a few more sorries today... here's the current count.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">10</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">adjunctions2.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">8</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">truncation.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">truncation_Ext.lean</span>\n<span class=\"mi\">12</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"kd\">example</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">51</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 284940768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654296034
    },
    {
        "content": "<p>I guess we are getting close to have all the acyclicity stuff sorry-free?</p>",
        "id": 284959157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654319054
    },
    {
        "content": "<p>I'm about to get on a train from Zurich to London and work on <code>truncation.lean</code> for a while</p>",
        "id": 284960604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654321360
    },
    {
        "content": "<p>Swiss trains are a wonder, perfect working environment imo</p>",
        "id": 284964086,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1654327143
    },
    {
        "content": "<p>A quick update after some good progress!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">11</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">tensor.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_lemma.lean</span>\n<span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">truncation.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">truncation_Ext.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">single_coproducts.lean</span>\n<span class=\"mi\">12</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">53</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 285383174,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654691515
    },
    {
        "content": "<p>Again it would be nice to have a feeling about these sorries. I am about to take on <code>for_mathlib/truncation</code> and I know that (a) there's sorried data (b) I know how to unsorry it (c) I am confident that within a couple of days, <code>for_mathlib/truncation</code> will be sorry-free (because I know the maths and I know that all the techniques are avilable to me). Are there others prepared to offer their thoughts about the status of some of the other <code>sorry</code>s? Is there a bottleneck? Is there more sorried data, or data which we will need to build but has not even been formalised at all (\"invisible sorries\")?</p>",
        "id": 285393488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654695900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> if you want to practice your colimit chops, I just added a bunch of sorries in <code>for_mathlib/single_coprodcts</code></p>",
        "id": 285393740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654695986
    },
    {
        "content": "<p>All props</p>",
        "id": 285393769,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654696002
    },
    {
        "content": "<p>Probably <code>src/condensed/tensor.lean</code> is the part that is the least fleshed out.</p>",
        "id": 285393810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654696024
    },
    {
        "content": "<p>Some of the other files, like <code>src/Lbar/ext.lean</code> are pretty fleshed out, but it might be hard to jump right in, because this files is about the nitty-gritty glue between part 1 and part 2 of LTE.</p>",
        "id": 285393928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654696082
    },
    {
        "content": "<p>A file like <code>src/for_mathlib/endomorphisms/basic.lean</code> should be fairly self-contained.</p>",
        "id": 285394053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654696114
    },
    {
        "content": "<p>Right now is a really good time for me to hack on this stuff. I am happy to do as much self-contained stuff as I can while you take on the messy stuff, and I'll come and join you when the sorries are down to single figures.</p>",
        "id": 285394195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654696175
    },
    {
        "content": "<p>We are sub-70 sorries again! Thanks so much for your help <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span>!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">count_sorry.sh</span> <span class=\"bp\">|</span> <span class=\"n\">sort</span> <span class=\"bp\">-</span><span class=\"n\">k2</span>\n<span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab5.lean</span>\n<span class=\"mi\">25</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_lemma.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">ab5.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">homology.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">9</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">exact_functor.lean</span>\n<span class=\"mi\">8</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex2.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">single_coproducts.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">torsion_free_profinite.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">69</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 287531270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656302908
    },
    {
        "content": "<p>Anyone who likes to hack on some homological algebra, feel free to join!</p>",
        "id": 287531288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656302927
    },
    {
        "content": "<p>Now, it is 68!<br>\n(If you have time, please see the note I have added in <code>breen_deligne/main.lean</code>, as I believe the definition of <code>mk_bo_ha_ca</code> should be reconsidered. It should not be too annoying though.)</p>",
        "id": 287539646,
        "sender_full_name": "Joël Riou",
        "timestamp": 1656313444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> let me take a look</p>",
        "id": 287543037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656315953
    },
    {
        "content": "<p>Yeah, I think you are right. I had the same solution in mind, but I hadn't yet gotten around to refactoring the defn.</p>",
        "id": 287543138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656316023
    },
    {
        "content": "<p>I'm working on this refactor right now</p>",
        "id": 287582141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656338762
    },
    {
        "content": "<p>I pushed a refactor. Dinner time now. Some stuff can still be cleaned up. But at least the <code>sorry</code>s should now be provable.</p>",
        "id": 287592981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656343252
    },
    {
        "content": "<p>Do you have any kind of feeling about (a) how much sorried data there is (b) how many more sorries are likely to appear in future?</p>",
        "id": 287599964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656346013
    },
    {
        "content": "<p>I think apart from the <code>sorry</code> you claimed, almost everything is math-trivial, and shouldn't generate a lot of new sorries.</p>",
        "id": 287606954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656349074
    },
    {
        "content": "<p>Concerning data. It's done here and there, but it's all about canonical isoms.</p>",
        "id": 287607053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656349105
    },
    {
        "content": "<p>In <code>src/for_mathlib/homological_complex2.lean</code> there is only 1 sorry left. I fixed the rest. Again, I'm missing the trick for this last one.</p>",
        "id": 287745118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656435309
    },
    {
        "content": "<p>Thanks to the force of <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> a lot of sorries were closed recently</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab5.lean</span>\n<span class=\"mi\">25</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_lemma.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">ab5.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">homology.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">exact_functor.lean</span>\n<span class=\"mi\">8</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex2.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">torsion_free_profinite.lean</span>\n<span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">56</span> <span class=\"n\">total</span>\n</code></pre></div>\n<p>Note that 7 of the 8 sorries in <code>src/for_mathlib/homological_complex2.lean</code> are fake. They are only there to speed up the proof while working on the last sorry. So in reality we are &lt; 50 sorries.</p>",
        "id": 287804520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656474418
    },
    {
        "content": "<p>Yeah but sometimes it goes up by 20 :-) Are we at the point where this won't happen any more?</p>",
        "id": 287812578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656484483
    },
    {
        "content": "<p>It might happen once or twice. But not so often, I think.</p>",
        "id": 287812919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656484823
    },
    {
        "content": "<p>Some progress has been made! Thanks to everyone who helped!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">16</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_lemma.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">homology.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">ab4.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">torsion_free_profinite.lean</span>\n<span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">41</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 288408155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656940359
    },
    {
        "content": "<p>Closed another 2 sorries. We're finally below 40 again.</p>",
        "id": 288420882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656947911
    },
    {
        "content": "<p>yeah but it will randomly go up to 60 again at some point, right? ;-)</p>",
        "id": 288426620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656951285
    },
    {
        "content": "<p>My plan is to spend all my Lean time this week removing the sorries in <code>src/for_mathlib/endomorphisms/Ext.lean</code></p>",
        "id": 288426650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656951312
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">torsion_free_profinite.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_lemma.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">homology.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">ab4.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">38</span> <span class=\"n\">total</span>\n</code></pre></div>\n<p><span aria-label=\"downwards trend\" class=\"emoji emoji-1f4c9\" role=\"img\" title=\"downwards trend\">:downwards_trend:</span></p>",
        "id": 288427254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656951707
    },
    {
        "content": "<p><code>breen_deligne/main.lean</code> is now sorry free :-)</p>",
        "id": 288455820,
        "sender_full_name": "Joël Riou",
        "timestamp": 1656972369
    },
    {
        "content": "<p>Nicely done!</p>",
        "id": 288456000,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656972550
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 288464892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656981789
    },
    {
        "content": "<p>As fas as I can tell, that file now only depends on the sorry in <code>Ext.lean</code> that Kevin is working on.</p>",
        "id": 288472936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656990698
    },
    {
        "content": "<p>Modulo that sorry, <a href=\"https://github.com/leanprover-community/lean-liquid//blob/160f7019cfc803467e0f664f55714093e385f4db/src/breen_deligne/main.lean#L310\">https://github.com/leanprover-community/lean-liquid//blob/160f7019cfc803467e0f664f55714093e385f4db/src/breen_deligne/main.lean#L310</a> is done.</p>",
        "id": 288472941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656990720
    },
    {
        "content": "<p>Ooh, I meant to link to the blueprint instead of github: <a href=\"https://leanprover-community.github.io/liquid/sect0008.html#Qprime-prop\">https://leanprover-community.github.io/liquid/sect0008.html#Qprime-prop</a></p>",
        "id": 288473011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656990746
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">12</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_lemma.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">homology.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">torsion_free_profinite.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">30</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 288478659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656997114
    },
    {
        "content": "<p>The 3 sorries in <code>derived/homology</code> are most likely not needed.</p>",
        "id": 288479516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656998074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> is on a rampage</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">11</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_lemma.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">torsion_free_profinite.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">26</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 288482167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657000811
    },
    {
        "content": "<p>Adam just killed a really gnarly sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_lemma.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">tensor.lean</span>\n<span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">endomorphisms</span><span class=\"bp\">/</span><span class=\"n\">Ext.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">torsion_free_profinite.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">23</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 288542643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657033310
    },
    {
        "content": "<p>FWIW my talk is at <time datetime=\"2022-07-09T08:15:00Z\">2022-07-09T09:15:00+01:00</time></p>",
        "id": 288553118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657037609
    },
    {
        "content": "<p><code>src/Lbar/torsion_free_profinite.lean</code> is now sorry-free! Thanks <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span></p>",
        "id": 288651006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657103914
    },
    {
        "content": "<p>The file <code>for_mathlib/nnreal_to_nat_colimit</code> has a very simple sorry (involving absolutely zero category theory)</p>",
        "id": 288684252,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657119936
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_int_mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Any takers?</p>",
        "id": 288684422,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657119997
    },
    {
        "content": "<p>I've been inactive on the LTE front for a while: can I claim it?</p>",
        "id": 288684529,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657120050
    },
    {
        "content": "<p>Go for it!</p>",
        "id": 288684637,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657120090
    },
    {
        "content": "<p>Ok, that was easy!  I just pushed its proof.</p>",
        "id": 288685928,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657120673
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 288686256,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657120806
    },
    {
        "content": "<p>I'll be adding a good number of other sorries throughout the day (some will be more challenging ;))</p>",
        "id": 288686456,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657120867
    },
    {
        "content": "<p>I look forward to them!</p>",
        "id": 288686511,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657120889
    },
    {
        "content": "<p>(Although the easy ones are very welcome as well!)</p>",
        "id": 288686533,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657120899
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_lemma.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_ses_aux.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">bd_ses.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">filtered_colimits_commute_with_finite_limits.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">Qprime_isoms.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">hom_single_iso.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">14</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 288803516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657199315
    },
    {
        "content": "<p>Single digits!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">9</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 289102026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657458168
    },
    {
        "content": "<p>rest assured that I'm going to kill those 3 in QprimeFP in the next few days</p>",
        "id": 289102045,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657458204
    },
    {
        "content": "<p>Make count an 8</p>",
        "id": 289102751,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657459202
    },
    {
        "content": "<p>We have build errors though:<br>\nwe need to dedup <code>nat_trans.comp_app_assoc</code> and <code>freeCond</code><br>\nand I also got an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">list_decls.lean</span><span class=\"o\">:</span><span class=\"mi\">382</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">condensed.filtered_colimits_commute_with_finite_limits</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">CondensedSet.colim_to_lim._proof_1'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">unknown</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">CondensedSet.colim_to_lim._proof_1'</span>\n</code></pre></div>",
        "id": 289103179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657459773
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/liquid/runs/7270784245?check_suite_focus=true#step:7:1355\">https://github.com/leanprover-community/liquid/runs/7270784245?check_suite_focus=true#step:7:1355</a></p>",
        "id": 289103190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657459791
    },
    {
        "content": "<p>But I need to go now. If someone wants to fix those, then the blueprint can be updated. (Two oval can become green! Yay!)</p>",
        "id": 289103249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657459826
    },
    {
        "content": "<p>If I find some time later today I will try to fix these errors</p>",
        "id": 289104354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657461091
    },
    {
        "content": "<p>I did some linting, but there is still more to do, and I need to do other things for a little while. The errors are almost all gone</p>",
        "id": 289108287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657465748
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/liquid/dep_graph_section_2.html\">https://leanprover-community.github.io/liquid/dep_graph_section_2.html</a> is now updated</p>",
        "id": 289110984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657469327
    },
    {
        "content": "<p>Dangling items <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span></p>",
        "id": 289111084,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657469442
    },
    {
        "content": "<p>Also, is it my browser or is this really supposed to be green or a square? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <a href=\"/user_uploads/3121/pOm5FINAsmXt2-IoPmtSttXm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pOm5FINAsmXt2-IoPmtSttXm/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pOm5FINAsmXt2-IoPmtSttXm/image.png\"></a></div>",
        "id": 289111115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657469512
    },
    {
        "content": "<p>I see a green square. I think it's some issue with google fonts...</p>",
        "id": 289112204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657471042
    },
    {
        "content": "<p>And the linter is happy!</p>",
        "id": 289113913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657473145
    },
    {
        "content": "<p>Although the CI badge disagrees...</p>",
        "id": 289113936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657473174
    },
    {
        "content": "<p>New sorry count:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 289329374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657635050
    },
    {
        "content": "<p>Are they vaguely accessible, or certainly inaccessible?</p>",
        "id": 289329435,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657635077
    },
    {
        "content": "<p>We shall see ;)</p>",
        "id": 289329455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657635086
    },
    {
        "content": "<p>This is so cool!</p>",
        "id": 289341507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657639656
    },
    {
        "content": "<p>On the <a href=\"https://github.com/leanprover-community/lean-liquid/blob/d99c82eb8a194ef8a211e0e3bcdde0371283635c/src/Lbar/ext.lean\">web version of the repo</a> it's still at 5, I believe. Have you pushed, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> ?</p>",
        "id": 289412351,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1657683465
    },
    {
        "content": "<p>Currently it's </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext_aux2.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 289412406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657683496
    },
    {
        "content": "<p>It's in flux</p>",
        "id": 289412410,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657683503
    },
    {
        "content": "<p>ok, glad to see though that it's trending down :-)</p>",
        "id": 289412425,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1657683528
    },
    {
        "content": "<p>Well, the trend can't continue much longer (-;</p>",
        "id": 289412457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657683591
    },
    {
        "content": "<p>Proof by infinite descent... :-P</p>",
        "id": 289412529,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1657683640
    },
    {
        "content": "<p>Let's hope <span aria-label=\"downwards trend\" class=\"emoji emoji-1f4c9\" role=\"img\" title=\"downwards trend\">:downwards_trend:</span></p>",
        "id": 289412619,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657683733
    },
    {
        "content": "<p>Only sorries left are in <code>Lbar/ext_aux2.lean</code>.</p>",
        "id": 289434813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657704944
    },
    {
        "content": "<p>Things are starting to look pretty good <span aria-label=\"upwards trend\" class=\"emoji emoji-1f4c8\" role=\"img\" title=\"upwards trend\">:upwards_trend:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext_aux1.lean</span>\n<span class=\"mi\">10</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext_aux2.lean</span>\n<span class=\"mi\">11</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 289471718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657724348
    },
    {
        "content": "<p>Next update:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">16</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext_aux2.lean</span>\n<span class=\"mi\">16</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 289479484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657727455
    },
    {
        "content": "<p>Next update:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext_aux2.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 289484144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657729301
    },
    {
        "content": "<p>Oh, just wait....</p>",
        "id": 289484336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657729370
    },
    {
        "content": "<p>Should we put the champagne in the fridge?</p>",
        "id": 289485872,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657729998
    },
    {
        "content": "<p>Blueprint has been updated: <a href=\"https://leanprover-community.github.io/liquid/dep_graph_section_2.html\">https://leanprover-community.github.io/liquid/dep_graph_section_2.html</a><br>\n1 oval to go.</p>",
        "id": 289487176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657730612
    },
    {
        "content": "<p>We're really close now!</p>",
        "id": 289487189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657730620
    },
    {
        "content": "<p>The closing ceremony of the ICM is tomorrow, will you be done in time for that :-)?</p>",
        "id": 289498736,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1657735682
    },
    {
        "content": "<p>I will not exclude that possibility <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 289499358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657735988
    },
    {
        "content": "<p>I don't know... right now I'm fighting with the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>−</mo><mi>i</mi><mo>=</mo><mo>−</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">0 - i = -i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">i</span></span></span></span>.</p>",
        "id": 289499596,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657736108
    },
    {
        "content": "<p>Thanks Lean :-/</p>",
        "id": 289499611,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657736117
    },
    {
        "content": "<p>The glue with the first target, is that already done? Or is that the remaining step? (As formulated, Ext-Lbar-aux is roughly \"first target implies desired result\" and Ext-Lbar is roughly \"desired result\", but on the other hand the dependency graph seems to say that the glue with the first target has already been taken care of.)</p>",
        "id": 289516757,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1657744479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> The mathematical content of the glue is completely done (so the short exact sequence of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>Q</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">Q&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> complexes, and the prozero/proisom argument with bicartesian squares, etc...).</p>\n<p>What is left is the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><msubsup><mi>M</mi><mtext>•</mtext><mtext>•</mtext></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hat V(M^•_•)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1968em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9468em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span><span style=\"top:-3.2523em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.363em;\"><span style=\"top:-2.453em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">•</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">•</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Hom</mtext><mo stretchy=\"false\">(</mo><msup><mi>Q</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{Hom}(Q&#x27;(M), V)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> in a functorial way. The isomorphism is done for specific <code>M</code> and <code>V</code>. But we need functoriality for the <code>T⁻¹</code> endomorphisms.</p>",
        "id": 289522161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657746990
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext_aux2.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 289579455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657798105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext_aux2.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 289604880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657811397
    },
    {
        "content": "<p>Wow!!</p>",
        "id": 289605355,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657811594
    },
    {
        "content": "<p>You should live stream the last line <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 289605380,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657811612
    },
    {
        "content": "<p>Adam and I are both on pretty flaky wifi at the moment <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 289605474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657811646
    },
    {
        "content": "<p>What is the last sorry about?</p>",
        "id": 289605980,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1657811867
    },
    {
        "content": "<p>naturality of the T_inv coming from <code>V</code></p>",
        "id": 289606123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657811913
    },
    {
        "content": "<p>But it involves completions and ulifts so it's a little annoying</p>",
        "id": 289606140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657811923
    },
    {
        "content": "<p>It's going to go back up to 15, don't get too excited ;-)</p>",
        "id": 289635596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657825718
    },
    {
        "content": "<p>Actually this is not true, Johan bet me it would be finished today and there's a beer riding on it.</p>",
        "id": 289635646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657825742
    },
    {
        "content": "<p>I'm trying to find a counterexample</p>",
        "id": 289635686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657825760
    },
    {
        "content": "<p>a counterexample to what?</p>",
        "id": 289636128,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1657825979
    },
    {
        "content": "<p>The last remaining sorry</p>",
        "id": 289636966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657826390
    },
    {
        "content": "<p>Then he has to buy me a beer instead</p>",
        "id": 289636979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657826399
    },
    {
        "content": "<p>I had assumed that all the sorries were math-trivial for a while?</p>",
        "id": 289637062,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1657826426
    },
    {
        "content": "<p>Oh they are, I'm not being serious, I was just trying to get a free beer</p>",
        "id": 289638119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657826969
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 289640431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657828103
    },
    {
        "content": "<p>It's done!!!</p>",
        "id": 289640439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657828108
    },
    {
        "content": "<p>I'll buy you a beer after Yury's talk!</p>",
        "id": 289640913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657828345
    },
    {
        "content": "<p>Congratulations!</p>",
        "id": 289640924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657828353
    },
    {
        "content": "<p>Peter should now carefully read the <em>statement</em> of the claim to check that you didn't cheat.</p>",
        "id": 289640958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657828378
    },
    {
        "content": "<p>He'll need to read our def of <code>Ext</code> also <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 289641024,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657828431
    },
    {
        "content": "<p>This is why I mentioned this! The definition of each object in the statement of the theorem needs to be human-verified. If people are happy with the definition then they don't need to read the proof.</p>",
        "id": 289641037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657828439
    },
    {
        "content": "<p>Major thanks and congratulations to everyone involved!!!! Special shoutout to Adam!</p>",
        "id": 289641118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657828473
    },
    {
        "content": "<p>Whohoo! Congratulations!!</p>",
        "id": 289641369,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1657828604
    },
    {
        "content": "<p>One slip in the definition of Ext and maybe you find that Ext^i(X,Y)=0 for all i,X,Y by accident.</p>",
        "id": 289641373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657828605
    },
    {
        "content": "<p>Great!</p>",
        "id": 289641394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657828612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/289641373\">said</a>:</p>\n<blockquote>\n<p>One slip in the definition of Ext and maybe you find that Ext^i(X,Y)=0 for all i,X,Y by accident.</p>\n</blockquote>\n<p>We checked that <code>Ext(Z/2, Z/2)</code> is isom to <code>Z/2</code></p>",
        "id": 289641440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657828635
    },
    {
        "content": "<p>OK I'm convinced :-)</p>",
        "id": 289641463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657828647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/289641440\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/289641373\">said</a>:</p>\n<blockquote>\n<p>One slip in the definition of Ext and maybe you find that Ext^i(X,Y)=0 for all i,X,Y by accident.</p>\n</blockquote>\n<p>We checked that <code>Ext(Z/2, Z/2)</code> is isom to <code>Z/2</code></p>\n</blockquote>\n<p>Ah, so with this definition <code>Ext(A,A)=A</code> for all <code>A</code>?</p>",
        "id": 289641587,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657828686
    },
    {
        "content": "<p>Update the blueprint!</p>",
        "id": 289641633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657828712
    },
    {
        "content": "<p>It's building!</p>",
        "id": 289641669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657828726
    },
    {
        "content": "<p>Blueprint is green!</p>",
        "id": 289641763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657828780
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/liquid/dep_graph_section_2.html\">https://leanprover-community.github.io/liquid/dep_graph_section_2.html</a></p>",
        "id": 289641866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657828826
    },
    {
        "content": "<p>This is great!!!</p>",
        "id": 289642641,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657829182
    },
    {
        "content": "<p>Congratulations to everybody involved!!!</p>",
        "id": 289642741,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657829238
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/NeANQcpMxXdc3IUIfy0m7mpD/IMG_20220714_172917501_HDR.jpg\">IMG_20220714_172917501_HDR.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NeANQcpMxXdc3IUIfy0m7mpD/IMG_20220714_172917501_HDR.jpg\" title=\"IMG_20220714_172917501_HDR.jpg\"><img src=\"/user_uploads/3121/NeANQcpMxXdc3IUIfy0m7mpD/IMG_20220714_172917501_HDR.jpg\"></a></div>",
        "id": 289652386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657834266
    },
    {
        "content": "<p>Johan pouring champagne</p>",
        "id": 289652527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657834334
    },
    {
        "content": "<p>Are you going to announce this, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , say in a blog post? Or <span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> ? I'm itching to publicise the fact, but I won't jump the gun this time....</p>",
        "id": 289653457,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1657834853
    },
    {
        "content": "<p>This is really up to Adam, Johan, Kevin, and the others</p>",
        "id": 289657326,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1657837057
    },
    {
        "content": "<p>I have to admit I wrote this on Twitter, but I have like 5 followers</p>",
        "id": 289658574,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657837873
    },
    {
        "content": "<p>I'm waiting for Johan, who right now is drinking beer in Providence.</p>",
        "id": 289661581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657839708
    },
    {
        "content": "<p>We'll do bigger announcements tomorrow.</p>",
        "id": 289672152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657848643
    },
    {
        "content": "<p>If anyone is still awake: ok to mention on Twitter?</p>",
        "id": 289680308,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1657852262
    },
    {
        "content": "<p>I think it is really better to wait for Johan to do the first announcement, the others can follow after him. As it is night time where he is now, we should probably wait until he wakes up before doing anything.</p>",
        "id": 289680323,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657852296
    },
    {
        "content": "<p>I've deleted my tweet</p>",
        "id": 289681740,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657853895
    },
    {
        "content": "<p>Here's what I would propose:</p>\n<ul>\n<li>Yesterday Rob and I worked on polishing <code>challenge.lean</code>.</li>\n<li>We should polish the blueprint. Currently the graph is not connected. We should fix up the section on real measures.</li>\n<li>I will draft a blogpost that we can try to publish around lunch time (East Coast US).</li>\n<li>After that, people can start tweeting about it.</li>\n</ul>",
        "id": 289702254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657875880
    },
    {
        "content": "<p>Congratulations!</p>",
        "id": 289707185,
        "sender_full_name": "Joël Riou",
        "timestamp": 1657878937
    },
    {
        "content": "<p>Thanks for your help!</p>",
        "id": 289707677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657879264
    },
    {
        "content": "<p>I can take up the section on real measures of the blueprint.</p>",
        "id": 289714634,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657884423
    },
    {
        "content": "<p>I can also work on a section of the blueprint if needed. (Or anything elese)</p>",
        "id": 289716479,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657885757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I've tweeted that there will be an announcment at 2pm during my talk.</p>",
        "id": 289740733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657898234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm not sure the ICERM stream is accessible publicly</p>",
        "id": 289743597,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657899425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/sorry.20count/near/289743597\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> I'm not sure the ICERM stream is accessible publicly</p>\n</blockquote>\n<p>It seems that <a href=\"https://icerm.brown.edu/live-stream/\">nothing</a> is expected today...</p>",
        "id": 289746367,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657900633
    },
    {
        "content": "<p>The \"live stream\" button doesn't work for Leo's talk, and I am sure it was the same yesterday, so I guess it will be the case also later today.</p>",
        "id": 289746618,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657900741
    },
    {
        "content": "<p>I am talking about the button <a href=\"https://icerm.brown.edu/topical_workshops/tw-22-lean/\">here</a>.</p>",
        "id": 289746808,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657900822
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Cf7lIeVI9TZLQUx3n1aDUnpS/image.png\">image.png</a> It's working for me now at <a href=\"https://icerm.brown.edu/live-stream/\">https://icerm.brown.edu/live-stream/</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Cf7lIeVI9TZLQUx3n1aDUnpS/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Cf7lIeVI9TZLQUx3n1aDUnpS/image.png\"></a></div>",
        "id": 289747727,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657901234
    },
    {
        "content": "<p>I believe it is a bug in the website. It checks the start and end time with your local time, so it only works if you are in the same timezone as them.</p>",
        "id": 289747748,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657901246
    },
    {
        "content": "<p><a href=\"https://brown.hosted.panopto.com//Panopto//Pages//Viewer.aspx?id=6d5c4946-115f-40a1-b419-aeca0139c33a\">Direct link to Leo's livestream</a><br>\n<a href=\"https://brown.hosted.panopto.com//Panopto//Pages//Viewer.aspx?id=59afdd13-b391-47b5-8207-aeca013a7665\">Direct link to Kevin's livestream</a></p>",
        "id": 289747862,
        "sender_full_name": "Ben Toner",
        "timestamp": 1657901291
    },
    {
        "content": "<p>If there is somewhere that I could post a bug report, I believe the bug is in the <code>lsApp_refreshStreams</code> function in <code>livestream.min.js</code>.</p>",
        "id": 289748002,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657901363
    },
    {
        "content": "<p>I'll pass it on to ICERM staff.</p>",
        "id": 289748071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657901402
    }
]