[
    {
        "content": "<p>I think we're almost ready to state 9.6.</p>\n<ul>\n<li>We should finish the definition of <code>system_of_double_complexes.{row,col}</code>.</li>\n<li>Define a new <code>structure</code> that records the 3 assumptions.</li>\n<li>Write a statement.</li>\n</ul>",
        "id": 223961492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611609423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> do you think it's worth it to also prove a weak version here? Or should we just go for complete directly?</p>",
        "id": 223961565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611609460
    },
    {
        "content": "<p>I don't know, but I have the impression that the the proofs are essentially the same, especially once we have written down what happens taking completions</p>",
        "id": 223962701,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611609981
    },
    {
        "content": "<p>We should check all the details very carefully, but if, as I suspect, it is not that difficult to prove that for a complete <code>M</code> we have that <code>weak_blah_blah</code> implies <code>blah_blah</code> for a slightly different constant, then in the statement we can assume the strong property and prove the weak one</p>",
        "id": 223963291,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611610235
    },
    {
        "content": "<p>But in any case modifying one version into the other seems easy</p>",
        "id": 223963410,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611610295
    },
    {
        "content": "<p>In the main theorem everything is complete, right?</p>",
        "id": 223963745,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611610442
    },
    {
        "content": "<p>yup</p>",
        "id": 223963780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611610453
    },
    {
        "content": "<p>The only place where this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>…</mo><mo>+</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\ldots + \\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> appears and we cannot ignore it taking completions is in the quotient norm (even for complete spaces is there). In that case to pass from the weak version to the strong one we need to change <code>k</code>, this is what happens for the snake lemma. If there are no quotient involved and everything is complete (maybe even without this assumption) we can go directly with the strong version I think</p>",
        "id": 223964752,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611610982
    },
    {
        "content": "<p>I just suggest for everybody starting formalizing the proof to carefully check on paper that there are no surprises. If that is the case the person working on the proof can change the statement, this should be essentially zero work</p>",
        "id": 223964867,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611611053
    },
    {
        "content": "<p>If I understand correctly it doesn't matter too much if in the main result we  have <code>k-exact</code> or <code>k^37+1-exact</code></p>",
        "id": 223965031,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611611143
    },
    {
        "content": "<p>Right, it doesn't really matter. Apart from trying to optimize the constants (-;</p>",
        "id": 223965387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611611306
    },
    {
        "content": "<p>Is anyone working towards this?</p>",
        "id": 225278555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612518717
    },
    {
        "content": "<p>I think we have all the ingredients</p>",
        "id": 225278618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612518741
    },
    {
        "content": "<p>I'd be interested in this! Make sure to put all the quantifiers in the right order :-)</p>",
        "id": 225281538,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612520597
    },
    {
        "content": "<p>I've made the file <code>system_of_double_complexes</code> sorry-free. But there are still some useful simp-lemmas missing about how objects of <code>C.col</code> and <code>C.row</code> are just objects of the system of double complexes <code>C</code>.<br>\nAnyway, we should now have everything in place for a sorry-free statement of 9.6.</p>",
        "id": 225335639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612548872
    },
    {
        "content": "<p>I redefined <code>C.col</code> and <code>C.row</code> in a less ad-hoc way, and gave the simp lemmas.</p>",
        "id": 225359881,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612560397
    },
    {
        "content": "<p>In Proposition 9.6, the normed abelian groups are indexed by <code>c ≥ c₀</code>. In our single/double complexes we index it by <code>c ≥ 0</code>. Do we just have the convention in the formalization that <code>c₀ = 0</code>?</p>",
        "id": 225361426,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612561182
    },
    {
        "content": "<p>I think that the idea is that  you can always set everything equal to <code>0</code> if <code>c &lt; c₀</code> (the same is true if <code>i &lt; 0</code>)</p>",
        "id": 225361979,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612561539
    },
    {
        "content": "<p>If for example you look at the definition of  <code>is_bdd_exact_for_bdd_degree_above_idx</code> there is <code>∀ c ≥ c₀</code>, so the terms for smaller <code>c</code> are irrelevant for this property</p>",
        "id": 225362092,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612561596
    },
    {
        "content": "<p>Ah, I see. Thanks.</p>",
        "id": 225362369,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612561770
    },
    {
        "content": "<p>Here is a stab at the statement of Proposition 9.6:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Proposition 9.6 in [Analytic] -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">analytic_9_6</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k₀</span><span class=\"o\">)],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">system_of_double_complexes</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">≥</span> <span class=\"n\">k₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hH</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cond1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M.col</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cond2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M.row</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)],</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"mi\">1</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cond3a</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"bp\">​∥</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">x</span> <span class=\"bp\">∥</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">cond3b</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)],</span> <span class=\"c1\">-- these facts follow from previous ones</span>\n    <span class=\"bp\">​∥</span> <span class=\"n\">M.res</span> <span class=\"o\">(</span><span class=\"n\">M.d</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M.d'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">M.d'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span>\n      <span class=\"n\">ε</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">∥</span><span class=\"o\">))</span>\n  <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k₀</span> <span class=\"bp\">*</span> <span class=\"n\">H</span><span class=\"o\">))],</span> <span class=\"c1\">-- (follows)</span>\n    <span class=\"bp\">​</span><span class=\"o\">(</span><span class=\"n\">M.row</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k₀</span> <span class=\"bp\">*</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is assuming that all of the following are correct:</p>\n<ul>\n<li><code>k, k₀ ≥ 1</code></li>\n<li>The <code>c₀</code> is quantified at the same time as <code>M</code>.</li>\n<li>the first displayed equation in (3) holds for (it says) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msubsup><mi>M</mi><mi>c</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mi>q</mi><mo>+</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">x \\in M_c^{0,q+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.061108em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>. This has a typo: the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">k'c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span></span></span></span>.</li>\n<li>(9.2) holds (only) for <code>q ≥ 1</code>.</li>\n<li>(9.2) is 4 inequalities, for each ± a choice of either + or -.</li>\n<li>The \"first row\" in the conclusion is row 0.</li>\n</ul>",
        "id": 225369266,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612565901
    },
    {
        "content": "<p>Thanks! Let me confirm each point:<br>\n<span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spectral.209.2E6/near/225369266\">said</a>:</p>\n<blockquote>\n<p>This is assuming that all of the following are correct:</p>\n<ul>\n<li><code>k, k₀ ≥ 1</code></li>\n<li>The <code>c₀</code> is quantified at the same time as <code>M</code>.</li>\n<li>the first displayed equation in (3) holds for (it says) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msubsup><mi>M</mi><mi>c</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mi>q</mi><mo>+</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">x \\in M_c^{0,q+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.061108em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>. This has a typo: the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">k'c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span></span></span></span>.</li>\n<li>(9.2) holds (only) for <code>q ≥ 1</code>.</li>\n<li>(9.2) is 4 inequalities, for each ± a choice of either + or -.</li>\n<li>The \"first row\" in the conclusion is row 0.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Yes</li>\n<li>Yes</li>\n<li>Yes, that's a typo. Please a commit request in the GitHub! (<a href=\"https://github.com/PeterScholze/Analytic\">https://github.com/PeterScholze/Analytic</a>)</li>\n<li>No, it should hold also for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">q=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, in which case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>h</mi><mrow><mi>q</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">h^{q-1}=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.</li>\n<li>The statement holds for any choice of signs, and I wasn't sure which one is the one needed later (as homotopies sometimes acquire signs?)</li>\n<li>Yes, it's row 0.</li>\n</ul>",
        "id": 225372394,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612568373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Note that since we index the complexes by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>, but in all applications <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">X = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i &lt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. So the condition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>h</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">h^{-1} = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is automatic in those cases.</p>",
        "id": 225384396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612583054
    },
    {
        "content": "<p>Thanks for refactoring <code>row</code> and <code>col</code>.</p>",
        "id": 225384665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612583500
    },
    {
        "content": "<p>What do you think of recording all the conditions in a structure <code>spectral_conditions</code>?</p>",
        "id": 225385115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612584171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I generalised some of the <code>fact</code>s, so now a bunch of <code>-- follows</code> could be removed.</p>",
        "id": 225386505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612586639
    },
    {
        "content": "<p>About the signs and <code>u1 u2 : units \\Z</code>, I guess that in practice it might be more convenient to just record 4 conditions...<br>\nThis is one benefit of putting all the conditions in a structure, because we can then have a constructor using <code>units</code> (if that is easier for verifying the condition), but we can project 4 conditions out of it, which might be easier to use when we apply the conditions in the proof.</p>",
        "id": 225386603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612586765
    },
    {
        "content": "<p>Ok, I made that change. The names are not very pleasant: <code>cond3bpp</code>, <code>cond3bpm</code>, etc...</p>",
        "id": 225387534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612588221
    },
    {
        "content": "<p>But before we launch into the proof, I guess we need to do two things:</p>\n<ol>\n<li>State this in terms of weak exactness. (We might want to keep the version for strong exactness, but it needs to assume all objects are complete)</li>\n<li>Refactor the exactness conditions to split <code>k</code> into two constants, because it is used in two ways. This will probably simplify calculations in the proofs (also for the proof of normed snake). Patrick was planning on doing this refactor.</li>\n</ol>",
        "id": 225387687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612588486
    },
    {
        "content": "<p>Thanks for the improvements <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>.</p>\n<p>Indexing complexes by all of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> makes sense. I just fixed so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> is also defined for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">q&lt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. I expect we will also need to add assumptions to various theorems stating that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi></mrow></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">M^{p,q}=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">p&lt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">q&lt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, but that should be fine.</p>\n<p>About <code>u1 u2 : units \\Z</code>, I wasn't sure if that was the most convenient way to do it. Maybe 4 conditions is easier. However, when we apply the Proposition and have to check the 4 cases, maybe we can prove them all at the same time with this formulation.</p>",
        "id": 225391044,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612594842
    },
    {
        "content": "<p>Right... so now you get both. You only need to check <code>cond3b</code>, but you can use <code>cond3bpm</code> (and 3 other variants)</p>",
        "id": 225395170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612595985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> did you already work on the quotient of normed groups somewhere?</p>",
        "id": 226366134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613384489
    },
    {
        "content": "<p>Because we'll need that for the proof of 9.6</p>",
        "id": 226366145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613384498
    },
    {
        "content": "<p>In <code>src/for_mathlib/normed_group_hom.lean</code> there is the definition <code>is_quotient</code> and two basic results (the norm of the image in the quotient is smaller than the original norm and for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> there is ...). Do we need something more complicated?</p>",
        "id": 226378983,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613392848
    },
    {
        "content": "<p>We also have some basic result for system of complexes (like the quotient of admissible is admissible)</p>",
        "id": 226379026,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613392874
    },
    {
        "content": "<p>We will need the construction of a quotient, for the proof of 9.6</p>",
        "id": 226379328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613393065
    },
    {
        "content": "<p>I see. There is no construction at the moment, but I can start working on it right now. We want something like <code>def quotient (f : normed_group_hom M N) : normed_group</code> that gives the quotient of <code>N</code> by the image of <code>f</code>, right? Plus the basic API of course</p>",
        "id": 226383449,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613395608
    },
    {
        "content": "<p>Maybe...</p>",
        "id": 226383900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613395879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I can also imagine that something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">s.quotient</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>would be what we want</p>",
        "id": 226383936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613395921
    },
    {
        "content": "<p>You already defined the <code>range</code> of a normed group hom, right?</p>",
        "id": 226383988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613395934
    },
    {
        "content": "<p>Yes</p>",
        "id": 226384045,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613395986
    },
    {
        "content": "<p>BTW the only mathematical lemma to prove is that the \"quotient norm\" defined using the sup is actually a norm</p>",
        "id": 226384181,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613396054
    },
    {
        "content": "<p>Is the following the correct way of doing this? Given<code>(s : add_subgroup M)</code>, I define on <code>s.quotient</code> an instance of <code>has_norm</code>, then I define <code>def  quotient.core(f : normed_group_hom M N) : normed_group.core</code> (meaning that the norm has the requires properties) and finally I use <code>normed_group.of_core</code> to produce the required <code>normed_group</code>.</p>",
        "id": 226386435,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613397229
    },
    {
        "content": "<p>It's probably fine</p>",
        "id": 226386670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613397339
    },
    {
        "content": "<p>But if <code>s.quotient</code> already gets a quotient metric (or topology) then this gives diamonds</p>",
        "id": 226386773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613397365
    },
    {
        "content": "<p>So then you would have to prove that all those quotient structures are compatible in the proof fields of <code>normed_group</code></p>",
        "id": 226386823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613397394
    },
    {
        "content": "<p>Just chiming in with my analyst's hat on, but if you quotient by a subgroup which is not closed, then the norm on the quotient is not a norm because there are nonzero vectors with zero norm. Adding an assumption <code>[complete_space s]</code> should save the day.</p>",
        "id": 226387124,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1613397547
    },
    {
        "content": "<p>Yes, thanks for reminding me of that</p>",
        "id": 226387360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613397652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> yes, of course!</p>",
        "id": 226387369,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613397658
    },
    {
        "content": "<p>There are no quotients of metric spaces in mathlib, and indeed <code>instance test (s : add_subgroup M) : metric_space (quotient s) := by apply_instance</code> doesn't work. But <code>quotient s</code> has an instance of <code>topological_space</code>. I don't know if this is a problem</p>",
        "id": 226387701,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613397794
    },
    {
        "content": "<p>We will probably be fine... but it won't be the mathlib way of doing things.</p>",
        "id": 226387817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613397844
    },
    {
        "content": "<p>We only need the construction in a special place, where we really use it as <code>normed_group</code>. So it will find the right instance path, I guess.</p>",
        "id": 226387890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613397874
    },
    {
        "content": "<p>It would be really more mathliby to do things properly, i.e., check that you also get the quotient topology. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , do we already have the quotient uniform structure on the quotient by a subgroup? (I am afraid of diamonds here between the uniform structure coming from the topological group structure on a quotient group, and the quotient uniform structure coming from the uniform structure on the original group, so to do this the right way it should be done by someone knowing very well this part of the library).</p>",
        "id": 226389964,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1613399116
    },
    {
        "content": "<p>That diamond is one that causes many headaches. I think Patrick has mentioned several times during perfectoid project that we should refactor that part of the library... but it seems like a painful one</p>",
        "id": 226390138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613399228
    },
    {
        "content": "<p>I just pushed the beginning of the construction of the quotient, in particular there is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">quotient_normed_group</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226427374,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613421185
    },
    {
        "content": "<p>There is one <code>sorry</code>, the fact that <code>∥x∥ = 0 → 0</code>, that is not completely trivial I think (but not that difficult, it is the only statement that is not mathematically clear)</p>",
        "id": 226427538,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613421300
    },
    {
        "content": "<p>Ah, we will of course need that the natural projection is a normed group hom!</p>",
        "id": 226427689,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613421428
    },
    {
        "content": "<p>I think I'll stop for today, but if someone is interested please go ahead. We can also probably refactor <code>is_quotient</code> a little bit using the new definition</p>",
        "id": 226427761,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613421489
    },
    {
        "content": "<p>I've added a little API to quotients of normed groups. We still have to prove that  <code>∥x∥ = 0 → x = 0</code>, but this should be easy using  what is already proved. I have to get familiar with Cauchy sequences in Lean but I can do it, I think.<br>\nThere is a little duplicate code, since we have essentially two notion of quotients: the first one is the normed group structure on <code>quotient S</code> for <code>S : add_subgroup M</code> and the second one is the structure  <code>is_quotient (f : normed_group_hom M N)</code>, that essentially says that <code>N</code> is isomorphic to the quotient by the completion of the image of <code>f</code>. I proved that the morphism <code>M → (quotient S)</code> satisfies <code>is_quotient</code> but not the other implication. Do we need it?</p>",
        "id": 226519900,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613486087
    },
    {
        "content": "<p>I think that the direction that you proved is the important one.</p>",
        "id": 226521061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613486636
    },
    {
        "content": "<p>We should do everything in terms of <code>is_quotient</code>. But sometimes you need to construct the target of the morphism <code>f</code> for which you need <code>is_quotient f</code>. That is the role that <code>quotient</code> plays.</p>",
        "id": 226521182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613486687
    },
    {
        "content": "<p>I agree. The unfortunate thing is that we need some results that were proved for <code>is_quotient</code> to prove that the quotient norm is actually a norm. In practice I them before being able to state that the natural morphism satisfies <code>is_quotient</code> and I had to prove them directly for the quotient norm. But this is just an aesthetic problem</p>",
        "id": 226521519,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613486863
    },
    {
        "content": "<p>I guess the way to deal with the |z|=0 question is to show that the elements of norm 0 are precisely the closure of the subgroup you're quotienting out by.</p>",
        "id": 226521873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613487032
    },
    {
        "content": "<p>The math proof is easy: if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">||x|| = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> with lifting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>∈</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">m \\in M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, then for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> there is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>s</mi><mi>n</mi></msub><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">s_n\\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>m</mi><mo>+</mo><msub><mi>s</mi><mi>n</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>&lt;</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">||m + s_n|| &lt; 1/n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span></span></span></span>. The sequence  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>s</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(s_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is Cauchy and so it converges to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">s \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> (since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is supposed complete). We get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>m</mi><mo>−</mo><mi>s</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">||m - s|| = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mi>s</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">m = s \\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>",
        "id": 226522591,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613487373
    },
    {
        "content": "<p>Right -- I'm just saying that a more general statement is that |x-bar| = 0 iff x is in the closure of S.</p>",
        "id": 226523143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613487590
    },
    {
        "content": "<p>If you need it, I added the submodule structure on the closure of a subspace fairly recently (for similar arguments about orthogonal projection): <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.topological_closure\">docs#submodule.topological_closure</a></p>",
        "id": 226537184,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1613493004
    },
    {
        "content": "<p>Actually I guess you need (if anything) the corresponding result for subgroups.</p>",
        "id": 226537302,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1613493040
    },
    {
        "content": "<p>The construction of the norm on <code>quotient S</code> is now sorry free. Note that the proof of <code>norm_zero_eq_zero</code>, that is the above statement, can surely be golfed a lot: it's the first time I write a proof concerning limits, so in practice I translated all the statements from \"filters language\" to  \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span> language\" and then I messed around with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\varepsilon/2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span> and so on.</p>\n<p>More interestingly, the assumption that <code>S</code> is completed is written as <code>(S : add_subgroup M) [complete_space S]</code>: another option is <code>(S : add_subgroup M) [is_complete (S : set M)]</code>. The first one seems more natural, but in the proof I wanted to use <code>cauchy_seq_tendsto_of_is_complete</code>, so <code>(S : set M)</code> appears in the proof. I can modify this quickly if the second option is better.</p>",
        "id": 226581102,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1613511735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> great work, thanks a lot!</p>",
        "id": 226617739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613542441
    },
    {
        "content": "<p>This seems like a natural moment to start thinking about how <code>for_mathlib/normed_group_hom.lean</code> should move to mathlib. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I would love to have feedback from you, because I'm far from an expert and just blundering my way into functional analysis. For example: should we rename this to <code>bounded_hom</code> or does this deserve the name <code>normed_group_hom</code>?</p>",
        "id": 226617819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613542545
    },
    {
        "content": "<p>In <code>system_of_complexes.double</code> we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">res</span> <span class=\"o\">{</span><span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">C.X</span> <span class=\"n\">c'</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">⟶</span> <span class=\"n\">C.X</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">C.map</span> <span class=\"o\">(</span><span class=\"n\">hom_of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>Looks fine, right? And then almost immediately afterwards we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">res_comp_res</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₂</span> <span class=\"bp\">≤</span> <span class=\"n\">c₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₃</span> <span class=\"bp\">≤</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h₁</span> <span class=\"bp\">≫</span> <span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h₂</span>  <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">res_res</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₂</span> <span class=\"bp\">≤</span> <span class=\"n\">c₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₃</span> <span class=\"bp\">≤</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C.X</span> <span class=\"n\">c₁</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h₁</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">h₂</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>with all this <code>@ _</code> nonsense. Until about a week ago I regarded this as a fact of life. But Mario's comment <a href=\"https://github.com/leanprover-community/mathlib/pull/6355#discussion_r579919920\">here</a> was as much news to me as it was to Bryan. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what is going on here? Should  <code>p</code> and <code>q</code> be explicit in the definition of <code>res</code>? What is the rule?</p>",
        "id": 228141571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614530918
    },
    {
        "content": "<p>Same question for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `C.d` is the differential `C.X c p q ⟶ C.X c (p+1) q` for a system of double complexes `C`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">C.X</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">⟶</span> <span class=\"n\">C.X</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">C.obj</span> <span class=\"bp\">$</span> <span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">d_comp_res</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₂</span> <span class=\"bp\">≤</span> <span class=\"n\">c₁</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">d</span> <span class=\"n\">C</span> <span class=\"n\">c₁</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">≫</span> <span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"bp\">@</span><span class=\"n\">d</span> <span class=\"n\">C</span> <span class=\"n\">c₂</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 228141795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531176
    },
    {
        "content": "<p>I think the situation in <code>res</code> compared to in that PR is different, right? There, the rule for lemmas is that <code>f</code> can be implicit because it's implied by the later explicit hypothesis for <code>hf</code>; but here there's no such later hypothesis. So I think the usual rule applies for <code>res</code>, that Lean can't figure out what <code>p</code> and <code>q</code> should be, so either make them implicit and use <code>@</code> or make them explicit (and I'd instinctively do the latter)</p>",
        "id": 228142147,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614531603
    },
    {
        "content": "<p>The PR is talking about a def. The file in lean-liquid is littered with <code>@</code>s.</p>",
        "id": 228142562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614531957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> The rule is different for partial functions specifically because the proof arguments are elided in printing, so it's hard to see what things like <code>congr</code> will do. In this example it depends on whether that hom is to be considered a function or not</p>",
        "id": 228142637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614532009
    },
    {
        "content": "<p>If it's usually left unapplied then I would keep the other arguments explicit</p>",
        "id": 228142663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614532034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spectral.209.2E6/near/228142562\">said</a>:</p>\n<blockquote>\n<p>The PR is talking about a def. The file in lean-liquid is littered with <code>@</code>s.</p>\n</blockquote>\n<p>Sure - but I'm saying that Mario's comment is about an argument which is implied by another; but in your case there is no later argument which implies what <code>p</code> or <code>q</code> are</p>",
        "id": 228142783,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614532184
    },
    {
        "content": "<p>if it's a function, then the later argument would be <code>C.X c' p q</code></p>",
        "id": 228142860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614532219
    },
    {
        "content": "<p>but as long as this is manipulated using categorical notation like <code>≫</code> then it's not really a function, it's just an object that looks kind of like a function (and in particular is not the subject of a <code>coe_fn</code> instance with another argument)</p>",
        "id": 228142917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614532292
    },
    {
        "content": "<p>I asked the same question as soon as I saw this file, but indeed those <code>res</code> and <code>d</code> functions are always applied in the following files, so it makes sense to keep things like this, at least until we need other aspects.</p>",
        "id": 228146394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614535590
    },
    {
        "content": "<p>Dumb question: In the docstring for <code>system_of_double_complexes</code> it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Implementation</span> <span class=\"n\">detail</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">cochain_complex</span><span class=\"bp\">`</span> <span class=\"n\">assumes</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"n\">complex</span> <span class=\"n\">is</span> <span class=\"n\">indexed</span> <span class=\"kd\">by</span> <span class=\"bp\">`</span><span class=\"n\">ℤ</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n<span class=\"n\">whereas</span> <span class=\"n\">we</span> <span class=\"n\">are</span> <span class=\"n\">interested</span> <span class=\"k\">in</span> <span class=\"n\">complexes</span> <span class=\"n\">indexed</span> <span class=\"kd\">by</span> <span class=\"bp\">`</span><span class=\"n\">ℕ</span><span class=\"bp\">`.</span>\n<span class=\"n\">We</span> <span class=\"n\">therefore</span> <span class=\"n\">set</span> <span class=\"n\">all</span> <span class=\"n\">objects</span> <span class=\"n\">indexed</span> <span class=\"kd\">by</span> <span class=\"n\">negative</span> <span class=\"n\">integers</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">our</span> <span class=\"n\">use</span> <span class=\"n\">case.</span>\n</code></pre></div>\n<p>Where is the assumption in the statement of 9.6 that all objects indexed by negative integers are 0? I'm starting on a proof of 9.6 and I can't find it :-/</p>",
        "id": 228231872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614606451
    },
    {
        "content": "<p>hah, good point... <code>breen_deligne.package.system</code> returns a system for which all objects in negative degrees are <code>0</code>.</p>",
        "id": 228233152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614606929
    },
    {
        "content": "<p>But of course some of the theorems might need to assume this.</p>",
        "id": 228233172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614606940
    },
    {
        "content": "<p>By the way, it might be easier to assume that <code>d i = 0</code> for negative <code>i</code></p>",
        "id": 228233207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614606959
    },
    {
        "content": "<p>Because that's an equality of terms, instead of some isom in a category.</p>",
        "id": 228233311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614606983
    },
    {
        "content": "<p>Note that for the proof of normed_snake we don't need any nonzeroness assumptions</p>",
        "id": 228233457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614607050
    },
    {
        "content": "<p>In the paper all complexes are indexed by nonnegative integer, aren't they? 9.6 says \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>M</mi><mi>c</mi><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi></mrow></msubsup><mo separator=\"true\">,</mo><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">M_c^{p,q}, p,q \\geq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93033em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>...\"</p>",
        "id": 228233460,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614607050
    },
    {
        "content": "<p>but <code>d i = 0</code> doesn't imply <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">M_{i,j}=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> right? Are you saying that I have to modify the statement of 9.6 that we have?</p>",
        "id": 228233495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614607070
    },
    {
        "content": "<p>yes, you might need to modify the conclusion (I didn't check) to say that you only prove something about nonneg indices</p>",
        "id": 228233610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614607103
    },
    {
        "content": "<p>Yes Riccardo, the issue is that we have what we are claiming is a formalisation of the statement of 9.6 in the repo and it doesn't contain this assumption. I totally agree that it's true!</p>",
        "id": 228233623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614607112
    },
    {
        "content": "<p>For some reason, our complexes are indexed over the integers (in fact I'm pleased they are because we have to deal with subtraction and you all know what I think about nat subtraction)</p>",
        "id": 228233704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614607151
    },
    {
        "content": "<p>Johan, these <code>is_bounded_exact</code> hypotheses and conclusion are everywhere. I need to modify a lot more than the conclusion, right? It's not just the assertion that we're only proving something about non-negative indices (which would imply that the M_{i,j} could be non-trivial for i or j&lt;0 but we don't prove anything about them). Are you saying that I should not be putting in the blanket assumption M_{i,j}=0 for i or j &lt; 0 but should be doing something else?</p>",
        "id": 228234117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614607296
    },
    {
        "content": "<p>Hmm, I thought that claiming we only prove something for <code>p,q &gt;= 0</code> would suffice</p>",
        "id": 228234610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614607471
    },
    {
        "content": "<p>Why are you worried that this isn't enough?</p>",
        "id": 228234630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614607482
    },
    {
        "content": "<p>It's really easy for  me to say nonsense, because I haven't tried to play the game. But is there really no way to have complexes indexed by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>? I can see many settings in math where the complex is genuinely indexed by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> (de Rham cohomology, group cohomology, homotopy groups and so on), where having to extend all these definitions to negative indices will feel like totally weird.</p>",
        "id": 228234738,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614607515
    },
    {
        "content": "<p>ooh, you mean that <code>is_bounded_exact</code> doesn't make that assumption?</p>",
        "id": 228234766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614607526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I agree, and I think Scott has been experimenting with a new definition that generalises both concepts</p>",
        "id": 228234826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614607560
    },
    {
        "content": "<p>The current PR on connective chain complexes just redefines <code>nat</code>-indexed complexes, but I'm not in favour of having two definitions if we can get away with one.</p>",
        "id": 228234972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614607594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> if assuming <code>M_{i.j} = 0</code> works, then that's fine. But I'm worried that it isn't practical</p>",
        "id": 228235059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614607632
    },
    {
        "content": "<p>Because of DTT issues</p>",
        "id": 228235076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614607641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spectral.209.2E6/near/228234766\">said</a>:</p>\n<blockquote>\n<p>ooh, you mean that <code>is_bounded_exact</code> doesn't make that assumption?</p>\n</blockquote>\n<p>Yes exactly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_bounded_exact</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">c₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"bp\">∥</span>\n</code></pre></div>\n<p>I could also change this.</p>",
        "id": 228235254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614607701
    },
    {
        "content": "<p>OK so here is a mathematics question: is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i=-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> OK in that definition?</p>",
        "id": 228235423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614607761
    },
    {
        "content": "<p>From my reading of the proof of 9.6, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i=-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> is OK because this is exactly what is being proved in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">m=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> case.</p>\n<p>I will comment that like Sebastien all the complexes I see in the mathematics I've done have been nat-graded, and all the double complexes I've dealt with have been first quadrant ones, but I have certainly seen seminars where this was not the case.</p>",
        "id": 228235949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614607943
    },
    {
        "content": "<p>Does 9.6 really requires  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>M</mi><mi>c</mi><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi></mrow></msubsup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">M_c^{p,q} = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93033em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> for negative indexes? For the snake lemma the exact same proof worked in general. Here we probably need to modify a little bit the hypothesis, something like \"for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\"> j \\leq m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>\" instead of \"for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">j = 0,\\ldots, m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>...\" etc, but I have the impression that, if we want to keep <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>-graded complexes, this is the most natural think to do</p>",
        "id": 228236880,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614608271
    },
    {
        "content": "<p>The answer to that question depends on your interpretation of what it means to be &lt;=k exact in degrees &lt;= m for c&gt;=c0. There is an issue at 0.</p>",
        "id": 228237071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614608321
    },
    {
        "content": "<p>Our i is Peter's i+1 but Peter allows i=0 so we need to allow i=-1. That's all.</p>",
        "id": 228237556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614608487
    },
    {
        "content": "<p>We made some shift so we didn't have to do a subtraction, but this shift is pointless because it's integer subtraction.</p>",
        "id": 228237752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614608545
    },
    {
        "content": "<p>Another issue is that we have changed &lt;=k-exact to &lt;=(k,K)-exact and have failed to correctly translate the statement of the theorem -- we have a spurious K about which we know nothing and our goal involves proving |a|&lt;=K*|b| which is clearly impossible right now.</p>",
        "id": 228237939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614608612
    },
    {
        "content": "<p>I didn't check, so maybe this is completely false, but I mean using the current definition of <code>is_bounded_exact</code>. My understanding is that Peter wrote \"which is defined to be 0 when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i= 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>\" just because, strictly speaking, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>C</mi><mi>c</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">C^{i-1}_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.071664em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span> doesn't make sense for him and that in the final application this will automatic for us since we will apply the general results to a particular case that have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> in negative degrees. But I don't know if all the proofs works in general</p>",
        "id": 228238633,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614608819
    },
    {
        "content": "<p>I need to think about this a little more, but right now our conclusion of 9.6 is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">M.row</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_bounded_exact</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k₀</span> <span class=\"bp\">*</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and I believe that the \"max\" is a consequence of the Scholze packing trick where one constant is used to do two jobs. Instead of <code>(max A B) K</code> it should be <code>A B</code>, and some but not all of the things called k' or k_0 should change to K's.</p>",
        "id": 228238953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614608915
    },
    {
        "content": "<p>Riccardo you are right that the proofs might work in general. This hadn't occurred to me.</p>",
        "id": 228239463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614609091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I think we need some assumptions here, contrary to normed_snake, because we want to do an induction, so we need a base case.</p>",
        "id": 228239495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614609105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I don't think the indices are different between Analytic.pdf and the source code. We only shift a temporary index.</p>",
        "id": 228239676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614609152
    },
    {
        "content": "<p>Like, the complexes have their objects in the same spot, but then we talk about <code>C (i + 1)</code> for <code>i = 0,1,2, m-1</code> instead of <code>C i</code> for <code>i = 1,...,m</code></p>",
        "id": 228239839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614609199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> sure, something should be changed here to start the induction. What I am saying is that, if this not too difficult, we can just find the correct assumption that makes the proof working and that is obviously  satisfied if all the negative terms are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>",
        "id": 228239914,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614609225
    },
    {
        "content": "<p>yes, that's also what I was hoping to do by assuming <code>d i = 0</code> for negative <code>i</code></p>",
        "id": 228240078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614609261
    },
    {
        "content": "<p>But I don't know whether that's strong enough</p>",
        "id": 228240104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614609270
    },
    {
        "content": "<p>Unfortunately I need to go to meetings now and I am not sure I'll have time to look at this again until after my next lecture on Thursday afternoon. But I'm happy to keep working on it then.</p>",
        "id": 228240308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614609358
    },
    {
        "content": "<p>I guess we could change <code>is_bounded_exact</code> to ignore negative <code>i</code></p>",
        "id": 228240725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614609491
    },
    {
        "content": "<p>Or <code>i &lt; -1</code>, if we need the <code>-1</code> case</p>",
        "id": 228240788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614609515
    },
    {
        "content": "<p>Because we have randomly changed i to i-1 (for no obvious reason as far as I can see, i is an integer) we need the -1 case.</p>",
        "id": 228241071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614609611
    },
    {
        "content": "<p>One reason for why one might want Z-indexed complexes is because you might want to use the shift functors.</p>",
        "id": 228241258,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614609671
    },
    {
        "content": "<p>We could change it back and then ask for i : nat, we would still have (i : int) - 1 but we can just use 0.</p>",
        "id": 228241282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614609679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spectral.209.2E6/near/228241071\">said</a>:</p>\n<blockquote>\n<p>Because we have randomly changed i to i-1 (for no obvious reason as far as I can see, i is an integer) we need the -1 case.</p>\n</blockquote>\n<p>well, this is simply because of the well known DTT issues right? Until we fix the definition of <code>d</code>, the statement will not type check if you use <code>i - 1</code>.</p>",
        "id": 228241580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614609772
    },
    {
        "content": "<p>On the balance of things I think int is better, or else you'll always be dealing with i=0 special cases. A long exact sequence of cohomology groups will start H^0(A)-&gt;H^0(B)... instead of 0=H^{-1}(C)-&gt;H^0(A)-&gt;...</p>",
        "id": 228241583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614609775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spectral.209.2E6/near/228238953\">said</a>:</p>\n<blockquote>\n<p>I need to think about this a little more, but right now our conclusion of 9.6 is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">M.row</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_bounded_exact</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k₀</span> <span class=\"bp\">*</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and I believe that the \"max\" is a consequence of the Scholze packing trick where one constant is used to do two jobs. Instead of <code>(max A B) K</code> it should be <code>A B</code>, and some but not all of the things called k' or k_0 should change to K's.</p>\n</blockquote>\n<p>Yes, this is clear. And we won't know the correct constants before carefully proving the theorem.</p>",
        "id": 228242317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614610024
    },
    {
        "content": "<p>Well we won't be proving the theorem as it currently stands :-)</p>",
        "id": 228242439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614610065
    },
    {
        "content": "<p>It would be nice if we could just start formalising it, and fix the conclusion along the way</p>",
        "id": 228242447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614610068
    },
    {
        "content": "<p>Yes I agree! I just hadn't realised that this was the game we were playing :-)</p>",
        "id": 228242551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614610093
    },
    {
        "content": "<p>Would it make sense to add assumptions that things are <code>is_bounded_exact</code> for certain negative <code>m</code> to the assumptions?</p>",
        "id": 228242613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614610115
    },
    {
        "content": "<p>That might make the whole thing provable again</p>",
        "id": 228242643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614610125
    },
    {
        "content": "<p>The issue right now is that the constants are all wrong</p>",
        "id": 228242691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614610148
    },
    {
        "content": "<p>I mean literally wrong</p>",
        "id": 228242710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614610156
    },
    {
        "content": "<p>Riccardo has pointed out that it might be the case that actually the proof works even if we don't assume the M_ij are zero for i,j&lt;0 because the proof we have in the document for -1&lt;=(our ) i might just work in general</p>",
        "id": 228242968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614610246
    },
    {
        "content": "<p>The issue right now is that we have an input K which is not assumed to be k unlike in the paper, and an output K which is supposed to be a completely different number</p>",
        "id": 228243075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614610297
    },
    {
        "content": "<p>I can fix this, I just need to write a two hour workshop first</p>",
        "id": 228243141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614610319
    },
    {
        "content": "<p>Sure, provable modulo constants <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 228243303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614610369
    },
    {
        "content": "<p>Just a comment, though I have only superficially followed the evolution of this branch.</p>\n<p>I have actually used (co-)homology in degree -1, in the context of simplicial complexes.  In that case, especially <em>reduced</em> homology, is much easier to work with, but it does assign a generator to one of the \"empty\" simplicial complexes.  This is actually important, since it allows induction arguments to start one step earlier than you would think reasonable and all proofs are much simpler.</p>\n<p>In general, even when complexes and (co-)homology have \"positive\" degrees, I always find it convenient to be able to \"lean onto the boundary\" of where the cohomology groups are interesting and begin inductions at a stage where they are zero (or almost zero), and then have fewer duplicate arguments.</p>\n<p>I hope that this makes some amount of sense!</p>",
        "id": 228244127,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614610656
    },
    {
        "content": "<p>I'm going to make <code>m</code> an integer in that file</p>",
        "id": 228246225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614611354
    },
    {
        "content": "<p>Maybe we want the <code>\\eps</code> to be an <code>nnreal</code>, and use <code>nnnorm</code> instead of norms, to stay in the nonnegative world.</p>",
        "id": 228248521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614612142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spectral.209.2E6/near/228243303\">said</a>:</p>\n<blockquote>\n<p>Sure, provable modulo constants <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>\n</blockquote>\n<p>Can this be formalized with filters?</p>",
        "id": 228258335,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614615478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spectral.209.2E6/near/228246225\">said</a>:</p>\n<blockquote>\n<p>I'm going to make <code>m</code> an integer in that file</p>\n</blockquote>\n<p>In the end I haven't done this yet.</p>",
        "id": 228361532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614667417
    },
    {
        "content": "<p>My current feeling is that it should be sufficient to add the assumptions that the <code>d</code>-edges that enter the first quadrant are all <code>0</code> + the assumption that <code>row 0</code> is bounded exact in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\le -1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 228362000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614667756
    },
    {
        "content": "<p>I moved everything about 9.6 to <code>normed_spectral.lean</code></p>",
        "id": 228363356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614668673
    },
    {
        "content": "<p>I think we need to be very careful with how we phrase 9.6.</p>",
        "id": 228399323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614687252
    },
    {
        "content": "<p>Because, when working with <code>nat</code>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>i</mi><mo>≤</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\forall i \\le m - 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is an empty condition when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">m = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, in ordinary maths. But in lean it isn't...</p>",
        "id": 228399401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614687309
    },
    {
        "content": "<p>On the other hand, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>i</mi><mo>&lt;</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\forall i &lt; m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>, would work...</p>",
        "id": 228399453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614687344
    },
    {
        "content": "<p>These sort of annoyances will have to be sorted out (-;</p>",
        "id": 228399465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614687359
    },
    {
        "content": "<p>Update:</p>\n<ul>\n<li><code>m</code> is now an integer</li>\n<li>hence the off-by-one-shift could be undone, I did this</li>\n<li>half of the case <code>m = 0</code> is now proven</li>\n</ul>",
        "id": 228474204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614714828
    },
    {
        "content": "<p>For the inductive step, we'll need to fold up systems of complexes.<br>\nA helpful ingredient would be to know that <code>NormedGroup</code> has cokernels (and that they satisfy the <code>is_quotient</code> predicate that <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> defined).</p>",
        "id": 228573282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614769266
    },
    {
        "content": "<p>After that, we need a functor that takes a cochain complex (of objects in a category with zero morphisms and cokernels), and that sends <code>C</code> to the complex</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>fold : C1 / C0 ---&gt; C2 ---&gt; C3 ---&gt; ...\n</code></pre></div>",
        "id": 228573666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614769466
    },
    {
        "content": "<p>As long as we do not have <code>nat</code>-indexed complexes, I suggest that we just discard all the objects indexed by negative indices</p>",
        "id": 228573806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614769552
    },
    {
        "content": "<p>Once <code>fold</code> is defined, we should have <code>system_of_complexes.fold</code>, and prove that <code>fold C</code> is bounded exact in degrees <code>\\le m-1</code> iff <code>C</code> is bounded exact in degrees <code>\\le m</code> (under suitable assumptions, such as <code>d : C_{-1} -&gt; C_0</code> = <code>0</code>, and <code>C</code> is bounded exact in degrees <code>\\le -1</code>)</p>",
        "id": 228574006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614769676
    },
    {
        "content": "<p>Idem for weak exactness</p>",
        "id": 228574100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614769711
    },
    {
        "content": "<p>Once that is done, we want <code>system_of_double_complexes.fold</code> which applies the <code>fold</code> above to all of its rows.<br>\nWith that construction under our belt, the inductive step in the proof of 9.6 should be easy.</p>",
        "id": 228574219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614769774
    },
    {
        "content": "<p>Probably a difference in terminology, but I would call the <code>fold</code> operation <code>soft_truncation</code> at 1.</p>",
        "id": 228576536,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614771142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> ok, that's a useful tip!</p>",
        "id": 228577829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614771870
    },
    {
        "content": "<p>Does that include the shift? Or would <code>soft_truncation</code> place <code>C1/C0</code> in degree 1?</p>",
        "id": 228577864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614771903
    },
    {
        "content": "<p>This does not include the shift, so there is a slight difference, right.</p>",
        "id": 228578148,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614772051
    },
    {
        "content": "<p>Well, I guess we could factor it into those two steps, that doesn't hurt.</p>",
        "id": 228578303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614772151
    },
    {
        "content": "<p>After all, we already have the <code>shift</code> functor.</p>",
        "id": 228578326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614772163
    },
    {
        "content": "<p>And presumably <code>soft_truncation</code> would take <code>i</code> as argument, and truncate at degree <code>i</code>, instead of only at <code>0</code>.</p>",
        "id": 228578382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614772204
    },
    {
        "content": "<p>On the other hand, for <code>i = 0</code>, it can very nicely be defined using the equation compiler.</p>",
        "id": 228578497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614772263
    },
    {
        "content": "<p>With this you don't seem to be far from defining the standard t-structure <a href=\"https://en.m.wikipedia.org/wiki/T-structure\">https://en.m.wikipedia.org/wiki/T-structure</a></p>",
        "id": 228579264,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614772711
    },
    {
        "content": "<p>Hah, that would actually be quite nice, if we could get to that definition.</p>",
        "id": 228581007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614773570
    },
    {
        "content": "<p>Hmm, here we quotient by the image of <code>C0</code>, instead of the kernel of <code>C1 -&gt; C2</code> (which is what is usually done with the truncation functors).<br>\nThe two only agree if the complex is exact at <code>C1</code>.</p>",
        "id": 228583895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614775132
    },
    {
        "content": "<p>You are right, I also noticed in the meantime.</p>",
        "id": 228587798,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614776980
    },
    {
        "content": "<p>maybe we can still call this <code>soft_truncation'</code></p>",
        "id": 228588408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614777223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spectral.209.2E6/near/228573282\">said</a>:</p>\n<blockquote>\n<p>For the inductive step, we'll need to fold up systems of complexes.<br>\nA helpful ingredient would be to know that <code>NormedGroup</code> has cokernels (and that they satisfy the <code>is_quotient</code> predicate that <span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> defined).</p>\n</blockquote>\n<p>Do you mean we need a universal property? The current situation is the following: we can take the quotient by a complete subspace, it automatically gets a <code>normed_group</code> instance and satisfies <code>is_quotient</code>. I think we have the completion of a subspace inside a complete group, so getting the quotient in general should be not too difficult. I don't what is the situation in the big group is not complete (I mean, I don't even know the mathematics).</p>",
        "id": 228591247,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614778463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> hmm, good point... my sketch was a bit too naive</p>",
        "id": 228591327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614778505
    },
    {
        "content": "<p>Because we aren't working in the category <code>CompleteNormedGroup</code></p>",
        "id": 228591364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614778519
    },
    {
        "content": "<p>And I don't think we should define it... sounds like we don't need the trouble</p>",
        "id": 228591410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614778541
    },
    {
        "content": "<p>What we need is this <code>soft_truncation'</code> functor. And maybe we can just define it directly using your <code>quotient</code> stuff. We don't have to go through the <code>cokernel</code> api provided by <code>category_theory/</code></p>",
        "id": 228591555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614778590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> btw, I moved the quotient stuff to <code>for_mathlib/normed_group_quotient.lean</code> because the rest of <code>normed_group_hom.lean</code> is currently being PRd to mathlib</p>",
        "id": 228591660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614778638
    },
    {
        "content": "<p>Did you define some sort of <code>lift</code>?</p>",
        "id": 228591683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614778653
    },
    {
        "content": "<p>We'll need some sort of universal property to define <code>soft_truncation'</code></p>",
        "id": 228591818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614778697
    },
    {
        "content": "<p>I didn't define some <code>lift</code> but getting the linear map is immediate, since the quotient is the group quotient. For continuity... let me think one minute</p>",
        "id": 228591970,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614778772
    },
    {
        "content": "<p>you only need boundedness</p>",
        "id": 228592111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614778824
    },
    {
        "content": "<p>OK, boundedness of  the lift is trivial (I thought that boundedness and continuity were equivalent... for normed space they are...)</p>",
        "id": 228592920,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614779135
    },
    {
        "content": "<p>I don't have time this afternoon, but I can write it later today</p>",
        "id": 228592970,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614779158
    },
    {
        "content": "<p>boundedness implies continuity, but I have no idea whether the converse is true in this setting</p>",
        "id": 228593828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614779444
    },
    {
        "content": "<p>Now I have the impression that a small modification the proof that the seminorm on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mi mathvariant=\"normal\">/</mi><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X/Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is actually a norm only requires <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> to be closed in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> (now the assumption is completeness), without assuming that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is complete. The kernel of a continuous map is always closed, so maybe have cokernel without too much troubles</p>",
        "id": 228596568,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614780404
    },
    {
        "content": "<p>Even better, the proof of this more general fact seems easier than the current proof <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228597642,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614780782
    },
    {
        "content": "<p>Nice... that seems to be a general pattern (-;</p>",
        "id": 228600692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614781843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> I'm confused about the base case of the normed spectral sequence 9.6.</p>",
        "id": 229737449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615407971
    },
    {
        "content": "<p>OK...</p>",
        "id": 229737518,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615407994
    },
    {
        "content": "<p>Part of the confusion might be because now <code>k</code> is split into two constants <code>k</code> and <code>K</code>, but I don't think that's everything.</p>",
        "id": 229737530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615407997
    },
    {
        "content": "<p>I seem to be getting <code>K * (H + 1/2)</code></p>",
        "id": 229737575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408013
    },
    {
        "content": "<p>Instead of <code>2 * K * H</code></p>",
        "id": 229737594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408020
    },
    {
        "content": "<p>oh, ok, that's not too bad then :-)</p>",
        "id": 229737647,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408035
    },
    {
        "content": "<p>Hmm, is this in Lean or on paper?</p>",
        "id": 229737903,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408120
    },
    {
        "content": "<p>it's not completely in Lean yet.</p>",
        "id": 229737939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408132
    },
    {
        "content": "<p>Because if it's on paper, I would think you do the wrong manipulation</p>",
        "id": 229737966,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408142
    },
    {
        "content": "<p>You need to subtract the term <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mi>ϵ</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>c</mi></msub><mi mathvariant=\"normal\">∣</mi><msub><mi mathvariant=\"normal\">∣</mi><msubsup><mi>M</mi><mi>c</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msubsup></msub></mrow><annotation encoding=\"application/x-tex\">k\\epsilon ||x_c||_{M_c^{0,0}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.17712em;vertical-align:-0.42711999999999994em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3840000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.944em;\"><span style=\"top:-2.3412571428571427em;margin-left:-0.10903em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-2.9836857142857145em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15874285714285719em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.42711999999999994em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 229738023,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408162
    },
    {
        "content": "<p>I guess that's now <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mi>ϵ</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>c</mi></msub><mi mathvariant=\"normal\">∣</mi><msub><mi mathvariant=\"normal\">∣</mi><msubsup><mi>M</mi><mi>c</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msubsup></msub></mrow><annotation encoding=\"application/x-tex\">K\\epsilon||x_c||_{M_c^{0,0}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.17712em;vertical-align:-0.42711999999999994em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathnormal\">ϵ</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3840000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.944em;\"><span style=\"top:-2.3412571428571427em;margin-left:-0.10903em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-2.9836857142857145em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15874285714285719em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.42711999999999994em;\"><span></span></span></span></span></span></span></span></span></span>, but never mind</p>",
        "id": 229738199,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408211
    },
    {
        "content": "<p>Ooh, I wasn't planning on doing that <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 229738204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408212
    },
    {
        "content": "<p>I see... then I need to think about the correct manipulation again</p>",
        "id": 229738260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408228
    },
    {
        "content": "<p>I thought <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><msubsup><mi>d</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∥</mi><mo>≤</mo><mi mathvariant=\"normal\">∥</mi><msubsup><mi>d</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow></msub><mo stretchy=\"false\">)</mo><mo>−</mo><msubsup><mi>h</mi><mrow><msup><mi>k</mi><mrow><msup><mrow></mrow><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mn>2</mn></mrow></msup><mi>c</mi></mrow><mn>0</mn></msubsup><mo stretchy=\"false\">(</mo><msubsup><mi>d</mi><mrow><msup><mi>k</mi><mrow><msup><mrow></mrow><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mn>2</mn></mrow></msup><mi>c</mi></mrow><mrow><msup><mrow></mrow><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∥</mi><mo>+</mo><mi mathvariant=\"normal\">∥</mi><msubsup><mi>h</mi><mrow><msup><mi>k</mi><mrow><msup><mrow></mrow><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mn>2</mn></mrow></msup><mi>c</mi></mrow><mn>0</mn></msubsup><mo stretchy=\"false\">(</mo><msubsup><mi>d</mi><mrow><msup><mi>k</mi><mrow><msup><mrow></mrow><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mn>2</mn></mrow></msup><mi>c</mi></mrow><mrow><msup><mrow></mrow><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">\\|d^{0,0}_{k'c}(x_{k'c})\\| \\le \\|d^{0,0}_{k'c}(x_{k'c}) - h^0_{k^{'2}c}(d^{'0,0}_{k^{'2}c}(x))\\| + \\|h^0_{k^{'2}c}(d^{'0,0}_{k^{'2}c}(x))\\| </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2333239999999999em;vertical-align:-0.3013079999999999em;\"></span><span class=\"mord\">∥</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.932016em;\"><span style=\"top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3013079999999999em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2333239999999999em;vertical-align:-0.3013079999999999em;\"></span><span class=\"mord\">∥</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.932016em;\"><span style=\"top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3013079999999999em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.500568em;vertical-align:-0.4401799999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.27802em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8928285714285715em;\"><span style=\"top:-2.8928285714285713em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6068285714285713em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8495600000000001em;\"><span style=\"top:-2.84956em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.55556em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.42198em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.060388em;\"><span style=\"top:-2.2598200000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8928285714285715em;\"><span style=\"top:-2.8928285714285713em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6068285714285713em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8495600000000001em;\"><span style=\"top:-2.84956em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.55556em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278285714285715em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4401799999999999em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.500568em;vertical-align:-0.4401799999999999em;\"></span><span class=\"mord\">∥</span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.27802em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8928285714285715em;\"><span style=\"top:-2.8928285714285713em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6068285714285713em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8495600000000001em;\"><span style=\"top:-2.84956em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.55556em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.42198em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.060388em;\"><span style=\"top:-2.2598200000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8928285714285715em;\"><span style=\"top:-2.8928285714285713em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.6068285714285713em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8495600000000001em;\"><span style=\"top:-2.84956em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.55556em;\"></span><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278285714285715em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4401799999999999em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">∥</span></span></span></span></p>",
        "id": 229738845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408407
    },
    {
        "content": "<p>Is that one of the manipulations that you had in mind?</p>",
        "id": 229738899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408426
    },
    {
        "content": "<p>That sounds too complicated</p>",
        "id": 229738909,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408429
    },
    {
        "content": "<p>Do you agree with second displayed inequality on page 61?</p>",
        "id": 229739012,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408450
    },
    {
        "content": "<p>I'm stuck on the second <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> in that display</p>",
        "id": 229739170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408497
    },
    {
        "content": "<p>Well, I managed to prove it using the beast I posted above</p>",
        "id": 229739248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408522
    },
    {
        "content": "<p>Ah, yes, sorry, I guess this uses what you've written</p>",
        "id": 229739254,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408524
    },
    {
        "content": "<p>Ok, and then you need to pass from the final part of that 2nd display to the conclusion</p>",
        "id": 229739450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408577
    },
    {
        "content": "<p>And I thought this would just reuse the final display on p60</p>",
        "id": 229739509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408595
    },
    {
        "content": "<p>Yes. But if you set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>k</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\epsilon=\\tfrac 1{2k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, then the first summand on the right is half of the term on the left</p>",
        "id": 229739546,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408611
    },
    {
        "content": "<p>So you can subtract, leaving half of the left-hand side, so multiplying by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> gives what I claim</p>",
        "id": 229739613,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408629
    },
    {
        "content": "<p>ooh, of course <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 229739653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408646
    },
    {
        "content": "<p>gotcha, you're not just chaining them</p>",
        "id": 229739683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408655
    },
    {
        "content": "<p>Yeah, it's a confusing part! Usually you never do that thing</p>",
        "id": 229739711,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408669
    },
    {
        "content": "<p>I should have maybe made that more explicit</p>",
        "id": 229739724,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408677
    },
    {
        "content": "<p>This argument actually feels \"wrong\" to me, but I think it works</p>",
        "id": 229739844,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615408708
    },
    {
        "content": "<p>Ok, this also means that I canceled <code>K</code> too early</p>",
        "id": 229739975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615408763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> thanks for getting me unstuck there! The base case is now sorry-free in lean</p>",
        "id": 229747460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615411472
    },
    {
        "content": "<p>In some sense that felt like most of the work -- the inductive step follows from something else, right?</p>",
        "id": 229804320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615446486
    },
    {
        "content": "<p>If we define <code>shift</code> to swap signs, then it isn't clear to me why <code>shift C</code> is weak bounded exact if <code>C</code> is.</p>",
        "id": 229842202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615466849
    },
    {
        "content": "<p>I end up with goals like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">shift.obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">i'</span><span class=\"o\">)),</span> <span class=\"bp\">∥⇑</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">⇑-</span><span class=\"n\">C.d</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"bp\">⇑-</span><span class=\"n\">C.d</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))),</span> <span class=\"bp\">∥⇑</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">C.d</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥⇑</span><span class=\"o\">(</span><span class=\"n\">C.d</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span>\n</code></pre></div>",
        "id": 229842347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615466928
    },
    {
        "content": "<p>This isn't very readable, but the problem is that on one side we have <code>res x - - C.d _ _y</code> and on the other side we have only one <code>-</code>.</p>",
        "id": 229842401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615466963
    },
    {
        "content": "<p>I can't parse what's written, but how can there be a problem here? Maybe just change the sign of y again, or so?</p>",
        "id": 229843337,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615467438
    },
    {
        "content": "<p>Lol, I need to take a break I guess (-; <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 229843908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615467668
    },
    {
        "content": "<p>You are completely right</p>",
        "id": 229843924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615467672
    },
    {
        "content": "<p>OK so I am working on 9.6. At some point in the proof we need to take the entire double complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{p,q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span></span></span></span> and shift it all one to the left, giving us a new complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N^{p,q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span></span></span></span> with the \"0th column\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mrow><mi>p</mi><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N^{p,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> defined as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mi>p</mi><mo separator=\"true\">,</mo><mn>1</mn></mrow></msup><mi mathvariant=\"normal\">/</mi><msup><mi>M</mi><mrow><mi>p</mi><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{p,1}/M^{p,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> with its quotient norm. The claim (as I understand it) is that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> satisfies all the conditions in the statement of 9.6 for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> then (with possibly different constants) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> satisfies all the conditions for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">m-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. The one I'm stuck on is condition (3), the case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">q=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> (using Scholze's notation), and I need to verify equation (9.2). Again sticking to notation in the paper and forgetting all c's and k's, I need to verify that for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N^{0,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>L</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>ϵ</mi><mi mathvariant=\"normal\">∣</mi><mi>r</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|L(x)| \\leq\\epsilon|res(x)|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span></span></span></span>. Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is an abelian group hom (a sum of three homs actually, two of them with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>±</mo></mrow><annotation encoding=\"application/x-tex\">\\pm</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">±</span></span></span></span> signs) from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup><mo>:</mo><mo>=</mo><msup><mi>M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></msup><mi mathvariant=\"normal\">/</mi><msup><mi>M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N^{0,0} :=M^{0,1}/M^{0,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span>  to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup><mo>:</mo><mo>=</mo><msup><mi>M</mi><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></msup><mi mathvariant=\"normal\">/</mi><msup><mi>M</mi><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">N^{1,0} := M^{1,1}/M^{1,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> induced by some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>:</mo><msup><mi>M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></msup><mo>→</mo><msup><mi>M</mi><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">L' : M^{0,1}\\to M^{1,1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>, and the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> satisfies the conditions of 9.6 tells us that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msup><mi>L</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>x</mi><mo>~</mo></mover><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>ϵ</mi><mi mathvariant=\"normal\">∣</mi><mi>r</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>x</mi><mo>~</mo></mover><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|L'(\\tilde{x})| \\leq\\epsilon|res(\\tilde{x})|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6678599999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.35em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.22222em;\"><span class=\"mord\">~</span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6678599999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.35em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.22222em;\"><span class=\"mord\">~</span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>x</mi><mo>~</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\tilde{x}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6678599999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6678599999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.35em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.22222em;\"><span class=\"mord\">~</span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{0,1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>. But because the quotient map is not an isometry I don't see how to now conclude that (9.2) is true for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">q=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> case.</p>",
        "id": 230259997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615747428
    },
    {
        "content": "<p>Aah! As well as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">L'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> I also have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo>:</mo><msup><mi>M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup><mo>→</mo><msup><mi>M</mi><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">L''  : M^{0,0}\\to M^{1,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msup><mi>L</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>ϵ</mi><mi mathvariant=\"normal\">∣</mi><mi>r</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|L''(y)|\\leq\\epsilon|res(y)|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><msup><mi>M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y\\in M^{0,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span>. Am I supposed to be using this somehow? This is condition (3) when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">q=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>; the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">L'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> in the previous post was coming from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">q=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</p>",
        "id": 230261589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615749188
    },
    {
        "content": "<p>This sounds exactly like the annoyance we already had in 9.10... if the issue persists, I'll think about it tomorrow</p>",
        "id": 230269516,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615757506
    },
    {
        "content": "<p>I can't use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">L''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> because I don't know any relation between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>h</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><mn>0</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">h^0_{k'c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.097216em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>h</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><mn>1</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">h^1_{k'c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.097216em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span> (for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>). I had assumed that to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>h</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">h^0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> I just used <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>h</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><mn>1</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">h^1_{k'c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.097216em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. But now I realise that in fact maybe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">L'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> doesn't even reduce to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> the way I thought things worked because in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> world there is no <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>d</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><mrow><mo mathvariant=\"normal\">′</mo><mrow><mn>1</mn><mo separator=\"true\">,</mo><mi>q</mi><mo>−</mo><mn>1</mn></mrow></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">d'^{1,q-1}_{k'c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2333239999999999em;vertical-align:-0.3013079999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.932016em;\"><span style=\"top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3013079999999999em;\"><span></span></span></span></span></span></span></span></span></span> term when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">d=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> but in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> world you have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">q=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> so there's an extra term -- oh but it's in the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{1,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> so makes no difference. </p>\n<p>To summarise, my worry is if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msup><mi>M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x\\in M^{0,1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> is close to the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{0,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span>, because then in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> world the norm of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> on the right hand side might suddenly drop after you take the quotient, breaking the inquality. If we could say something like \"x in M^{0,1} close to M^{0,0} implies L(x) in M^{1,1} close to something in M^{1,0}\" we might be OK, but I don't seem to have any control over the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>h</mi><mn>1</mn></msup><mo>:</mo><msup><mi>M</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>2</mn></mrow></msup><mo>→</mo><msup><mi>M</mi><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">h^1:M^{0,2}\\to M^{1,1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> term.</p>",
        "id": 230279913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615766340
    },
    {
        "content": "<p>I agree that the issue seems similar to what we saw in 9.10. In this case, I don't see that the issue goes away by assuming that everything is complete.</p>",
        "id": 230299236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615788524
    },
    {
        "content": "<p>But it might certainly be the case that we are just chaining some inequalities in the wrong order again.</p>",
        "id": 230299294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615788581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Ah, I think you caught something here; I think it's even a bit more subtle than in 9.10. I'm quite sure that the constants will change more than I claimed so far. Let me try to analyze what's happening, and get back to you</p>",
        "id": 230314652,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615800037
    },
    {
        "content": "<p>OK, I'm getting myself seriously confused here. It may take a moment.</p>",
        "id": 230319008,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615802461
    },
    {
        "content": "<p>Ah, I think I see!</p>\n<p>One has to phrase (9.2) better. Namely, what's inside the absolute value on the left-hand side defines a map of complexes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>M</mi><mrow><msup><mi>k</mi><mrow><mo mathvariant=\"normal\">′</mo><mn>2</mn></mrow></msup><mi>c</mi></mrow><mrow><mn>0</mn><mo separator=\"true\">,</mo><mo>∙</mo></mrow></msubsup><mo>→</mo><msubsup><mi>M</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><mrow><mn>1</mn><mo separator=\"true\">,</mo><mo>∙</mo></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">M_{k'^2c}^{0,\\bullet}\\to M_{k'c}^{1,\\bullet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.269636em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.932016em;\"><span style=\"top:-2.36238em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2333239999999999em;vertical-align:-0.3013079999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.932016em;\"><span style=\"top:-2.3986920000000005em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3013079999999999em;\"><span></span></span></span></span></span></span></span></span></span>. One has to ask that this map factors as a composite of the restriction <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>M</mi><mrow><msup><mi>k</mi><mrow><mo mathvariant=\"normal\">′</mo><mn>2</mn></mrow></msup><mi>c</mi></mrow><mrow><mn>0</mn><mo separator=\"true\">,</mo><mo>∙</mo></mrow></msubsup><mo>→</mo><msubsup><mi>M</mi><mi>c</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mo>∙</mo></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">M_{k'^2c}^{0,\\bullet}\\to M_c^{0,\\bullet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.269636em;vertical-align:-0.33762000000000003em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.932016em;\"><span style=\"top:-2.36238em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33762000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.061108em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span> and a map of complexes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>M</mi><mi>c</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mo>∙</mo></mrow></msubsup><mo>→</mo><msubsup><mi>M</mi><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mi>c</mi></mrow><mrow><mn>1</mn><mo separator=\"true\">,</mo><mo>∙</mo></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">M_c^{0,\\bullet}\\to M_{k'c}^{1,\\bullet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.061108em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2333239999999999em;vertical-align:-0.3013079999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.932016em;\"><span style=\"top:-2.3986920000000005em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.1809080000000005em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3013079999999999em;\"><span></span></span></span></span></span></span></span></span></span> that is (in each degree) of norm <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\leq\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span>.</p>",
        "id": 230320560,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615803247
    },
    {
        "content": "<p>(Actually, maybe it's not necessary that this is a map of complexes?)</p>",
        "id": 230320614,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615803276
    },
    {
        "content": "<p>In any case, this stronger condition is verified when 9.6 is applied in the proof of 9.5.</p>",
        "id": 230320649,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615803293
    },
    {
        "content": "<p>I'll try to rewrite the file to incorporate the change (and in the process check more carefully whether this ought to work)</p>",
        "id": 230320740,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615803325
    },
    {
        "content": "<p>OK, it <em>should</em> be map of complexes, but anyway it is.</p>",
        "id": 230320877,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615803385
    },
    {
        "content": "<p>Great! Let's see if this fixes it</p>",
        "id": 230320930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615803420
    },
    {
        "content": "<p>Well, let's wait for a moment...</p>",
        "id": 230321081,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615803499
    },
    {
        "content": "<p>OK, I think this works <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span>  New version of Analytic.pdf is on my homepage</p>",
        "id": 230324593,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615805377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> So now the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>±</mo></mrow><annotation encoding=\"application/x-tex\">\\pm</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">±</span></span></span></span> signs are gone. That is intentional, right? (I didn't check the proof of 9.5 yet)</p>",
        "id": 230326459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615806256
    },
    {
        "content": "<p>Yes; I checked again how homotopies work, and apparently they shouldn't introduce minus signs there</p>",
        "id": 230326931,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615806520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> I can confirm that lean thinks the problem with 9.6 is now solved <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 230347719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615816532
    },
    {
        "content": "<p>There are two <code>sorry</code>s left. One related to the normed snake lemma, the other some annoying inequality involving cokernels. But both seem perfectly doable.</p>",
        "id": 230347869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615816586
    },
    {
        "content": "<p>Ah, that's great to hear :-)!</p>",
        "id": 230349246,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615817061
    },
    {
        "content": "<p>I did get a little worried this morning; in the previous formulation, there was no way to get the induction to work (even if one was willing to change the constants).</p>",
        "id": 230350097,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615817367
    },
    {
        "content": "<p>In the previous proof, I had some half-assed attempt at setting up that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> in an ad-hoc fashion. But that wouldn't have worked, because it was too local.</p>",
        "id": 230351630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615817968
    },
    {
        "content": "<p>Your current solution works great (the proofs even became shorter) because it's just a princpled approach directly at the start of the list of assumptions</p>",
        "id": 230351744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818003
    },
    {
        "content": "<p>Instead of hidden deep inside a subproof</p>",
        "id": 230351772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615818013
    },
    {
        "content": "<p>I didn't check this formally, but I don't think I used in the proofs that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> is a map of complexes.</p>",
        "id": 230394580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615832402
    },
    {
        "content": "<p>I think one uses it when implicitly arguing that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>x</mi><mo>~</mo></mover><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(\\tilde{x})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6678599999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.35em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.22222em;\"><span class=\"mord\">~</span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> maps to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> in the notation of the manuscript</p>",
        "id": 230403695,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615836410
    },
    {
        "content": "<p>Hah, you are right! But in the Lean proof that was hidden away quite well. It's maybe a bit of an evil proof...</p>",
        "id": 230407399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615837968
    },
    {
        "content": "<p>Because it doesn't make this explicit</p>",
        "id": 230407441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615837990
    },
    {
        "content": "<p>Well, I guess it's about the same level of explicit as the proof in the PDF</p>",
        "id": 230407477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615838012
    },
    {
        "content": "<p>In fact, I guess it's used in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>δ</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\delta^{0,0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> for the truncated double complex.</p>",
        "id": 230407701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615838091
    },
    {
        "content": "<p>That's right</p>",
        "id": 230409475,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615838726
    },
    {
        "content": "<p>Well it's great if Lean is able to figure this out itself</p>",
        "id": 230409555,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615838754
    },
    {
        "content": "<p>The other outstanding sorry for 9.6 is now also filled in. So after the generalization to <code>seminormed_group</code>, all of 9.6 should be done.</p>",
        "id": 230414906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615840874
    },
    {
        "content": "<p>OK, I feel like this is going in a good direction :-)</p>",
        "id": 230415189,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615841011
    },
    {
        "content": "<p>How much have you digested the proof of 9.5? Do you already have a feeling for how difficult it will be to formalize it?</p>",
        "id": 230415291,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615841048
    },
    {
        "content": "<p>To be honest, I'm feeling quite confident about it. I think I understand the global structure well. The part that I haven't looked at yet is the last bit of the proof where \"condition 3\" is checked.</p>",
        "id": 230415949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841340
    },
    {
        "content": "<p>The most hairy part will probably be 8.19</p>",
        "id": 230416021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841380
    },
    {
        "content": "<p>And the moving back end forth between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow></mrow></msup><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Hom}(\\Lambda'^{(m)}, M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">H</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">m</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">,</mo><mi>M</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>m</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Hom}(\\Lambda', M)^{m/...}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">H</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">m</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">.</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 230416278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841482
    },
    {
        "content": "<p>Because that certainly is not going to be a defeq.</p>",
        "id": 230416303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841498
    },
    {
        "content": "<p>So we can construct the Cech conerve of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda \\to \\Lambda'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and then construct the system of double complexes. But when we take columns of that, we need to build an isom to the Cech nerve of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Λ</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Hom}(\\Lambda', M) \\to \\mathrm{Hom}(\\Lambda, M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">H</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">m</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">H</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">m</span></span><span class=\"mopen\">(</span><span class=\"mord\">Λ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 230416473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841583
    },
    {
        "content": "<p>Or at least, we need to show that the columns are hypercovers.</p>",
        "id": 230416493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841595
    },
    {
        "content": "<p>But I think we should just dive in. We hit a wall, and then we learn.</p>",
        "id": 230416572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841637
    },
    {
        "content": "<p>We wrote 3 iterations of (co)chain complexes in two weeks time, and every version was better than the previous.</p>",
        "id": 230416662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spectral.209.2E6/near/230415949\">said</a>:</p>\n<blockquote>\n<p>To be honest, I'm feeling quite confident about it. I think I understand the global structure well. The part that I haven't looked at yet is the last bit of the proof where \"condition 3\" is checked.</p>\n</blockquote>\n<p>Of course there will be several inequalities where I will get hopelessly stuck because I didn't understand the details... but I'm sure we'll get past them, as we did in the past.</p>",
        "id": 230416941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841797
    },
    {
        "content": "<p>OK, that sounds great! :-)</p>",
        "id": 230417170,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615841884
    },
    {
        "content": "<p>Also, even though I am now starting to see the big picture... I have no idea how you ever came up with layer upon layer upon layer of induction arguments, inequality estimates, and generalizations into completely \"ad hoc\" directions that give you flexibility later on to make a step forward.</p>",
        "id": 230417218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841906
    },
    {
        "content": "<p>Chapeau!</p>",
        "id": 230417284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841939
    },
    {
        "content": "<p>Well, as I wrote in my e-mail, I was banging my head for a whole year against this problem, and almost got crazy over it</p>",
        "id": 230417327,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615841953
    },
    {
        "content": "<p>Yes, I can totally believe that</p>",
        "id": 230417356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615841967
    },
    {
        "content": "<p>Especially because I always had at least 33% of me believing I was going in an insane direction</p>",
        "id": 230417399,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615841991
    },
    {
        "content": "<p>One thing that I want to try to do is build a definition that records all of the data needed to run the proof of 9.5.</p>",
        "id": 230417579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842050
    },
    {
        "content": "<p>Hmm OK; which parts do you want to generalize?</p>",
        "id": 230417640,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842070
    },
    {
        "content": "<p>Such an abstraction usually helps in guiding lean in the right direction, and keeping things fast</p>",
        "id": 230417642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842070
    },
    {
        "content": "<p>Ideally <code>Mbar r' S</code>, and maybe even the construction of the system of complexes.</p>",
        "id": 230417690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842094
    },
    {
        "content": "<p>Aha. Well you need that Lemma 9.8 is true for this</p>",
        "id": 230417865,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842151
    },
    {
        "content": "<p>So it would be something like: given a functor <code>System : ProFinFiltPseuNormGrpWithTinv -&gt; SystemOfComplexes</code> that satisfies some homotopy condition...</p>",
        "id": 230417868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842152
    },
    {
        "content": "<p>Yes, so <code>9.8</code> will become an axiom</p>",
        "id": 230417890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842166
    },
    {
        "content": "<p>Hmm, but maybe more than that...</p>",
        "id": 230417936,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842188
    },
    {
        "content": "<p>And then you build <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mrow><mo mathvariant=\"normal\">′</mo><mrow><mo stretchy=\"false\">(</mo><mo>∙</mo><mo stretchy=\"false\">)</mo></mrow></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda'^{(\\bullet)}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">∙</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span>, and use that to construct the system of double complexes.</p>",
        "id": 230417982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842207
    },
    {
        "content": "<p>Then you require as axiom that the columns are hypercovers.</p>",
        "id": 230418000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842218
    },
    {
        "content": "<p>Ah</p>",
        "id": 230418002,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842218
    },
    {
        "content": "<p>And also admissibility becomes an axiom.</p>",
        "id": 230418021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842228
    },
    {
        "content": "<p>But I haven't thought much further beyond that.</p>",
        "id": 230418123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842263
    },
    {
        "content": "<p>Hmm... OK... I'm slightly afraid there'll be lots of axioms</p>",
        "id": 230418132,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842266
    },
    {
        "content": "<p>9.2 has to enter the picture as well.</p>",
        "id": 230418144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842271
    },
    {
        "content": "<p>Right</p>",
        "id": 230418160,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842278
    },
    {
        "content": "<p>Yes, but Lean doesn't care about having a list of 25 axioms.</p>",
        "id": 230418200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842298
    },
    {
        "content": "<p>Sure... I think I can see your point, it may also help in digesting this proof to analyze it in this way</p>",
        "id": 230418301,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842346
    },
    {
        "content": "<p>Just to illustrate: here is the output of <code>#print linear_ordered_comm_ring</code></p>",
        "id": 230418461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842414
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class, protect_proj list.nil.{0} name]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">linear_ordered_comm_ring.add</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">linear_ordered_comm_ring.add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span><span class=\"o\">)</span>\n<span class=\"n\">linear_ordered_comm_ring.zero</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span>\n<span class=\"n\">linear_ordered_comm_ring.zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">linear_ordered_comm_ring.add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">linear_ordered_comm_ring.neg</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">linear_ordered_comm_ring.sub</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">linear_ordered_comm_ring.sub_eq_add_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"try_refl_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)</span>\n<span class=\"n\">linear_ordered_comm_ring.add_left_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">linear_ordered_comm_ring.add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"n\">linear_ordered_comm_ring.mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">linear_ordered_comm_ring.mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span><span class=\"o\">)</span>\n<span class=\"n\">linear_ordered_comm_ring.one</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span>\n<span class=\"n\">linear_ordered_comm_ring.one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">linear_ordered_comm_ring.mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">linear_ordered_comm_ring.left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span>\n<span class=\"n\">linear_ordered_comm_ring.right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span>\n<span class=\"n\">linear_ordered_comm_ring.le</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">linear_ordered_comm_ring.lt</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">linear_ordered_comm_ring.le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">linear_ordered_comm_ring.le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span>\n<span class=\"n\">linear_ordered_comm_ring.lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"order_laws_tac\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">)</span>\n<span class=\"n\">linear_ordered_comm_ring.le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">linear_ordered_comm_ring.add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c_1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"n\">linear_ordered_comm_ring.zero_le_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n<span class=\"n\">linear_ordered_comm_ring.mul_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">linear_ordered_comm_ring.le_total</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">linear_ordered_comm_ring.decidable_le</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">has_le.le</span>\n<span class=\"n\">linear_ordered_comm_ring.decidable_eq</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span>\n<span class=\"n\">linear_ordered_comm_ring.decidable_lt</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">has_lt.lt</span>\n<span class=\"n\">linear_ordered_comm_ring.exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n<span class=\"n\">linear_ordered_comm_ring.mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 230418494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842429
    },
    {
        "content": "<p>Bah</p>",
        "id": 230418507,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842438
    },
    {
        "content": "<p>Of course those are auto-generated from other definitions lower in the hierarchy. But still, this is how lean thinks of linear ordered commutative rings under the hood.</p>",
        "id": 230418566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842471
    },
    {
        "content": "<p>Fun! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 230418655,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842506
    },
    {
        "content": "<p>With 9.6 we already did something like this, on a smaller scale. (And you do it in the pdf as well, in some sense.)</p>",
        "id": 230418668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842512
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 230418715,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842531
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The assumptions on `M` in Proposition 9.6 bundled into a structure. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">normed_spectral_conditions</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">system_of_double_complexes.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">k'</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">H</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">col_exact</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M.col</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">row_exact</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M.row</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">},</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">q'</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"mi\">1</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h_bound_by</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq'</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">q'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)],</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">q'</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.X</span> <span class=\"n\">c</span> <span class=\"mi\">1</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bound_by</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"c1\">-- `δ` only needs to be a map of complexes in degrees `≤ m`; we might need to weaken this</span>\n<span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">M.row</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">M.row</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M.X</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">M.res</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">M.res</span> <span class=\"o\">(</span><span class=\"n\">M.d</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">M.d'</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">M.d'</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">δ_bound_by</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">δ</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">bound_by</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ergonomics: we bundle this assumption, instead of passing it around separately</span>\n<span class=\"o\">(</span><span class=\"n\">admissible</span> <span class=\"o\">:</span> <span class=\"n\">M.admissible</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230418736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842547
    },
    {
        "content": "<p>This is the a definition before the statement of the lemma</p>",
        "id": 230418756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842561
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Proposition 9.6 in [Analytic] -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">normed_spectral</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">H</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">system_of_double_complexes.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">k'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">k₀</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">M.normed_spectral_conditions</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">k'</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">m</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">c₀</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M.row</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_weak_bounded_exact</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"bp\">*</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">K₀</span> <span class=\"n\">m</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 230418786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842583
    },
    {
        "content": "<p>For completeness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">ε</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">K</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">k₀</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">k₀</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">K₀</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K₀</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">K</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 230418940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842633
    },
    {
        "content": "<p>Ah! I just wanted to complain that I don't see the \"exists <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ϵ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>\"</p>",
        "id": 230418994,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842669
    },
    {
        "content": "<p>So this is how Lean will be able to compute all desired constants at the end</p>",
        "id": 230419159,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842722
    },
    {
        "content": "<p>Yep</p>",
        "id": 230419249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842732
    },
    {
        "content": "<p>Cool!</p>",
        "id": 230419322,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842745
    },
    {
        "content": "<p>Anyways, I'm off for tonight!</p>",
        "id": 230419381,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842755
    },
    {
        "content": "<p>Cheers!</p>",
        "id": 230419409,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615842759
    },
    {
        "content": "<p>Thanks for all your help today!</p>",
        "id": 230419441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615842770
    }
]