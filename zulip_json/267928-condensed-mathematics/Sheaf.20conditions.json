[
    {
        "content": "<p>I proved the sheaf condition (for condensed sets) in terms of finite products and equalizers associated to surjective maps of Profinite sets here<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/b8ebef1943604d3b8af4cb65eb9d313e15f65dcc/src/condensed/is_proetale_sheaf.lean#L351\">https://github.com/leanprover-community/lean-liquid/blob/b8ebef1943604d3b8af4cb65eb9d313e15f65dcc/src/condensed/is_proetale_sheaf.lean#L351</a></p>\n<p>Now the question is how to formulate the condition in terms of exteremally disconnected sets. Any ideas?</p>",
        "id": 257837920,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634396569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Can you remind me why we need <code>P.is_proetale_sheaf_of_types</code>? Why can't we use the generic sheaf condition?</p>",
        "id": 257838921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397548
    },
    {
        "content": "<p>I see that we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_proetale_sheaf_of_types_iff</span> <span class=\"o\">:</span>\n  <span class=\"n\">P.is_proetale_sheaf_of_types</span> <span class=\"bp\">↔</span> <span class=\"n\">presieve.is_sheaf</span> <span class=\"n\">proetale_topology</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 257838975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397601
    },
    {
        "content": "<p>Shouldn't that RHS be the main way of talking about condensed gadgets?</p>",
        "id": 257839029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397621
    },
    {
        "content": "<p>The general sheaf condition uses coyoneda to reduce to the condition for types.</p>",
        "id": 257839053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634397660
    },
    {
        "content": "<p>For types the two are equivalent</p>",
        "id": 257839064,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634397673
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.presheaf.is_sheaf_iff_is_sheaf_of_type\">docs#category_theory.presheaf.is_sheaf_iff_is_sheaf_of_type</a></p>",
        "id": 257839156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634397737
    },
    {
        "content": "<p>Isn't <code>presieve.is_sheaf</code> the thing that the rest of <code>category_theory/</code> communicates with and has API for?</p>",
        "id": 257839185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397782
    },
    {
        "content": "<p>That's why I would guess it should be the default way of talking about condensed things.</p>",
        "id": 257839202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397798
    },
    {
        "content": "<p>But maybe that's also what is already happening.</p>",
        "id": 257839219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397822
    },
    {
        "content": "<p>I'm not sure I understand what you're asking</p>",
        "id": 257839276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634397847
    },
    {
        "content": "<p>The RHS of that lemma is indeed the general sheaf of types condition, but the LHS is specific for condensed sets</p>",
        "id": 257839293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634397873
    },
    {
        "content": "<p>So how many ways do we now have to say: presheaf <code>X</code> is a condensed sheaf?</p>",
        "id": 257839325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397915
    },
    {
        "content": "<p>Lots <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 257839334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634397926
    },
    {
        "content": "<p>Right. So I guess we need to assemble them in a <code>tfae</code> at some point.</p>",
        "id": 257839345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397944
    },
    {
        "content": "<p>Yeah of course</p>",
        "id": 257839355,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634397960
    },
    {
        "content": "<p>And then there will be the question: what is going to be <em>the</em> definition, in terms of which we build the rest of the API.</p>",
        "id": 257839399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397969
    },
    {
        "content": "<p>I somehow thought that you wanted to use <code>P.is_proetale_sheaf_of_types</code> for that. But maybe that's just wrong. In that case, please ignore everything I said.</p>",
        "id": 257839437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634398009
    },
    {
        "content": "<p>Oh for that I think we should use that presieve.is_sheaf condition, since that's essentially how sheaves are defined</p>",
        "id": 257839439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634398011
    },
    {
        "content": "<p>Thanks. I'm back on track.</p>",
        "id": 257839454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634398029
    },
    {
        "content": "<p>Now about the extremally disconnected condition. That's p12 of Condensed.pdf, right? Just below 2.7.</p>",
        "id": 257839471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634398055
    },
    {
        "content": "<p>And it's basicallly just the product condition that you phrased for Profinites.</p>",
        "id": 257839483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634398071
    },
    {
        "content": "<p>And if I understand you correctly, you are asking whether we should do something like \"build the category of extr.disc.s, the inclusion functor to <code>Profinite</code>, and then phrase the product condition for <code>inclusion ⋙ X</code>\" ... or ... something else, like a hand-rolled Sigma-type like product condition.</p>",
        "id": 257839583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634398145
    },
    {
        "content": "<p>Is that right? Or was your question something else?</p>",
        "id": 257839604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634398164
    },
    {
        "content": "<p>Yup, that's right, but only when restricted to extr.disc sets</p>",
        "id": 257839930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634398477
    },
    {
        "content": "<p>The question is whether we want to actually deal with restricting and extending back to profinites all the time, or if we want to come up with a condition that works while remaining in profinite</p>",
        "id": 257839969,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634398519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Sheaf.20conditions/near/257839583\">said</a>:</p>\n<blockquote>\n<p>And if I understand you correctly, you are asking whether we should do something like \"build the category of extr.disc.s, the inclusion functor to <code>Profinite</code>, and then phrase the product condition for <code>inclusion ⋙ X</code>\" ... or ... something else, like a hand-rolled Sigma-type like product condition.</p>\n</blockquote>\n<p>Does this actually work? If I have some random presheaf on <code>Profinite</code> whose restriction to <code>ExtrDisc</code> satisfies the finite product condition, is it really the case that the original presheaf is a sheaf? I don't think that's right...</p>",
        "id": 257840546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634399074
    },
    {
        "content": "<p>I think a general condition in terms of ExtrDisc sets for presheaves on <code>Profinite</code> could like like this:</p>\n<ol>\n<li>For all profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and extr.disc. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> with a surjection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">E \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and all extr.disc <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> with a surjection to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><msub><mo>×</mo><mi>X</mi></msub><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E \\times_X E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">×</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>e</mi><mi>q</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>P</mi><mo stretchy=\"false\">(</mo><msup><mi>E</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(X) \\to eq(P(E) \\to P(E&#x27;))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">))</span></span></span></span> is a bijection (this is an equalizer, so there are two maps, I don't remember how to typeset that).</li>\n<li>For all finite families of extr.disc. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msub><mo>∐</mo><mi>i</mi></msub><msub><mi>X</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mo>∏</mo><mi>i</mi></msub><mi>P</mi><mo stretchy=\"false\">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(\\coprod_i X_i) \\to \\prod_i P(X_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∐</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a bijection.</li>\n</ol>",
        "id": 257840687,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634399204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I got the impression that the product condition is all you need. At least, that's how I understand the observation just after Prop 2.7.</p>",
        "id": 257841164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634399672
    },
    {
        "content": "<p>If you consider presheaves on <code>ExtrDisc</code>, yes</p>",
        "id": 257841279,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634399780
    },
    {
        "content": "<p>But that's what I said, right? You restrict the presheaf <code>X</code> to a presheaf on <code>ExtrDisc</code> by composing with <code>inclusion : ExtrDisc ⥤ Profinite</code></p>",
        "id": 257842100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634400450
    },
    {
        "content": "<p>And then you impose the product condition.</p>",
        "id": 257842112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634400460
    },
    {
        "content": "<p>Ok, but there may be many presheaves <code>X</code> on <code>Profinite</code> with the same restriction to <code>ExtrDisc</code></p>",
        "id": 257842186,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634400510
    },
    {
        "content": "<p>Hmm, that's a good point.</p>",
        "id": 257842301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634400608
    },
    {
        "content": "<p>If you start with a sheaf <code>X</code> on Profinite, then it's uniquely determined by the restriction to <code>ExtrDosc</code>, but that relies on that equalizer condition</p>",
        "id": 257842355,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634400665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Yeah, I see it now. So I think it should be something like the two conditions you listed above.</p>",
        "id": 257847686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634405658
    },
    {
        "content": "<p>On the other hand, I don't know how important that sheaf condition is for LTE.</p>",
        "id": 257847811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634405786
    },
    {
        "content": "<p>I guess what's more important for us, is for example: <code>f : X ⟶ Y</code> is an iso iff <code>X(S) → Y(S)</code> is an iso for all <code>S : ExtrDisc</code>.</p>",
        "id": 257847867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634405854
    },
    {
        "content": "<p>And other checks that only have to be performed on <code>ExtrDisc</code>. But I don't think we'll leave the sheaf world. And the examples of condensed sets that we construct will probably not use this sheaf condition, right?</p>",
        "id": 257847964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634405927
    },
    {
        "content": "<p>We will need to do something with the sheaf condition when we want to sheafify, when we go to prove that <code>Cond Ab</code> is abelian, to prove it has enough projectives, etc.</p>",
        "id": 257850224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634408021
    },
    {
        "content": "<p>I added:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_proetale_sheaf_of_types_tfae</span> <span class=\"o\">:</span>\n  <span class=\"o\">[</span> <span class=\"n\">presieve.is_sheaf</span> <span class=\"n\">proetale_topology</span> <span class=\"n\">P</span>\n  <span class=\"o\">,</span> <span class=\"n\">P.is_proetale_sheaf_of_types</span>\n  <span class=\"o\">,</span> <span class=\"n\">P.is_proetale_sheaf_of_types_pullback</span>\n  <span class=\"o\">,</span> <span class=\"n\">P.is_proetale_sheaf_of_types_explicit_pullback</span>\n  <span class=\"o\">,</span> <span class=\"n\">P.finite_product_condition</span> <span class=\"bp\">∧</span> <span class=\"n\">P.equalizer_condition</span>\n  <span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">tfae</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 257856657,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634414176
    }
]