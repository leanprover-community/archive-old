[
    {
        "content": "<p>Quick update: <br>\nThe file <code>condensed/tensor</code> is sorry-free. This defines the tensor product of a condensed abelian group with an abelian group, as a condensed abelian group, and shows that it can be evaluated pointwise when evaluated on extremallly disconnected sets.</p>",
        "id": 286003998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655164413
    },
    {
        "content": "<p>I just pushed a skeleton for the isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>i</mi></msup><mo stretchy=\"false\">(</mo><msup><mi>Q</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>M</mi><mo>≅</mo><msup><mi>H</mi><mi>i</mi></msup><mo stretchy=\"false\">(</mo><msup><mi>Q</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^i(Q&#x27;(\\mathbb{Z})) \\otimes M \\cong H^i(Q&#x27;(M))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">))</span></span></span></span>. It's in <code>condensed/bd_lemma</code> and still has various sorries to fill in (but all the data required for this isomoprhism should be there)</p>",
        "id": 286434503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655428558
    },
    {
        "content": "<p>Cool! You made a bunch of progress while I was away!</p>",
        "id": 286649403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1655555873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> pushed a proof of <code>instance : no_zero_smul_divisors ℤ (Lbar r' S)</code>. That will be useful once we apply the BD lemma in our concrete situation.</p>",
        "id": 287245286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656016453
    },
    {
        "content": "<p>Do we only need this for the case where <code>S</code> is finite?</p>",
        "id": 287247017,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656017241
    },
    {
        "content": "<p>AFAIK no, I was planning to work on proving that if this holds for finite <code>S</code> then it passes through profinite ones.</p>",
        "id": 287247164,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656017309
    },
    {
        "content": "<p>Do we already know (well: \"is it true?\", first of all; and then...) that for <code>S : Profinite.{u}</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">preserves_limit</span> <span class=\"o\">(</span><span class=\"n\">fintype_diagram</span> <span class=\"n\">S</span> <span class=\"bp\">⋙</span> <span class=\"n\">Fintype_Lbar.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">category_theory.forget.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}(</span><span class=\"n\">ProFiltPseuNormGrpWithTinv₁.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">r'</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>? As composition of two functors, it boils down to knowing if both <code>fintype_diagram</code> and <code>Fintype_Lbar</code> do: <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> , have you already implemented these? This should be more or less trivial for <code>Fintype_Lbar</code>, what about <code>fintype_diagram</code>?</p>",
        "id": 288062587,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656610647
    },
    {
        "content": "<p>I don't think this is true as stated because the limits of <code>ProFilt...</code> are these so-called bounded limits (take a look at <code>pseudo_normed_group/bounded_limits</code>)</p>",
        "id": 288064222,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656611470
    },
    {
        "content": "<p>Ah ok: but do you agree that the problem comes from <code>fintype_diagram</code>?</p>",
        "id": 288065696,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656612170
    },
    {
        "content": "<p>I'm not so sure... what are you trying to use this for?</p>",
        "id": 288065947,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656612286
    },
    {
        "content": "<p>I used it to prove that <code>Lbar</code> evaluated at a profinite set was torsion_free, and I finished the proof with that <code>sorry</code>, which you now tell me is false. I will try to dig tomorrow in <code>bounded_limit</code> to understand what can be adapted. Have to rush now!</p>",
        "id": 288066215,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656612403
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 288066249,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656612417
    },
    {
        "content": "<p>I see... I think the way to go here is to use the bounded limits stuff to now that   the underlying abelian group of a limit of these <code>ProFilt...</code>s embeds in the limit of the underlying abelian groups of the <code>ProFilt...</code>s, and use the fact that the limit of abelian groups embeds in the Cartesian product. That should let you reduce from from the profinite case to the finite case.</p>",
        "id": 288066562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656612567
    },
    {
        "content": "<p>Great, thanks. I will try this tomorrow morning and will come back if I need help</p>",
        "id": 288094976,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656627242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> So I went through the <code>bounded_limit</code> and I have pushed a first attempt at implementing this for PFPNG_with_Tinv in <code>Lbar.torsion_free_flat</code>.</p>",
        "id": 288196166,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656693673
    },
    {
        "content": "<p>My idea was to adapt most of your work done for <code>PseuNormGrp₁</code>.</p>",
        "id": 288196221,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656693699
    },
    {
        "content": "<p>Do you think you can have a look at the file? In particular, at the final proof of the <code>instance</code> on line 154. I think that</p>\n<ul>\n<li>the <code>have  lim_to_Ab</code> corresponds to what you meant by \" the limit of the underlying ab. grps\"</li>\n<li>the <code>have h_tf</code> is the claim I am looking for but computed in <code>Ab</code></li>\n<li>the <code>have iso</code> is the fact that the bounded gadget is indeed a limit and so two of them must be isomorphic.</li>\n</ul>",
        "id": 288196523,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656693835
    },
    {
        "content": "<p>How does it sound?</p>",
        "id": 288196533,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656693841
    },
    {
        "content": "<p>(of course, if you do not have time now, please do not worry!)</p>",
        "id": 288196770,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656693924
    },
    {
        "content": "<p>Oh, sorry I should have been more detailed... there is no need to duplicate the bounded limits work because we already know that the functor which drops the Tinv action preserves limits. So you first pass to pfpng1 with no Tinv, the. You can use the bounded limit api that's already there</p>",
        "id": 288196847,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656693958
    },
    {
        "content": "<p>Yes, I thought so, that's why I passed through your work and I have sorried the functor from PNPF_withTinv to pfpng1, just to have everything compile.</p>",
        "id": 288196996,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656694013
    },
    {
        "content": "<p>But I was indeed hoping that all the duplication would not be needed.</p>",
        "id": 288197026,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656694031
    },
    {
        "content": "<p>M quite sure we have that...</p>",
        "id": 288197037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656694040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Tensor.20Products/near/288197037\">said</a>:</p>\n<blockquote>\n<p>M quite sure we have that...</p>\n</blockquote>\n<p>Sure, I was just lazy in looking for it. I was first checking with you if the strategy set up in the proof of the <code>instance</code> on l. 154 looked OK to you, if yes I will look more carefully.</p>",
        "id": 288197213,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656694107
    },
    {
        "content": "<p>I'm on mobile right now so it will be hard for me to check, but I'll look in the next couple of hours.</p>",
        "id": 288197317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656694157
    },
    {
        "content": "<p>In fact we should know that the functor to pfpng1 even creates limits!</p>",
        "id": 288197364,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656694183
    },
    {
        "content": "<p>So you could do a grep for <code>creates_limits</code> and see what comes up</p>",
        "id": 288197440,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656694205
    },
    {
        "content": "<p>No problem, sure! Let me simply emphasize that I was quite sure (having seen the <strong>amazing!</strong> work you did for the <code>bounded</code> limits in the pfpng1 setting) that we already had excellent technology. So I was not trying to redo anything, and I also do not need much input from you. When you have time, please just have a look if what I did seems completely insane or reasonable, and in the second case I will go on on my own. After all, things are starting to become much clearer with these limits...</p>",
        "id": 288197729,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656694360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I pushed a commented-out skeleton for the argument I had in mind, as part of the same proof you pointed me to. <br>\nI also filled in the missing functor as it was just a composition of two we already had, and I used previous work to observe that it preserves limits (which is required for the skeleton I sketched). I hope this helps! </p>\n<p>In terms of what you had written, it would work in principle, of course, but the key step where you embed the bounded limit cone point into the limit of abelian groups was missing (well, hidden in the sorry labeled <code>h_tf</code>).</p>",
        "id": 288220367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656707169
    },
    {
        "content": "<p>I pushed a (sorried) condensed version of the statement that <code>Lbar</code> is torsion free.</p>",
        "id": 288267320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656764768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Would it be possible to abstract over <code>Fintype_Lbar</code>?</p>",
        "id": 288267379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656764876
    },
    {
        "content": "<p>I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">extend_torsion_free</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">CompHausFiltPseuNormGrp₁</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">A.obj</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">ℤ</span> <span class=\"o\">((</span><span class=\"n\">Profinite.extend</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>should be provable, and maybe easier because you don't have to worry about <code>Lbar</code>.</p>",
        "id": 288268141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656765854
    },
    {
        "content": "<p>I have a proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ExtrDisc.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">ℤ</span> <span class=\"o\">(((</span><span class=\"n\">condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">r'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">T.val</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>that only depends on that <code>sorry</code></p>",
        "id": 288268572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656766444
    },
    {
        "content": "<p>In other words, the glue from the profinite extension to condensed abelian groups is done.</p>",
        "id": 288268602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656766492
    },
    {
        "content": "<p>It's in <code>src/Lbar/torsion_free_condensed.lean</code></p>",
        "id": 288268757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656766695
    },
    {
        "content": "<p>Yeah that's a better generalization.</p>",
        "id": 288268883,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656766906
    },
    {
        "content": "<p>The skeleton I wrote should adapt easily to this</p>",
        "id": 288268898,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656766923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks Adam! I will look at both the files on Monday. I think that abstracting over <code>Fintype_Lbar</code> will not be an issue at all, I will write here if I find any problem.</p>",
        "id": 288292524,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1656800043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> I see that you're working on the tensor product colimit sorry -- I think the simple way to do this is to use the fact that evaluation at ExtrDiscs jointly creates colimits of condensed abelian groups, which lets you reduce to the abelian group case (using some already existing isomorphisms). Your approach would work as well, of course.</p>",
        "id": 288559536,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657040675
    },
    {
        "content": "<p>if you prefer, you could also use the fact that the functor from <code>ExtrSheaf</code> to presheaves creates colimits (this is an existing instance)</p>",
        "id": 288560378,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657041103
    },
    {
        "content": "<p>I pushed the argument just now</p>",
        "id": 288564033,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657042838
    },
    {
        "content": "<p>(it can be used to show that tensor preserves all colimits, not just coproducts)</p>",
        "id": 288564051,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657042857
    },
    {
        "content": "<p>Well, there are two small sorries:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tensor_functor_iso_flip</span> <span class=\"o\">:</span>\n  <span class=\"n\">tensor_functor.flip</span> <span class=\"bp\">≅</span> <span class=\"n\">tensor_functor</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat_iso.of_components</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">nat_iso.of_components</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">tensor_flip</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 288564086,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657042882
    },
    {
        "content": "<p>(that's for plain abelian groups)</p>",
        "id": 288564101,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657042894
    },
    {
        "content": "<p>okay, the file should be sorry-free now :)</p>",
        "id": 288570386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657043585
    },
    {
        "content": "<p>Sorry, I had not seen your message. I had reached the same reduction to abelian groups (by a slightly longer path). Thanks for pushing all this. (I learnt a few things in the process!)</p>",
        "id": 288570681,
        "sender_full_name": "Joël Riou",
        "timestamp": 1657043707
    },
    {
        "content": "<p>the equivalence with sheaves on <code>ExtrDisc</code> is a really powerful trick</p>",
        "id": 288570839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657043770
    },
    {
        "content": "<p>This is even true on paper, right?</p>",
        "id": 288572541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657044548
    },
    {
        "content": "<p>I mean my understand is it's not a trick, it's a rather important part of the story.</p>",
        "id": 288572585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1657044577
    },
    {
        "content": "<p>Yeah of course, trick is not the right word, it's really a key part</p>",
        "id": 288574016,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657045371
    },
    {
        "content": "<p>I guess what surprises me a little is just how powerful/useful this equivalence is from the formalization perspective. I think we've used it in LTE even more than the paper proof (By which I mean the blueprint)</p>",
        "id": 288584661,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657051055
    },
    {
        "content": "<p>I got the impression that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tensor_short_exact</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}))</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ExtrDisc.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">A.val.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">S.val</span><span class=\"o\">))]</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Ab</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">short_exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">short_exact</span> <span class=\"o\">((</span><span class=\"n\">tensor_functor.obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">tensor_functor.obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is basically done. Is that true? If so, where?</p>",
        "id": 288662122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657110436
    },
    {
        "content": "<p>Maybe it's not quite done. But if you use <code>exact_iff_ExtrDisc</code> along with the isomorphism (which we have) you get by evaluating the tensor product at an <code>ExtrDisc</code> with the plain tensor product of abelian groups, then you can reduce to the usual flatness of a tf-abelian group.</p>",
        "id": 288662641,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657110692
    },
    {
        "content": "<p>Maybe we should also have <code>short_exact_iff_ExtrDisc</code>?</p>",
        "id": 288662692,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657110719
    },
    {
        "content": "<p>I think we have it</p>",
        "id": 288662879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657110805
    },
    {
        "content": "<p>But we should move it out of that <code>QprimeFP</code> file</p>",
        "id": 288662900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657110819
    },
    {
        "content": "<p>I moved it to a new file <code>condensed/short_exact.lean</code></p>",
        "id": 288666264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657112450
    },
    {
        "content": "<p>Do we have the statement that <code>exact f g → exact (F.map f) (F.map g)</code> is <code>F</code> preserves finite limits and colimits?</p>",
        "id": 288697896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657125854
    },
    {
        "content": "<p>yes it's somewhere</p>",
        "id": 288697959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657125891
    },
    {
        "content": "<p>don't ask me where <span aria-label=\"hear no evil\" class=\"emoji emoji-1f649\" role=\"img\" title=\"hear no evil\">:hear_no_evil:</span></p>",
        "id": 288697978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657125902
    },
    {
        "content": "<p>Aha, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exact</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288698141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657125972
    },
    {
        "content": "<p>yeah but that's not very good</p>",
        "id": 288698180,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657125995
    },
    {
        "content": "<p>because we really want to use functors that preserve finite (co)limits</p>",
        "id": 288698206,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657126008
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.functor.preserves_exact_of_preserves_finite_limits_of_mono\">docs#category_theory.abelian.functor.preserves_exact_of_preserves_finite_limits_of_mono</a></p>",
        "id": 288698266,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657126048
    },
    {
        "content": "<p>oh that has a mono</p>",
        "id": 288698305,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657126067
    },
    {
        "content": "<p>blah!</p>",
        "id": 288698315,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657126072
    },
    {
        "content": "<p>I'm proving it. give me 5 mins</p>",
        "id": 288698688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657126249
    },
    {
        "content": "<p>done at <code>for_mathlib/preserves_exact</code></p>",
        "id": 288699107,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657126439
    },
    {
        "content": "<p>wow, that was fast!</p>",
        "id": 288699166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657126452
    },
    {
        "content": "<p>I got some good coffee today ;)</p>",
        "id": 288699548,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657126624
    },
    {
        "content": "<p>Do we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">tensor_functor_preserves_finite_limits</span> <span class=\"o\">[</span><span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">limits.preserves_finite_limits</span> <span class=\"o\">(</span><span class=\"n\">tensor_functor.obj</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 288702701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657128052
    },
    {
        "content": "<p>Is this something <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> proved, perhaps?</p>",
        "id": 288702785,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657128104
    },
    {
        "content": "<p>If it is not already there, <code>preserves_finite_limits_of_exact</code> in <code>exact_functor.lean</code> could help, but the critical statement would be that tensoring with a torsionfree abelian group preserves monos, which is usually obtained by reducing to finitely generated subgroups, which are free, but do we have these facts?</p>",
        "id": 288705513,
        "sender_full_name": "Joël Riou",
        "timestamp": 1657129435
    },
    {
        "content": "<p>Yes we do. I'll dig up the relevant facts in a minute</p>",
        "id": 288705911,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657129588
    },
    {
        "content": "<p>Okay, so first, we have that tensoring preserves colimits in <code>condensed/tensor</code> in the <code>AddcommGroup</code> section.<br>\nIn the file <code>for_mathlib/AddCommGroup.lean</code> we have <code>AddCommGroup.is_colimit_cocone</code> which expresses a tf-abelian group as a colimit of its f.g. subgroups, and <code>AddCommGroup.exists_sigma_iso_of_index</code> can be used to show that all such are coproducts of the tensor unit. Together those should give the result!</p>",
        "id": 288706320,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657129797
    },
    {
        "content": "<p>The \"tensor unit\" <code>tunit</code> is constructed in a bit of an ad-hoc way, but we have a general <code>is_tensor_unit</code> in the same file (which could use some more API)</p>",
        "id": 288706480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657129869
    },
    {
        "content": "<p>I had started working on this, but then I got distracted by proving that the limit of tf things is tf. I can resume working on this, but <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> or <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  please go ahead as you seem to have a clear picture of what needs to be done.</p>",
        "id": 288706629,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657129926
    },
    {
        "content": "<p>It may even be possible to use <code>is_iso_of_preserves_of_is_tensor_unit</code> directly!</p>",
        "id": 288707092,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657130167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I will have no time to deal with this soon. Adam and you have a better understanding of what is already in LTE!</p>",
        "id": 288707143,
        "sender_full_name": "Joël Riou",
        "timestamp": 1657130194
    },
    {
        "content": "<p>I'll see what I can do.</p>",
        "id": 288707167,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657130206
    },
    {
        "content": "<p>I proved</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">tensor_obj_map_preserves_mono</span> <span class=\"o\">[</span><span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">mono</span> <span class=\"o\">((</span><span class=\"n\">tensor_functor.obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>at the bottom of <code>for_mathlib/AddCommGroup/tensor</code>. I haven't yet used this to show preservation of finite limits, and I have to stop for the day. If someone wants to pick it up from there, that would be great!</p>",
        "id": 288730310,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657141370
    },
    {
        "content": "<p>So we know it preserves monos and cokernels. Hence it preserves short exact sequences. But I guess we don't yet have a machine to go from there to preserving finite limits.</p>",
        "id": 288763242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657170915
    },
    {
        "content": "<p>This is proved in <a href=\"https://github.com/leanprover-community/mathlib/pull/14026\">#14026</a></p>",
        "id": 288763433,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1657171194
    },
    {
        "content": "<p>Aah, since mathlib bumps is not what I want to think about right now, maybe we just copy-pasta it into LTE?</p>",
        "id": 288763500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657171239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> Is that ok with you?</p>",
        "id": 288763517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657171270
    },
    {
        "content": "<p>I pushed the statement to <code>src/for_mathlib/preserves_finite_limits.lean</code></p>",
        "id": 288766884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657174998
    },
    {
        "content": "<p>Fine with me!</p>",
        "id": 288769095,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657176829
    },
    {
        "content": "<p>I had completely forgotten about that PR, it's WIP since we wanted to generalise it from abelian to preadditive categories first.</p>",
        "id": 288769099,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657176837
    },
    {
        "content": "<p>Any volunteers for this backport?</p>",
        "id": 288769704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657177335
    },
    {
        "content": "<p>I'll do it today</p>",
        "id": 288771937,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1657179194
    },
    {
        "content": "<p>Great! Thanks a lot</p>",
        "id": 288772090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657179324
    },
    {
        "content": "<p>This is now done</p>",
        "id": 288796804,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1657195601
    },
    {
        "content": "<p>Awesome</p>",
        "id": 288796942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657195694
    }
]