[
    {
        "content": "<p>Here's a diagram chase (<a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/bicartesian3.lean#L42\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/bicartesian3.lean#L42</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">commsq.bicartesian_iff_isos</span> <span class=\"o\">:</span> <span class=\"n\">sqm.bicartesian</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">is_iso</span> <span class=\"n\">gKh</span> <span class=\"bp\">∧</span> <span class=\"n\">is_iso</span> <span class=\"n\">gQh</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">commsq.bicartesian</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">is_iso_iff_mono_and_epi</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup.mono_iff_ker_eq_bot</span><span class=\"o\">,</span> <span class=\"n\">eq_bot_iff</span><span class=\"o\">],</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>We only need this in <code>Ab</code>. So it can be done using actual elements. Let me know if you would like to work on this.</p>",
        "id": 282273055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652459809
    },
    {
        "content": "<p>I'm looking for something to do, I could take this on.</p>",
        "id": 282278341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652462396
    },
    {
        "content": "<p>I pushed a proof of the forward direction</p>",
        "id": 282404165,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1652612994
    },
    {
        "content": "<p>Now pull a proof in the backward direction.</p>",
        "id": 282404484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652613433
    },
    {
        "content": "<p>Maybe a variant of <code>to_additive</code> could help with this?</p>",
        "id": 282405652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652615279
    },
    {
        "content": "<p>This is cool. If we can also get the other direction done, then we can defer the 6 nasty sorries in <code>salamander.lean</code> to a later project.</p>",
        "id": 282450838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652679141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> so you didn't do a proof with elements, I see. Are you interested in doing the other direction as well?<br>\nI was otherwise thinking of just doing a chase using elements.</p>",
        "id": 282619797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652783730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> it depends on how quickly you need it. I could have a look on Saturday or Sunday. Is the proof (using elements) straightforward on paper?</p>",
        "id": 282620689,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1652784351
    },
    {
        "content": "<p>With elements it's quite straightforward, yes.</p>",
        "id": 282621495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652784900
    },
    {
        "content": "<p>If you want to go without elements, you could try to show again that you have a pullback-and-pushout, because the isos guarantee that the fibers at 0 are isomorphic so you have a pullback by \"homogeneity\" (dualise for pushout).</p>",
        "id": 282621703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652785080
    },
    {
        "content": "<p>But the \"homogeneity\" is much easier using elements, I guess.</p>",
        "id": 282621751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652785093
    },
    {
        "content": "<p>Okay, I'll try to formalize it during the weekend if no one beats me to it</p>",
        "id": 282622936,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1652785857
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 282623619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652786151
    },
    {
        "content": "<p><code>commsq.bicartesian_iff_isos</code> is now <a href=\"https://github.com/leanprover-community/lean-liquid/commit/d14e09233708506d604fd597a2fd3d6d78f03413\">done</a>.</p>",
        "id": 283196733,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1653172803
    }
]