[
    {
        "content": "<p>Do we already know in which way we want to talk about <code>Ext</code>?</p>\n<ol>\n<li>The version that is currently in mathlib, using <code>left_derived</code></li>\n<li>The version in LTE using homological functors.</li>\n</ol>\n<ul>\n<li>Can we show that they are isomorphic?</li>\n<li>Can we compute <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mtext>Ext</mtext><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi mathvariant=\"normal\">Z</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mi mathvariant=\"normal\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{Ext}^1(ℤ/2ℤ, ℤ/2ℤ)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1373em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Ext</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8873em;\"><span style=\"top:-3.1362em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord amsrm\">Z</span><span class=\"mord\">/2</span><span class=\"mord amsrm\">Z</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord amsrm\">Z</span><span class=\"mord\">/2</span><span class=\"mord amsrm\">Z</span><span class=\"mclose\">)</span></span></span></span> with either of these definitions?</li>\n<li>Do we have the LES for Ext for either of these two versions? (I mean syntactically mentioning Ext. Not just <code>left_derived</code>. There are some passages to opposite categories that need to be crossed.)</li>\n</ul>",
        "id": 273608761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646125542
    },
    {
        "content": "<p>As far as I know, the first answer is no, we can't yet relate the two notions. I think it should be straightforward(ish) to compute the <code>Ext1</code> you mention with the homological functor approach. You take the usual projective resolution of Z/2 as a Z-indexed complex. Next, I'm fairly sure we have the lemmas to show that this is K-projective. Maybe <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> can confirm? And finally, it comes down to computing some Hom between complexes.</p>\n<p>The homological approach has the LES specifically for Ext in both variables. For the <code>left_derived</code> approach, we would need some more API for taking <code>op</code> of an <code>exact_seq</code>, but that shouldn't be too hard?</p>",
        "id": 273638779,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1646140925
    },
    {
        "content": "<p>We know that a bounded above complex of projective objects is K-projective.</p>",
        "id": 273638932,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1646140983
    },
    {
        "content": "<p>Oh, one missing thing on the LES for ext with the homological approach is to show that <code>Ext i A[-1] B</code> is <code>Ext (i+1) A B</code>, which should just be some general thing about hom between shifts (I hope I got the indexing right!). There are also a handful of sorry's in this work that should be closed at some point ;)</p>",
        "id": 273641316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1646141997
    },
    {
        "content": "<p>Johan and I discussed a bit this morning, and we agree that the nicest (and almost the quickest?) way to convince ourselves that our <code>Ext</code> is correct is to prove that it's a universal delta functor. <br>\nI made a PR with the basic definitions and a sketch here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/pull/96\">https://github.com/leanprover-community/lean-liquid/pull/96</a></p>",
        "id": 290008910,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658170867
    },
    {
        "content": "<p>I proved that effaceable delta functors are universal.<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/pull/97\">https://github.com/leanprover-community/lean-liquid/pull/97</a></p>\n<p>The fact that <code>Ext</code> is universal should now be easy!</p>",
        "id": 290049654,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658201056
    },
    {
        "content": "<p>This is now done</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">delta_functor.universal</span> <span class=\"o\">(</span><span class=\"n\">Ext_δ_functor</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">delta_functor.universal_of_effacable</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/lean-liquid/pull/105\">https://github.com/leanprover-community/lean-liquid/pull/105</a></p>",
        "id": 290264419,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658336277
    },
    {
        "content": "<p>Is this convincing enough?</p>",
        "id": 290264567,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658336323
    },
    {
        "content": "<p>(This is saying that <code>Ext^i(-,B)</code> is universal, where <code>Ext^i</code> is really defined using <code>Ext' i</code> which is <code>Ext i</code> applied to objects of the bounded homotopy category obtained by applying the <code>single 0</code> functor.)</p>",
        "id": 290265746,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658336823
    },
    {
        "content": "<p>Cool!</p>",
        "id": 290265857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658336873
    },
    {
        "content": "<p>I think that we can certainly use this to write a convincing <code>examples/Ext.lean</code>.</p>",
        "id": 290265940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658336897
    },
    {
        "content": "<p>Yeah, let's get those two PRs merged (the one above, and your start of the <code>examples/Ext</code>) then we can finish off the example file for Ext.</p>",
        "id": 290266027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658336945
    },
    {
        "content": "<p>It can include the nice defeqs of <code>Ext_δ_functor</code>, an example of a 5-term LES, the computation of <code>Ext^1(ℤ/nℤ, ℤ/nℤ)</code> and the isomorphism between <code>Ext^0</code> and <code>Hom</code>.</p>",
        "id": 290266043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658336952
    },
    {
        "content": "<p>Together, those seem to me like a good \"extensional\" spec of Ext.</p>",
        "id": 290266129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658336987
    },
    {
        "content": "<p>We don't have universality in the second variable, unfortunately.</p>",
        "id": 290266241,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658337011
    },
    {
        "content": "<p>(and we probably wont for a while!)</p>",
        "id": 290266254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658337019
    },
    {
        "content": "<p>Sure, it's not a complete spec, but it's good enough, I think.</p>",
        "id": 290266348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658337072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Ext/near/290264419\">said</a>:</p>\n<blockquote>\n<p>This is now done</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">delta_functor.universal</span> <span class=\"o\">(</span><span class=\"n\">Ext_δ_functor</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">delta_functor.universal_of_effacable</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/lean-liquid/pull/105\">https://github.com/leanprover-community/lean-liquid/pull/105</a></p>\n</blockquote>\n<p>I left two mini comments.</p>",
        "id": 290266362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658337081
    },
    {
        "content": "<p>Both PRs are merged</p>",
        "id": 290272120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658339583
    },
    {
        "content": "<p>Some more work on the ext example file<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/pull/107\">https://github.com/leanprover-community/lean-liquid/pull/107</a></p>\n<p>Note in particular:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Any natural transformation `Hom(-,B) ⟶ F 0` to the zeroth-component of some</span>\n<span class=\"sd\">delta functor `F` extends in a unique way to a morphism of delta functors</span>\n<span class=\"sd\">`Ext_δ_functor A B ⟶ F`.</span>\n<span class=\"sd\">Note that `Ext' 0 (X,B)` is not defeq to `Hom(X,B)`, so we must compose with the isomorphism</span>\n<span class=\"sd\">`Ext'_zero_flip_iso` that was mentioned in the previous example.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Ext_δ_functor_is_universal_for_Hom</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span><span class=\"n\">δ</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">e0</span> <span class=\"o\">:</span> <span class=\"n\">preadditive_yoneda.obj</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Ext_δ_functor</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"n\">e0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Ext'_zero_flip_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Ext_δ_functor</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 290293853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658348832
    },
    {
        "content": "<p>I guess I should now ask if there is anyone who is NOT convinced that this is the right <code>Ext</code>,  and to explain what it would take for them to be convinced.</p>",
        "id": 290294300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658349073
    },
    {
        "content": "<p>Is there some elementary reformulation of \"Ext^i(A, B) = 0 for all i &gt;= 1\"? e.g. Ext^1(A, B) = 0 means that every extension of A by B is trivial</p>",
        "id": 290294904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658349344
    },
    {
        "content": "<p>We have this example :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An explicit computation: `Ext^1(ℤ/n,ℤ/n) = ℤ/n`. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Ext'</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">of</span> <span class=\"bp\">$</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"bp\">$</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 290295027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658349398
    },
    {
        "content": "<p>and a proof that <code>Ext i (P,B) = 0</code> whenever <code>P</code> is projective ( this is not in the examples file yet, although it would be very easy to add).</p>",
        "id": 290295072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658349418
    },
    {
        "content": "<p>Actually, it wouldn't be too hard to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>x</mi><msup><mi>t</mi><mi>i</mi></msup><mo stretchy=\"false\">(</mo><mi>P</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">Ext^i(P,B) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for all $i &gt; 0$ and all B implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is projective.</p>",
        "id": 290295282,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658349513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Ext/near/290295282\">said</a>:</p>\n<blockquote>\n<p>Actually, it wouldn't be too hard to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>x</mi><msup><mi>t</mi><mi>i</mi></msup><mo stretchy=\"false\">(</mo><mi>P</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">Ext^i(P,B) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for all $i &gt; 0$ and all B implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is projective.</p>\n</blockquote>\n<p>Well, maybe it's not so easy, because it seems that we never set up the API for the LES in the second variable (although we have some general thing that <code>Ext i(X,-)</code> is a homological functor)</p>",
        "id": 290299007,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658351208
    },
    {
        "content": "<p>The PR is merged.</p>",
        "id": 290406288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658423826
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 290406302,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658423834
    },
    {
        "content": "<p>Are there other properties of <code>Ext</code> you think we should add? We could add the characterization of projectives in terms of Ext, but that would take some more work (we don't have a convenient LES in the second variable)</p>",
        "id": 290406459,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658423895
    },
    {
        "content": "<p>The main thing missing from <a href=\"https://github.com/leanprover-community/lean-liquid/tree/master/src/examples\">https://github.com/leanprover-community/lean-liquid/tree/master/src/examples</a> is some examples for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><msup><mi>p</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}_{p&#x27;}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>. But we'll get there in the next few days.</p>",
        "id": 290406547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658423942
    },
    {
        "content": "<p>We could add an explicit example of a 5-or-6-term LES of Ext-groups. Just to show what it looks like in Lean. I don't think it would add to the \"convincing evidence\" but it does have \"showcase\" value, I think.</p>",
        "id": 290406718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658424012
    }
]