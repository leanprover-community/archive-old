[
    {
        "content": "<p>I have been thinking more about triangles and shifts. I think it's going to be really annoying that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">X[1][-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> is not equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. It's not just that they aren't defeq, they aren't even equal, in a generic category with shifts.<br>\nAnd with the approach in the literature, these shifts are all over the place when you work with triangles.</p>\n<p>Usually, we solve these sorts of issues using characteristic predicates, redundant data, forgetful inheritance, you name it. But these techniques don't seem to work this time. If someone has ideas on how to design triangulated categories with an agile UX, please contribute!</p>",
        "id": 258668068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634883367
    },
    {
        "content": "<p>Do you consider the axiomatization of triangulated category where [1] is an equivalence or an automorphism? Would it help to switch to the other one, or have both around and sometimes switch between the two?</p>",
        "id": 258671718,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1634886280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> Yes, I've thought about it a bit. But I fear that the \"switching between the two\" might be painful. Currently, we don't have isomorphisms of categories. So it would probably mean a lot of duplication of APIs.</p>",
        "id": 258673514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634887446
    },
    {
        "content": "<p>Also, are there natural examples where the shift is not an honest automorphism? Probably there are such examples in algebraic topology?</p>",
        "id": 258673607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634887511
    },
    {
        "content": "<p>The stable module category of a group algebra (or more generally a selfinjective algebra) should be an example. But there is some strictification result. I of course have no idea how annoying it would be to use this.</p>",
        "id": 258674286,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1634887938
    },
    {
        "content": "<p>What is the solution for monoidal and strict monoidal categories?</p>",
        "id": 258675561,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1634888861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I guess you know <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> best?</p>",
        "id": 258678404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634890703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> and <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> are actually the people to ask. There was a branch which doesn't seem to have ever reached PR status, which I can try to find. There is a proof of the coherence result for monoidal categories out there on a branch.</p>",
        "id": 258679620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634891516
    },
    {
        "content": "<p>But actually making strictification into something that makes your life pleasant(er) is something that requires tactic support: the mere fact that you can change to an equivalent strict monoidal category doesn't seem to be helpful in practice.</p>",
        "id": 258679791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634891603
    },
    {
        "content": "<p>The most recent thread about this is at <a href=\"#narrow/stream/116395-maths/topic/rigid.20.28autonomous.29.20categories\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/rigid.20.28autonomous.29.20categories</a></p>",
        "id": 258680018,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634891740
    },
    {
        "content": "<p>The branch is called <code>Mon_something</code>, I think. There are a handful of them called like that.</p>",
        "id": 258682178,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634892995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/triangles.20and.20shifts/near/258673607\">said</a>:</p>\n<blockquote>\n<p>Also, are there natural examples where the shift is not an honest automorphism? Probably there are such examples in algebraic topology?</p>\n</blockquote>\n<p>For an algebraic topologist the situation is the opposite--the shift is not even extra data, it is determined by the structure of the underlying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-category</p>",
        "id": 258697701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634901757
    },
    {
        "content": "<p>So then you can apply your characteristic predicate style technology</p>",
        "id": 258697715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634901773
    },
    {
        "content": "<p>Right, I had this vague sense that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">∞</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-cats provide a different way to tackle this problem.<br>\nBut I also have the vague sense that doing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">∞</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-cats in Lean will be a pretty massive undertaking.</p>",
        "id": 258698340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634902208
    },
    {
        "content": "<p>Right, I don't think this is a helpful path forward, but maybe helpful for context to why you are in this situation</p>",
        "id": 258698569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634902391
    },
    {
        "content": "<p>In short, passing to the homotopy category discarded the information you need to characterize <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> in the same sort of way that you can still characterize, say, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊕</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\oplus A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> in terms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span></p>",
        "id": 258698680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634902463
    },
    {
        "content": "<p>Do you have suggestions for how to get the triangles mentioned here <a href=\"#narrow/stream/267928-condensed-mathematics/topic/breen.20deligne.20lemma\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/breen.20deligne.20lemma</a> into Lean as smoothly as possible?</p>",
        "id": 258699362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634902878
    },
    {
        "content": "<p>What is a “generic category with a shift”? Just a pair <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">C</mi><mo separator=\"true\">,</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\mathcal C, S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> a category and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>:</mo><mi mathvariant=\"script\">C</mi><mo>→</mo><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">S: \\mathcal C \\to \\mathcal C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> an auto-equivalence?</p>",
        "id": 258702992,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634905051
    },
    {
        "content": "<p>There exists un-enhancable triangulated categories so homotopy category of stable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-category only goes so far.</p>",
        "id": 258703638,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634905423
    },
    {
        "content": "<p>(The usual approach to these in some circles:  “Abomination! Lock them in cellar with Sloth!”)</p>",
        "id": 258703800,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634905489
    },
    {
        "content": "<p>Are there examples of such un-enhancable triangulated cats that you meet in the wild? I guess not, right? Everything we care about in practice also has an infty-cat version.</p>",
        "id": 258705504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634906408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/triangles.20and.20shifts/near/258705504\">said</a>:</p>\n<blockquote>\n<p>Are there examples of such un-enhancable triangulated cats that you meet in the wild? I guess not, right? Everything we care about in practice also has an infty-cat version.</p>\n</blockquote>\n<p><a href=\"https://www.jstor.org/stable/10.4007/annals.2020.191.2.3\">Poor Sloth</a></p>",
        "id": 258705782,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634906571
    },
    {
        "content": "<p>Short answer: you glue along an un-enhancable functor. Rizzardo and Van den Bergh’s method involves studying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> structures that don’t lift all the way to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi mathvariant=\"normal\">∞</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> ones. That idea in and of itself is very interesting.</p>",
        "id": 258706109,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634906727
    },
    {
        "content": "<p>There should be a family of structures that interpolates between plain triangulated categories and homotopy categories.</p>",
        "id": 258706379,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634906863
    },
    {
        "content": "<p>There may already be. I’d have to ask Siri.</p>",
        "id": 258706492,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634906907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/triangles.20and.20shifts/near/258703800\">said</a>:</p>\n<blockquote>\n<p>(The usual approach to these in some circles:  “Abomination! Lock them in cellar with Sloth!”)</p>\n</blockquote>\n<p>Well, I would put this position a bit differently. It's not that the homotopy categories of stable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-categories are good, and the triangulated categories that don't arise this way are bad. Rather, if you start with a stable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-category, then you shouldn't be discarding the higher information by forming the homotopy category in the first place.</p>",
        "id": 258707505,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634907444
    },
    {
        "content": "<p>But maybe this is getting too far off topic.</p>",
        "id": 258707515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634907452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/triangles.20and.20shifts/near/258707505\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/triangles.20and.20shifts/near/258703800\">said</a>:</p>\n<blockquote>\n<p>(The usual approach to these in some circles:  “Abomination! Lock them in cellar with Sloth!”)</p>\n</blockquote>\n<p>Well, I would put this position a bit differently. It's not that the homotopy categories of stable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-categories are good, and the triangulated categories that don't arise this way are bad. Rather, if you start with a stable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>-category, then you shouldn't be discarding the higher information by forming the homotopy category in the first place.</p>\n</blockquote>\n<p>I agree. There are useful tools that rely on just the underlying triangulated structure and there are things that impossible when doing this. Drawing the line well  is important especially in a foundational library.</p>",
        "id": 258708506,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634907937
    },
    {
        "content": "<p>For a more constructive idea, how far can you get with “candidate” triangles? (Those triples which go to long exact sequences under Hom)</p>",
        "id": 258708666,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634908018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> Could you please expand a bit on that idea? Do you mean that we try to build a bunch of API around triples that give a LES, and see if we can get to the triangle we want from there?</p>",
        "id": 258806371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634969651
    },
    {
        "content": "<p>Maybe but after things about this I don't think you are getting away from the problem.</p>",
        "id": 258988776,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1635181239
    },
    {
        "content": "<p>Yeah, I guess I'll just have to sit down and do it. This week I finally seem to have an empty calendar again. (But today was already eaten up by generic lean/mathlib stuff.)</p>",
        "id": 258990203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635181810
    },
    {
        "content": "<p>I find <a href=\"https://homepage.mi-ras.ru/~akuznet/homalg/Neeman%20Triangulated%20categories.pdf\">Neeman's exposition</a> to be the most clear and straight-forward presentation of the basic results in triangulated categories. I think Stacks uses it as a guide too.</p>",
        "id": 259004899,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1635188469
    }
]