[
    {
        "content": "<p>I think it might be useful to have an overview of what's left to be done.</p>\n<ul>\n<li>Kevin and Filippo are working on stuff related to the quotient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z((T))_{r&#x27;} \\to \\mathbb R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>. Proving continuity seems to require quite an effort, but there's a clear plan of attack and so I expect this is just a matter of time.</li>\n<li>There was a small hiccup related to <code>invpoly</code>. I know how to fix this, and I think I'll work on that tomorrow.</li>\n<li>There's a whole slew of <code>sorry</code>s related to homological algebra. These just need to be done, but I think that should be pretty straightforward.</li>\n<li>To prove the BD lemma, we need to use all that homological algebra. I'll write a more detailed list of things needed for that.</li>\n<li>Finally we need to glue <code>first_target</code> into <code>Ext_Lbar</code>. One puzzle piece that we need for this:<ul>\n<li><code>Ext(_, V)</code> sends infinite direct sums to infinite products.</li>\n</ul>\n</li>\n</ul>",
        "id": 280485138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651148879
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 280485231,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651148907
    },
    {
        "content": "<p>For the BD lemma, here's a more detailed list</p>\n<ul>\n<li>the truncation functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\tau_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>the complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>imkerseq</mtext><mi>n</mi></msub><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">\\text{imkerseq}_n C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">imkerseq</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0573em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> (I just made up this name) which is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ker</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\ker(d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">ker</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span> in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>im</mtext><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{im}(d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">im</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span> in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>the homology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>imkerseq</mtext><mi>n</mi></msub><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">\\text{imkerseq}_n C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">imkerseq</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0573em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, which is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H_n(C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and 0 elsewhere</li>\n<li>reformulate this homology computation as a quasi-isomorphism</li>\n<li>the natural map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>τ</mi><mi>n</mi></msub><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">\\tau_{n+1}C \\to \\tau_n C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8917em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></li>\n<li>the natural map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mi>n</mi></msub><mi>C</mi><mo>→</mo><msub><mtext>imkerseq</mtext><mi>n</mi></msub><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">\\tau_n C \\to \\text{imkerseq}_n C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">imkerseq</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0573em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></li>\n<li>the proof that these two maps form termwise short exact sequences</li>\n</ul>",
        "id": 280485297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651148940
    },
    {
        "content": "<p>Finally, we also need a bit about tensor products of condensed abelian groups with (discrete) abelian groups.</p>",
        "id": 280485371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651148977
    },
    {
        "content": "<p>I hope to finish this continuity business soon (hopefully in the week-end?) and then I might attack something else.</p>",
        "id": 280485571,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651149045
    },
    {
        "content": "<p>It will be really nice to see that part finished! Happy for you!</p>",
        "id": 280485654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651149089
    },
    {
        "content": "<p>OK, as promised most of the continuity stuff has been done. The file <code>ses.lean</code> went down to 2 sorries. I still have a troublesome <code>(deterministic) timeout</code> in the proof of  <code>lemma U_subset_preimage</code>: there is a <code>calc</code> block that causes the lemma to timeout: <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  can you have a look, at a certain point?</p>",
        "id": 280522814,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651164446
    },
    {
        "content": "<p>I will move on and to the profinite topological <code>lemma is_open_U</code> starting tomorrow.</p>",
        "id": 280522917,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651164484
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 280522969,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1651164511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/overview.20of.20what's.20left/near/280522917\">said</a>:</p>\n<blockquote>\n<p>I will move on and to the profinite topological <code>lemma is_open_U</code> starting tomorrow.</p>\n</blockquote>\n<p>Where is this lemma? I might have time to take a look this afternoon (assuming I finish marking some final exams)</p>",
        "id": 280523043,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651164554
    },
    {
        "content": "<p>Wow, down to 2 sorries. That's progress! I'm still sitting in a massively delayed train with a 20kb/s internet connection. So zulip is the only thing that works, and I can't get the oleans that I need.</p>",
        "id": 280525072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651165412
    },
    {
        "content": "<p>But I should have time to look at this tomorrow, if it's not solved by then.</p>",
        "id": 280525098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651165428
    },
    {
        "content": "<p>I will have time to help starting on Sunday. Let me know if there is something I can do.</p>",
        "id": 283030989,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653029749
    },
    {
        "content": "<p>Thanks! That's very helpful. Would you prefer diagram chases? Or do you want to put your teeth in the Breen-Deligne lemma?</p>",
        "id": 283031557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653030148
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I moved your message to this thread.)</p>",
        "id": 283031602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653030199
    },
    {
        "content": "<p>I think naturality of the snake delta is also a really nasty remaining bit. Because we constructed that delta using a bundled version of the snake lemma. That was nice for proving  the snake lemma. But it was completely unusable. So then I reproved the snake lemma in unbundled form, by reducing it to the bundled version. However, this transition involved ugly DTT glue, even though it's math-content free. It's not clear to me what this means for the delta.</p>",
        "id": 283031765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653030328
    },
    {
        "content": "<p>I can try naturality. There no homotopy/triangulated catgories involved, right? (I am not familiar at all with that part of the library)</p>",
        "id": 283031885,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653030423
    },
    {
        "content": "<p>Sure, it's just hands-on diagram chasing in abelian categories, no triangulated stuff. But it might be good to map out the exact problem before writing pages of code.</p>",
        "id": 283032057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653030544
    },
    {
        "content": "<p>I just added a file called <code>for_mathlib/snake_lemma_naturality</code> with a few small sorries remaining for the naturality of the snake lemma.<br>\nThese sorries should all be fairly easy</p>",
        "id": 283065542,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653051663
    },
    {
        "content": "<p><code>is_snake_input.to_kernel._proof_2</code> ugh... <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 283065835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653051790
    },
    {
        "content": "<p>I just copied/pasted. Feel free to clean up!</p>",
        "id": 283066020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653051870
    },
    {
        "content": "<p>Thanks! I will have a look in 48 hours if nobody beats me</p>",
        "id": 283066242,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653051973
    },
    {
        "content": "<p>I put the notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`⟶</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">D</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">D.map</span> <span class=\"o\">(</span><span class=\"n\">snake_diagram.hom</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>back in place. So now those <code>_proof_2</code> are gone.</p>",
        "id": 283067335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653052503
    },
    {
        "content": "<p>Great! Can you push?</p>",
        "id": 283067535,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653052619
    },
    {
        "content": "<p>Nevermind... got it!</p>",
        "id": 283067731,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653052714
    },
    {
        "content": "<p>Thanks a lot for doing this. But one sobering warning: constructing that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> which is a map between snake diagrams is going to be pretty painful. We'll need to fight DTT and \"large\" finite categories there.</p>",
        "id": 283068627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653053145
    },
    {
        "content": "<p>\"large\" in the sense that there are 12 objects and 17 morphisms. So there's a lot to write down when building such an eta, and even more to check.</p>",
        "id": 283068786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653053181
    },
    {
        "content": "<p>Here's what I did for constructing that diagrams aka functors: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/fin_functor.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/fin_functor.lean</a></p>",
        "id": 283069411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653053441
    },
    {
        "content": "<p>We just need a constructor for such an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> given a bunch of commuting squares.</p>",
        "id": 283069507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653053474
    },
    {
        "content": "<p>Okay, I finished off the sorries in <code>snake_lemma_naturality</code>.</p>",
        "id": 283072537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653054670
    },
    {
        "content": "<p>I guess we'll need some more (smallish) glue to get a version that's unbundled (similar to what <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> mentioned above)</p>",
        "id": 283072597,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653054699
    },
    {
        "content": "<p>And we'll need to figure out how to construct such <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span>.</p>",
        "id": 283072616,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653054709
    },
    {
        "content": "<p>Constructing such an <code>eta</code> from unbundled information is what's needed.</p>",
        "id": 283072892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653054827
    },
    {
        "content": "<p>Do you have an example of such \"unbundled information\" that's used in practice?</p>",
        "id": 283072978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653054852
    },
    {
        "content": "<p>Would that also solve the snake delta sorry in <code>derived/les2.lean</code>?</p>",
        "id": 283072993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653054860
    },
    {
        "content": "<p>Well, I think we would need the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span>-constructor for that <code>les2</code> sorry</p>",
        "id": 283073034,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653054883
    },
    {
        "content": "<p>Since the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> includes maps between the kernels/cokernels that exist just because they are kernels and cokernels</p>",
        "id": 283073081,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653054909
    },
    {
        "content": "<p>We also need it here: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/Lbar/squares.lean#L85\">https://github.com/leanprover-community/lean-liquid/blob/master/src/Lbar/squares.lean#L85</a></p>",
        "id": 283073144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653054936
    },
    {
        "content": "<p>Ah okay, so we could really use a constructor for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>η</mi></mrow><annotation encoding=\"application/x-tex\">\\eta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span></span></span></span> given a commuting square of short exact sequences :)</p>",
        "id": 283073283,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653054986
    },
    {
        "content": "<p>But that les2 sorry is saying that a certain map that isn't delta on the nose is still equal to delta. Does that follow from the naturality of delta? Or is it just another computation?</p>",
        "id": 283073298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653054993
    },
    {
        "content": "<p>Another todo that should be easy to jump into without context is</p>\n<ul>\n<li><code>bicartesian_of_id_of_end_of_end_of_id</code></li>\n</ul>\n<p>It's another one of those diagram chases.</p>",
        "id": 283076786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653056419
    },
    {
        "content": "<p>I will try to state the unbundled version of delta naturality later today. I'll be interested to know if it closes the <code>les2</code> sorry.</p>",
        "id": 283078415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653057132
    },
    {
        "content": "<p>I think that <code>les2</code> sorry wouldn't follow immediately, but I hope that naturality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> will simplify the calculation significantly.</p>",
        "id": 283078785,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653057319
    },
    {
        "content": "<p>For all that are happy to join the forces of pushing LTE across the finish line: I'll try to extract a bunch of sorries into small files that can hopefully be attacked in a pretty context free manner.</p>",
        "id": 283079029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653057439
    },
    {
        "content": "<p>Search for <code>-- SELFCONTAINED</code> to find these sorries.</p>",
        "id": 283090859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653062531
    },
    {
        "content": "<p>I just pushed 3 new files with such sorries. More should follow soon.</p>",
        "id": 283091073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653062633
    },
    {
        "content": "<p>291 commits to pull, you guys are crazy!</p>",
        "id": 283093829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653063872
    },
    {
        "content": "<p>That doesn't mean anything if you don't tell when you last pulled <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 283096077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653064888
    },
    {
        "content": "<p>It was a week ago I believe.</p>",
        "id": 283097212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653065479
    },
    {
        "content": "<p>I added two more <code>STANDALONE</code>s in <code>for_mathlib/snake_lemma</code>. These are just playing with pseudoelements.</p>",
        "id": 283117751,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653076078
    },
    {
        "content": "<p>And the conclusion is the universal property of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_δ_of_spec</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">D.obj</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">D.obj</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">hD.to_kernel'</span> <span class=\"bp\">≫</span> <span class=\"n\">e</span> <span class=\"bp\">≫</span> <span class=\"n\">hD.cokernel_to'</span> <span class=\"bp\">=</span> <span class=\"n\">kernel.ι</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span>\n    <span class=\"n\">D.map</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">hD.δ</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you might be interested in this!</p>",
        "id": 283117847,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653076127
    },
    {
        "content": "<p>I have two talks in the next three days and also 300 analysis scripts to mark, I might have to take a few days off Lean :-(</p>",
        "id": 283121282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653078087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/overview.20of.20what's.20left/near/283117751\">said</a>:</p>\n<blockquote>\n<p>I added two more <code>STANDALONE</code>s in <code>for_mathlib/snake_lemma</code>. These are just playing with pseudoelements.</p>\n</blockquote>\n<p>Thanks! I changed them to <code>SELFCONTAINED</code>. For consistency <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 283122504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653078685
    },
    {
        "content": "<p>Oops!</p>",
        "id": 283122533,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653078700
    },
    {
        "content": "<p>I've done <code>exact_factor_thru_image_iff</code>. I hope nobody is against pseudoelements :)</p>",
        "id": 283175928,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653142713
    },
    {
        "content": "<p>Also <code>iso_of_short_exact_comp_right</code> is done.</p>",
        "id": 283176551,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653143611
    },
    {
        "content": "<p><code>exact_iff_image_to_kernel'_is_iso</code> and <code>homology_is_zero_iff_image_to_kernel'_is_iso</code> are done.</p>",
        "id": 283178090,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653145631
    },
    {
        "content": "<p>Nice progress!</p>",
        "id": 283180211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653148558
    },
    {
        "content": "<p>The proof that <code>(cone.\\pi f)</code> is a quasi-iso is now sorry-free in <code>for_mathlib/derived/les2</code>. This file now has a LOT of non-terminal simps and very slow proofs. If you like to golf, please take a look!</p>",
        "id": 283184586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653154610
    },
    {
        "content": "<p>I was having a look at <code>bicartesian_of_id_of_end_of_end_of_id</code>, but I am confused. How are we supposed to prove that <code>is_iso (kernel.map g g β γ _)</code>? We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.kernel.map_iso\">docs#category_theory.limits.kernel.map_iso</a>, but this of course requires the vertical maps to be isos, and I don't see why the other conditions in <code>bicartesian_of_id_of_end_of_end_of_id</code> should force <code>β</code> to be an iso.</p>",
        "id": 283220400,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653207901
    },
    {
        "content": "<p>The four/five lemma doesn't seem to apply.</p>",
        "id": 283221338,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653209312
    },
    {
        "content": "<p>I pushed <a href=\"https://github.com/leanprover-community/lean-liquid/commit/3f3e6c0afcb9ead91aaef9c42a4569bb9f9b3a16\">a proof</a>. The trick was finding the correct diagram to apply the five lemma to.</p>",
        "id": 283227512,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1653218902
    },
    {
        "content": "<p>Nice, thanks!</p>",
        "id": 283228551,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653220567
    },
    {
        "content": "<p>Thanks for doing these!</p>",
        "id": 283274077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653285118
    },
    {
        "content": "<p>There's 3 <code>SELFCONTAINED</code> left now  (-;</p>",
        "id": 283274120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653285129
    },
    {
        "content": "<p>I'll try to make some more</p>",
        "id": 283274121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653285134
    },
    {
        "content": "<p>I've been attacking <code>derived/les2.lean</code>. It's starting to get into good shape</p>",
        "id": 283318864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653312672
    },
    {
        "content": "<p>It's sorry-free. Some of these sorries were pretty old. I'm really glad that they are gone.<br>\nAlong the way, the file was split into <code>les2.lean</code> and <code>les3.lean</code>.</p>",
        "id": 283337948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653320758
    },
    {
        "content": "<p>To to summarize, I think we now have sorry-free essentially everything we need in terms of the long exact sequences! Is that right?</p>",
        "id": 283355592,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653329038
    },
    {
        "content": "<p>There's one sorry left in <code>les_facts.lean</code></p>",
        "id": 283357971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653330181
    },
    {
        "content": "<p>Once that one is done, we can close two more ovals. (Unless I missed something...)</p>",
        "id": 283358373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653330402
    },
    {
        "content": "<p>I'm now extracting that sorry into something self-contained. It is once again a <code>δ</code>-naturality thing.</p>",
        "id": 283358451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653330432
    },
    {
        "content": "<p>Hmm, it's a bit of an annoying one. I guess it goes all the way back to how we constructed the LES for maps of complexes that are termwise short exact, using cones, and all that.</p>",
        "id": 283363491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653332891
    },
    {
        "content": "<p>I pushed what I have. The <code>sorry</code> has moved back to <code>les2.lean</code>...</p>",
        "id": 283363848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653333096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I don't see any sorries in <code>les2</code>.</p>",
        "id": 283365888,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653334046
    },
    {
        "content": "<p>Aah snap, I meant <code>les3</code>.</p>",
        "id": 283365981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653334086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Is this one for you?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/for_mathlib/derived/Ext_lemmas.lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ext'_zero_flip_iso</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Ext'</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip.obj</span> <span class=\"n\">B</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">preadditive_yoneda.obj</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 283366094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653334156
    },
    {
        "content": "<p>Do we have the functoriality of <code>cone</code> somewhere?</p>",
        "id": 283367535,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653334983
    },
    {
        "content": "<p>This sounds like a dangerous question... (the cone famously not being functorial in the homotopy category or derived category)</p>",
        "id": 283368306,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1653335482
    },
    {
        "content": "<p>In this case we just have concrete cochain complexes, so I think it should be okay</p>",
        "id": 283368528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653335602
    },
    {
        "content": "<p>Yes, in that case it should be done.</p>",
        "id": 283369877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653336255
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/lean-liquid/blob/287eb043aed4eff93d738ae4b22442ace9ce1882/src/for_mathlib/mapping_cone.lean#L139-L161\">https://github.com/leanprover-community/lean-liquid/blob/287eb043aed4eff93d738ae4b22442ace9ce1882/src/for_mathlib/mapping_cone.lean#L139-L161</a></p>",
        "id": 283369932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653336292
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>)</p>",
        "id": 283369981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653336327
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 283370073,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653336375
    },
    {
        "content": "<p>Okay, I'm about to push a proof of <code>Ext_δ_natural</code>, but I should apologize ahead of time for another block of excruciatingly slow proofs....</p>",
        "id": 283373417,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653338518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/overview.20of.20what's.20left/near/283366094\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> Is this one for you?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/for_mathlib/derived/Ext_lemmas.lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ext'_zero_flip_iso</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Ext'</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip.obj</span> <span class=\"n\">B</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">preadditive_yoneda.obj</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I can have a look.</p>",
        "id": 283672528,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653344337
    },
    {
        "content": "<p>Hmm, to be honest I am not very familiar with <code>Ext'</code>. What we have is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.functor.left_derived_zero_iso_self\">docs#category_theory.abelian.functor.left_derived_zero_iso_self</a> (and also the dual version for right derived functors), but I don't know how to connect <code>Ext'</code> with a mathlib-style derived functor. Is this somewhere?</p>",
        "id": 283674708,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653345900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> this iso should be relatively straightforward by using <code>bounded_homotopy_category.hom_single_iso</code> from <code>for_mathlib/derived/example</code>.</p>",
        "id": 283675524,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653346476
    },
    {
        "content": "<p><code>Ext m A B</code> is defined as <code>Hom(A',B[m])</code> where <code>A'</code> is a K-projective replacement of <code>A</code>. Now <code>B[0]</code> is iso to <code>B</code> (see <code>shift_zero</code>) and the iso I mentioned in my last message tells you that this can be computed using homology. Now you should be able to use the \"replacement\" part in the <code>K-projective replacement</code> to get the required iso.</p>",
        "id": 283676116,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653346859
    },
    {
        "content": "<p>Well, maybe it would be easier to just use <code>Ext'_iso</code>:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/50916763100554eda136d132a3e5be342d3a3da9/src/for_mathlib/derived/example.lean#L444\">https://github.com/leanprover-community/lean-liquid/blob/50916763100554eda136d132a3e5be342d3a3da9/src/for_mathlib/derived/example.lean#L444</a></p>\n<p>That reduces the computation to the \"classical\" version of <code>Ext</code>.</p>",
        "id": 283678630,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653348832
    },
    {
        "content": "<p>I am not saying it's hard, just that there is surely someone that can do a better job that myself <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 283679068,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1653349138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/overview.20of.20what's.20left/near/283373417\">said</a>:</p>\n<blockquote>\n<p>Okay, I'm about to push a proof of <code>Ext_δ_natural</code>, but I should apologize ahead of time for another block of excruciatingly slow proofs....</p>\n</blockquote>\n<p>Cool! That turned out to be easier than I feared.</p>",
        "id": 283693768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653363064
    },
    {
        "content": "<p>I'm going to make <code>Ext-L</code> and <code>main-thm</code> green. They still depend on <code>sorry</code>s of course, but only on <code>sorry</code>s represented by other ovals in the graph.</p>",
        "id": 283693870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653363224
    },
    {
        "content": "<p>I added a skeleton for <code>Ext'_zero_flip_iso</code>. Most of the sorries are self-contained, and are located in <code>for_mathlib/derived/ProjectiveResolution</code>.</p>",
        "id": 283773807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653410681
    },
    {
        "content": "<p>There is one sorry in <code>Ext_lemmas</code> about naturality as well.</p>",
        "id": 283773898,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653410719
    },
    {
        "content": "<p>The sorries in <code>for_mathlib/derived/ProjectiveResolution</code> are all done, but the naturality sorry in <code>Ext_lemmas</code> still remains (with some progress).</p>",
        "id": 283794663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653420786
    },
    {
        "content": "<p>I decided to take a different approach, but, overall, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ext'_zero_flip_iso</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Ext'</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip.obj</span> <span class=\"n\">B</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">preadditive_yoneda.obj</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is sorry free</p>",
        "id": 283833028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653448808
    },
    {
        "content": "<p>Nice. I need to give a talk today, and the preparations are taking some time. I hope to be back in action asap.</p>",
        "id": 283838442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653455839
    },
    {
        "content": "<p>I pushed two new self-contained sorries to <code>src/for_mathlib/exact_lift_desc.lean</code>. They set up an API for <code>exact.lift</code> and <code>exact.desc</code>.</p>",
        "id": 283967715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653537678
    },
    {
        "content": "<p>Ooh, that conflicts with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.exact.lift\">docs#category_theory.exact.lift</a> so I've renamed stuff in the new file to <code>mono_lift</code> for now.</p>",
        "id": 283968622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653538996
    },
    {
        "content": "<p>I filled the sorries, but please note that the results of <code>exact_lift_desc.lean</code> are all in mathlib already, as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.is_limit_of_exact_of_mono\">docs#category_theory.abelian.is_limit_of_exact_of_mono</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.is_colimit_of_exact_of_epi\">docs#category_theory.abelian.is_colimit_of_exact_of_epi</a>.</p>",
        "id": 283991582,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1653561370
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 283996621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653565665
    },
    {
        "content": "<p>Still, I think these are useful wrapper, if only because of dot-notation. Do you agree?</p>",
        "id": 283996669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653565691
    },
    {
        "content": "<p>Yes,  I think it's fine in this case. But maybe we should redefine <code>exact.mono_lift</code> in terms of <code>is_limit_of_exact_of_mono</code> so that it's easy to add things that we already know for kernels (like <code>hom_ext</code>) as needed.</p>",
        "id": 284053439,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1653595064
    },
    {
        "content": "<p>Sounds good. Feel free to do so</p>",
        "id": 284057467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653597145
    },
    {
        "content": "<p>There is now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- SELFCONTAINED</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">homology_map_homology_op_iso</span> <span class=\"o\">{</span><span class=\"n\">A₁</span> <span class=\"n\">B₁</span> <span class=\"n\">C₁</span> <span class=\"n\">A₂</span> <span class=\"n\">B₂</span> <span class=\"n\">C₂</span> <span class=\"o\">:</span> <span class=\"bp\">𝓐</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">A₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">B₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">B₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">C₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"bp\">≫</span> <span class=\"n\">g₁</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">A₂</span> <span class=\"bp\">⟶</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">B₂</span> <span class=\"bp\">⟶</span> <span class=\"n\">C₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₂</span> <span class=\"o\">:</span> <span class=\"n\">f₂</span> <span class=\"bp\">≫</span> <span class=\"n\">g₂</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">A₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">B₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">C₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sq1</span> <span class=\"o\">:</span> <span class=\"n\">commsq</span> <span class=\"n\">f₁</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sq2</span> <span class=\"o\">:</span> <span class=\"n\">commsq</span> <span class=\"n\">g₁</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">g₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">homology.map'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">sq2.op</span> <span class=\"n\">sq1.op</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">homology_op_iso</span> <span class=\"n\">f₁</span> <span class=\"n\">g₁</span> <span class=\"n\">w₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">homology_op_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">homology.map'</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"n\">sq1</span> <span class=\"n\">sq2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">homology_op_iso</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>in <code>for_mathlib/is_quasi_iso.lean</code>.<br>\nIt's the final remaining <code>sorry</code> that is left to show that <code>Ext</code> can be computed using acyclic resolutions.</p>",
        "id": 284109672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653643350
    },
    {
        "content": "<p>I've got a proof of this.</p>",
        "id": 284139226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653661119
    },
    {
        "content": "<p>Pushing in a few minutes...</p>",
        "id": 284139239,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653661126
    },
    {
        "content": "<p>For future reference, whenever possible please PLEASE try to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homology.desc'\">docs#homology.desc'</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homology.lift\">docs#homology.lift</a> to construct maps in/out of homology.</p>",
        "id": 284139274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653661154
    },
    {
        "content": "<p>I think we should (eventually) redefine homology similarly to how biproducts are defined in mathhlib as some gadget which is both a kernel and a cokernel.</p>",
        "id": 284139513,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653661280
    },
    {
        "content": "<p>Number of files with sorrys is going down fast!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">11</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">QprimeFP.lean</span>\n<span class=\"mi\">20</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 284146055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653664317
    },
    {
        "content": "<p>There are 2 <code>SELFCONTAINED</code> sorries in <code>condensed/acyclic</code>.<br>\nOne is the fact that being projective is isomorphism-invariant, the other is a diagram chase.</p>",
        "id": 284219168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653727947
    },
    {
        "content": "<p>I will do both of them today</p>",
        "id": 284220582,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1653730328
    },
    {
        "content": "<p>I did the chase. Isomorphism invariance of projectivity is already in mathlib, so I deleted it.</p>",
        "id": 284228228,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1653742146
    },
    {
        "content": "<p>What's the mathematical summary of what's left?</p>",
        "id": 284228579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653742663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> Thanks!</p>\n<p>Mathematical summary of what is left:</p>\n<ul>\n<li>The first paragraph of <a href=\"https://leanprover-community.github.io/liquid/sect0009.html#acyclic-sheaf\">https://leanprover-community.github.io/liquid/sect0009.html#acyclic-sheaf</a> (exactness of that complex).</li>\n<li>The Breen-Deligne lemma</li>\n</ul>\n<p>Summary of non-mathematics that is left:</p>\n<ul>\n<li>Glue with the first part.</li>\n</ul>",
        "id": 284231000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653746329
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/267928-condensed-mathematics/topic/overview.20of.20what's.20left/near/280485297\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/overview.20of.20what's.20left/near/280485297</a> upstream for a todo list on BD.</p>",
        "id": 284231194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653746580
    },
    {
        "content": "<p>I can probably take care of the first item next week.</p>",
        "id": 284235730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653753637
    },
    {
        "content": "<p>What is \"the Breen-Deligne lemma\"?</p>",
        "id": 284240091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653759788
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/liquid/sect0008.html#Qprime-prop\">https://leanprover-community.github.io/liquid/sect0008.html#Qprime-prop</a></p>",
        "id": 284240336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653760090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/overview.20of.20what's.20left/near/280485297\">said</a>:</p>\n<blockquote>\n<p>For the BD lemma, here's a more detailed list</p>\n<ul>\n<li>the truncation functors <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\tau_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>the complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>imkerseq</mtext><mi>n</mi></msub><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">\\text{imkerseq}_n C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">imkerseq</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0573em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> (I just made up this name) which is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ker</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\ker(d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">ker</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span> in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>im</mtext><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{im}(d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">im</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span> in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>the homology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>imkerseq</mtext><mi>n</mi></msub><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">\\text{imkerseq}_n C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">imkerseq</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0573em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, which is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H_n(C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and 0 elsewhere</li>\n<li>reformulate this homology computation as a quasi-isomorphism</li>\n<li>the natural map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>τ</mi><mi>n</mi></msub><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">\\tau_{n+1}C \\to \\tau_n C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8917em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></li>\n<li>the natural map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mi>n</mi></msub><mi>C</mi><mo>→</mo><msub><mtext>imkerseq</mtext><mi>n</mi></msub><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">\\tau_n C \\to \\text{imkerseq}_n C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9386em;vertical-align:-0.2441em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">imkerseq</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0573em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></li>\n<li>the proof that these two maps form termwise short exact sequences</li>\n</ul>\n</blockquote>\n<p>I pushed a skeleton with these statements to <code>for_mathlib/truncation.lean</code>. No condensed maths involved, just some complexes. There is sorried data, but it should all be pretty self-contained.</p>",
        "id": 284467694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654000372
    },
    {
        "content": "<p>I am not reading properly because I'm doing what I'm supposed to be doing, but I don't understand the definition of imkerseq_n(C). The map from ker(d) to im(d) is the zero map, right? So there will be homology in degree n+1 right?</p>",
        "id": 284470180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654001577
    },
    {
        "content": "<p>This was written with chain complexes in mind, so the maps go the other way.</p>",
        "id": 284471915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654002310
    },
    {
        "content": "<p>The only interesting differential should be the inclusion <code>im(d) → ker(d)</code>.</p>",
        "id": 284471944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654002333
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The natural map from `H_n(C)[n]` to `imker C n`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">from_single</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">C.homology</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">C.imker</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This sorried data looks suspicious to me -- shouldn't the map be the other way round <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 284675261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654120938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Oops, of course!</p>",
        "id": 284696436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654142154
    },
    {
        "content": "<p>That's the whole point... that we can't have a triangle between truncations and homology in the homotopy category because we need to invert this quasi iso first.</p>",
        "id": 284696493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654142196
    },
    {
        "content": "<p>I blind-pushed an attempt to fix it. I hope it builds. I can't build on my current device.</p>",
        "id": 284698483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654144478
    },
    {
        "content": "<p>I think this change broke <code>breen_deligne/main</code> by breakiing <code>for_mathlib/truncation_Ext</code>. I'll try to fix this later today if I have time.</p>",
        "id": 284877563,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654262567
    },
    {
        "content": "<p>Okay, I think it should be fixed now.</p>",
        "id": 284884131,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654265537
    },
    {
        "content": "<p>It seemed to build fine locally when I tried to fix things, but it must have been a fluke.</p>",
        "id": 284918713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654282105
    },
    {
        "content": "<p>Thanks for fixing!</p>",
        "id": 284918717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654282108
    }
]