[
    {
        "content": "<p>I created a new file  <code>src/for_mathlib/SemiNormedGroup_Completion.lean</code> that contains all the category theory stuff related to completion of seminormed groups. This was before in <code>src/locally_constant/Vhat.lean</code>, that is now smaller.<br>\nI also semplified some proofs, using the stuff in <code>src/for_mathlib/normed_group_hom_completion.lean</code>, but I am sure it can be simplified further. For example, in<code>def Completion</code>, the long <code>map =...</code> should be <code>map := λ V W f, normed_group_hom.completion f</code>. This works in that file, but then I get errors  in other places  that I am not able to solve.  I am not very familiar with the category theory part of the library, so I didn't spent too much time in trying to solve them, can someone have a look at them?</p>\n<p>Beside that, I think that  we should start PRing at least <code>src/for_mathlib/normed_group_hom_completion.lean</code>.</p>",
        "id": 242047874,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623236779
    },
    {
        "content": "<p>I'll handle <code>src/for_mathlib/normed_group_hom_completion.lean</code></p>",
        "id": 242048240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623237016
    },
    {
        "content": "<p>If you want you can also add lemmas like <code>Completion.lift</code> in <code>src/for_mathlib/SemiNormedGroup_Completion.lean</code>. They are stated categorically, but the \"concrete statement\" should probably be proved first.</p>",
        "id": 242048470,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623237161
    },
    {
        "content": "<p>Thanks for dissecting <code>Vhat.lean</code>. It was a mess.</p>",
        "id": 242049337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623237706
    },
    {
        "content": "<p>I can take a look at what's wrong with the <code>map := </code> and the category stuff.</p>",
        "id": 242049497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623237744
    },
    {
        "content": "<p>Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Completion</span> <span class=\"o\">:</span> <span class=\"n\">SemiNormedGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">SemiNormedGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">SemiNormedGroup.of</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">V</span><span class=\"o\">),</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">normed_group_hom.completion</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext1</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">completion.map</span> <span class=\"n\">id</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">completion.map_id</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ext1</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">completion.map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">completion.map_comp</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">normed_group_hom.uniform_continuous</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">normed_group_hom.uniform_continuous</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I get an error in <code>src/prop819.lean</code>.</p>",
        "id": 242050603,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623238281
    },
    {
        "content": "<p>I'll have a look right now</p>",
        "id": 242051418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623238704
    },
    {
        "content": "<p>I am also moving <code>src/normed_group/SemiNormedGroup.lean</code> to <code>for_mathlib</code>. All the results there are completely general.</p>",
        "id": 242056624,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623241591
    },
    {
        "content": "<p><code>Completion</code> now has the short definition that <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> wrote above</p>",
        "id": 242057957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623242333
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7860\">#7860</a></p>",
        "id": 242067136,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623246334
    }
]