[
    {
        "content": "<p>I just pushed a definition of the double complex that is the main protagonist of the proof of 9.5</p>",
        "id": 230875096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616078656
    },
    {
        "content": "<p>There are still a couple of <code>sorry</code>s left</p>",
        "id": 230875117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616078667
    },
    {
        "content": "<p>But the big skeleton is there.</p>",
        "id": 230875141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616078680
    },
    {
        "content": "<p>All of this is taking place in the subdirectory <code>thm95/</code>. At some points we might want to give some of these directories/files a bit more canonical names.</p>",
        "id": 230875234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616078720
    },
    {
        "content": "<p>The proof strategy is to show inductively that this double complex satisfies <code>normed_spectral_conditions</code>. Once that is done, we can apply <code>normed_spectral</code> (=9.6) and we are done. Sounds easy, right?</p>",
        "id": 230875414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616078775
    },
    {
        "content": "<p>There are basically three conditions to check:</p>\n<ul>\n<li><code>row_exact</code>: this one is easy. It comes from the induction hypothesis. I hope it will be a 1-liner, even in Lean.</li>\n<li><code>col_exact</code>: this one is a lot trickier. This is where we need 8.17, 8.19, and 9.2. It relies on a hypercover argument.</li>\n<li>a homotopy argument, scattered over 4 or 5 fields of <code>normed_spectral_conditions</code>. Here we need 9.13.</li>\n</ul>",
        "id": 230875702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616078892
    },
    {
        "content": "<p>Ooh, I just realized that I didn't produce a <code>system_of_double_complexes</code> but only a <code>cochain_complex ℕ system_of_complexes</code>. <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 230887775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616082695
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">double_complex.row</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">double_complex</span> <span class=\"n\">BD</span> <span class=\"n\">c'</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">row</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">BD.system</span> <span class=\"n\">c'</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span>\n    <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">polyhedral_lattice.conerve.obj</span>\n    <span class=\"o\">(</span><span class=\"n\">PolyhedralLattice.diagonal_embedding</span> <span class=\"bp\">Λ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 230915676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616092148
    },
    {
        "content": "<p>This lemma confirms that (apart from <code>row 0</code>) all the rows in the double complex are of the form that appears in the statement of theorem 9.5</p>",
        "id": 230915758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616092186
    },
    {
        "content": "<p>So we can apply induction to prove that they are bounded exact</p>",
        "id": 230915793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616092198
    },
    {
        "content": "<p><code>row 0</code> is also of that form, but for a different lattice. The rows are defined by case distinction</p>",
        "id": 230915870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616092216
    },
    {
        "content": "<p>I just pushed an update that contains the global outline of the induction argument for the proof of 9.5.</p>",
        "id": 231083197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616184731
    },
    {
        "content": "<p>We need to fill in these sorries: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/thm95/default.lean#L60\">https://github.com/leanprover-community/lean-liquid/blob/master/src/thm95/default.lean#L60</a><br>\nAnd also the other 37 sorries in the repo (-;</p>",
        "id": 231083347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616184804
    },
    {
        "content": "<p>Note that this <code>NSC</code> definition that I link to is still missing some hypotheses... we'll figure those out along the way.</p>",
        "id": 231083415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616184837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> I'm gathering all the constants in one file: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/thm95/constants.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/thm95/constants.lean</a></p>",
        "id": 231083508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616184875
    },
    {
        "content": "<p>Currently a lot of these constants are still missing their definitions. Again, we'll figure them out along the way.</p>",
        "id": 231083551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616184900
    },
    {
        "content": "<p>I tried to flag all the deceptive <code>sorry</code>s that currently aren't provable, and added some remarks close to others that should be provable</p>",
        "id": 231146223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616246472
    },
    {
        "content": "<p>If anyone is looking for new targets for this weekend (but feel free to enjoy the sun, or Milano-San Remo):</p>\n<ul>\n<li>the <code>sorry</code> at the bottom of <code>polyhedral_lattice/cech.lean</code></li>\n<li>the <code>sorry</code>s in <code>system_of_complexes/rescale.lean</code></li>\n<li>the 3 <code>sorry</code>s at the bottom of <code>thm95/double_complex.lean</code></li>\n</ul>",
        "id": 231146862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616247258
    },
    {
        "content": "<p>I'm going to have a go at the <code>rescale.lean</code> stuff in about ten minutes. I'm just mentioning that here in case anyone else has started.</p>",
        "id": 231160747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616262769
    },
    {
        "content": "<p>PS is this GPT AI thing just generally up and running in the repo? What do I type to see what the AI thinks the next line of the proof should be? Has anyone actually found this useful in practice yet?</p>",
        "id": 231161053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616263106
    },
    {
        "content": "<p>Yes, Patrick (I think) set it up</p>",
        "id": 231161090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616263168
    },
    {
        "content": "<p><code>gptf</code> or <code>neuro_eblast</code> are the two main tactics implemented there j believe</p>",
        "id": 231161592,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1616263604
    },
    {
        "content": "<p>It's hard to think of a theorem which could withstand a neuro_eblast! I'll give it a go!</p>",
        "id": 231161858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616263907
    },
    {
        "content": "<p>Hmm, it says I don't have an API key. I've just signed up for one following the instructions I found in the lean-gptf stream. I'm assuming that's the right thing to do!</p>",
        "id": 231163573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616265643
    },
    {
        "content": "<p>Yes, and you can either set it as a path variable or just you should be able to pass it in as an argument to the tactic like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">gptf</span> <span class=\"o\">{</span><span class=\"n\">api_key</span>  <span class=\"o\">:=</span> <span class=\"s2\">\"MY_KEY\"</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231165750,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1616267761
    },
    {
        "content": "<p>OK so I've just pushed a sorry-free <code>system_of_complexes/rescale.lean</code>, and I didn't even use <code>neuro_eblast</code>. These things take me forever, but with the infoview and constant use of the <code>delta</code> and <code>dsimp</code> tactics I can usually get to the bottom of what's going on. I tried to add some helpful refl lemmas but rewriting is full of dangers here. One thing I discovered was that if <code>v : A</code> and <code>lemma h : A = B := rfl</code>  then if the goal depends on <code>v</code> a <code>rw h at v</code> might give you two <code>v</code>'s and motive trouble later, but <code>change B at v</code> works fine. To avoid change I just did <code>rintro (v : rescale r (C c i)),</code> -- this does a very nice definitional rewrite behind the scenes and doesn't leave any chaos in its wake.</p>",
        "id": 231168797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616271202
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 231171940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616274772
    }
]