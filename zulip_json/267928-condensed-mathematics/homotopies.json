[
    {
        "content": "<p>Yesterday I pushed a definition of homotopy between to chain maps. But I realised that I'm not sure what needs to be supported.</p>\n<ul>\n<li>Do people ever consider homotopies between chain maps of complexes of length <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>?</li>\n<li>What are the conditions at the \"endpoints\"?</li>\n<li>Certainly, we want homotopies for <code>chain_complex nat</code>. At least for LTE, we want the condition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mn>0</mn></msub><mo>∘</mo><msub><mi>h</mi><mn>0</mn></msub><mo>=</mo><msub><mi>f</mi><mn>0</mn></msub><mo>−</mo><msub><mi>g</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">d_0 \\circ h_0 = f_0 - g_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Which amounts to the usual condition, if we allow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">d_{-1} = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and/or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">h_{-1} = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.</li>\n<li>Do people consider homotopies in the <code>nat</code> case with \"no condition\" in degree 0?</li>\n</ul>",
        "id": 231592589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616570482
    },
    {
        "content": "<p>Currently, the condition is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">coherent_indices</span> <span class=\"n\">cov</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">coherent_indices</span> <span class=\"n\">cov</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">h</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"n\">C₂.d</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">C₁.d</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">f.f</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">g.f</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But <code>coherent_indices cov i j → coherent_indices cov j k</code> means <code>i + 1 = j</code> and <code>j + 1 = k</code>. So we don't have any condition for <code>j = 0</code> at the moment.</p>",
        "id": 231592684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616570574
    },
    {
        "content": "<p>That doesn't sound right.</p>",
        "id": 231592716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616570620
    },
    {
        "content": "<p>This can be solved by replacing <code>coherent_indices i j</code> by a special condition, that takes the \"end of a complex\" into account. But I first want to know whether the \"end of a complex\" is always treated in the same way.</p>",
        "id": 231592718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616570624
    },
    {
        "content": "<p>You could do it with the relation we were talking about:</p>",
        "id": 231592967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616570789
    },
    {
        "content": "<p><code>r i j → r j k  → h j i ≫ C₂.d i j + C₁.d j k ≫ h k j = f.f j - g.f j</code><br>\nbut then also<br>\n<code>r i j → (∀ k, ¬(r j k)) → h j i ≫ C₂.d i j = f.f j - g.f j</code></p>",
        "id": 231593065,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616570877
    },
    {
        "content": "<p>etc</p>",
        "id": 231593066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616570879
    },
    {
        "content": "<p>I think that with the relation you still have to decide which of the two cases you want</p>",
        "id": 231593067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616570880
    },
    {
        "content": "<p>so you just have four different axioms, that always hold, but 3 of which aren't relevant except at the ends of chains</p>",
        "id": 231593132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616570908
    },
    {
        "content": "<p>So my question is first and foremost: do both options occur in practice, or is there always \"half a condition at the end of the complex\"</p>",
        "id": 231593134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616570911
    },
    {
        "content": "<p>I'm pretty sure there's always a condition at the end of the complex.</p>",
        "id": 231593151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616570939
    },
    {
        "content": "<p>complexes with specified support are always really int indexed complexes</p>",
        "id": 231593181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616570961
    },
    {
        "content": "<p>That would be very helpful, because otherwise we need to support 4 different kinds of homotopies</p>",
        "id": 231593186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616570968
    },
    {
        "content": "<p>it's only for DTT-hell purposes that we're considering small indexing sets, rather than a support condition, in the first place</p>",
        "id": 231593201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616570991
    },
    {
        "content": "<p>To answer your original question: Yes, people consider homotopies of  complexes of length n, see e.g. p.8 of <a href=\"https://arxiv.org/abs/1709.06689\">https://arxiv.org/abs/1709.06689</a> There are the half conditions for the end points in place and I also don't recall seeing them not in place.</p>",
        "id": 231594282,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1616571863
    },
    {
        "content": "<p>Thanks for all the responses. I've pushed a fix</p>",
        "id": 231599069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616575246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I've just had yet another go at formalizing complexes, this time using a combination of our <code>gizmo</code> attempt, and heavy use of the new <code>subobject</code> API. I'm pretty happy with progress so far: e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">boundaries_le_cycles</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">V</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">C.boundaries</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">C.cycles</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">cycles</span><span class=\"o\">,</span> <span class=\"n\">boundaries</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">image_subobject_le_mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.d</span> <span class=\"n\">_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">C.d_comp_d</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_top</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_top</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's too late for me tonight, but it would be great to chat about this sometime. It's on <a href=\"https://github.com/leanprover-community/mathlib/tree/homology2\">branch#homology2</a> (mathlib) in <code>src/algebra/homology2</code>.</p>",
        "id": 232087433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616848652
    },
    {
        "content": "<p>I would like to develop some of the theory of Tor for R-modules (independent of LTE -- this is for Amelia's project) and was wondering if the definition of a complex was going to change in mathlib at some point?</p>",
        "id": 232087691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616848971
    },
    {
        "content": "<p>Oh I've just seen that the branch is on mathlib! Great!</p>",
        "id": 232087765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616849051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> looks great! I think I'll have plenty time next week (but maybe not Monday).</p>",
        "id": 232092480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616853928
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/complex_ses\">branch#complex_ses</a> contains <code>src/algebra/homology2/Module.lean</code> which is the beginnings of the construction of a long exact sequence of cohomology groups coming from a short exact sequence of complexes a la Scott's branch above.</p>\n<p>I'm using <code>hij : r i j</code> as an input (r is the relation saying d i j might not be 0), which I think Johan was reluctant to use in some places, but if I don't use hij I have to input i and j, so I'm sticking with it for now. I'll do a bit more later. Amelia would really like some basic Tor stuff and I'm just thinking about thrashing the whole theory out using Scott's new complexes just to see what happens. I can't do it for abelian categories or whatever because I can't face the diagram chasing without elements -- Markus has some code which needs a lot of clean-up but writes new tactics, and I am not enough of a programmer to be able to go there and pick up where he left off.</p>",
        "id": 232104552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616865661
    },
    {
        "content": "<p>Ha ha I was live streaming on Discord and Kenny popped in. I had defined homology of a complex of R-modules by promoting Ker(d) to a module (from a submodule), explicitly constructing Im(d) as a submodule of that and taking the quotient. Kenny pointed out that instead of my explicit construction I could just use comap. One weird consequence of this is that you now no longer even have to assume d^2=0 <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> The homology is kernel over (kernel intersect image). I'm seeing how much of the theory I can develop without assuming d^2=0!</p>",
        "id": 232113996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616874853
    },
    {
        "content": "<p>Well, certainly Euler characteristics will break <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 232114241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616875069
    },
    {
        "content": "<p>I proved that homotopic maps induce equal maps on homology (modulo a little piece of API about linear combinations factoring through subobjects).</p>",
        "id": 232169871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616941242
    },
    {
        "content": "<p>It still feels harder than it should have been, but maybe it will polish up more.</p>",
        "id": 232169934,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616941318
    }
]