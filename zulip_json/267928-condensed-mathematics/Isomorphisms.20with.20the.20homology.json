[
    {
        "content": "<p>With the current API, I am unable to remove the last <code>sorry</code> in the proof of <code>homology_iso</code> in <code>exact_functor.lean</code>, which is <code>(F.obj (homology f g w) ‚âÖ homology (F.map f) (F.map g) w'</code> for an exact functor <code>F</code>. What we have to prove is completely nonsensical, the difficulty is that we have to do computations with kernels and cokernels while we have several candidates for some limit (co)cones: the one that is chosen in the API of kernel/cokernel, and those that are obtained by applying the functor <code>F</code> to (co)limit (co)cones. The only mathematical content is that up to unique isomorphisms, <code>F</code> preserves kernels and cokernels.</p>\n<p>In order to construct isomorphisms with an homology object, I suggest introducing what I have named <code>homology_iso_predatum</code> and <code>homology_iso_datum</code> attached to morphisms <code>f : X ‚ü∂ Y</code> and <code>g : X ‚ü∂ Z</code> such that <code>f ‚â´ g = 0</code>: such datum consists of a diagram including a map <code>Œπ : K ‚ü∂ Y</code> which is a kernel for <code>g</code> and a map <code>œÄ : K ‚ü∂ H</code> which is a cokernel for the obvious map <code>f' : X ‚ü∂ K</code>. From this datum, I construct an isomorphism <code>H ‚âÖ homology f g w</code>. Then, the lemma <code>homology_iso</code> mentionned above becomes trivial, once we know that <code>homology_iso_datum</code> are preserved by exact functors. A first draft of this is <a href=\"https://github.com/leanprover-community/lean-liquid/commit/98ff40ccfd8fdfe29366bb1970a9a8301e2a3748\">https://github.com/leanprover-community/lean-liquid/commit/98ff40ccfd8fdfe29366bb1970a9a8301e2a3748</a></p>\n<p>I believe this gives some flexibility in order to construct very formal isomorphisms on homology and do computations. If this API is slightly developped, I presume that it should also help in the verification of the naturality of the isomorphisms we construct, like in <code>homology_functor_iso</code>, also in <code>exact_functor.lean</code>. Please let me know if I may proceed with this approach.</p>",
        "id": 287587962,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656341167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Jo√´l Riou</span> Do you know about <code>has_homology</code>?</p>",
        "id": 287589856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656341940
    },
    {
        "content": "<p>It's an LTE only thing, but it should move to mathlib at some point.</p>",
        "id": 287589892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656341954
    },
    {
        "content": "<p>It might help here.</p>",
        "id": 287589903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656341957
    },
    {
        "content": "<p>It might be very similar to your <code>homology_iso_datum</code>.</p>",
        "id": 287589999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656341998
    },
    {
        "content": "<p>I did not know about <code>has_homology</code>! The structure I suggest is more flexible because in <code>has_homology</code> the homologue of the object <code>K</code> I mention above must <code>kernel g</code> (and not any object <code>K</code> which is <em>a</em> kernel). I will see if <code>has_homology</code> is flexible enough to get the commutation of homology and exact functor.</p>",
        "id": 287592229,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656342920
    },
    {
        "content": "<p>Agreed. Adam also suggested this generalization to me a while ago.</p>",
        "id": 287592422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656343017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Jo√´l Riou</span> Did you already settle on a solution for this isomorphism?</p>",
        "id": 287696516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656411859
    },
    {
        "content": "<p><code>has_homology_aux2.lean</code> also has some sorries that are harder than they should be.</p>",
        "id": 287701682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656415302
    },
    {
        "content": "<p>I already have a no-sorry draft version of the <code>homology_iso</code>in <code>exact_functor.lean</code>. I am working on cleaning a little bit my API (and proving a few more lemmas), and then most of these sorries could be removed (even though, I may require changing some defs).</p>",
        "id": 287702954,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656416109
    },
    {
        "content": "<p>Ok, cool! Looking forward to your push.<br>\nThanks a lot for your help!</p>",
        "id": 287703009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656416141
    },
    {
        "content": "<p>I have developed significantly my API. <code>homology_iso</code> is now sorry free. I redefined <code>homology_functor_iso</code>, for which only the naturality remains to be proven (this broke the unfinished proof in <code>ab5.lean</code>, but this should not be a serious problem). At the end of <code>homology_iso_datum.lean</code>, I have defined the <code>homology_iso_datum</code> that computes the homology of a complex, which is basically what you need for the sorries in <code>has_homology_aux2.lean</code>: the last basic step is to complete the constructon of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">homology_iso_datum.has_homology</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">homology_iso_datum</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_homology</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(I believe I know at least an ugly way to do this: starting from the \"canonical\" <code>has_homology f g (homology f g)</code>given by <code>homology.has</code> and transport everything by the isomorphisms I have constructed...)</p>",
        "id": 287764900,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656444717
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 287765338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656444952
    },
    {
        "content": "<p>Feel free to turn <code>has_homology_aux2.lean</code> upside down (-;</p>",
        "id": 287765425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656444973
    },
    {
        "content": "<p>If you have an (easy) way to kill those 12 sorries, that would be awesome <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 287765454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656444995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Isomorphisms.20with.20the.20homology/near/287765454\">said</a>:</p>\n<blockquote>\n<p>If you have an (easy) way to kill those 12 sorries, that would be awesome <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>\n</blockquote>\n<p>Done! (It was not as ugly as I expected.)</p>",
        "id": 287788383,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656457720
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 287804527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656474430
    },
    {
        "content": "<p>For <code>eval_functor_homology_iso</code> in <code>homological_complex2.lean</code>, I would have a very drastic simplification of the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preserves_finite_limits</span> <span class=\"o\">((</span><span class=\"n\">evaluation</span> <span class=\"n\">X</span> <span class=\"bp\">ùíú</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">introI</span><span class=\"o\">,</span> <span class=\"n\">introI</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">limits.evaluation_preserves_limits_of_shape</span><span class=\"o\">,</span> <span class=\"o\">}‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preserves_finite_colimits</span> <span class=\"o\">((</span><span class=\"n\">evaluation</span> <span class=\"n\">X</span> <span class=\"bp\">ùíú</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">introI</span><span class=\"o\">,</span> <span class=\"n\">introI</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">limits.evaluation_preserves_colimits_of_shape</span><span class=\"o\">,</span> <span class=\"o\">}‚ü©</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">functor_eval_homology_iso</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚•§</span> <span class=\"bp\">ùíú</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">G.homology</span> <span class=\"n\">i</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">functor_eval.flip.obj</span> <span class=\"n\">G</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">homology_functor</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat_iso.of_components</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">functor.homology_functor_iso</span> <span class=\"o\">((</span><span class=\"n\">evaluation</span> <span class=\"n\">X</span> <span class=\"bp\">ùíú</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval_functor_homology_iso</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚•§</span> <span class=\"n\">homological_complex</span> <span class=\"bp\">ùíú</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">homology_functor</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">‚âÖ</span> <span class=\"o\">(</span><span class=\"n\">eval_functor.obj</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">homology</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">iso_whisker_right</span> <span class=\"o\">(</span><span class=\"n\">eval_functor_equiv.unit_iso.app</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">homology_functor</span> <span class=\"bp\">ùíú</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">‚â™‚â´</span>\n  <span class=\"o\">(</span><span class=\"n\">functor_eval_homology_iso</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">eval_functor</span> <span class=\"n\">_</span> <span class=\"n\">X</span> <span class=\"bp\">ùíú</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>The only <code>sorry</code> here is the naturality of a map, which should easily follow from the general naturality of the constructions I made in <code>homology_iso_datum</code>. (More precisely it would be the naturality of <code>homology_functor_iso</code> with respect to a natural transformation between exact functors.)</p>",
        "id": 287809528,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656481179
    },
    {
        "content": "<p>Does the rest of the project compile if you use that definition?</p>",
        "id": 287809572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656481213
    },
    {
        "content": "<p>Or do changed defeqs mess up other parts of LTE?</p>",
        "id": 287809585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656481234
    },
    {
        "content": "<p>I think it does compile: it is used only in <code>for_mathlib/ab5.lean</code> in an unfinished proof. Anyway, I have to check the naturality mentioned above in order to remove the last <code>sorry</code>  in the proof of <code>homology_functor_iso</code>in <code>exact_functor.lean</code>.</p>",
        "id": 287809885,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656481636
    },
    {
        "content": "<p>Ok, cool. Feel free to push this already.</p>",
        "id": 287809905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656481666
    },
    {
        "content": "<p>I will stop working on that file until you release it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 287809990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656481742
    },
    {
        "content": "<p>I'm testing your API in <code>breen_deligne/main.lean</code></p>",
        "id": 287810900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656482803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Jo√´l Riou</span> I've been trying to finish off the sorries at the bottom of the file. But I guess I'm missing tricks on how to use your API, because it's not really going anywhere.</p>",
        "id": 287829285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656495968
    },
    {
        "content": "<p>About the very last <code>sorry</code> in <code>breen_deligne/main.lean</code>, I do not know all the details, but it looks like a compatibility of <code>homology_functor_iso</code> with respect to natural transformations between exact functors (it is not stated nor proved yet in <code>exact_functor.lean</code>), and here the natural transformation would come from the tautological endomorphism on objects in <code>endomorphisms A</code>. Does that make sense?</p>",
        "id": 287852165,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656509039
    },
    {
        "content": "<p>It makes sense mathematically, but Lean doesn't play ball</p>",
        "id": 287856215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656510619
    },
    {
        "content": "<p>Wait, do you mean the <code>sorry</code> in <code>hH0_endo</code>? I don't think all the functors involved are exact. But would you need that? I think they just need to play nice with <code>endomorphisms</code>.</p>",
        "id": 287859218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656511791
    },
    {
        "content": "<p>I am not sure. Now, I am doing my best to stabilize my definitions. There is still some work to do on <code>functor_homology_iso</code>. For now, I suggest you do not rely on the datum in the definition of <code>functor_homology_iso</code>, but you may write some sorried equational lemmas for the basic general compatibilities you need; in principle, I should be able to prove these.</p>",
        "id": 287872350,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656516594
    },
    {
        "content": "<p>Well, for the next 4 hours, I'm offline anyway (-; Will keep an eye on what you push.</p>",
        "id": 287873199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656516906
    },
    {
        "content": "<p>For the next 4 hours, I teach dance!</p>",
        "id": 287876656,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656518183
    },
    {
        "content": "<p>Now, the natural isomorphism <code>homology_functor_iso</code> which expresses that homology of complexes commutes with exact functors is almost sorry free (it relies only on one basic sorry in <code>homology_map_datum.lean</code>. To do that, I introduced the category <code>short_complex C</code> of complexes <code>X ‚ü∂ Y ‚ü∂ Z</code>, and defined the functor which basically sends a <code>K : homological_complex C c</code> to the complex <code>K.X_prev i ‚ü∂ K.X i ‚ü∂ K.X_next i</code>. As the homology of such <code>short_complex</code>es are functorialy well behaved with respect to exact functors (because of <code>homology_nat_iso : (short_complex.homology_functor : short_complex A ‚•§ A) ‚ãô F ‚âÖ F.map_short_complex ‚ãô short_complex.homology_functor</code>), it sufficed to check that the short complex <code>K.X_prev i ‚ü∂ K.X i ‚ü∂ K.X_next i</code> is mapped by <code>F</code> to the corresponding complex for <code>F.map_homological_complex K</code>, which is annoying only because <code>F</code> may not send the chosen <code>0</code> to the chosen <code>0</code>. Eventually, <code>homology_functor_iso</code> is now a composition of 7 natural isomorphisms, 5 of which is basically <code>iso.refl</code> on objects.</p>\n<p>I will work now on the last sorry in <code>homology_map_datum.lean</code>, and for that, I will have to prove some equational lemmas relating my constructions will <code>homology.desc'</code>, etc, which should also be helpful in order to proceed with the computations...</p>",
        "id": 288012139,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656588400
    },
    {
        "content": "<p>The file <code>for_mathlib/exact_functor.lean</code> is now completely sorry free, and I have established the appropriate equational lemmas <code>iso_hom</code> and <code>iso_inv</code> in <code>homology_map_iso</code>. I believe that what is still missing in order to do computations are basic equational lemmas like <code>homology_functor_iso_hom</code> that would compute <code>homology_functor_iso</code> (this would basically be showing consistency with the first tentative approach to the definition of <code>homology_functor</code>). I shall not do anything more today, but it should be easy to at least state these in the cases that are needed for the computations (depending whether the index <code>i</code> has a given <code>prev</code> and <code>next</code>, or only one of these, etc.).</p>",
        "id": 288030817,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656597251
    },
    {
        "content": "<p>I'm about to leave on a road trip to NL. Will be back on Saturday.</p>",
        "id": 288032332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656597858
    },
    {
        "content": "<p>Thanks for what you've done.</p>",
        "id": 288032348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656597863
    },
    {
        "content": "<p>You posted a sketch for the stuff in <code>src/for_mathlib/homological_complex2.lean</code>. I guess you can push that to master now?</p>",
        "id": 288032419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656597899
    },
    {
        "content": "<p>Seemed like that would help a lot with those sorries.</p>",
        "id": 288032483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656597934
    },
    {
        "content": "<p>Yes, the last sorry in <code>homological_complex2.lean</code>should be very easy now. I shall try to complete this tomorrow.</p>",
        "id": 288033262,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656598223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Jo√´l Riou</span> It's amazing to see all those sorries vanish. Great job!</p>\n<p>Could you please also take a look at this one?<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/00154e0cab9a03c476ac40224c1b626ce5641682/src/breen_deligne/main.lean#L494\">https://github.com/leanprover-community/lean-liquid/blob/00154e0cab9a03c476ac40224c1b626ce5641682/src/breen_deligne/main.lean#L494</a></p>",
        "id": 288255505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656747935
    },
    {
        "content": "<p>I just closed the other sorry above it.</p>",
        "id": 288256579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656749610
    },
    {
        "content": "<p>I will try to see what I can do for this. (I may have to translate some defs from <code>has_homology</code> to <code>homology_map_datum</code>, but I will try not to break anything...)<br>\nBy the way, do we need <code>for_mathlib/derived/homology.lean</code> which does not seem to be imported by any other file? (I could certainly handle these sorries, but not sure if it is worth?).</p>",
        "id": 288258555,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656752535
    },
    {
        "content": "<p>Yes, I was just looking into that question</p>",
        "id": 288258577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656752615
    },
    {
        "content": "<p>I think we might need it for something like <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/condensed/bd_lemma.lean#L210\">https://github.com/leanprover-community/lean-liquid/blob/master/src/condensed/bd_lemma.lean#L210</a></p>",
        "id": 288258646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656752693
    },
    {
        "content": "<p>But maybe we can prove that in a different way as well.</p>",
        "id": 288258653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656752705
    },
    {
        "content": "<p>With the commutation of filtered colimits and homology that I just finished, we have already this in <code>for_mathlib/ab5.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"n\">homology_functor_preserves_filtered_colimit</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">‚•§</span> <span class=\"n\">homological_complex</span> <span class=\"n\">A</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">preserves_colimit</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">homology_functor</span> <span class=\"n\">A</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">preserves_colimit_of_nat_iso</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">short_complex.homology_functor_iso</span> <span class=\"n\">A</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>Then, it seems it would sufficient to prove <code>(BD.eval' (forget AddCommGroup.{u+1} ‚ãô AddCommGroup.free)</code> commutes with filtered colimits.</p>",
        "id": 288259005,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656753194
    },
    {
        "content": "<p>Cool, can you make</p>\n<blockquote>\n<p>prove <code>(BD.eval' (forget AddCommGroup.{u+1} ‚ãô AddCommGroup.free)</code> commutes with filtered colimits</p>\n</blockquote>\n<p>into a new sorry, and close the old one? Then I think we can remove <code>derived/homology.lean</code>.</p>",
        "id": 288259082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656753295
    },
    {
        "content": "<p>Ok, I will do that after I handle the sorry you mentioned about the naturality of <code>eval'_homology</code>.</p>",
        "id": 288259967,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656754604
    },
    {
        "content": "<p>Merci!</p>",
        "id": 288260159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656754837
    },
    {
        "content": "<p>It seems that I am not able to handle the explicit universe parameters to make this work, but I assume it would not be difficult for you.</p>",
        "id": 288272667,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656771540
    },
    {
        "content": "<p>But the <code>sorry</code> is gone, right?</p>",
        "id": 288272759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656771642
    },
    {
        "content": "<p>Did it move to another place?</p>",
        "id": 288272764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656771652
    },
    {
        "content": "<p>What I was trying to say is that I was not able to deduce <code>preserves_filtered_colimits\n  (BD.eval' (forget AddCommGroup.{u+1} ‚ãô AddCommGroup.free) ‚ãô\n    homology_functor AddCommGroup.{u+1} (complex_shape.up ‚Ñ§) i)</code><br>\nfrom a sorried <code>preserves_filtered_colimits\n  (BD.eval' (forget AddCommGroup.{u+1} ‚ãô AddCommGroup.free)</code> even though we have <code>preserves_filtered_colimits   homology_functor AddCommGroup.{u+1} (complex_shape.up ‚Ñ§) i)</code>, only because I was not able to handle universe parameters with <code>comp_preserves_filtered_colimits</code>.</p>",
        "id": 288273780,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656772912
    },
    {
        "content": "<p>ooh, ok. Let me try</p>",
        "id": 288273835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656772960
    },
    {
        "content": "<p>The universe strikes back!</p>",
        "id": 288273863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773029
    },
    {
        "content": "<p>It will be some subpermutation of <code>.{u+2 u u+1}</code></p>",
        "id": 288273909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773058
    },
    {
        "content": "<p>I now get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">preserves_finite_colimits.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">homology_functor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.up.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288274048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656773313
    },
    {
        "content": "<p>That works?</p>",
        "id": 288274055,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773336
    },
    {
        "content": "<p>Wait, something very weird is happening</p>",
        "id": 288274056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656773339
    },
    {
        "content": "<p>where is the <code>0</code> coming from?</p>",
        "id": 288274067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773374
    },
    {
        "content": "<p>oh the Z</p>",
        "id": 288274069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773384
    },
    {
        "content": "<p>Oops, I meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">preserves_filtered_colimits.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">BD.eval'</span> <span class=\"o\">(</span><span class=\"n\">forget.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">AddCommGroup.free.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}))</span>\n</code></pre></div>\n<p>but same problem</p>",
        "id": 288274111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656773414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Jo√´l Riou</span> You added that somewhere, right?</p>",
        "id": 288274117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656773429
    },
    {
        "content": "<p>I do not think I have added anything about <code>AddCommGroup</code>! I have only proved the <code>preserves_colimit F (homology_functor A c i)</code> from <code>for_mathlib/ab5.lean</code>.</p>",
        "id": 288274233,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656773610
    },
    {
        "content": "<p>Ok, gotcha</p>",
        "id": 288274243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656773632
    },
    {
        "content": "<p>But that sorry should be easy with what we already have.</p>",
        "id": 288274288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773650
    },
    {
        "content": "<p>There's the lemma that reduces it to showing that <code>forget.{u+2 u+1 u+1} AddCommGroup.{u+1} ‚ãô AddCommGroup.free.{u+1})</code> preserves filtered colimits, and that's again true by because each of the two functors in the composition preserves such colimits.</p>",
        "id": 288274301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773699
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">preserves_filtered_colimits.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">homology_functor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">AddCommGroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.up.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is that conclusion done somewhere?</p>",
        "id": 288274318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656773726
    },
    {
        "content": "<p>That should follow from the <code>AB5</code> file.</p>",
        "id": 288274334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773760
    },
    {
        "content": "<p>I suppose TC should just pick it up?</p>",
        "id": 288274407,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773839
    },
    {
        "content": "<p>if not the isntance is called <code>category_theory.homology_functor_preserves_filtered_colimits</code></p>",
        "id": 288274423,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656773869
    },
    {
        "content": "<p>I pushed something that breaks the sorry into pieces.</p>",
        "id": 288274564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656774006
    },
    {
        "content": "<p>ok, I'm now importing AB5. Let's see if that helps.</p>",
        "id": 288274598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656774084
    },
    {
        "content": "<p>hmm, it aint working, we are missing some instances</p>",
        "id": 288274890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656774448
    },
    {
        "content": "<p>We also need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">preserves_filtered_colimits.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">homological_complex.embed.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">complex_shape.embedding.nat_down_int_up</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288275007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656774590
    },
    {
        "content": "<p>Oh that might actually be missing</p>",
        "id": 288275195,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656774829
    },
    {
        "content": "<p>If we have/had a kind of <code>eval_jointly_reflects_colimits</code> or something, it should be easy using <code>embed_comp_eval</code> in <code>complex_extend.lean</code> that I have added today.</p>",
        "id": 288276273,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1656776282
    }
]