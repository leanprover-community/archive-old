[
    {
        "content": "<p>I've been replacing the sequences of constants <code>c_</code> and <code>c'</code> by <code>κ</code> and <code>κ'</code> everywhere. So now the Lean code matches the blueprint and Analytic.pdf again. (Over there, the change was made a couple of weeks ago.)<br>\nThe main reason: there is a constant <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">c_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> that has mostly nothing to do with the constants <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">c_1, c_2, \\ldots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span>. So now this distinction is a lot more clear.</p>",
        "id": 242025308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623223133
    },
    {
        "content": "<p>To make the (old) confusion worse... in Lean the sequence of constants <code>c_</code> of course was indexed by <code>nat</code> and so there was also a <code>c_ 0</code>. In practice <code>c_ 0 = 1</code>, and that's why there is no <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">c_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in the sequence of constants in the PDF. But you can see why it's a good idea to distinguish the notations <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 242025717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623223419
    },
    {
        "content": "<p>I'm very bad with choosing nonconflicting notation. Any auxiliary index is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, no matter whether other <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>'s are around, etc... Thanks for the disambiguation!</p>",
        "id": 242026359,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623223879
    },
    {
        "content": "<p>Well, Lean can actually handle multiple variables with the same name in the same context... so technically there is no problem</p>",
        "id": 242026448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623223925
    },
    {
        "content": "<p>But you might need to jump through several hoops later on to explain to it which of the different <code>i</code>s you want to use</p>",
        "id": 242026491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623223967
    },
    {
        "content": "<p>Oh, how does Lean do that? That's cool</p>",
        "id": 242026587,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623224046
    },
    {
        "content": "<p>It has unique identifiers behind the scenes</p>",
        "id": 242026604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623224066
    },
    {
        "content": "<p>Actually, variables are implemented using <em>de Bruijn indices</em> (which are unrelated to the de Bruijn factor)</p>",
        "id": 242026647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623224118
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/De_Bruijn_index\">https://en.wikipedia.org/wiki/De_Bruijn_index</a></p>",
        "id": 242026662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623224136
    },
    {
        "content": "<p>But there is some interface on top of that which allows human-readable variable names</p>",
        "id": 242026735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623224169
    }
]