[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> wrote some fantastic tooling for the Sphere eversion project, and has improved it over the last couple of days.<br>\nI've used it to write some sort of blueprint. But the parts that lie before us are not yet fleshed out in a lot of detail. Work in progress. As a wonderful side effect, we get a really nice graph of what is done, and where we want to go (at least as first target).</p>\n<p>I hope that this will move to a more stable URL in a couple of days, but I'm sharing this now because it might already be useful for some things.</p>\n<p><a href=\"https://math.commelin.net/web/\">https://math.commelin.net/web/</a><br>\n<a href=\"https://math.commelin.net/web/dep_graph.html\">https://math.commelin.net/web/dep_graph.html</a></p>",
        "id": 224085391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687170
    },
    {
        "content": "<p>I have not yet updated the text about the snake lemma to reflect the recent discussions.</p>",
        "id": 224085430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687186
    },
    {
        "content": "<p>If you want to contribute to the text, just ping and I'll give you access to the underlying repo.</p>",
        "id": 224085489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> It might be worthwhile to add these two links to the <code>README.md</code> file in <code>leanprover-community/lean-liquid</code>.</p>",
        "id": 224086159,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611687500
    },
    {
        "content": "<p>I was thinking to wait with that till we have a better URL</p>",
        "id": 224086195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687521
    },
    {
        "content": "<p>Ah ok.</p>",
        "id": 224086212,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611687529
    },
    {
        "content": "<p>I mostly don't want to dig through zulip every time I want to find it :)</p>",
        "id": 224086260,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611687546
    },
    {
        "content": "<p>I'm sharing this now with people actively working on the project. But it should become a resource for others as well that want to browse/study the code.</p>",
        "id": 224086267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687549
    },
    {
        "content": "<p>Yes, but currently it's a random subdirectory of my homepage...</p>",
        "id": 224086300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687565
    },
    {
        "content": "<p>It should just use github pages, and auto-build using CI. But I don't really know how to set that up.</p>",
        "id": 224086367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687593
    },
    {
        "content": "<p>I guess we can ask how <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> set it up for sphere eversion...</p>",
        "id": 224086489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611687634
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/leanprover-community/sphere-eversion\">https://github.com/leanprover-community/sphere-eversion</a> has no CI.</p>",
        "id": 224086515,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611687646
    },
    {
        "content": "<p>Patrick is very busy with setting up his course. And indeed the sphere project doesn't use CI.</p>",
        "id": 224086583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687671
    },
    {
        "content": "<p>But CI should be easier now, with the changes that Patrick made to his tooling last week.</p>",
        "id": 224086605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611687686
    },
    {
        "content": "<p><a href=\"http://leanprover-community.github.io/liquid\">http://leanprover-community.github.io/liquid</a></p>",
        "id": 224237606,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611776900
    },
    {
        "content": "<p>That will auto update on pushes to the master branch of the blueprint, like latex changes</p>",
        "id": 224237677,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611776940
    },
    {
        "content": "<p>And will also automatically make sure that it links properly to the declarations in the actual lean repo</p>",
        "id": 224237727,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611776964
    },
    {
        "content": "<p>Thank you so much for setting up the CI!</p>",
        "id": 224237832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611777011
    },
    {
        "content": "<p><a href=\"http://leanprover-community.github.io/liquid/dep_graph.html\">http://leanprover-community.github.io/liquid/dep_graph.html</a> is the graph. we should add a link to it from the main page...</p>",
        "id": 224237883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611777041
    },
    {
        "content": "<p>It's very nice to work with Patrick's tools, they're very clear on what they do. The ci is just plumbing his great tools with the ridiculous requirements of getting graphviz and latex to work.</p>",
        "id": 224238001,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611777105
    },
    {
        "content": "<p>Also Ron's leanprover contrib actions were quite helpful. I think the ci here could be generalized to any mathlib project. And we could provide lean images and actions.</p>",
        "id": 224238228,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611777209
    },
    {
        "content": "<p>Although probably not worth the effort for lean 3 anymore...</p>",
        "id": 224238259,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611777229
    },
    {
        "content": "<p>This stuff is really sexy.</p>",
        "id": 224240318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611778202
    },
    {
        "content": "<p>I also like how the graph clearly explains how we're about 3/4 the way through the proof :P</p>",
        "id": 224240412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611778242
    },
    {
        "content": "<p>That only means that I should write a lot more stuff about how we break 9.5 into pieces....</p>",
        "id": 224240475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611778273
    },
    {
        "content": "<p>Def 7 and Lemma 8 in section 2 have missing <code>\\to</code>s.</p>",
        "id": 224261352,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1611788499
    },
    {
        "content": "<p>And in the bibliography there is</p>\n<blockquote>\n<p>to3em, <em>Lectures on Analytic Geometry,</em> 2020.</p>\n</blockquote>",
        "id": 224261599,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1611788622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> thanks, I'll fix them asap</p>",
        "id": 224288360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611814821
    },
    {
        "content": "<p>I fixed the <code>\\to</code>s. I have no idea what's happening in the bibliography. The <code>.bib</code> file looks fine.</p>",
        "id": 224433935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611900218
    },
    {
        "content": "<p>Oooh, in the PDF it looks fine. It should be a long underscore, indicating \"same author as above\".</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> this seems like a small bug in plastex. Can you confirm?</p>",
        "id": 224434052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611900356
    },
    {
        "content": "<p>I've changed the bib style to avoid the issue</p>",
        "id": 224445558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611911485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> it seems <a href=\"https://github.com/leanprover-community/liquid/runs/1841844125?check_suite_focus=true\">CI is no longer working</a>.</p>",
        "id": 225359003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612559943
    },
    {
        "content": "<p>Hmm. Seems like a pygraphviz issue. Could this be a function of pip turning off py2 support? Weird, because we're using py3.</p>",
        "id": 225359206,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612560058
    },
    {
        "content": "<p>Ah I see new <code>pygraphviz</code> doesn't need that cli arg</p>",
        "id": 225359345,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612560126
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">system_of_double_complexes.lean</span><span class=\"o\">:</span><span class=\"mi\">165</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">col''</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">system_of_double_complexes.col''</span>\n</code></pre></div>\n<p>Is this expected?</p>",
        "id": 225360774,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612560820
    },
    {
        "content": "<p>Ah, it caught a bad lean-liquid commit. Let's try again.</p>",
        "id": 225361023,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612560952
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">kpathsea</span><span class=\"o\">:</span><span class=\"n\">make_tex</span><span class=\"o\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">filename</span> <span class=\"bp\">`</span><span class=\"n\">Latin</span> <span class=\"n\">Modern</span> <span class=\"n\">Math</span><span class=\"bp\">/</span><span class=\"n\">OT'</span><span class=\"o\">,</span> <span class=\"n\">contains</span> <span class=\"sc\">' '</span>\n<span class=\"o\">)</span>\n\n<span class=\"bp\">!</span> <span class=\"n\">Package</span> <span class=\"n\">fontspec</span> <span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">font</span> <span class=\"s2\">\"Latin Modern Math\"</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">found.</span>\n\n<span class=\"n\">For</span> <span class=\"n\">immediate</span> <span class=\"n\">help</span> <span class=\"n\">type</span> <span class=\"n\">H</span> <span class=\"bp\">&lt;</span><span class=\"n\">return</span><span class=\"bp\">&gt;.</span>\n <span class=\"bp\">...</span>\n\n<span class=\"n\">l.9</span> <span class=\"bp\">\\</span><span class=\"n\">setmathfont</span>\n                <span class=\"o\">[</span><span class=\"n\">range</span><span class=\"bp\">=\\</span><span class=\"n\">varnothing</span><span class=\"o\">]{</span><span class=\"n\">Asana</span> <span class=\"n\">Math</span><span class=\"o\">}</span>\n<span class=\"bp\">?</span>\n<span class=\"bp\">!</span> <span class=\"n\">Emergency</span> <span class=\"n\">stop.</span>\n <span class=\"bp\">...</span>\n\n<span class=\"n\">l.9</span> <span class=\"bp\">\\</span><span class=\"n\">setmathfont</span>\n                <span class=\"o\">[</span><span class=\"n\">range</span><span class=\"bp\">=\\</span><span class=\"n\">varnothing</span><span class=\"o\">]{</span><span class=\"n\">Asana</span> <span class=\"n\">Math</span><span class=\"o\">}</span>\n<span class=\"n\">No</span> <span class=\"n\">pages</span> <span class=\"n\">of</span> <span class=\"n\">output.</span>\n<span class=\"n\">Transcript</span> <span class=\"n\">written</span> <span class=\"n\">on</span> <span class=\"bp\">../</span><span class=\"n\">print</span><span class=\"bp\">/</span><span class=\"n\">blueprint.log.</span>\n</code></pre></div>",
        "id": 225361875,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612561462
    },
    {
        "content": "<p>I have to log off, unfortunately. So I can't fix this particular error currently. Next time I'll be able to will be tomorrow evening. Apologies. But the pygraphviz should be fixed though!</p>",
        "id": 225361924,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612561497
    },
    {
        "content": "<p>By the way --- the blueprint and/or dependency graph don't seem to have many links to them! I couldn't find any, and had to construct the URL myself from knowing how github-pages works. Presumably the README.md at <a href=\"https://github.com/leanprover-community/lean-liquid\">https://github.com/leanprover-community/lean-liquid</a> and at <a href=\"https://github.com/leanprover-community/liquid\">https://github.com/leanprover-community/liquid</a> should contain direct links to the rendered pages?</p>",
        "id": 225367392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612564566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> The missing font error seems unrelated. The \"Latin Modern Math\" font was added to <code>blueprint.tex</code> in <a href=\"https://github.com/leanprover-community/liquid/commit/c721a89cd2e47383d52731e6c1a7a26ce5a6c03f\">this commit</a>. I'm not sure why the font isn't being found though; as far as I can tell it should be included in the TexLive image..?</p>",
        "id": 225367576,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612564706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Sorry, this is an artifact of launching the blueprint, but not creating links because it wasn't really fleshed out and there was no CI yet. Then gradually fixing those issues, but forgetting to add links. We should add those links now.</p>",
        "id": 225384431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612583139
    },
    {
        "content": "<p>I've added links to both READMEs</p>",
        "id": 225395645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612596942
    },
    {
        "content": "<p>I have an idea on how to fix it, but before that, can we try to revert the font commit that added the Latin Modern Math and Asana Math to the tex files? The new <code>apt add texlive...</code> line would also need to be removed.</p>",
        "id": 225439405,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612661249
    },
    {
        "content": "<p>I'm sure Patrick won't mind as long as you're able to figure out how to get it working later.</p>",
        "id": 225439565,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612661572
    },
    {
        "content": "<p>I'm deeply shocked that any kind of setup can have difficulties having Latin modern math font, but I don't mind switching to any other font that has decent unicode support.</p>",
        "id": 225453873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612689103
    },
    {
        "content": "<p>In any kind of project mixing LaTeX and Lean we want to be able to copy paste between Lean and LaTeX without converting unicode to ascii or ascii to unicode so <code>\\usepackage{unicode-math}</code> is crucial.</p>",
        "id": 225453929,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612689186
    },
    {
        "content": "<p>The issue was naming the font, it requires hyphens for the Unix setup. I'm finalizing some fixes to speed up CI too</p>",
        "id": 225465330,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612706492
    },
    {
        "content": "<p>The CI is back to being fixed. And it should be marginally faster now too.</p>",
        "id": 225467003,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612709236
    },
    {
        "content": "<p>The crucial fix was <a href=\"https://github.com/leanprover-community/liquid/commit/063ed84ee1d21f0d330b285883b26558e9764aec\">https://github.com/leanprover-community/liquid/commit/063ed84ee1d21f0d330b285883b26558e9764aec</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">\\</span><span class=\"n\">setmathfont</span><span class=\"o\">{</span><span class=\"n\">latinmodern</span><span class=\"bp\">-</span><span class=\"n\">math.otf</span><span class=\"o\">}</span>\n<span class=\"bp\">\\</span><span class=\"n\">setmathfont</span><span class=\"o\">[</span><span class=\"n\">range</span><span class=\"bp\">=\\</span><span class=\"n\">varnothing</span><span class=\"o\">]{</span><span class=\"n\">Asana</span> <span class=\"n\">Math</span><span class=\"o\">}</span> <span class=\"bp\">\\</span><span class=\"n\">setmathfont</span><span class=\"o\">[</span><span class=\"n\">range</span><span class=\"bp\">=\\</span><span class=\"n\">varnothing</span><span class=\"o\">]{</span><span class=\"n\">Asana</span><span class=\"bp\">-</span><span class=\"n\">Math.otf</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 225467009,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612709270
    },
    {
        "content": "<p>Hmm, no, the blueprint is now just the bibliography.</p>",
        "id": 225467052,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612709316
    },
    {
        "content": "<p>OK, I've reverted the various CI changes. The only crucial fixes were working with the newer pygraphviz and the font paths. And the websites work now. Sorry this took a while.</p>",
        "id": 225468472,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612711078
    },
    {
        "content": "<p>Thanks for working on this!</p>",
        "id": 225468563,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612711171
    },
    {
        "content": "<p>Yes -- many thanks. I show this web page to mathematicians quite a bit.</p>",
        "id": 225468667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612711280
    },
    {
        "content": "<p>I'm glad to help. This type of CI work is a lot of yak shaving. And unfortunately, the github actions aren't amenable to testing locally. The only tool I know that supports this (nektos/act) doesn't support the yaml that we need to pipe the run commands to the texlive image.</p>",
        "id": 225468766,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612711372
    },
    {
        "content": "<p>I'm extremely grateful for your work on this because I hate setting up CI (exactly because of the difficulties you met).</p>",
        "id": 225469723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612712633
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/BG-cXatsvRDfDcDuxk5GLp_q/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BG-cXatsvRDfDcDuxk5GLp_q/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/BG-cXatsvRDfDcDuxk5GLp_q/image.png\"></a></div>",
        "id": 225469862,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612712790
    },
    {
        "content": "<p>Back to working. My current attempts at making it less brittle have led to empty pages. So I'm going to leave as is for now. The rate limiting step is still building the <code>lean-liquid</code> library.</p>",
        "id": 225469896,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612712867
    },
    {
        "content": "<p>Happy to participate in the project!</p>",
        "id": 225469901,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612712881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Thanks a lot for making everything work again!</p>",
        "id": 225649203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612850631
    },
    {
        "content": "<p>Do you prefer all the Proof sections expanded by default on page load?</p>",
        "id": 225649261,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612850694
    },
    {
        "content": "<p>I don't have a strong preference here. What do others think? <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 225649768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612851354
    },
    {
        "content": "<p>This is actually a bug in the current blueprint plugin for plasTeX. Around Christmas I updated the default plasTeX theme and when I set up the liquid blueprint I adapted the blueprint plugin only minimally.  If you look at the sphere eversion blueprint you'll see proof are folded by default and the + sign next to the proof word actually works.</p>",
        "id": 225658683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612860548
    },
    {
        "content": "<p>This is maybe my fault, but in the proof of lemmas 4.7 and 4.8 in <a href=\"https://leanprover-community.github.io/liquid/\">https://leanprover-community.github.io/liquid/</a> there is an equation that is not well displayed (I see the LaTeX source instead of the actual formula)</p>",
        "id": 225682284,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612873747
    },
    {
        "content": "<p>This is purely a mathjax issue, but I have a hard time understanding what mathjax doesn't like here (given that it likes several things that seem to use the same LaTeX stuff).</p>",
        "id": 225694110,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612879643
    },
    {
        "content": "<p>Is it able to understand \\left and \\right with the unicode symbol for \\Vert?</p>",
        "id": 225694844,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612879982
    },
    {
        "content": "<p>Minimized version:</p>\n<div class=\"codehilite\" data-code-language=\"HTML\"><pre><span></span><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/x-mathjax-config\"</span><span class=\"p\">&gt;</span>\n  <span class=\"nx\">MathJax</span><span class=\"p\">.</span><span class=\"nx\">Hub</span><span class=\"p\">.</span><span class=\"nx\">Config</span><span class=\"p\">({</span><span class=\"nx\">tex2jax</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"nx\">inlineMath</span><span class=\"o\">:</span> <span class=\"p\">[[</span><span class=\"s1\">'$'</span><span class=\"p\">,</span><span class=\"s1\">'$'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'\\\\('</span><span class=\"p\">,</span><span class=\"s1\">'\\\\)'</span><span class=\"p\">]]}});</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS_CHTML\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>Mathjax is sometimes strange<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>The following works:<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\\begin{align*}  ‖y‖ <span class=\"err\">&amp;</span> ≤ K ‖dw‖ + τ \\\\ <span class=\"err\">&amp;</span> ≤ K (‖x_{|kc}‖ + K‖dx‖ + η) + τ \\\\ <span class=\"err\">&amp;</span> ≤ K(K + 1) ‖x‖ + Kη + τ \\end{align*}<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>but the following doesn't work:<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\\begin{align*}  ‖x_{|c} - dy‖ <span class=\"err\">&amp;</span> = \\left‖∑_{j ≥ 0} x^j_{|c} - dy^j\\right‖ \\\\ <span class=\"err\">&amp;</span> ≤ ∑_{j ≥ 0} \\left‖x^j_{|c} - dy^j\\right‖ \\\\ <span class=\"err\">&amp;</span> ≤ ∑_{j ≥ 0} K‖dx^j‖ + δ_j \\\\ <span class=\"err\">&amp;</span> ≤ K‖dx‖ + Kε_0 + δ_0 + ∑_{j &gt; 0} (Kε_j + δ_j) \\end{align*}<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div>\n<p>Anyone can paste that in a html file and open it in a browser.</p>",
        "id": 225694932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612880027
    },
    {
        "content": "<p>And Filippo gets credit for a successful psychoanalysis of mathjax!</p>",
        "id": 225695135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612880119
    },
    {
        "content": "<p>So we should replace <code>\\left‖</code> by <code>\\left\\|</code> everywhere in the blueprint.</p>",
        "id": 225695264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612880171
    },
    {
        "content": "<p>Maybe it's a good place to point out that <code>||</code> and <code>\\|</code> do not produce the same result in LaTeX (the notes are full of <code>||</code>, this is minor point but since we are discussing it anyway...).</p>",
        "id": 225695438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612880243
    },
    {
        "content": "<p><span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 225695658,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612880335
    },
    {
        "content": "<p>I tried a search/replace, let's see whether CI builds something nicer.</p>",
        "id": 225696435,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612880675
    },
    {
        "content": "<p>Also, do you want to distinguish between delimiters and binary operations? They get mixed up, using |, no?</p>",
        "id": 225697228,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612881005
    },
    {
        "content": "<p>there's \\mid and \\vert right?</p>",
        "id": 225704118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612883651
    },
    {
        "content": "<p>Yes</p>",
        "id": 225704143,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612883661
    },
    {
        "content": "<p>I have refactored the blueprint to the generalisation of the construction system of complexes to work for profinitely filtered pseudo-normed groups with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>-action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 226640741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613559595
    },
    {
        "content": "<p>So now it should match the Lean code again, if I didn't mess up.</p>",
        "id": 226640818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613559612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/blueprint.20.2F.20dependency.20graph/near/224237883\">said</a>:</p>\n<blockquote>\n<p><a href=\"http://leanprover-community.github.io/liquid/dep_graph.html\">http://leanprover-community.github.io/liquid/dep_graph.html</a> is the graph. we should add a link to it from the main page...</p>\n</blockquote>\n<p>I can't see such a link at <a href=\"https://leanprover-community.github.io/liquid/\">https://leanprover-community.github.io/liquid/</a> or on the community homepage.</p>",
        "id": 230300875,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1615790076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Can we easily add a link to the graph from the blueprint page?</p>",
        "id": 230360187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615820873
    },
    {
        "content": "<p>I've started moving bits and pieces of the proof of 9.5 into separate definitions and sublemmas. I will continue doing that in the next few days. Hopefully that will give more people an idea of the global picture of the proof.</p>",
        "id": 230360424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615820940
    },
    {
        "content": "<p>Maybe it's time to split the blueprint into several HTML pages anyway. In that case we can easily add a link to the graph page from the menu, as in <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/index.html\">https://leanprover-community.github.io/sphere-eversion/blueprint/index.html</a></p>",
        "id": 230370392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615824089
    },
    {
        "content": "<p>I already split the tex into several files this morning...</p>",
        "id": 230370654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615824129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> If you could help with splitting the blueprint into several html pages, that would be great</p>",
        "id": 230371216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615824221
    },
    {
        "content": "<p>Sure, I'll do it.</p>",
        "id": 230371443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615824255
    },
    {
        "content": "<p>I managed to waste almost two hours on this because I forgot I set myself a trap in the leanblueprint plasTeX plugin. The liquid blueprint modification is <a href=\"https://github.com/leanprover-community/liquid/commit/a905f671aa440b92ec44bb58e95ff0068579e78f\">two characters long</a> (actually one would be enough) but it didn't work before I <a href=\"https://github.com/PatrickMassot/leanblueprint/commit/a839d37af7b2305ab864b05013186efb626492e1\">fixed the plugin</a>. I forgot that the page layout is overidden in the blueprint plugin (precisely to add this dependency graph link!). And I forgot to propagate a plasTeX change there, so things were inconsistent...</p>",
        "id": 230435239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615849485
    },
    {
        "content": "<p>There's a funny empty lemma in the blueprint now: <a href=\"https://leanprover-community.github.io/liquid/sect0003.html#a0000000085\">https://leanprover-community.github.io/liquid/sect0003.html#a0000000085</a>. The proof is given as:</p>\n<blockquote>\n<p>This is a standard result. We have not formalised it yet, but it is work in progress. </p>\n</blockquote>\n<p><span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 230443644,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1615855345
    },
    {
        "content": "<p>This is referring to Gordan's lemma. It's a rendering issue.</p>",
        "id": 230444708,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615856226
    },
    {
        "content": "<p>You can take a look at the source here...<br>\n<a href=\"https://github.com/leanprover-community/liquid/blob/a905f671aa440b92ec44bb58e95ff0068579e78f/src/polyhedral_lattice.tex#L46\">https://github.com/leanprover-community/liquid/blob/a905f671aa440b92ec44bb58e95ff0068579e78f/src/polyhedral_lattice.tex#L46</a></p>",
        "id": 230444738,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615856280
    },
    {
        "content": "<p>I thought as much. Was just worth flagging, methinks.</p>",
        "id": 230446214,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1615857436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thanks a lot! The new version looks fantastic!</p>",
        "id": 230469660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615879858
    },
    {
        "content": "<p>Ditto, it's very nice!</p>",
        "id": 230606663,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1615935172
    },
    {
        "content": "<p>There's now a pretty fleshed out roadmap again. Major thanks to <span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> for all his input.<br>\nSee <a href=\"https://leanprover-community.github.io/liquid/dep_graph.html\">https://leanprover-community.github.io/liquid/dep_graph.html</a> for what the graph looks like now.</p>",
        "id": 271410633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644488187
    },
    {
        "content": "<p>Important: some of the non-green things might already be done in Lean. I still need to add a bunch of pointers.</p>",
        "id": 271410687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644488219
    },
    {
        "content": "<p>So please ask on this stream before you start hacking on something.</p>",
        "id": 271410718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644488231
    },
    {
        "content": "<p>Here is yet another update of the dep-graph: <a href=\"https://leanprover-community.github.io/liquid/dep_graph_section_2.html\">https://leanprover-community.github.io/liquid/dep_graph_section_2.html</a></p>\n<p>The node <code>M-ses</code> is approaching completion. Filippo is working on this.<br>\nThe node <code>Lbar-ses</code> is also almost done. Two relatively straightforward <code>sorry</code>s remain.</p>\n<p><code>acyclic-sheaf</code> and <code>free-png</code> are two nodes that will require something beyond homological algebra. The rest seems to be only homological algebra.</p>",
        "id": 278308860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649426713
    },
    {
        "content": "<p>How are we defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>i</mi></msup><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^i(S,M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> in <code>acyclic-sheaf</code>? As <code>Ext(Z[S],M)</code>?</p>",
        "id": 278311582,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649427868
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 278311906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649427988
    },
    {
        "content": "<p>Okay, that shouldn't be too bad once we have the LES for Ext (the sheaf condition should be straighforward I think)...</p>",
        "id": 278312242,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649428127
    },
    {
        "content": "<p>I'll try the <code>Lbar-ses</code> sorries now</p>",
        "id": 278312267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649428144
    },
    {
        "content": "<p>Adam, I think you already did a prerequisite in part 1, right?</p>",
        "id": 278312276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649428148
    },
    {
        "content": "<p>We really need to finally get a complete API for Ext...</p>",
        "id": 278312320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649428173
    },
    {
        "content": "<p>Sorry count is going down again! We were almost at a hundred just a little while ago.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">rescale.lean</span>\n<span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">condensify.lean</span>\n<span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">real_measures</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">free_pfpng</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">free_pfpng</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">invpoly</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ext.lean</span>\n<span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses2.lean</span>\n<span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">bicartesian.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les.lean</span>\n<span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les_facts.lean</span>\n<span class=\"mi\">12</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">derived_cat.lean</span>\n<span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les2.lean</span>\n<span class=\"mi\">69</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 278312786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649428370
    },
    {
        "content": "<p>Yet another green oval: <a href=\"https://leanprover-community.github.io/liquid/dep_graph_section_2.html\">https://leanprover-community.github.io/liquid/dep_graph_section_2.html</a><br>\nThanks to <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s efforts <code>Lbar-ses</code> is now done.</p>",
        "id": 278649306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649740661
    },
    {
        "content": "<p>I have spent the day trying to make <code>discrete</code> either a structure or irreducible. This might not look like LTE, but secretly is: afterward I'm hoping both shift functors and pretriangulated categories will work better, and we'll have a clearer path to setting up derived categories.</p>",
        "id": 278649951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649741546
    },
    {
        "content": "<p>Did you hit trouble? Or is it mostly working?</p>",
        "id": 278650053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649741668
    },
    {
        "content": "<p>Unfortunately the coherence theorems for monoidal categories and bicategories seem to rely on this heavily, and I quickly got lost.</p>",
        "id": 278650087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649741728
    },
    {
        "content": "<p>I will ask Yuma and/or Markus soon to help out. Otherwise, it is starting to work. Still a ways to go. I may ask <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> if he can help fix the multiequalizers file, as I'm confused by the errors there and he wrote it recently. (This is on <a href=\"https://github.com/leanprover-community/mathlib/tree/discrete_structure\">branch#discrete_structure</a>.)</p>",
        "id": 278650162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649741821
    },
    {
        "content": "<p>I've finally reached the <code>shift.lean</code> file --- where apparently every single line has a red squiggle. :-) Hopefully this is a good sign, however, that after fixing it will work better.</p>",
        "id": 278650182,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649741866
    }
]