[
    {
        "content": "<p>I have written down the two step projective resolution of modules over PIDs. Do you need the same for <code>AddCommGroup</code>, and if so, can it be transpored using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module\">docs#Module</a>.forget₂_AddCommGroup_full or should I copy it over?</p>",
        "id": 273429086,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646001288
    },
    {
        "content": "<p>i.e. the things to transport would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.homology.homological_complex</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.homology.single</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.projective</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">for_mathlib.projectives</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.abelian</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Module</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">M</span>\n<span class=\"kd\">def</span> <span class=\"n\">two_step_resolution</span> <span class=\"o\">:</span> <span class=\"n\">chain_complex</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">two_step_resolution_hom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">two_step_resolution</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">((</span><span class=\"n\">chain_complex.single₀</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">two_step_resolution_projective_pid</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_principal_ideal_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">two_step_resolution</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_projective_resolution</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">two_step_resolution_hom</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 273429743,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646002436
    },
    {
        "content": "<p>Yes, we'll need it for <code>AddCommGroup</code>.</p>",
        "id": 273446203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646024177
    }
]