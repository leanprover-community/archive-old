[
    {
        "content": "<p>I pushed a statement of lemma 9.7. I characterise \"finite free abelian group\" as \"fin.gen. and torsion free\". As far as I can see, that should work for the proof.</p>",
        "id": 223432840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611175633
    },
    {
        "content": "<p>If someone want to take a shot at this <code>sorry</code>, go ahead.</p>",
        "id": 223432859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611175651
    },
    {
        "content": "<p>I have begun looking at Lemma 9.7 and it really seems feasable. I will try to work on this from next week, but I feel that (at least if one follows the proof in the paper), we need a structure theorem for finite abelian groups to characterize <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>. I think this is OK as part of our project on Dedekind domains where I think we have the structure theorem for f.g. modules over PID.</p>",
        "id": 223629023,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611314596
    },
    {
        "content": "<p>I also think that there is a small typo  on line 3 of the proof in the manuscript, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">Λ</mi><mo>+</mo><mo lspace=\"0em\" rspace=\"0em\">∨</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\Lambda^{\\vee}_+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.057223em;vertical-align:-0.305331em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∨</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.305331em;\"><span></span></span></span></span></span></span></span></span></span> should be a submodule of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" rspace=\"0em\">∨</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda^{\\vee}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∨</span></span></span></span></span></span></span></span></span></span></span></span>, not of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>.</p>",
        "id": 223629136,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611314670
    },
    {
        "content": "<p>Thanks for catching the typo! By the way, as suggested by Johan Commelin, there is now a git repository with the source code <a href=\"https://github.com/PeterScholze/Analytic\">https://github.com/PeterScholze/Analytic</a> , so you can make pull requests for typos. It should also help with version control, as I often update the version on my webpage. (I will now make sure it is synced with the version on github.)</p>",
        "id": 223631591,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611316550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I haven't thought hard about the ingredients yet. But if you already have the structure theorem, that's great!</p>",
        "id": 223633050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611317528
    },
    {
        "content": "<p>Unfortunately I have to take it back! I thought that it had been implemented, but it turns out it is not the case... Never mind, I will try to figure out if it is really needed and will keep you posted.</p>",
        "id": 223653218,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611328195
    },
    {
        "content": "<p>My guess is that it would be fine to assume that all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>'s are of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>. But we can't explicitly write it like that, because we'll run into defeq-issues.</p>",
        "id": 223661132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611331563
    },
    {
        "content": "<p>So we need to describe free abelian groups in such a way that a product of two free abelian groups is again free abelian, etc...</p>",
        "id": 223661228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611331602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> has some partial progress on this</p>",
        "id": 223682984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611341594
    },
    {
        "content": "<p>Is it in <code>mathlib</code> or is she working on her own?</p>",
        "id": 223892728,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611579544
    },
    {
        "content": "<p>I'm meeting her this afternoon, I can ask her the status of things. I don't think she's actively working on it right now</p>",
        "id": 223893622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611580008
    },
    {
        "content": "<p>Sorry to read your message so late, but I'm eager to read anything she's been doing, in case you ended up asking.</p>",
        "id": 223953168,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611605389
    },
    {
        "content": "<p>The answer was <a href=\"https://github.com/101damnations/fg_over_pid\">https://github.com/101damnations/fg_over_pid</a> , which is unfinished, and currently she's more worried about her finals than finishing it (which is fair enough -- she's also working on Koszul complexes in Lean as part of her project)</p>",
        "id": 223967723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611612201
    },
    {
        "content": "<p>Oh sure! Thanks, I'll have a look at the repository and see if I can extract useful pieces of code.</p>",
        "id": 224005828,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611647300
    },
    {
        "content": "<p>Filippo, I have been thinking about how to formalize this result and I suspect that it might be a good idea to break the problem in two.</p>\n<p>First, show that we can fit the \"inequalities\", working over a Q (or R).  This should be easy, since the inequalities are open and homogeneous, so we should get cones that are non-empty, since we start with <code>x</code> that lies in these cones.</p>\n<p>Second, we show that if we have open cones, then we can fit the congruence condition.  This should be a \"density\" argument: an open cone and a lattice should meet.</p>\n<p>How does that sound?  I have not yet written down the statements, nor the frame of the proof of Lemma 9.7, so some details might change.</p>",
        "id": 224007502,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611648805
    },
    {
        "content": "<p>I think that <code>cones</code> are not in mathlib.  We could introduce them as submodules for <code>ℝ≥0</code> in an <code>add_comm_semigroup</code> with an <code>ℝ≥0</code> action.  We could probably get rid of <code>ℝ</code> and work with a linearly ordered group_with_zero.  I am less sure about this.</p>",
        "id": 224008066,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611649212
    },
    {
        "content": "<p>you'll need a semiring, if you want to use mathlibs submodules, right?</p>",
        "id": 224008407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611649495
    },
    {
        "content": "<p>Ah, you are right.  It would be the comm_semiring of the non-negative reals.</p>",
        "id": 224008608,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611649595
    },
    {
        "content": "<p>Still, I think that breaking off the \"inequalities\" from the \"congruences\" will make the arguments easier to write and prove.</p>",
        "id": 224008676,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611649649
    },
    {
        "content": "<p>sounds good</p>",
        "id": 224008693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611649665
    },
    {
        "content": "<p>I am teaching in half an hour, so I am not sure that I can have a skeleton ready before that, but I will try!</p>",
        "id": 224008792,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611649723
    },
    {
        "content": "<p>Since I am not too familiar with structures, does this seem reasonable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonneg_smul_mem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Updated version with <code>nonneg</code> instead of <code>pos</code>.</p>",
        "id": 224009607,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611650266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> from a lean side, yes. From a maths side: can cones be empty? Or do you want <code>zero_mem</code>?</p>",
        "id": 224009889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611650471
    },
    {
        "content": "<p>if yes, then I would change <code>pos_smul_mem</code> to <code>nonneg_smul_mem</code></p>",
        "id": 224009973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611650516
    },
    {
        "content": "<p>For this specific application, I am thinking of open half-spaces, and I thought that having a strict inequality might be better.  I do not know whether this is really a good idea, though.</p>",
        "id": 224010013,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611650523
    },
    {
        "content": "<p>you know more about the maths than I do</p>",
        "id": 224010022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611650537
    },
    {
        "content": "<p>From the presence of a point, I would like to deduce the existence of an open containing it (and inside the cone).  I am hoping to eliminate a few boundary cases like this, but I may simply be shuffling the problem around...  I am not sure.</p>",
        "id": 224010072,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611650598
    },
    {
        "content": "<p>However, I do not have the time to play with either of the two possibilities before my class/meetings.  I am not convinced that the positivity assumption will solve more problems than it creates.</p>",
        "id": 224010195,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611650698
    },
    {
        "content": "<p>My intuition says that you should prove this for <code>nontrivial</code> cones (-;</p>",
        "id": 224010251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611650755
    },
    {
        "content": "<p>In any case, the first few lemmas will be about the fact that a (open/closed) half-space is a cone, that an intersection of cones is a cone... these will require small tweaks, if we change the inequality, right?</p>",
        "id": 224010374,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611650780
    },
    {
        "content": "<p>Ah, ok, I like the non-triviality!</p>",
        "id": 224010393,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611650795
    },
    {
        "content": "<p>Ok, I will make it non-negative multiplication.  It may also be useful to have a zero element.</p>",
        "id": 224010415,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611650819
    },
    {
        "content": "<p>I changed the definition above: our conversation appears meaningless now, but the code is correct!</p>",
        "id": 224010515,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611650894
    },
    {
        "content": "<p>Ooh, but you still don't have a <code>0</code> (-;</p>",
        "id": 224010707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611651054
    },
    {
        "content": "<p>With this definition the <em>open</em> first quadrant in R^2 union the origin is a cone.  While I am not opposed to this, it will be something to keep in mind when proving stuff about cones.</p>",
        "id": 224010713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651058
    },
    {
        "content": "<p>Well, empty is easy to split off, no?</p>",
        "id": 224010731,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651076
    },
    {
        "content": "<p>or should I assume <code>zero_mem</code>?</p>",
        "id": 224010793,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651089
    },
    {
        "content": "<p>If you do, then it's literally <code>submodule nnreal V</code>, right?</p>",
        "id": 224010863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611651127
    },
    {
        "content": "<p>(You might need an <code>is_scalar_tower nnreal real V</code> instance for real vector spaces, if that doesn't yet exist.)</p>",
        "id": 224010888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611651153
    },
    {
        "content": "<p>I have not worked with nnreal, but given the name, I suspect that it is!</p>",
        "id": 224010915,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651176
    },
    {
        "content": "<p>So, maybe I can work with <code>submodule nnreal V</code> and then try to make statements about the submodules with non-empty interior.</p>",
        "id": 224010958,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651214
    },
    {
        "content": "<p>Just a quick comment that the proof of 9.7 really makes critical use of the fact that the cones are defined by inequalities with <em>rational</em> coefficients. And the argument is also only really working with closed cones.</p>",
        "id": 224010963,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611651215
    },
    {
        "content": "<p>It is <code>\\R\\ge0</code> for people with unicode keyboards...</p>\n<p>Ooh well, I guess I can type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\ge0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 224010981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611651226
    },
    {
        "content": "<p>Peter, thank you for your comment: I will keep it in mind!</p>\n<p>In any case, Lean will not allow me to prove something that is not true!  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 224011100,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651306
    },
    {
        "content": "<p>sure :-)! I think the central part of the argument even has an official name (blahblah's lemma or so), let me try to find it again...</p>",
        "id": 224011218,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611651373
    },
    {
        "content": "<p>Gordan's lemma it is: <a href=\"https://en.wikipedia.org/wiki/Gordan%27s_lemma\">https://en.wikipedia.org/wiki/Gordan%27s_lemma</a></p>",
        "id": 224011326,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611651455
    },
    {
        "content": "<p>At the moment, I am trying to get to a stage where proving that a non-empty open cone contains a basis.  Once there will be enough lemmas to get there, I think that we can focus on the actual proof of the lemma and the tools that are needed specifically for that.</p>",
        "id": 224011346,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651465
    },
    {
        "content": "<p>Thanks for the reference!</p>",
        "id": 224011418,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651494
    },
    {
        "content": "<p>What do you mean by basis here?</p>",
        "id": 224011422,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611651504
    },
    {
        "content": "<p>I mean a basis of the rational vector space (In my mind, this is a statement about lattices and I constantly change between the integers and the rationals.)</p>",
        "id": 224011510,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651546
    },
    {
        "content": "<p>The reals might be useful, since there are a lot of results about real stuff already in Lean, which is why I am starting with R.</p>",
        "id": 224011564,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651584
    },
    {
        "content": "<p>I now have to \"go\" to my virtual class!</p>",
        "id": 224011583,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651596
    },
    {
        "content": "<p>ah, just a basis for the vector space, not for the cone</p>",
        "id": 224011589,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611651599
    },
    {
        "content": "<p>OK, nice chatting with you!</p>",
        "id": 224011641,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611651607
    },
    {
        "content": "<p>Yes, indeed!</p>",
        "id": 224011644,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651608
    },
    {
        "content": "<p>more on this later!</p>",
        "id": 224011658,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611651618
    },
    {
        "content": "<p>There are already cones in mathlib, in <code>analysis/convex/cone</code>.</p>",
        "id": 224014179,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611653026
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_cone\">docs#convex_cone</a></p>",
        "id": 224014249,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611653066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ooh, thanks for the pointer. Not sure why I forgot about that <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 224015222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611653616
    },
    {
        "content": "<p>The problem when you grep for <code>cone</code> is that you have too much of it in category theory. I grepped for <code>convex_cone</code> instead :-)</p>",
        "id": 224015427,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1611653738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  I am teaching the whole day today and I am finishing another project, so I have been only thinking superficially at the problem. I also agree that one can split things up. I though about making a separate lemma for the case where all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x(\\lambda_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> are positive, and then to take the union, which is the strategy in the paper, basically. I was also thinking about removing the freeness assumption, since at any rate any hom from a torsion group to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> would be trivial (of course, I did not want to remove the f.g. one...). So I was trying to go in a different direction, but yours seems reasonable, and I'll look at it asap.</p>",
        "id": 224021040,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611657378
    },
    {
        "content": "<p>I am looking at <code>convex_cone</code> in mathlib and I am tempted to simply use this notion.  It uses <code>pos_mul</code>, rather than <code>nonneg_mul</code>.  In any case, I do not think that it would be a great deal to switch from one to the other.</p>\n<p>I will import it, start playing with it and see how it pans out!</p>",
        "id": 224042067,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611669639
    },
    {
        "content": "<p>Hey, I'm just catching up on this discussion now. Why isn't a convex cone defined as a <code>nnreal</code> submodule of a <code>real</code> vectorspace?</p>",
        "id": 224055760,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611675231
    },
    {
        "content": "<p>Or I guess I should say \"subsemimodule\" or whatever.</p>",
        "id": 224055843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611675253
    },
    {
        "content": "<p>might be historical reasons...</p>",
        "id": 224055908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611675287
    },
    {
        "content": "<p>I think that the role of <code>0</code> is special in cones, and it may be better sometimes, to not automatically assume that <code>0</code> is in all cones.</p>",
        "id": 224055966,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611675312
    },
    {
        "content": "<p>However, I agree that whether you always add <code>0</code>, or only sometimes, will not create any huge difference in the theory!</p>",
        "id": 224056059,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611675357
    },
    {
        "content": "<p>Is the definition of <code>polyhedral lattice</code> in the repo actually correct? I'm trying to fill in the sorry in <code>polyhedral_lattice.lean</code> and I get to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">int</span> <span class=\"o\">:</span> <span class=\"n\">polyhedral_lattice</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">tf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nsmul_eq_smul</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">,</span> <span class=\"n\">int.nat_cast_eq_coe_nat</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">polyhedral'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_singleton</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">eq_top_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"bp\">-</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">submodule.mem_span_singleton</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">gsmul_eq_smul</span><span class=\"o\">,</span> <span class=\"n\">gsmul_one</span><span class=\"o\">,</span> <span class=\"n\">int.cast_id</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)})</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n      <span class=\"n\">erw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- ∥ x b • 1 ∥ = x b • 1</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 224059143,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611676483
    },
    {
        "content": "<p>Full context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}}</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 224059246,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611676532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I might have messed up! I just tried to get the ball rolling.</p>",
        "id": 224060186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611676849
    },
    {
        "content": "<p>Please fix my blunders (-;</p>",
        "id": 224060221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611676859
    },
    {
        "content": "<p>The following seems more reasonable, no?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">polyhedral_lattice</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tf</span> <span class=\"o\">:</span> <span class=\"n\">torsion_free</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">polyhedral'</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"bp\">∧</span>\n              <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∥∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">a.1</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∥</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">∥</span> <span class=\"bp\">•</span> <span class=\"bp\">∥</span><span class=\"n\">a.1</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224060274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611676872
    },
    {
        "content": "<p>Yes, a lot more (-;</p>",
        "id": 224061220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611677191
    },
    {
        "content": "<p>Maybe we want <code>abs</code> around the integer, I don't know. That's a design decision. But at least your version is maths-correct, and mine wasn't.</p>",
        "id": 224061316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611677231
    },
    {
        "content": "<p>Is it obvious that this matches the definition in analytic.pdf on page 59?</p>",
        "id": 224061370,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611677260
    },
    {
        "content": "<p>(In any case, I made the change and killed the sorry, and pushed)</p>",
        "id": 224061484,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611677295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/224061370\">said</a>:</p>\n<blockquote>\n<p>Is it obvious that this matches the definition in analytic.pdf on page 59?</p>\n</blockquote>\n<p>Not obvious-obvious to me. It would be good to get something closer to p59. But that definition looks complicated to work with in Lean.</p>",
        "id": 224061595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611677349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I have just <code>git pulled</code> and it seems to me that the statement of <code>Lemma 9.7</code> is still the same. Are you working on paper (I'm also trying to...) or have I missed something?</p>",
        "id": 224075012,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611682817
    },
    {
        "content": "<p>Oh, I changed the definition of <code>polyherdral_lattice</code>.</p>",
        "id": 224075079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611682846
    },
    {
        "content": "<p>Which file has the statement of Lemma 9.7?</p>",
        "id": 224075455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611682998
    },
    {
        "content": "<p><code>combinatorial_lemma.lean</code></p>",
        "id": 224075542,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611683033
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 224075762,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611683111
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 224075823,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611683132
    },
    {
        "content": "<p>I did not push anything yet: I was trying to get somewhere more stable before doing so.</p>",
        "id": 224092051,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611690264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  I have seen you're now actively working on polyhedral lattices. Do you think the \"new\" formulation you're heading to will make Lemma 9.7 useless or are you still also working on it? I am trying to come up with a \" purely algebraic\" strategy for it, using duals of free f.g. abelian groups, but I wonder if this is useless/obsolete.</p>",
        "id": 224163474,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611743853
    },
    {
        "content": "<p>I am not sure which strategy will work best in Lean, so at the moment, I think that we should all try to make it work and we will find out later which approach is more successful.  I am still trying to get the proof of 9.7 in place, though!</p>",
        "id": 224163722,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611744006
    },
    {
        "content": "<p>I'm excited to watch this progress! But I'm curious: In which sense would Lemma 9.7 become useless?</p>",
        "id": 224164748,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611744723
    },
    {
        "content": "<p>No, no, I was wondering if Damiano and others were finding another path. I don't think it will (and really: it was simply a question before starting formalizing it, not any kind of \"hint\")</p>",
        "id": 224165085,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611744926
    },
    {
        "content": "<p>I am not sure that it will become useless, but I would interpret this as \"the proof will fall out from a formalization of the polyhedral stuff\".</p>",
        "id": 224165109,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611744945
    },
    {
        "content": "<p>OK, that sounds good :-). So you are actually saying that you will formalize Lemma 9.7, but just as part of a much larger effort on polyhedral lattices?</p>",
        "id": 224166171,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611745518
    },
    {
        "content": "<p>My impression is that a lot of the tools that will go into polyhedral lattices will also be useful to prove lemma 9.7.  When formalizing something, you start by proving lots of very trivial results and it makes sense to make sure to only require lots of trivial results only once!  So, I think that trying to get polyhedral stuff into Lean might yield useful tools to prove lemma 9.7.</p>\n<p>At the same time, working on the concrete goal of proving lemma 9.7 is also useful to see which results will be needed and which ones will not.  So, maybe the two streams will go parallel, but closeby!</p>",
        "id": 224184072,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611756036
    },
    {
        "content": "<p>Indeed, I believe that if we have a good understanding of free modules, proving Lemma 9.7 it should be \"easy\". But I don't know if Lean contains the statement that if you have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> linearly independent elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>μ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>μ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mu_1,...\\mu_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}^k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> then you can produce a linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><msup><mi mathvariant=\"double-struck\">Z</mi><mi>k</mi></msup><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">f\\colon\\mathbb{Z}^k\\to\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043548em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> taking any chosen values <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>α</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\alpha_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> on each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>μ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mu_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 224189445,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611758225
    },
    {
        "content": "<p>Lean's biggest problem is that you can't call the elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>...</p>",
        "id": 224189765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611758377
    },
    {
        "content": "<p>Corrected <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 224192526,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611759461
    },
    {
        "content": "<p>This isn't true for my understanding of linearly indepedent -- you can't send 2 to 1 without introducing denominators. But I should think that this sort of thing is either there already or would be easily doable</p>",
        "id": 224193332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611759768
    },
    {
        "content": "<p>I think we can just use <code>basis</code> from linear algebra</p>",
        "id": 224193493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611759830
    },
    {
        "content": "<p>It may also be the case that simply using the submodule spanned by the images is all we need...</p>",
        "id": 224194606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611760296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/224193332\">said</a>:</p>\n<blockquote>\n<p>This isn't true for my understanding of linearly indepedent -- you can't send 2 to 1 without introducing denominators. But I should think that this sort of thing is either there already or would be easily doable</p>\n</blockquote>\n<p>Oh sure! I meant to say that they were part of a basis.</p>",
        "id": 224194831,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611760371
    },
    {
        "content": "<p>The words <code>free_module</code> don't even show up in the mathlib API search <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 224194874,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611760388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/224194874\">said</a>:</p>\n<blockquote>\n<p>The words <code>free_module</code> don't even show up in the mathlib API search <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>Yes, that is what I had realized. But I hoped to dig a bit better in the <code>linear_algebra</code> file.</p>",
        "id": 224195089,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611760459
    },
    {
        "content": "<p>But <code>free_abelian_group</code> does!</p>",
        "id": 224195170,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611760482
    },
    {
        "content": "<p>Is there a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_abelian_group.lift\">docs#free_abelian_group.lift</a> ?</p>",
        "id": 224195230,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611760504
    },
    {
        "content": "<p>So this <code>lift</code> is what <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> was looking for, right?</p>",
        "id": 224195556,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611760624
    },
    {
        "content": "<p>Oh wow, it can very well be! I am teaching now and will have a deep look at this tonight. Thanks!</p>",
        "id": 224195810,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611760706
    },
    {
        "content": "<p>Or do you want to lift with respect to some other basis which need not be the \"standard\" basis?</p>",
        "id": 224195811,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611760706
    },
    {
        "content": "<p>I don't know yet, honestly. But will try to find out soon and post here what I end up with.</p>",
        "id": 224195875,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611760731
    },
    {
        "content": "<p>No, we really don't want to use <code>free_abelian_group</code>. We will need characteristic predicates for this stuff.</p>",
        "id": 224200095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611762417
    },
    {
        "content": "<p>Because once we start taking powers and quotients, you still want your API to work</p>",
        "id": 224200159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611762440
    },
    {
        "content": "<p>The other option is that we completely rewrite the proof of 9.5 to only use lattices of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}^k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>. But that doesn't seem natural.</p>",
        "id": 224200337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611762507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/224200095\">said</a>:</p>\n<blockquote>\n<p>No, we really don't want to use <code>free_abelian_group</code>. We will need characteristic predicates for this stuff.</p>\n</blockquote>\n<p>Since we're ignoring universes for the most part, perhaps it makes sense to write down the usual universal property of the free module as the characteristic predicate?</p>",
        "id": 224201473,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611762959
    },
    {
        "content": "<p>can't we just define it as \"have a finite basis\", and then prove the universal property?</p>",
        "id": 224202105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611763170
    },
    {
        "content": "<p>Sure.</p>",
        "id": 224202177,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611763194
    },
    {
        "content": "<p>Don't we have this somewhere in the repo already?</p>",
        "id": 224202505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611763248
    },
    {
        "content": "<p>nope, I don't think so</p>",
        "id": 224203910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611763617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/224200095\">said</a>:</p>\n<blockquote>\n<p>No, we really don't want to use <code>free_abelian_group</code>. We will need characteristic predicates for this stuff.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Can you speculate a bit about this notion of \"characteristic predicates\", or point to a reference? In particular, what would the issue with quotients/powers be? Concerning rewriting 9.5 entirely, I want to insist that I haven't finished my proof on paper yet, so if the rewriting has to do with Lemma 9.7 in light of using free abelian groups, please wait! May be Damiano's approach will be more efficient and his work on polyhedral lattices will be the right path.</p>",
        "id": 224216412,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611768573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> for example we would want the fact that the product of two free modules is free, so you want to characterize free modules in some way that makes it easy to obtain such facts.</p>",
        "id": 224216720,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611768675
    },
    {
        "content": "<p>Makes sense, sure. But why is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">free_abelian_group</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">additive</span> <span class=\"bp\">$</span> <span class=\"n\">abelianization</span> <span class=\"bp\">$</span> <span class=\"n\">free_group</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>\"bad\" in this perspecitve? Do we like something like a <code>is_free_abelian_group : (Type *) ---&gt; Prop</code> more?</p>",
        "id": 224216921,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611768754
    },
    {
        "content": "<p>because the definitions dont matter <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 224216969,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611768776
    },
    {
        "content": "<p>It's not bad per se. Rather it's just a construction that says \"hey, look, the free abelian group on a type \\alpha actually exists.\"</p>",
        "id": 224217110,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611768834
    },
    {
        "content": "<p>But this is somehow separate from the characterization of free modules that Johan was referring to.</p>",
        "id": 224217187,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611768852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> if you write a lot of lemmas about <code>free_abelian_group X</code>, then you cannot apply those lemmas to <code>(free_abelian_group X) \\times (free_abelian_group Y)</code>. If instead, you prove the lemmas about torsion free groups with a finite basis, then everything is fine.</p>",
        "id": 224217340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611768923
    },
    {
        "content": "<p>Same thing with <code>(fin n) -&gt; \\Z</code> and <code>finsupp (fin n) \\Z</code> and 37 other ways that we can build free abelian groups.</p>",
        "id": 224217514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611768982
    },
    {
        "content": "<p>You want lemmas that work for all of those. So you need to find a characterisation that takes an arbitrary group as input, and asserts that it behaves like a <code>free_abelian_group X</code>.</p>",
        "id": 224217602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611769023
    },
    {
        "content": "<p>Ok, so something like <code>is_free_abelian_group : (Type *) ---&gt; Prop</code>?</p>",
        "id": 224217648,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611769043
    },
    {
        "content": "<p>Or maybe <code>is_free (R) (M)</code> that characterizes free modules</p>",
        "id": 224217736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611769082
    },
    {
        "content": "<p>More like <code>is_free_abelian_group A X : Prop</code></p>",
        "id": 224217777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769084
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">fg_free_module</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"n\">S.finite</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_basis</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 224217807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611769097
    },
    {
        "content": "<p>which says <code>A ~= free_abelian_group X</code></p>",
        "id": 224217817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769101
    },
    {
        "content": "<p>that's not quite right....</p>",
        "id": 224217846,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611769114
    },
    {
        "content": "<p>I don't know if we want to fix the basis in the predicate, or only assert the existence.</p>",
        "id": 224217864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611769121
    },
    {
        "content": "<p>Yes, it seems dangerous to fix the basis, I believe, no?</p>",
        "id": 224217924,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611769141
    },
    {
        "content": "<p>For free groups I think you want to fix the basis</p>",
        "id": 224217948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> your class is not a <code>Prop</code></p>",
        "id": 224217957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611769150
    },
    {
        "content": "<p>These would be \"framed free groups\", no?</p>",
        "id": 224217967,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611769153
    },
    {
        "content": "<p>for fg you probably want to quantify over it</p>",
        "id": 224217974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769156
    },
    {
        "content": "<p>Better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fg_free_module</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">S.finite</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">is_basis</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 224218017,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611769173
    },
    {
        "content": "<p>Why is <code>S</code> a subset of <code>M</code> instead of just an arbitrary finite type or <code>fin n</code>?</p>",
        "id": 224218149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769218
    },
    {
        "content": "<p>I think we can then continue to prove theorems about arbitrary fintypes with basis-maps to <code>M</code>.</p>",
        "id": 224218227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611769254
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.Fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fg_free_module</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_basis</span> <span class=\"n\">A</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224218258,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611769273
    },
    {
        "content": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 224218273,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611769277
    },
    {
        "content": "<p>which universe does <code>S</code> live in?</p>",
        "id": 224218331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611769302
    },
    {
        "content": "<p>Does it matter?</p>",
        "id": 224218340,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611769307
    },
    {
        "content": "<p>I would suggest quantifying only over <code>fin n</code> and proving the fintype version</p>",
        "id": 224218347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769311
    },
    {
        "content": "<p>because there is a universe issue as johan points out</p>",
        "id": 224218406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769325
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.Fintype.skeleton\">docs#category_theory.Fintype.skeleton</a></p>",
        "id": 224218422,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611769332
    },
    {
        "content": "<p>but why not just use the finset in the defn?</p>",
        "id": 224218429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611769335
    },
    {
        "content": "<p>I think the finset adds an unnecessary injectivity restriction</p>",
        "id": 224218515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769367
    },
    {
        "content": "<p>If you use <code>fin n</code>, then you would need to go back and forth with the equuivalence between <code>fin n \\sum fin m</code>and <code>fin (n+m)</code> which isn't much fun.</p>",
        "id": 224218588,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611769392
    },
    {
        "content": "<p><code>is_basis</code> makes it injective, right?</p>",
        "id": 224218611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611769397
    },
    {
        "content": "<p>yes it's a basis so injectivity is almost always redundant, but it's an extra thing that has to be dealt with in proofs</p>",
        "id": 224218644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769411
    },
    {
        "content": "<p>Okay, how about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.Fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fg_free_module</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_basis</span> <span class=\"n\">A</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 224218740,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611769443
    },
    {
        "content": "<p>I don't really care. We want a defn and 37 constructors (-;</p>",
        "id": 224218895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611769497
    },
    {
        "content": "<p>To clarify, with the fin n version you have a constructor</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fg_free_module.mk</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">A</span> <span class=\"n\">f</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fg_free_module</span> <span class=\"n\">A</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 224218978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769529
    },
    {
        "content": "<p>and note that <code>A</code> can come from any universe</p>",
        "id": 224219017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611769552
    },
    {
        "content": "<p>How hard would it be to work with the property that any surjective map to a free abelian group admits a section?</p>",
        "id": 224226134,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611772204
    },
    {
        "content": "<p>that should be a theorem, not a def</p>",
        "id": 224226803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611772474
    },
    {
        "content": "<p>because it quantifies over types, which is better avoided</p>",
        "id": 224226932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611772528
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 224227148,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611772595
    },
    {
        "content": "<p>And a finsupp from a (finite if wanted) Type to Z?</p>",
        "id": 224227983,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611772955
    },
    {
        "content": "<p>that shouldn't be a defn either, but an example of free abelian groups</p>",
        "id": 224228203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611773047
    },
    {
        "content": "<p>Ok, I will keep quiet!</p>",
        "id": 224228330,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611773110
    },
    {
        "content": "<p>because the product of two <code>finsupp _ _</code>s is not of the form <code>finsupp _ _</code></p>",
        "id": 224228339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611773113
    },
    {
        "content": "<p>So you want a definition that works for all free abelian groups... not just for some constructions.<br>\nThis is a concept that is somewhat strange for mathematicians. Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>m</mi></msup><mo>×</mo><msup><mi mathvariant=\"double-struck\">Z</mi><mi>n</mi></msup><mo>=</mo><msup><mi mathvariant=\"double-struck\">Z</mi><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}^m \\times \\mathbb{Z}^n = \\mathbb{Z}^{m+n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77222em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span>, right?</p>",
        "id": 224228634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611773204
    },
    {
        "content": "<p>But lean will not agree about that <code>=</code></p>",
        "id": 224228704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611773218
    },
    {
        "content": "<p>I think algebraic topologists wouldnt agree either. Ask them about signs (or, in fact, all higher homotopy groups of spheres) arising from swapping factors ;-)</p>",
        "id": 224232937,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611774765
    },
    {
        "content": "<p>Here's a question I ran into the other day. Say we have a short exact sequence of short exact sequences, i.e. a 3x3 grid of modules (say for a group G) with all rows and columns exact. Say the top left hand module is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and the bottom right is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">C_3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Using boundary maps we can construct two maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>n</mi></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><msub><mi>C</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi>H</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^n(G,C_3)\\to H^{n+2}(G,A_1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (one going around two sides of the square, the other around the other two sides). Are these maps (a) the same, (b) different by a sign, (c) depends on conventions? Not a serious question, but it does remind you how scary this stuff is.</p>",
        "id": 224234325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611775393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You just gave me something to give my students on their next homework assignment. Thanks.</p>",
        "id": 224236488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611776380
    },
    {
        "content": "<p>I wanted to compute explicitly for n=0 but managed to get confused about what the explicit boundary map was from 1-cocycles to 2-cocycles. What do you tell your students is the map from 0-cocycles to 1-cocycles? Given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>∈</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">c\\in C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> pull back to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>∈</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">b\\in B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, and now the difference of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">gb</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">b</span></span></span></span> is in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, and that's where you send <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>. But is it <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>−</mo><mi>g</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b-gb</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">b</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>b</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">gb-b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>?</p>",
        "id": 224236862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611776541
    },
    {
        "content": "<p>My go-to convention is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>b</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">gb-b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>.</p>",
        "id": 224236936,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611776589
    },
    {
        "content": "<p>.... I think.... I can't even remember...</p>",
        "id": 224236953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611776600
    },
    {
        "content": "<p>Okay, my go-to convention is indeed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>b</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">gb-b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> because [NSW] says so on page 15<br>\n<a href=\"https://www.mathi.uni-heidelberg.de/~schmidt/NSW2e/NSW2.1.pdf\">https://www.mathi.uni-heidelberg.de/~schmidt/NSW2e/NSW2.1.pdf</a></p>",
        "id": 224237299,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611776757
    },
    {
        "content": "<p>So you agree that this is just a convention?</p>",
        "id": 224237352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611776772
    },
    {
        "content": "<p>absolutely.</p>",
        "id": 224237395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611776800
    },
    {
        "content": "<p>Is your convention for the map from C-valued 1-cocycles to A-valued 2-cocycles a second independent convention, or is it somehow tied down by your convention for 0-cocycles to 1-cocycles?</p>",
        "id": 224237771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611776993
    },
    {
        "content": "<p>It's a priori independent, but I would generally follow the \"consistent\" formula from page 14 of [NSW] <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 224238098,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611777133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/224234325\">said</a>:</p>\n<blockquote>\n<p>Are these maps (a) the same, (b) different by a sign, (c) depends on conventions? Not a serious question, but it does remind you how scary this stuff is.</p>\n</blockquote>\n<p>It depends on whether the first map goes clockwise and the second counter-clockwise around the diagram, or the other way round...</p>",
        "id": 224238129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611777152
    },
    {
        "content": "<p>Maybe it is pinned down with the formula for the boundary of the cup-product.</p>",
        "id": 224238696,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611777428
    },
    {
        "content": "<p>p14 of NSW  doesn't give conventions for signs for boundary maps, it seems to me, only for the definitions of the cohomology groups themselves. p15 of the version I'm looking at writes down an explicit map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>0</mn></msup><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi>H</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^0(C)\\to H^1(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> which seems to come out of the blue, and of course there is the claim that it is \"canonical\".</p>",
        "id": 224238776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611777471
    },
    {
        "content": "<p>Oh, I'm thinking of the usual thing where you choose a lift to the middle term of the exact sequence and apply the differential in the complex to obtain the bounday map on cohomology.</p>",
        "id": 224238913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611777523
    },
    {
        "content": "<p>This is just because derived functors are defined via a universal property, so they are unique up to isomorphism, right?</p>",
        "id": 224238946,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611777542
    },
    {
        "content": "<p>but derived functors are not just a choice of cohomology groups, they are also a compatible choice of boundary maps for every short exact sequence.</p>",
        "id": 224239020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611777577
    },
    {
        "content": "<p>Sure, they are unique up to isomorphism of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>-functors, or whatever the terminology is</p>",
        "id": 224239162,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611777619
    },
    {
        "content": "<p>So in particular here is an isomorphism between group cohomology and itself -- it's the identity on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">H^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≠</mo><mn>37</mn></mrow><annotation encoding=\"application/x-tex\">n\\not=37</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">7</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>37</mn></mrow><annotation encoding=\"application/x-tex\">n=37</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">7</span></span></span></span>. This changes some boundary maps.</p>",
        "id": 224239176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611777626
    },
    {
        "content": "<p>In particular it does not even really make sense to ask what \"the\" boundary map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>36</mn></msup><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi>H</mi><mn>37</mn></msup><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^{36}(C)\\to H^{37}(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> is. You have to tell me, when you're defining cohomology.</p>",
        "id": 224239289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611777682
    },
    {
        "content": "<p>And there is certainly no guarantee that it is the same one that is being used in the references you're using.</p>",
        "id": 224239431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611777739
    },
    {
        "content": "<p>Isn't there a famous paper by Deligne about all this fun?</p>",
        "id": 224239781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611777908
    },
    {
        "content": "<p>Fortunately, the choices <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>n</mi></msup><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi>H</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^n(C)\\to H^{n+1}(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> all have to be compatible, so you can only change them all at once. This means that my question about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>n</mi></msup><mo stretchy=\"false\">(</mo><msub><mi>C</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi>H</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^n(C_3)\\to H^{n+2}(A_1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is at least well-defined, in the sense that it is independent of convention. It is either always the same for each route round the square, or always off by a sign.</p>",
        "id": 224239786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611777911
    },
    {
        "content": "<p>Yes, I took a look at this paper only last week in an attempt to resolve this issue, but he doesn't go explicitly into this point.</p>",
        "id": 224239827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611777936
    },
    {
        "content": "<p>I am still really confused about the cup product issue which Adam raised. Any diagram at all which has only one occurrence of a boundary map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>n</mi></msup><mo>→</mo><msup><mi>H</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">H^n\\to H^{n+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> -- it seems to me that it does not even make sense to ask whether it commutes until more information is given about the definitions of the boundary maps.</p>",
        "id": 224239975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611778015
    },
    {
        "content": "<p>Well, it probably also uses maps from some concrete things into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">H^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>'s, and then you have to look how those are defined in turn. If they make use of explicit cochain representatives, then yeah.</p>\n<p>For the question, my guess is that it's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>; you seem to be swapping to degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> maps, which should introduce a sign. Although you can surely find many papers of mine where I pretend it's the identity.</p>",
        "id": 224240242,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611778149
    },
    {
        "content": "<p>According to Neukirch it is indeed -1.</p>",
        "id": 224241322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611778670
    },
    {
        "content": "<p>Oh Adam -- the 3x3 question is 1.3.4 in NSW, I just ran into it whilst looking through the book hoping for some more enlightenment about cup products. Amelia has been collapsing double complexes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo>:</mo><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub><mo>⊗</mo><msub><mi>B</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_{i,j}:=A_i\\otimes B_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> into single complexes and defining explicit boundary maps in Lean. Her collapsed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>n</mi></msub><mo>:</mo><mo>=</mo><msub><mo>⊕</mo><mrow><mi>i</mi><mo>+</mo><mi>j</mi><mo>=</mo><mi>n</mi></mrow></msub><msub><mi>C</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_n:=\\oplus_{i+j=n}C_{i,j}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> are fine, but when she defined the differential between them she simply had to choose between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">(-1)^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>j</mi></msup></mrow><annotation encoding=\"application/x-tex\">(-1)^j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span></span></span></span> at some point, and it really felt to me that it was just a coin-toss.</p>",
        "id": 224242318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611779178
    },
    {
        "content": "<p>Got one: NSW 1.4.3 is a claim about a diagram commuting which has precisely one boundary map from degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>+</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">p+q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>+</mo><mi>q</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">p+q+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. I don't even see how it makes sense to claim that this diagram commutes unless you announce your conventions and make it clear that anyone who uses that result needs to be using the same conventions for boundary maps. This is just like the nightmare I faced when writing some parts of Buzzard-Diamond-Jarvis and I had to try to figure out everyone's convention on Shimura varieties. Some people explicitly said they were using Deligne's convention for class field theory (typically the people working in large generality); some said explicitly they were using Artin's (typically the people doing Heegner point computations for Shimura curves over totally real fields, for whom the inverse is just an unnecessary bother for the equations they deal with) and some people simply did not say at all. Those folk of course had the best of both worlds, because in their ignorance they could borrow computations from all the literature instead of just half of it.</p>",
        "id": 224243136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611779554
    },
    {
        "content": "<p>Sorry -- I have \"zoom office hours\" right now, so I can't really follow all the discussion...</p>",
        "id": 224243173,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611779574
    },
    {
        "content": "<p>But good to know that [NSW] has the details :)</p>",
        "id": 224243205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611779588
    },
    {
        "content": "<p>I think I understand now. Let's say a pinning of a cohomology theory is a choice of signs for all boundary maps. Once it is pinned, then there is a choice of cup products <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>p</mi></msup><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>×</mo><msup><mi>H</mi><mi>q</mi></msup><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi>H</mi><mrow><mi>p</mi><mo>+</mo><mi>q</mi></mrow></msup><mo stretchy=\"false\">(</mo><mi>A</mi><mo>⊗</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^p(A)\\times H^q(B)\\to H^{p+q}(A\\otimes B)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> whose sign depends on the pinning (i.e. if I change my boundary map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mn>37</mn></msup><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi>H</mi><mn>38</mn></msup><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^{37}(C)\\to H^{38}(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> then some of these cup product maps change sign too) and which satisfies all the theorems in the book.</p>",
        "id": 224246404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611781198
    },
    {
        "content": "<p>Yeah, that sounds reasonable. And as for the boundary map, in NSW they actually prove the snake lemma, and part of the proof is the \"construction\" of the boundary map, so that's what they take as their definition throughout.</p>",
        "id": 224247922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611781870
    },
    {
        "content": "<p>I am still a bit confused by this because the boundary map in the snake lemma really _does_ feel like it's \"more canonical than the other choice\" -- like the obvious map from a vector space to its double-dual really is better than the one where you randomly introduce a minus sign.</p>",
        "id": 224249218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611782474
    },
    {
        "content": "<p>What happens if we want to define group cohomology for semimodules <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span> ?</p>",
        "id": 224249721,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611782719
    },
    {
        "content": "<p>But there is something I don't understand: Grothendieck writes in his Tohokou :</p>\n<p>Soit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>T</mi><mi>i</mi></msup><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mn>0</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">T = (T^i), 0 \\leq i\\leq  a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.79549em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> un <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>-foncteur<br>\ncovariant de <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> dans <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">C'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, où <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> est dit un <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>-foncteur universel si pour tout <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>-foncteur <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>T</mi><mrow><mo mathvariant=\"normal\">′</mo><mi>i</mi></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T '= (T'^i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> fonctoriel défini pour les mêmes degrés, et tout morphisme  fonctoriel <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><msub><mi>i</mi><mn>0</mn></msub></msup></mrow><annotation encoding=\"application/x-tex\">f^{i_0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.019104em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> de <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><msub><mi>i</mi><mn>0</mn></msub></msup></mrow><annotation encoding=\"application/x-tex\">T^{i_0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> dans <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo mathvariant=\"normal\">′</mo><msub><mi>i</mi><mn>0</mn></msub></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T'^{i_0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, il existe un seul morphisme et un seul <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> de <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> dans <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">T'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> qui pour le degré <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>i</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">i_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> se réduise à <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><msub><mi>i</mi><mn>0</mn></msub></msup></mrow><annotation encoding=\"application/x-tex\">f^{i_0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.019104em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>In particular, all our functors (say, group cohomology) are not universal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> functors, because the functorial isomorphism in question is not unique?</p>",
        "id": 224249976,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611782836
    },
    {
        "content": "<p>It is unique, but if you change the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> in one of these functors by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">-\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> then you need to change the corresponding morphism comparing them as well.</p>",
        "id": 224250136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611782903
    },
    {
        "content": "<p>At least I think that's the idea...</p>",
        "id": 224250167,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611782924
    },
    {
        "content": "<p>Well, but if I can change the 37-th, I have infinitely many choices.</p>",
        "id": 224250208,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611782945
    },
    {
        "content": "<p>The boundary maps are part of the \"data\" of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>-functor.</p>",
        "id": 224250251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611782967
    },
    {
        "content": "<p>This I understand. But what is a universal one, then?</p>",
        "id": 224250301,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611782995
    },
    {
        "content": "<p>It's one satisfying the universal property, which says that for all blah blah blah there exists a unique morphism such that blah blah. So if I multiply the boundary map by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> in such a universal delta functor, it's still universal, but the \"unique morphism\" will be different...</p>",
        "id": 224250488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611783075
    },
    {
        "content": "<p>Ah, I see. If I take two cohomology theories, one with a certain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>δ</mi><mn>37</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\delta_{37}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">7</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and the other with all the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>δ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\delta_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>'s equal to those of the first, but the 37-th, then the map comparing them is unique.</p>",
        "id": 224250548,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611783101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/224249218\">said</a>:</p>\n<blockquote>\n<p>I am still a bit confused by this because the boundary map in the snake lemma really _does_ feel like it's \"more canonical than the other choice\" -- like the obvious map from a vector space to its double-dual really is better than the one where you randomly introduce a minus sign.</p>\n</blockquote>\n<p>If you're looking at the snake lemma on page 25 of NSW leading to Theorem 1.3.2, I agree that it is somehow \"more canonical that the other choice\", but the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">∂</mi><mo>∗</mo></msub></mrow><annotation encoding=\"application/x-tex\">\\partial_\\ast</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.175696em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are not.</p>",
        "id": 224251022,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611783317
    },
    {
        "content": "<p>They are defined explicitly through the alternating sum on page 15, I guess, and there is clearly a choice of sign there (you can index from 0 to n or from 1 to n+1, affecting the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">(-1)^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>).</p>",
        "id": 224251165,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611783382
    },
    {
        "content": "<p>This is all nice and fun, but we drifted quite a bit. I think we should try to stay closer to the main topic in this stream, otherwise Peter may miss messages that actually need his input.</p>",
        "id": 224255655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611785432
    },
    {
        "content": "<p>Yes, I agree. Apologies to Peter, we might continue this discussion with <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> elsewhere.</p>",
        "id": 224256671,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611785870
    },
    {
        "content": "<p>I enjoy random conversations, don't bother about me :-)</p>",
        "id": 224257210,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611786151
    },
    {
        "content": "<p>By the way, for more fun regarding signs, this project actually also needs simplicial stuff, in the proof of 8.19 (used later when there is also some simplicial stuff in the main proof 9.5)</p>",
        "id": 224257308,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611786211
    },
    {
        "content": "<p>In the first part of its proof, when you split the hypercover?</p>",
        "id": 224257656,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611786393
    },
    {
        "content": "<p>well, the statement itself is simplicial!</p>",
        "id": 224257681,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611786409
    },
    {
        "content": "<p>or do you mean the signs? I just mean that in Dold-Kan etc you can surely have fun fixing all the signs</p>",
        "id": 224257738,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611786439
    },
    {
        "content": "<p>Yes, I meant the signs.</p>",
        "id": 224257765,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611786457
    },
    {
        "content": "<p>(And we might debate if \"fun\" is the most appropriate word... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 224257854,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611786484
    },
    {
        "content": "<p>Sorry, this is my sense of humour ;-)</p>",
        "id": 224257878,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611786501
    },
    {
        "content": "<p>well, anyways I'm off for tonight. See you around!</p>",
        "id": 224257970,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611786552
    },
    {
        "content": "<p>See you, bye!</p>",
        "id": 224257982,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611786559
    },
    {
        "content": "<p>I am a bit confused about the sign requirement of Lemma 9.7: now it reads </p>\n<p>the numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x'(\\lambda_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msup><mi>x</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x-x')(\\lambda_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> have the same sign</p>\n<p>but I wonder if it should not be</p>\n<p>the numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x(\\lambda_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msup><mi>x</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x-x')(\\lambda_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> have the same sign</p>\n<p>Or am I misunderstanding the idea of the lemma?</p>",
        "id": 224520393,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611947989
    },
    {
        "content": "<p>The first implies the second, and I really want the first</p>",
        "id": 224529986,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1611952882
    },
    {
        "content": "<p>Ah, ok. I agree that the first implies the second, but I thought the second was enough</p>",
        "id": 224533355,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611954355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think you have coded the second, weaker version of the inequality in the file. No?</p>",
        "id": 224533576,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1611954459
    },
    {
        "content": "<p>Ooh, my bad. That must have been a typo. Please fix it.</p>",
        "id": 224538684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611957112
    },
    {
        "content": "<p>Ok, fixed and pushed.</p>",
        "id": 224586239,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612014904
    },
    {
        "content": "<p>Let's continue this conversation in the proper thread. Are you OK with the proof as given? I assume Gordan's lemma is the nontrivial part in the formalization?</p>",
        "id": 224925509,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612295148
    },
    {
        "content": "<p>Yes, indeed. I agree with the proof, although it took me a while to figure out the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x(\\lambda_i)\\geq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> vs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x'(\\lambda_i)\\geq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> business. But as you explained the other day, it is the second that you need.</p>",
        "id": 224926507,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612295553
    },
    {
        "content": "<p>Indeed, formalizing Gordan's lemma seems a bit painful: I am more and more going to convince myself that the prove isn't that hard: basically, a compact intersected with a discrete is finite, more or less. And this is certainly in <code>mathlib</code>. But I need that the dual of a free module is free, and to extract the positive cone from it. This I still do not know how to do.</p>",
        "id": 224926801,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612295651
    },
    {
        "content": "<p>The first proof here <a href=\"https://en.wikipedia.org/wiki/Gordan's_lemma\">https://en.wikipedia.org/wiki/Gordan's_lemma</a> seems like it shouldn't be too hard</p>",
        "id": 224926802,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612295651
    },
    {
        "content": "<p>I see</p>",
        "id": 224926847,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612295672
    },
    {
        "content": "<p>The final part with the congruences should really be painless.</p>",
        "id": 224926933,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612295704
    },
    {
        "content": "<p>But actually, you don't need a basis -- these cones may need more generators than the vector space</p>",
        "id": 224926965,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612295712
    },
    {
        "content": "<p>Right</p>",
        "id": 224926999,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612295728
    },
    {
        "content": "<p>Still I need that it is f.g., and for this I ended up thinking if it wasn't possible to have a more constructive proof.</p>",
        "id": 224927134,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612295779
    },
    {
        "content": "<p>Assuming always that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is in the \"positive dual cone\", I wanted to somehow produce the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">x'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> by looking at successive minima : fix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and look for a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> which takes on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> the minimum, on all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msubsup><mi mathvariant=\"normal\">Λ</mi><mo>+</mo><mo>∨</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">x\\in\\Lambda_+^\\vee</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.057223em;vertical-align:-0.305331em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∨</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.305331em;\"><span></span></span></span></span></span></span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">(</mo><msub><mi>λ</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x(\\lambda_1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 224927461,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612295909
    },
    {
        "content": "<p>Aha. That seems tricky.</p>",
        "id": 224927490,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612295929
    },
    {
        "content": "<p>Then do the same for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, etc... Of course, this will hugely depend on the choice of the ordering, but there are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">m!</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">!</span></span></span></span> choices.</p>",
        "id": 224927516,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612295944
    },
    {
        "content": "<p>(was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> the number of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span>'s?)</p>",
        "id": 224927559,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612295969
    },
    {
        "content": "<p>I was thinking about that tonight and had been teaching the whole day, so I haven't checked whether this makes sense.</p>",
        "id": 224927752,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612296028
    },
    {
        "content": "<p>For the proof on wikipedia, you effectively need that if in a finite-dimensional <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>-vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, if you intersect finitely many half-spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f(v)\\geq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is a linear function on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, then this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q_{\\geq 0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>-module is finitely generated. (Once you have that, the rest of the proof on wikipedia should be easy to get.)</p>",
        "id": 224927798,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612296047
    },
    {
        "content": "<p>If you see an evident obstruction, I might give up, otherwise, I'll think a little bit in this direction for a while.</p>",
        "id": 224927804,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612296049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/224927798\">said</a>:</p>\n<blockquote>\n<p>For the proof on wikipedia, you effectively need that if in a finite-dimensional <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>-vector space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, if you intersect finitely many half-spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f(v)\\geq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is a linear function on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, then this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q_{\\geq 0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>-module is finitely generated. (Once you have that, the rest of the proof on wikipedia should be easy to get.)</p>\n</blockquote>\n<p>I agree.</p>",
        "id": 224927905,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612296089
    },
    {
        "content": "<p>Well, I really think it would be cleanest to prove Gordan's lemma</p>",
        "id": 224927919,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612296098
    },
    {
        "content": "<p>Surely cleanest, you're right.</p>",
        "id": 224927956,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612296114
    },
    {
        "content": "<p>OK, so how does one get at that result on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>-vector spaces...</p>",
        "id": 224928100,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612296157
    },
    {
        "content": "<p>This should be what <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>  has been thinking about for a while, I haven't started yet.</p>",
        "id": 224928204,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612296195
    },
    {
        "content": "<p>In particular, I haven't done a good analysis of what is in <code>mathlib</code> yet to know what is missing.</p>",
        "id": 224928297,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612296236
    },
    {
        "content": "<p>I see</p>",
        "id": 224928379,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612296253
    },
    {
        "content": "<p>Already the dual cone scares me a bit (I mean: to show it is a cone), but I really need to think more before talking nonsense.</p>",
        "id": 224928536,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612296339
    },
    {
        "content": "<p>yeah, that's why I wrote that statement about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q_{\\geq 0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>-modules above -- I think it gets more directly to the point than defining cones</p>",
        "id": 224928819,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612296463
    },
    {
        "content": "<p>I'll be thinking about the statement and will put here any advance. Now I really have to run for dinner, but as soon as I get somewhere I'll post here what I have.</p>",
        "id": 224929293,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612296660
    },
    {
        "content": "<p>Thanks for the clues! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 224929326,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1612296674
    },
    {
        "content": "<p>Sorry for going quiet a bit.  I will have more time on Friday, and only a few scattered moments before that.</p>\n<p>Anyway, I had also converged on the fact that the main statement that we should formalize is that intersecting finitely many half-spaces in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}_{\\geq 0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> is finitely generated.  I will try to at least formulate a statement that asserts this fact and will report back once I have it!</p>",
        "id": 225025322,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612363794
    },
    {
        "content": "<p>I think we are now at a point where we can state a version of Gordan's lemma (<a href=\"https://en.wikipedia.org/wiki/Gordan%27s_lemma\">https://en.wikipedia.org/wiki/Gordan%27s_lemma</a>) that we think will be nice to work with. <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> is working hard on all the machinery needed to prove Gordan's lemma. But at the same time, we can start trying to prove lemma 9.7 assuming Gordan's lemma.</p>",
        "id": 229612896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615360372
    },
    {
        "content": "<p>I made some advances for lemma 9.7. Assuming <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> 's proof of Gordan's lemma, I have set-up the reduction step. What needs to be proved is only the \"positive case\", so the claim for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> which pair positively with all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>'s, which should be quite easy (am I writing this? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ) using Gordan's lemma.</p>",
        "id": 230368874,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615823692
    },
    {
        "content": "<p>The file still has a lot of \"easy\" <code>sorry</code>'s, so I don't know how to proceed. Is it better to pull it to <code>master</code> or to wait to have it <code>sorry</code>-free?</p>",
        "id": 230368982,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615823731
    },
    {
        "content": "<p>No, just push to master</p>",
        "id": 230369014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615823745
    },
    {
        "content": "<p><code>sorry</code> s are fine, but there shouldn't be errors</p>",
        "id": 230369096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615823767
    },
    {
        "content": "<p>No, no, there are no errors (but I will double-check before pushing).</p>",
        "id": 230369135,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615823784
    },
    {
        "content": "<p>I will at any rate keep on working on this on the coming days (not so much for today, I fear, but who knows). If you find that the strategy is bad/needs a fundamental revision, please warn me.</p>",
        "id": 230369311,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615823853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I think I've pushed errors to master several times <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> but I always try to fix them asap...</p>",
        "id": 230370995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615824184
    },
    {
        "content": "<p>Ok, I've pushed my changes. I have to prepare my lesson for tomorrow, but I'll probably be around on Zulip and hope to resume the work later on in the evening.</p>",
        "id": 230374245,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615824885
    },
    {
        "content": "<p>I have just pushed a proof of the \"reduction step\" from the positive version of lemma 9.7 to the full one. There are still some very minor <code>sorry</code>'s here and there concerning sign vectors, and I hope to get rid of them tonight.</p>",
        "id": 231063885,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1616176412
    },
    {
        "content": "<p>Sounds great, thanks!</p>",
        "id": 231064973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616176833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> It seems that you renamed <code>lem97'</code> to <code>lem97''</code>. I adapted <code>combinatorial_lemma.lean</code>.</p>",
        "id": 231083093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616184690
    },
    {
        "content": "<p>Oh yes, you're right. I ended up with three versions of the lemma before deciding which one to throw away, and modified yours since I did not know it was already quoted somewhere. Of course, it makes more sense to go back to the previous numbering, as having a <code>lem97''</code> without <code>lem97'</code> seems odd...</p>",
        "id": 231100739,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1616194528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I have renamed it back to <code>lem97'</code> and modified <code>combinatorial_lemma.lean</code> accordingly, so that it compiles. I have also started the proof of <code>lem97'</code> building on <code>lem97</code>. I arrived at the point where the three lemmas you put in the \"preamble\" are needed, and wanted to know if you confirm they're in mathlib (and where).</p>",
        "id": 231102441,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1616195642
    },
    {
        "content": "<p>Yes, they are now in mathlib... <a href=\"https://leanprover-community.github.io/mathlib_docs/find/abs_add_eq_add_abs_iff\">docs#abs_add_eq_add_abs_iff</a></p>",
        "id": 231103858,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616196543
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 231140083,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1616238949
    },
    {
        "content": "<p>I'm running into some coercion issues that I don't really know how to solve. The current statement of <code>lem97'</code> contains something like <code>N * (y (l i)).nat_abs + (x' (l i)).nat_abs</code> and I would like to apply some of the lemmas pointed out at by <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> . For this, I need to convert <code>nat_abs </code> to <code>abs</code>, which I could do using <code>int.abs_eq_nat_abs</code>, but here the problem shows up. Since <code>abs :  ℤ → ℤ</code> takes values in <code>ℤ</code> and <code>nat_abs</code> takes values in <code>ℕ</code>, the true equality is <code>abs m = ↑ nat_abs m</code>. Hence, I would need to change the statement to  <code>`N * ↑(y (l i)).nat_abs + ↑(x' (l i)).nat_abs</code>. But if I do so, then <code>combinatorial_lemma.lean</code> does not compile any longer (it is unhappy with the terms being integers rather than natural numbers, and I can't but sympathize with it).</p>",
        "id": 231143168,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1616242784
    },
    {
        "content": "<p>You first want to <code>zify</code> and then use the fact that the coercion of nat_abs back to int is <code>abs</code></p>",
        "id": 231143277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616242880
    },
    {
        "content": "<p><code>zify</code>?</p>",
        "id": 231143282,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1616242890
    },
    {
        "content": "<p>A tactic that turns statements about <code>nat</code> into statements about <code>int</code></p>",
        "id": 231143328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616242931
    },
    {
        "content": "<p>Wonderful! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p>And dreadful at the same time: I could have spent two days looking for it without ever finding it... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 231143360,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1616243022
    },
    {
        "content": "<p>I saw that Filippo made some more progress here! Thanks</p>",
        "id": 231328442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616426493
    },
    {
        "content": "<p>In the proof of Lemma 9.7 I am using that <code>N \\neq 0</code>. I can either do a case distinction at the beginning, getting rid of the case <code>N=0</code> or, what seems more reasonable to me (since we're going to divide by <code>N</code> at any rate) to assume throughout that <code>N \\neq 0</code>. But this requires a bit of refactoring, to add the assumption everywhere. What is best?</p>",
        "id": 232477986,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617130466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I think <code>[fact (0 &lt; N)]</code> is fine, and shouldn't require much refactoring (hopefully)</p>",
        "id": 232481542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617131775
    },
    {
        "content": "<p>The standard procedure is to do a case distinction at the beginning, especially if this assumption helps only with this lemma.</p>",
        "id": 232483686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617132621
    },
    {
        "content": "<p>Great, in this case I will add this and do a bit of refactoring when/where needed. But do you think it would overall be a good idea to leave <code>N</code> explicit or to make it implicit at the beginning of the section/file?</p>",
        "id": 232542055,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617171657
    },
    {
        "content": "<p>I think <code>N</code> should be explicit almost everywhere</p>",
        "id": 232542164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617171773
    },
    {
        "content": "<p>OK, I will simply add then <code>(hN: 0 &lt; N)</code> in the statement of all results in <code>lem 97</code> and all those that depend on them...</p>",
        "id": 232542192,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617171818
    },
    {
        "content": "<p>Right, but if you use <code>fact</code>, then it might be automatic</p>",
        "id": 232542248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617171852
    },
    {
        "content": "<p>Typeclass inference will just find the <code>[fact (0 &lt; N)]</code> if you add it to <code>variables</code> at the top of the file</p>",
        "id": 232542295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617171880
    },
    {
        "content": "<p>But is your lemma provable for <code>N = 0</code>?</p>",
        "id": 232542310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617171906
    },
    {
        "content": "<p>I didn't think about it</p>",
        "id": 232542317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617171911
    },
    {
        "content": "<p>Yes, I do think it is (I haven't though about it and am teaching now, but a brief thought yesterday evening convinced me it is trivial in that case).</p>",
        "id": 232542341,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617171946
    },
    {
        "content": "<p>hmm... it looks like you can't get the finiteness in that case</p>",
        "id": 232542396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617171974
    },
    {
        "content": "<p>anyway, I need to run now</p>",
        "id": 232542401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617171982
    },
    {
        "content": "<p>OK, can you point at a file using <code>fact</code> where I can see how to use it?</p>",
        "id": 232542415,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617172000
    },
    {
        "content": "<p>(if not, I'll figure out)</p>",
        "id": 232542427,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617172013
    },
    {
        "content": "<p>And no, you were right: <code>N</code> needs to be positive (and it is also required to be positive in the .pdf). So there is no choice.</p>",
        "id": 232543135,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617172627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> If you add <code>[hN : fact (0 &lt; N)]</code> as assumption, then <code>hN.out</code> (or <code>hN.1</code>) is a proof of <code>0 &lt; N</code>.</p>",
        "id": 232543986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617173326
    },
    {
        "content": "<p>And afterwards you just add <code>[fact (0 &lt; N)]</code> to all lemmas that need it.</p>",
        "id": 232544020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617173355
    },
    {
        "content": "<p>Or you add it to a <code>variables</code> line, and then you need to change almost nothing, hopefully</p>",
        "id": 232544035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617173372
    },
    {
        "content": "<p>Otherwise, it behaves the same way as <code>[group G]</code> etc</p>",
        "id": 232544287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617173586
    },
    {
        "content": "<p>Thanks</p>",
        "id": 232545190,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617174285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/232544035\">said</a>:</p>\n<blockquote>\n<p>Or you add it to a <code>variables</code> line, and then you need to change almost nothing, hopefully</p>\n</blockquote>\n<p>Well, but for this I thought it needed to be implicit. What is the difference between </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and simply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Also, what is the difference between <code>hN : 0  &lt; N </code> and <code>[hN : fact (0 &lt; N)]</code> (i.e. : what's the magic in the word \"fact\")?</p>",
        "id": 232545375,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617174416
    },
    {
        "content": "<p><code>fact</code> is a <code>class</code>, so you can use typeclass inference to automatically figure out those arguments.</p>",
        "id": 232545617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617174591
    },
    {
        "content": "<p>With implicit, I thought you were talking about <code>(N : nat)</code> vs <code>{N : nat}</code>.</p>",
        "id": 232545677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617174609
    },
    {
        "content": "<p>Yes, I agree it was misleading (and, given the role played in the paper, I agree it needs to be explicit). Thank for the explanation of the <code>fact</code> as an instance. Is it the same for declaring variables at the beginning of sections/files? I thought this was only useful if wanting to leave things implicit, but if they're explicit in the statement, is there a point in setting up <code>variables</code> at the beginning?</p>",
        "id": 232546112,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617174896
    },
    {
        "content": "<p>I am sorry but I'm unable to make this work. What I have now is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lem97_pos</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">blabla</span>\n</code></pre></div>\n<p>and no <code>variables</code>. I can transform it in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lem97_pos</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">blabla</span>\n</code></pre></div>\n<p>and then modify all calls to <code>lem97_pos</code> from <code>apply lem_97pos \\Lambda N</code> to <code>apply lem97_pos \\Lambda N hN</code> by adding <code>hN : 0 &lt; N</code> to all statements relying on <code>lem97_pos</code>. But I guess you had a more clever solution...</p>",
        "id": 232557723,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617181454
    },
    {
        "content": "<p>Forget: it worked! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 232558643,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617181908
    },
    {
        "content": "<p>Lemma 9.7 is now <code>sorry</code>-free.</p>",
        "id": 232562026,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617183516
    },
    {
        "content": "<p>I have <code>pushed</code> to <code>master</code> the final proof and have moved the file into the <code>toric</code> folder. Two things left:<br>\n1) Add a couple of things to <code>mathlib</code> from the <code>move</code> section: I am going to create the <code>PR</code> straight away, when they'll be in <code>mathlib</code> I'll remove from them from the file.<br>\n2) Prove Gordan...</p>",
        "id": 232562128,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617183593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lemma.209.2E7/near/232562026\">said</a>:</p>\n<blockquote>\n<p>Lemma 9.7 is now <code>sorry</code>-free.</p>\n</blockquote>\n<p>That's great!</p>",
        "id": 232562455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617183785
    },
    {
        "content": "<p>Well, actually there is a problem on line 250 of <code>combinatorial_lemma</code>, but this has nothing to do with <code>lemma 9.7</code> (I realized this because I modified the final part of the file, where it calls <code>lemma_97</code>)</p>",
        "id": 232563597,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617184335
    },
    {
        "content": "<p>(It occurs in the proof of lemma <code>lem98_int</code>)</p>",
        "id": 232566335,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617185726
    },
    {
        "content": "<p>Is this on your branch? <code>master</code> seems to compile just fine</p>",
        "id": 232566507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617185813
    },
    {
        "content": "<p>...hmm, let me <code>update</code> and <code>build</code>.</p>",
        "id": 232570893,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617188413
    },
    {
        "content": "<p>Yes, everything is fine now!</p>",
        "id": 232573788,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617190035
    },
    {
        "content": "<p>I'll now <code>PR</code> a couple of things to <code>mathlib</code>, and then I will need to slow a bit to concentrate also on another project. But in the spare time I'd like to work on the fact that quotients of polyhedral lattices are still polyhedral lattices. Where is it?</p>",
        "id": 232573936,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617190108
    },
    {
        "content": "<p>It's not true in general. Only some specific quotients are...</p>",
        "id": 232574685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617190534
    },
    {
        "content": "<p><code>polyhedral_lattice/cech.lean</code>, there are 4 sorrys.</p>\n<ul>\n<li>nr 1 will vanish when we have <code>semi_normed_group</code> quotients</li>\n<li>nr 2 and 3 are the ones you are looking for</li>\n<li>nr 4 is also a todo, shouldn't be too hard</li>\n</ul>",
        "id": 232574890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617190641
    },
    {
        "content": "<p>I pushed <code>\\leanok</code> to the blueprint! Green is taking over the graph (-;</p>",
        "id": 232614841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617205695
    },
    {
        "content": "<p>Thanks again <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span></p>",
        "id": 232614876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617205705
    },
    {
        "content": "<p>I have just pushed a slightly improved version of <code>lemma 9.7</code> avoiding <code>PR</code> anything to <code>mathlib</code>, as the results were too specific and could be golfed to two <code>rw</code> (thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ).</p>",
        "id": 232720632,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617265345
    }
]