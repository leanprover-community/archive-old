[
    {
        "content": "<p>Here's a pretty self-contained <code>sorry</code> that is needed for <code>col_exact</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- the contents of `src/thm95/pfpng_iso.lean`</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ρ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.rescale</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Useful facts that we already have:</span>\n\n<span class=\"cm\">* `Pow_mul (N n : ℕ) : Pow r' (N * n) ≅ Pow r' N ⋙ Pow r' n`</span>\n<span class=\"cm\">* `iso_of_equiv_of_strict'` for constructing isos in `ProFiltPseuNormGrpWithTinv r'`</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"sd\">/-- A very specific isomorphism -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Pow_rescale_Pow_iso</span> <span class=\"o\">:</span>\n  <span class=\"n\">Pow</span> <span class=\"n\">r'</span> <span class=\"n\">m</span> <span class=\"bp\">⋙</span> <span class=\"n\">rescale</span> <span class=\"n\">r'</span> <span class=\"n\">c</span> <span class=\"bp\">⋙</span> <span class=\"n\">Pow</span> <span class=\"n\">r'</span> <span class=\"n\">n</span> <span class=\"bp\">≅</span> <span class=\"n\">Pow</span> <span class=\"n\">r'</span> <span class=\"n\">n</span> <span class=\"bp\">⋙</span> <span class=\"n\">Pow</span> <span class=\"n\">r'</span> <span class=\"n\">m</span> <span class=\"bp\">⋙</span> <span class=\"n\">rescale</span> <span class=\"n\">r'</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span>\n</code></pre></div>\n<p>I guess this would naturally break into two subparts: show that <code>Pow</code> commutes with itself, and show that <code>Pow commutes with </code>rescale`.</p>",
        "id": 240424826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622096830
    },
    {
        "content": "<p>Note that for <code>Pow r' (m * n) \\iso Pow r' (n * m)</code> we should not cheat and use <code>m * n = n * m</code> directly because that gives the wrong automorphism of <code>fin (m * n)</code>. We should use whatever rolls out of <code>fin (m * n) = fin m \\times fin n = fin n \\times fin m = fin (n * m)</code> using the equivs in mathlib <code>equiv.prod_comm</code> and <code>equiv.fin_prod_fin</code></p>",
        "id": 240424928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622096967
    },
    {
        "content": "<p>We're getting really close:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop819.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">pfpng_iso.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">col_exact.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">7</span>\n</code></pre></div>",
        "id": 240558788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622174065
    },
    {
        "content": "<p>Is there anyone interested in attacking the natural isomorphism posted in this thread?</p>",
        "id": 240558795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622174085
    },
    {
        "content": "<p>Sure?</p>",
        "id": 240560334,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622175990
    },
    {
        "content": "<p>I don't know any of the definitions, but I can make some time this afternoon.</p>",
        "id": 240560346,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622176010
    },
    {
        "content": "<p>Started on it: turned 1 sorry into 10, now have to run for an hour.</p>",
        "id": 240561598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622177418
    },
    {
        "content": "<p>Hopefully finish up then.</p>",
        "id": 240561603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622177429
    },
    {
        "content": "<p>Great!</p>",
        "id": 240561716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622177591
    },
    {
        "content": "<p>I got it back down to 3 sorries, two of which are the continuity arguments of <code>iso_of_equiv_of_strict'</code>, and I don't really know what to do with these. The other one perhaps works by <code>refl</code>, but is very slow. Perhaps some simp lemmas are missing...</p>",
        "id": 240566916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622184046
    },
    {
        "content": "<p>I've pushed, and will pause on this for a while if anyone wants to have a look.</p>",
        "id": 240566929,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622184066
    },
    {
        "content": "<p>(It's all in <code>src/thm95/pfpng_iso.lean</code>.)</p>",
        "id": 240567016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622184168
    },
    {
        "content": "<p>I am having a look at the third one</p>",
        "id": 240569074,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622186198
    },
    {
        "content": "<p><code>refl</code> indeed works... after a long time. Let me see if I can speed it up</p>",
        "id": 240569766,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622186741
    },
    {
        "content": "<p>lol</p>",
        "id": 240569780,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622186757
    },
    {
        "content": "<p>I find it amusing that you can tell a computer \"these things are literally the same\" and then it sits there for an hour until it says \"ah yes, they are\"</p>",
        "id": 240569876,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622186819
    },
    {
        "content": "<p>I guess the same thing happens with students just starting out...</p>",
        "id": 240570308,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1622187135
    },
    {
        "content": "<p>It also happens to professors!</p>",
        "id": 240570380,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622187213
    },
    {
        "content": "<p>I was also surprised the first time I saw it, but sometimes it is a problem. We don't want the computer to unfold everything to the axioms... so we tell him to not unfold certain definitions</p>",
        "id": 240570403,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622187238
    },
    {
        "content": "<p>Scott had some category theory proofs which were <code>refl</code> and which took a long time, and he <em>greatly</em> sped them up by changing them to \"rewrite\" proofs, where you explicitly feed proofs of A=B, B=C, C=D, ... in the right order to the computer. Some of the underlying terms which only the computer sees can be very very large, it is quite ridiculous. Working on the perfectoid project taught me this -- at times stuff would get slow, and when the CS people looked at what we were doing they were kind of horrified at how complex our objects were, and gave us tips on how to tame them.</p>",
        "id": 240571471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622188008
    },
    {
        "content": "<p>BTW, here is what <code>set_option trace.type_context.is_def_eq_detail true</code> says</p>\n<p><a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/refl\">https://webusers.imj-prg.fr/~riccardo.brasca/files/refl</a></p>",
        "id": 240572126,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622188460
    },
    {
        "content": "<p>The unicode characters are mangled for me. You have an account on github so you could post a <a href=\"https://gist.github.com/\">gist</a>.</p>",
        "id": 240577931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622192397
    },
    {
        "content": "<p>Surprisingly removing <code>dsimp</code> and using directly <code>refl</code> works and it's very fast <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 240578454,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622192747
    },
    {
        "content": "<p>Note that the project doesn't compile anymore (since <code>4f9fb104d97b89793492dfc2f85a11467a2ce4c7</code>)...</p>",
        "id": 240585234,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622196767
    },
    {
        "content": "<p>Yeah, something in <code>col_exact</code> broke due to changes in <code>pfpng_iso</code></p>",
        "id": 240585666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622197063
    },
    {
        "content": "<p>I'm ignoring it for now (-;</p>",
        "id": 240585674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622197070
    },
    {
        "content": "<p>\"It came on it's own, it'll go on it's own\"</p>",
        "id": 240585747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622197103
    },
    {
        "content": "<p>It didn't go away... so I fixed it. Had to specify the universe params. Not so bad <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 240641414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622225641
    }
]