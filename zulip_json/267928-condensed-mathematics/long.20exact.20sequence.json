[
    {
        "content": "<p>Let's recap where we are concerning homological algebra / long exact sequences. A subset of what is left to do:</p>\n<ul>\n<li>LES specialized to <code>Ext</code>. This will need a bit of glue, jumping through opposite categories.</li>\n<li><code>Ext</code> where the first argument is a complex. It seems that <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> and <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> started working towards this, with homological functors. <del>Lean knows that <code>Hom(_, V)</code> is a homological functor.</del></li>\n<li>Projective replacements. <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> told me that he might start working on this tomorrow.</li>\n</ul>",
        "id": 272169861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645041367
    },
    {
        "content": "<p>Correction: Lean knows that <code>Hom(X,-)</code> is homological :)</p>",
        "id": 272169978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645041425
    },
    {
        "content": "<p>Ooh! Thanks for correcting.</p>",
        "id": 272170305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645041578
    },
    {
        "content": "<p>This is an important distinction, since we will need to take projective replacements of <code>X</code> in <code>Hom(X,-)</code>.</p>",
        "id": 272170427,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645041612
    },
    {
        "content": "<p>‚Ä¢ The degree-0-part of the LES.</p>",
        "id": 272170432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645041613
    },
    {
        "content": "<p>The natural isomorphism <code>(F.left_derived 0) ‚âÖ F</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">left_derived.zero_iso_self</span> <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preserves_finite_colimits</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is sorry free. Given that we have the long exact sequence for <code>F.left_derived 0</code>, the long exact sequence for involving <code>F</code> should now be really easy (and I mean Lean-easy). I will do it later today or tomorrow.</p>",
        "id": 272841240,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645552395
    },
    {
        "content": "<p>Moreover this only uses Adam's recent PR, so it can go directly to mathlib, and then it will be someone else's job to maintain it .</p>",
        "id": 272843272,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645553190
    },
    {
        "content": "<p>Hmm, this is not completely true</p>",
        "id": 272843395,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645553252
    },
    {
        "content": "<p>I think the only other ingredient is that thing about the cokernel we did last week, right?</p>",
        "id": 272845649,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645554226
    },
    {
        "content": "<p>I used some formalism about <code>exact_seq</code>, that it's not in mathlib. But translating it to only use <code>exact</code> should be trivial.</p>",
        "id": 272847773,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645555092
    },
    {
        "content": "<p>I think <code>exact_seq</code> has proven to be quite useful and flexible. So maybe it's time to move it to mathlib.</p>",
        "id": 272848330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645555337
    },
    {
        "content": "<p>I just noted that I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">seven_term_exact_seq</span> <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">short_exact_sequence</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact_seq</span> <span class=\"n\">D</span> <span class=\"o\">[</span>\n    <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.g</span><span class=\"o\">,</span>\n    <span class=\"n\">Œ¥</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">F.map</span> <span class=\"n\">A.f</span><span class=\"o\">,</span> <span class=\"n\">F.map</span> <span class=\"n\">A.g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"n\">A.3</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F.obj</span> <span class=\"n\">A.3</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and Lean does not complain. Is this intended? Note that <code>Œ¥ F 0 A : (F.left_derived (0 + 1)).obj A.3 ‚ü∂ (F.left_derived 0).obj A.1</code> and <code>F.map A.f : F.obj A.1 ‚ü∂ F.obj A.2</code>, so the two cannot be composed (they really cannot, not just because of some type theory thing).</p>",
        "id": 272858521,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645559989
    },
    {
        "content": "<p>This is an unfortunate side effect of <code>exact_seq</code>.</p>",
        "id": 272859505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645560400
    },
    {
        "content": "<p>So you will not be able to prove that lemma.</p>",
        "id": 272859518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645560412
    },
    {
        "content": "<p>Sure, I didn't want to prove it (I will prove the true one, with a modified <code>Œ¥</code>). I was surprised I was able to state it.</p>",
        "id": 272859597,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645560457
    },
    {
        "content": "<p>The way it is defined, you can only prove <code>exact_seq L</code> for lists <code>L</code> that are \"well-formed\": the maps must compose correctly.</p>",
        "id": 272859602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645560460
    },
    {
        "content": "<p>Well, <code>L</code> needs to have type <code>list (arrow ùíú)</code>. So it's really just a list of morphisms, without any conditions on domains / codomains.</p>",
        "id": 272859696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645560496
    },
    {
        "content": "<p>Would something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.walk\">docs#simple_graph.walk</a> avoid this weirdness?</p>",
        "id": 272859847,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1645560592
    },
    {
        "content": "<p>I think that we would end up fighting DTT more than it would help us</p>",
        "id": 272860049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645560690
    },
    {
        "content": "<p>If a proof of <code>exact_seq</code> means what I have in mind I am happy with that. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.exact\">docs#category_theory.exact</a> is already complicated enough...</p>",
        "id": 272860198,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645560756
    },
    {
        "content": "<p>Does anyone see a quick way to prove the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.category_theory.cochain_complex.exact_cone_in_cone_out</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">cochain_complex</span> <span class=\"n\">A</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">_root_.homology_functor</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">cone.in</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">_root_.homology_functor</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">cone.out</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272860362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645560845
    },
    {
        "content": "<p>This is more-or-less the last thing left to obtain the triangular LES for homology</p>",
        "id": 272860446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645560882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> which file is that in? I haven't used the new homology API yet, but I'm happy to take a look</p>",
        "id": 272860726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645561033
    },
    {
        "content": "<p><code>for_mathlib/derived/K_projective</code></p>",
        "id": 272860759,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645561052
    },
    {
        "content": "<p>If the following (rotated)variant is easier...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.category_theory.cochain_complex.exact_to_cone_in</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">cochain_complex</span> <span class=\"n\">A</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">_root_.homology_functor</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">_root_.homology_functor</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">cone.in</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I could make the proof work with that as well</p>",
        "id": 272861027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645561186
    },
    {
        "content": "<p>If we know that additive functors preserves split exact-ness, we have <code>cone.termwise_split</code> in <code>mapping_cone.lean</code>.</p>",
        "id": 272861837,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645561615
    },
    {
        "content": "<p>We know that.</p>",
        "id": 272861856,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645561626
    },
    {
        "content": "<p>It's somewhere in the project</p>",
        "id": 272861864,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645561632
    },
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span><span class=\"o\">:</span><span class=\"kd\">def</span> <span class=\"n\">map_short_exact_sequence_of_split</span>\n</code></pre></div>\n<p>which is for bundled SES's</p>",
        "id": 272862503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645561972
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">seven_term_exact_seq</span> <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preserves_finite_colimits</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">short_exact_sequence</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact_seq</span> <span class=\"n\">D</span> <span class=\"o\">[</span>\n    <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.g</span><span class=\"o\">,</span>\n    <span class=\"n\">Œ¥‚ÇÄ</span> <span class=\"n\">F</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">F.map</span> <span class=\"n\">A.f</span><span class=\"o\">,</span> <span class=\"n\">F.map</span> <span class=\"n\">A.g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"n\">A.3</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F.obj</span> <span class=\"n\">A.3</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>is done.</p>",
        "id": 272865217,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645563379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/long.20exact.20sequence/near/272861837\">said</a>:</p>\n<blockquote>\n<p>If we know that additive functors preserves split exact-ness, we have <code>cone.termwise_split</code> in <code>mapping_cone.lean</code>.</p>\n</blockquote>\n<p>Do we know that exactness is something that can be checked termwise?</p>",
        "id": 272866590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645563833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I pushed some miniwip</p>",
        "id": 272866712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645563892
    },
    {
        "content": "<p>I have to do some admin stuff for a little while <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> but I'll try to take a look later</p>",
        "id": 272866747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645563917
    },
    {
        "content": "<p>I should say that I don't know if the splitting is helpful here. This is essentially the exactness in the first three terms of the snake lemma, if it's set up properly.</p>",
        "id": 272866986,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645564035
    },
    {
        "content": "<p>Yeah, I didn't think properly about the maths. I agree that this should essentially follow from the LES for homology that is done in another file</p>",
        "id": 272868806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645565079
    },
    {
        "content": "<p>I pushed a skeleton for this. <br>\nThe sorrys are in <code>for_mathlib/snake_lemma3</code> and the following in <code>for_mathlib/derived/K_projective</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">_root_.category_theory.cochain_complex.exact_cone_in_cone_out</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">cochain_complex</span> <span class=\"n\">A</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">_root_.homology_functor</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">cone.in</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">_root_.homology_functor</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">cone.out</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">cone.in</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">cone.out</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">cone.in</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">cone.out</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">cone.in</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">cone.out</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"o\">((</span><span class=\"n\">cone.out</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"o\">((</span><span class=\"n\">cone.out</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"o\">((</span><span class=\"n\">cone.out</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">((</span><span class=\"n\">cone.in</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">((</span><span class=\"n\">cone.in</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">((</span><span class=\"n\">cone.in</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">snake.mk_of_homology</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">cone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cone.in</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cone.out</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">exact_iff_exact_seq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">S.six_term_exact_seq.extract</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>These should all be relatively straightforward.</p>",
        "id": 272879875,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645571389
    },
    {
        "content": "<p>I will take care of this.</p>",
        "id": 272899523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645585832
    },
    {
        "content": "<p>It has basically all been done already. We just need the correct glue</p>",
        "id": 272899534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645585846
    },
    {
        "content": "<p>There is one sorry left in <code>snake_lemma3</code></p>",
        "id": 272899679,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645586040
    },
    {
        "content": "<p>Hmmmm.... I may need to change some of the kernels involved.</p>",
        "id": 272900133,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645586510
    },
    {
        "content": "<p>nevermind. it was fine. I just killed the last sorry in <code>snake_lemma3</code></p>",
        "id": 272901218,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645587796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I refactored the LES for homology so that it now applies to arbitrary homological complexes (so chain and cochain complexes) indexed by arbitrary types (endowed with a <code>complex_shape</code>).<br>\nAfter that, proving your <code>cochain_complex.exact_cone_in_cone_out</code> was a 3-liner.</p>",
        "id": 272916860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645604647
    },
    {
        "content": "<p>Awesome! Although it seems like you suffered a bit in <code>for_mathlib/les_homology.lean</code>, judging by some of the names there <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 272930155,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645612399
    },
    {
        "content": "<p>All the suffering was already present in the case of <code>chain_complex C ‚Ñï</code>.</p>",
        "id": 272930272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645612453
    },
    {
        "content": "<p>Ah!</p>",
        "id": 272930584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645612668
    },
    {
        "content": "<p>Well, I'm all for deduplicating suffering</p>",
        "id": 272930660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645612700
    },
    {
        "content": "<p>If nobody has objections I will see tomorrow if it is reasonable to PR the natural iso from <code>left_derived 0 F</code> to <code>F</code>.</p>",
        "id": 273563260,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646087050
    },
    {
        "content": "<p>Sounds good to me.</p>",
        "id": 273608494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646125396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I think you forgot to merge your <a href=\"https://github.com/leanprover-community/mathlib/pull/12171\">#12171</a> after Scott delegated it to you...</p>",
        "id": 273635956,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646139549
    },
    {
        "content": "<p>Oops! I'll do it in a few hours.</p>",
        "id": 273636290,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1646139640
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12403\">#12403</a></p>",
        "id": 273816307,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646232064
    }
]