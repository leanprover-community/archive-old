[
    {
        "content": "<p>To get the statement of 9.5, we'll need to fill in the following two <code>sorry</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">polyhedral_lattice</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">profinitely_filtered_pseudo_normed_group_with_Tinv</span> <span class=\"n\">r'</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">profinitely_filtered_pseudo_normed_group</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">profinitely_filtered_pseudo_normed_group_with_Tinv</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I pushed these to <code>polyhedral_lattice/pseudo_normed_group.lean</code></p>",
        "id": 225291929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612527942
    },
    {
        "content": "<p>The first one is hopefully not too hard... it will need to use that bounded + discrete =&gt; compact.</p>",
        "id": 225292035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612527993
    },
    {
        "content": "<p>The second one will require more work.</p>",
        "id": 225292049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612528001
    },
    {
        "content": "<p>I had some time, so I tried to get into this, but it is hard work!</p>\n<p>I made lean fill in some of the blanks, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">profinitely_filtered_pseudo_normed_group</span> <span class=\"bp\">Λ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_add_comm_group</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">filtration</span> <span class=\"o\">:=</span> <span class=\"n\">pseudo_normed_group.filtration</span> <span class=\"bp\">Λ</span><span class=\"o\">,</span>\n  <span class=\"n\">filtration_mono</span> <span class=\"o\">:=</span> <span class=\"n\">pseudo_normed_group.filtration_mono</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem_filtration</span> <span class=\"o\">:=</span> <span class=\"n\">pseudo_normed_group.zero_mem_filtration</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_mem_filtration</span> <span class=\"o\">:=</span> <span class=\"n\">pseudo_normed_group.neg_mem_filtration</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem_filtration</span> <span class=\"o\">:=</span> <span class=\"n\">pseudo_normed_group.add_mem_filtration</span><span class=\"o\">,</span>\n  <span class=\"n\">topology</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">uniform_space.to_topological_space</span><span class=\"o\">,</span>\n  <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">td</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">compact</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_neg'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">embedding_cast_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Since I am not sure on which branch to push, I post them here.</p>",
        "id": 225307589,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612536727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Do you know about <code>..</code> notation in structure definitions? It means that you can remove all the fields that come from <code>pseudo_normed_group</code> and replace them by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">pseudo_normed_group</span> <span class=\"bp\">\\</span><span class=\"n\">Lambda</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 225309736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612537673
    },
    {
        "content": "<p>Ah, I did not know about this!  Thanks for the pointer!</p>",
        "id": 225310035,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1612537801
    },
    {
        "content": "<p>We should refactor the definition of <code>profinitely_filtered_pseudo_normed_group</code> to weaken <code>embedding_cast_le</code> to <code>continuous_cast_le</code>. Because as Peter pointed out, that implies <code>embedding</code> since the map is injective between CompHaus spaces.</p>",
        "id": 225327735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545179
    },
    {
        "content": "<p>Otherwise, I guess it will be helpful to first show that the topology is discrete.</p>",
        "id": 225327772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545207
    },
    {
        "content": "<p>And then we need to show that <code>filtration \\Lambda c</code> is a finite set. Together, those two will give compact (this is already somewhere in the repo).</p>",
        "id": 225327873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545243
    },
    {
        "content": "<p>And once we have the discreteness, all the continuity proof obligations will be obvious.</p>",
        "id": 225327972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545293
    },
    {
        "content": "<p>I'm taking a shot at writing the statement of 9.5. I believe all ingredients are now in place for a sorry-free statement.</p>",
        "id": 225805011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612944960
    },
    {
        "content": "<p>Tada:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Theorem 9.5 in [Analytic] -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">thm95</span> <span class=\"o\">[</span><span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"bp\">Λ</span><span class=\"o\">],</span><span class=\"bp\">​</span> <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">polyhedral_lattice</span> <span class=\"bp\">Λ</span><span class=\"o\">],</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">],</span>\n    <span class=\"bp\">​</span><span class=\"o\">(</span><span class=\"n\">BD.system</span> <span class=\"n\">c'</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"n\">Mbar</span> <span class=\"n\">r'</span> <span class=\"n\">S</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 225806229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612945903
    },
    {
        "content": "<p>I need to do some other stuff now, but if someone wants to proof <code>first_target</code> by reducing it to <code>thm95</code>, that should be \"straightforward\".<br>\nIt basically boils down to showing that additive group homs from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> are isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. Now add a bit of topology, a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>, and some functoriality, and there you have the proof.</p>",
        "id": 225807251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612946660
    }
]