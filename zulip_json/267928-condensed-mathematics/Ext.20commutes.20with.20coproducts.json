[
    {
        "content": "<p>Hi all,</p>\n<p>I've been working on the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mo>−</mo><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Ext(-,Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> sends coproducts to products.<br>\nThe statement is here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/734501a160b2c70d7783ef0eab9d2efda97ca696/src/for_mathlib/derived/ext_coproducts.lean#L379\">https://github.com/leanprover-community/lean-liquid/blob/734501a160b2c70d7783ef0eab9d2efda97ca696/src/for_mathlib/derived/ext_coproducts.lean#L379</a></p>\n<p>There are a few sorries left for this:</p>\n<ol>\n<li>\n<p>A coproduct of quasi isos is a quasi iso:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/734501a160b2c70d7783ef0eab9d2efda97ca696/src/for_mathlib/derived/ext_coproducts.lean#L238\">https://github.com/leanprover-community/lean-liquid/blob/734501a160b2c70d7783ef0eab9d2efda97ca696/src/for_mathlib/derived/ext_coproducts.lean#L238</a></p>\n</li>\n<li>\n<p>Existence of projective replacements with a uniform bound in a family of complexes, given that the members of the family have a uniform upper bound (this should be more-or-less just repackaging what's already been done about projective replacements):<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/734501a160b2c70d7783ef0eab9d2efda97ca696/src/for_mathlib/derived/lemmas.lean#L509\">https://github.com/leanprover-community/lean-liquid/blob/734501a160b2c70d7783ef0eab9d2efda97ca696/src/for_mathlib/derived/lemmas.lean#L509</a></p>\n</li>\n</ol>",
        "id": 281877921,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652212708
    },
    {
        "content": "<p>We will also need some naturality properties of this isomorphism, but those shouldn't be too difficult.</p>",
        "id": 281877978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652212739
    },
    {
        "content": "<p>(the result about quasi-isos might need some additional assumptions on the abelian category)</p>",
        "id": 281879909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652213669
    },
    {
        "content": "<p>The only two sorries left for this (ext commutes with coproducts) are here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/9cef18ca127f1c740f7da2fcfc9b120f0b07cf3e/src/for_mathlib/ab4.lean#L102\">https://github.com/leanprover-community/lean-liquid/blob/9cef18ca127f1c740f7da2fcfc9b120f0b07cf3e/src/for_mathlib/ab4.lean#L102</a></p>",
        "id": 282510574,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652714225
    },
    {
        "content": "<p>Okay, it's down to one sorry:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/c94305820be33c01342fa53b41406f7a61648eb8/src/for_mathlib/ab4.lean#L107\">https://github.com/leanprover-community/lean-liquid/blob/c94305820be33c01342fa53b41406f7a61648eb8/src/for_mathlib/ab4.lean#L107</a></p>\n<p>This is just some statement about regular homology (I already added the necessary glue to pass to the homotopy category).<br>\nIt should be doable in case anyone is bored (Kevin?)</p>",
        "id": 282518182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652717417
    },
    {
        "content": "<p>I've got my hands full with showing that if |(X-2)g(X)|&lt;=c then |g(X)|&lt;=c' right now, so am no longer bored.</p>",
        "id": 282518925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652717726
    },
    {
        "content": "<p>Quick update:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ext_coproduct_iso</span>\n  <span class=\"o\">[</span><span class=\"n\">AB4</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bounded_homotopy_category</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">uniformly_bounded</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">sigma_obj</span> <span class=\"n\">X</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span>\n  <span class=\"n\">pi_obj</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>is sorry-free.</p>\n<p>Unfortunately, the <code>[uniformly_bounded X]</code> assumption makes it hard to state a correct version in terms of <code>Ext</code> commuting with certain (co)limits, so we may have to prove the naturality conditions separately, although they should not be difficult.</p>",
        "id": 282706707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652821421
    },
    {
        "content": "<p>Alright, I added the following naturality sttatements as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Ext_coproduct_iso_naturality</span>\n  <span class=\"o\">[</span><span class=\"n\">AB4</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bounded_homotopy_category</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">uniformly_bounded</span> <span class=\"n\">X₁</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">uniformly_bounded</span> <span class=\"n\">X₂</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">X₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">sigma.desc</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">≫</span> <span class=\"n\">sigma.ι</span> <span class=\"n\">X₂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∐</span> <span class=\"n\">X₁</span> <span class=\"bp\">⟶</span> <span class=\"bp\">∐</span> <span class=\"n\">X₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">≫</span>\n  <span class=\"o\">(</span><span class=\"n\">Ext_coproduct_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">Ext_coproduct_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span>\n  <span class=\"n\">pi.lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">pi.π</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"bp\">≫</span> <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ext_coproduct_iso_naturality'</span>\n  <span class=\"o\">[</span><span class=\"n\">AB4</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bounded_homotopy_category</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">uniformly_bounded</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y₁</span> <span class=\"n\">Y₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">sigma_obj</span> <span class=\"n\">X</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span>\n  <span class=\"o\">(</span><span class=\"n\">Ext_coproduct_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">Ext_coproduct_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span>\n  <span class=\"n\">pi.lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pi.π</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">≫</span> <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 282712100,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652824312
    },
    {
        "content": "<p>That's really great! We're getting close to ticking off two more ovals.</p>",
        "id": 282736552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652847563
    },
    {
        "content": "<p>Hmm... we might also need the fact that <code>chain_complex.to_bounded_homotopy_category</code> preserves coproducts.</p>",
        "id": 282884054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652939175
    },
    {
        "content": "<p>We can prove that we have a termwise short exact sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⨁</mo><mo>→</mo><mo>⨁</mo><mo>→</mo><mtext>foo</mtext></mrow><annotation encoding=\"application/x-tex\">\\bigoplus \\to \\bigoplus \\to \\text{foo}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨁</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⨁</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">foo</span></span></span></span></span> at the level of complexes, and then we want to apply <code>Ext(_, V)</code> to that, and get a LES, and pull the coproducts out of the Ext.</p>",
        "id": 282884173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652939374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> that should be trivial to prove</p>",
        "id": 282918465,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652961948
    },
    {
        "content": "<p>Write it as a composition of going via the homotopy cat, and I think i proved both functors preserve coproducts</p>",
        "id": 282918577,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652962014
    },
    {
        "content": "<p>I can add it in a few mins</p>",
        "id": 282918639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652962059
    },
    {
        "content": "<p>Aha, so you have this uniformly-bounded type class also for the homotopy cat?</p>",
        "id": 282918848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652962193
    },
    {
        "content": "<p>I just pushed some stuff. There are plenty sorries <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> The glue to get to <code>first_target</code> is at least as painful as I was expecting it to be. Really everything has to be functorial... which makes it annoying to even write down statements.</p>",
        "id": 282919426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652962522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> where can I find <code>chain_complex.to_bounded_homotopy_category</code> again?</p>",
        "id": 282924216,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652964922
    },
    {
        "content": "<p><code>derived/example.lean</code></p>",
        "id": 282924340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652964967
    },
    {
        "content": "<p>I was wrong in my comment above, but it should still be easy to prove</p>",
        "id": 282924342,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652964968
    },
    {
        "content": "<p>We should really clean up that file</p>",
        "id": 282924353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652964973
    },
    {
        "content": "<p>Agreed.</p>",
        "id": 282924412,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652965007
    },
    {
        "content": "<p>If anyone wants to get annoyed with completely trivial things that are hard in lean, here are a few sorries for you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"n\">homological_complex_embed_preserves_coproducts</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">c₁.embedding</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">preserves_colimits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">homological_complex.embed</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"bp\">⥤</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">preserves_coproducts_aux</span>\n<span class=\"o\">(</span><span class=\"n\">homological_complex.embed</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"bp\">⥤</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">homological_complex</span> <span class=\"n\">A</span> <span class=\"n\">c₁</span><span class=\"o\">),</span> <span class=\"n\">homological_complex.hom.iso_of_components</span>\n<span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- Ugh... this is so annoying!</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>They can be found here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/c60d928c4fab0c3e9f87a8da50415515dca3b0bc/src/for_mathlib/derived/ext_coproducts.lean#L282\">https://github.com/leanprover-community/lean-liquid/blob/c60d928c4fab0c3e9f87a8da50415515dca3b0bc/src/for_mathlib/derived/ext_coproducts.lean#L282</a></p>",
        "id": 282947126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652974645
    },
    {
        "content": "<p>I've just removed the <code>sorry</code> from <code>invpoly/ses.lean</code> so on the tube home I'll get annoyed with this.</p>",
        "id": 282986509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652991596
    },
    {
        "content": "<p>ooh, is the first goal full of <code>option.rec</code>s and doesn't fit on one screen? Maybe I won't even have time to get annoyed with it, I might spend the journey trying to figure out what the question is.</p>",
        "id": 282986607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652991628
    },
    {
        "content": "<p>The <code>option.rec</code> stuff probably needs to be modified slightly.</p>",
        "id": 282990789,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652993590
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">],</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- still annoying</span>\n</code></pre></div>\n<p>seems to change the first sorry into a statement of the form \"d commutes with a map comprised of the composition of about 4 canonical isomorphisms\"</p>",
        "id": 282992164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652994264
    },
    {
        "content": "<p>Oh nice! It should be doable now!</p>",
        "id": 282993744,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652995293
    },
    {
        "content": "<p>take a look at the lemma called embed.d_eq_of_some_of_some` (or some variant)</p>",
        "id": 282993922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652995418
    },
    {
        "content": "<p>I'm working on that sorry now</p>",
        "id": 282995048,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652996104
    },
    {
        "content": "<p>Okay, that sorry is killed.... but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- still annoying</span>\n</code></pre></div>\n<p>remains</p>",
        "id": 282995812,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652996494
    },
    {
        "content": "<p>Oh lol I thought the hard part was pushing the d through the isomorphisms :-)</p>",
        "id": 282996377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652996819
    },
    {
        "content": "<p>Alright, the remaining sorry is done as well!</p>",
        "id": 282997233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652997384
    },
    {
        "content": "<p>It's (very) far from the cleanest proof...</p>",
        "id": 282997256,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652997408
    },
    {
        "content": "<p>I would send a <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  but I'm getting an exciting new error \"failed to add reaction\" on Android</p>",
        "id": 282997470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652997561
    },
    {
        "content": "<p>I think in android <code>congratulations</code> is broken but <code>tada</code> works? <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 282999531,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652998864
    },
    {
        "content": "<p><span aria-label=\"congratulations\" class=\"emoji emoji-3297\" role=\"img\" title=\"congratulations\">:congratulations:</span></p>",
        "id": 282999574,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652998901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Ext.20commutes.20with.20coproducts/near/282986509\">said</a>:</p>\n<blockquote>\n<p>I've just removed the <code>sorry</code> from <code>invpoly/ses.lean</code> so on the tube home I'll get annoyed with this.</p>\n</blockquote>\n<p>Unfortunately there is no oval for this in the graph. But I'm certainly glad that this is done!</p>",
        "id": 283026959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653025784
    },
    {
        "content": "<p>Changing the subject a bit then: do you now have a clear overview of all the remaining <code>sorry</code>s, eg are you convinced that they're all fillable without any refactors, is there any <code>sorry</code>ed data, are there people working on every <code>sorry</code>, are there things which can be farmed out (you've done a very good job of farming out sorries to me, you directed me to problems that were within my skillset to solve etc).</p>",
        "id": 283027165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653026017
    },
    {
        "content": "<p>Yesterday I added a bunch of <code>sorry</code>s that are data. <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> They are \"canonical\" isomorphisms between certain functors.<br>\nI can not promise that we don't need any further refactors. The glue between the first and the second part of the project is not very pleasant.</p>",
        "id": 283027479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653026400
    },
    {
        "content": "<p>Of course, hindsight is 20-20. But if I could start again, there are two things that I would do differently in the first part:</p>\n<ul>\n<li>Given <code>M : ProFiltPNGWithTinv</code> and <code>BD : breen_deligne.data</code> + suitable constants, define <code>FPSystem : chain_complex (Free int Profinite) nat</code>. That's a fundamental kind of object, where a lot of the computations happen. After that, apply the <code>V-hat</code> functor and take <code>T^{-1}</code>-invariants.<ul>\n<li>Currently, all the computations happen after apply <code>V-hat(_)^{T-1}</code> functor, making many proofs complicated and messy.</li>\n<li>It would be one contribution to make the glue easier (although I have now defined <code>FPSystem</code> and glued it to the first part, so from the pov of the second part, we can now basically assume that <code>FPSystem</code> was used in the first part.</li>\n</ul>\n</li>\n<li>Minor technical issue: Use <code>Free int</code> in the definition of Breen-Deligne data, instead of <code>free_abelian_group</code>. It would mesh better with the point above. Also <code>free_abelian_group</code> lacks API, even though it occasionally has a nice defeq. But in the end, <code>finsupp</code> is just better.<ul>\n<li>Eg. given a term <code>x : free_abelian_group X</code>, it is very annoying to talk about the support of <code>x</code>. But with finitely supported functions to <code>int</code> this is trivial.</li>\n</ul>\n</li>\n</ul>",
        "id": 283027974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653026827
    }
]