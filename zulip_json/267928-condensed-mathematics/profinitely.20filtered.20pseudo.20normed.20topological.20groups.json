[
    {
        "content": "<p>Currently, there are a lot of statements about <code>Mbar</code> and <code>Mbar_le</code> that should be generalised to something like the category of \"profinitely filtered psuedo normed topological groups\". In other words:</p>\n<ul>\n<li>topological groups <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> with an increasing filtration <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>M</mi><mi>c</mi></msub><msub><mo stretchy=\"false\">)</mo><mrow><mi>c</mi><mo>∈</mo><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow></msub></mrow><annotation encoding=\"application/x-tex\">(M_c)_{c \\in \\mathbb R_{\\ge 0}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.068085em;vertical-align:-0.31808499999999995em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33222299999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428566em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24012142857142857em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31808499999999995em;\"><span></span></span></span></span></span></span></span></span></span> such that</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a profinite set</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is pseudo normed, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>∈</mo><msub><mi>M</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">0 \\in M_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msub><mi>M</mi><mi>c</mi></msub><mo>=</mo><msub><mi>M</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">-M_c = M_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><msub><mi>c</mi><mn>1</mn></msub></msub><mo>+</mo><msub><mi>M</mi><msub><mi>c</mi><mn>2</mn></msub></msub><mo>⊂</mo><msub><mi>M</mi><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub></mrow></msub></mrow><annotation encoding=\"application/x-tex\">M_{c_1} + M_{c_2} \\subset M_{c_1+c_2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139199999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139199999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.93343em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258331em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<p>Morphisms of these gadgets should be continuous and bounded homs.</p>",
        "id": 224446779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611912301
    },
    {
        "content": "<p>Are these things bornological? Can does continuity follow from boundedness, or vice versa?</p>",
        "id": 224446812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611912324
    },
    {
        "content": "<p>Reason for the generalisation:</p>\n<ul>\n<li>deduplicate statements of 9.4 and 9.5</li>\n<li>functoriality will give the implication 9.5 -&gt; 9.4.</li>\n</ul>",
        "id": 224446866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611912361
    },
    {
        "content": "<p>Perhaps it makes sense to generalize this concept to more general categories, so that the <code>profinitely filtered pseudo...</code> is the special case for the category <code>ProFin</code>, and pseudo-normed abelian groups is the special case for the category <code>Type</code>?</p>",
        "id": 224476454,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611930136
    },
    {
        "content": "<p>Well, I was thinking of using the predicate for compact subsets (and requiring <code>M</code> to be Hausdorff, totally disconnected).</p>",
        "id": 224476597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611930215
    },
    {
        "content": "<p>So then it's not very modular. But maybe easier to use, because there will be only 1 carrier type involved.</p>",
        "id": 224476689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611930243
    },
    {
        "content": "<p>But we should definitely experiment a bit with different approaches.</p>",
        "id": 224476760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611930272
    },
    {
        "content": "<p>Oh, I see, so the issue is that the \"total space\" is not profinite? Then just work in locally profinite spaces, or something?</p>",
        "id": 224476770,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611930278
    },
    {
        "content": "<p>Okay, I guess one has to think about how to combine these two concepts in a workable way, but I feel like we could deduplicate even more if we generalize enough.</p>",
        "id": 224476875,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611930332
    },
    {
        "content": "<p>Well, we only need pseudo normed groups of the special form that I outlined above, as far as I can see.</p>",
        "id": 224477001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611930371
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 224477180,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611930471
    },
    {
        "content": "<p>Another question that I didn't see an immediate answer to: do these profinitely filtered pseudo normed groups have an internal hom?<br>\nWe already know that the type of group homs between pseudo normed groups is naturally a pseudo normed group. But will it's filtration sets be profinite, if this is true for source and target?</p>",
        "id": 224704330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612173082
    },
    {
        "content": "<p>definitely not!</p>",
        "id": 224705017,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612173489
    },
    {
        "content": "<p>Profinite sets do not have internal Hom's; the internal Hom is very far from compact</p>",
        "id": 224705089,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612173533
    },
    {
        "content": "<p>Oooh right.</p>",
        "id": 224705106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612173544
    },
    {
        "content": "<p>So we'll need some special work to make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Λ</mi><mo separator=\"true\">,</mo><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Hom}(\\Lambda, \\overline{\\mathcal M}_{r'}(S))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">H</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">m</span></span><span class=\"mopen\">(</span><span class=\"mord\">Λ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> into one of these objects.<br>\nBut here it works, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span> is a lattice, hence discrete, and all the filtration sets are finite.</p>",
        "id": 224705202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612173614
    },
    {
        "content": "<p>Well yes, but it's also not really an internal Hom (or is it?). The definition is a little hand-made....</p>",
        "id": 224705255,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612173663
    },
    {
        "content": "<p>Right</p>",
        "id": 224705285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612173680
    },
    {
        "content": "<p><del>Grr, I don't know what the LateX parser is unhappy about. But I guess it's clear what I mean</del> Hooray, I found the bad <code>}</code></p>",
        "id": 224705323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612173714
    },
    {
        "content": "<p>I'm currently playing around with formal definitions of the objects. Lean automatically puts a (subspace) topology on the filtration sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, if we put a topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. But if the topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is defined in terms of topologies on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to start with, this means we now have two topologies on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and Lean will get confused which one we mean. Of course we mean \"who cares, they are equal\", but that's not something Lean will accept.</p>",
        "id": 224705589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612173889
    },
    {
        "content": "<p>So my current feeling is that maybe we should avoid putting a topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">m</mi></mrow><msub><mi>M</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">M = \\mathrm{colim} M_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">m</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 224705632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612173919
    },
    {
        "content": "<p>Definitely!</p>",
        "id": 224705664,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612173949
    },
    {
        "content": "<p>If you ever want to take products, you will start worrying whether the product topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">m</mi></mrow><msub><mi>M</mi><mi>c</mi></msub><mo>×</mo><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">m</mi></mrow><msub><mi>N</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{colim} M_c\\times \\mathrm{colim} N_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">m</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">m</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the colimit topology <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">l</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">m</mi></mrow><msub><mi>M</mi><mi>c</mi></msub><mo>×</mo><msub><mi>N</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{colim} M_c\\times N_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">m</span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 224705782,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612173998
    },
    {
        "content": "<p>This is true, but it's a nasty and useless lemma</p>",
        "id": 224705815,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612174019
    },
    {
        "content": "<p>Ok, that's a good example. (We have this with metric topologies in mathlib.)</p>",
        "id": 224705869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612174066
    },
    {
        "content": "<p>But it's not a metric topology!</p>",
        "id": 224705922,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612174084
    },
    {
        "content": "<p>It's not any kind of standard topology for which you will likely have any API</p>",
        "id": 224705977,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612174120
    },
    {
        "content": "<p>No, I just meant that we have a similar \"problem\" there. If <code>X</code> and <code>Y</code> are metric spaces, then you can put the metric topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> or the product topology (of the metric topologies on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>). To make this usable, we need to use a \"trick\". We put a separate topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, together with a proof that it is equal to the metric topology. And then on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\times Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> the proof that it's a metric space includes the lemma that the two aforementioned topologies agree.</p>",
        "id": 224706670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612174546
    },
    {
        "content": "<p>Oh, I see. That's a neat trick! But I think it's best to avoid mention of the topology here.</p>",
        "id": 224707488,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612175077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/profinitely.20filtered.20pseudo.20normed.20topological.20groups/near/224707488\">said</a>:</p>\n<blockquote>\n<p>That's a neat trick! </p>\n</blockquote>\n<p>Ha! When I first saw it I was horrified! It is the canonical example of a \"diamond\" in type theory: the product topology equals the topology defined by the product metric, but this equality is not true by definition, so it breaks the system which is supposed to be keeping track of these things automatically unless you make this hack in the definition of a metric space to also also carry around a topology and a proof that the topology is induced by the metric. In fact I think nowadays we carry around the uniform space structure instead.</p>",
        "id": 224707730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612175265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> What about the homs in this category. They should be bounded and \"continuous\" group homomorphisms, right?</p>",
        "id": 224707892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612175373
    },
    {
        "content": "<p>But phrasing what \"continuous\" means will be somewhat roundabout.</p>",
        "id": 224707933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612175402
    },
    {
        "content": "<p>I thought the homomorphisms should be strict, i.e. map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">M_{\\leq c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">N_{\\leq c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 224708026,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612175448
    },
    {
        "content": "<p>Otherwise the formation of this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{V}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span>-complex wouldn't even be functorial</p>",
        "id": 224708044,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612175465
    },
    {
        "content": "<p>And strict morphisms are necessarily continuous. I assume you automatically ask continuity of each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mrow><mo>≤</mo><mi>c</mi></mrow></msub><mo>→</mo><msub><mi>N</mi><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">M_{\\leq c}\\to N_{\\leq c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>...</p>",
        "id": 224708062,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612175496
    },
    {
        "content": "<p>Ok, that makes sense. I'm now happy with this approach.</p>",
        "id": 224708219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612175622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Well, in higher category theory you learn that  \"the same\" means \"up to contractible choice\". And you learn that it is often wise to enlarge a point to a larger contractible space to make enough space for certain arguments. So I don't find it bad to somehow enlarge \"the topology on a metric space\" into an interval.</p>",
        "id": 224708237,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612175638
    },
    {
        "content": "<p>What I mean to say is that I've seen similar hacks being used by pure mathematicians to justify certain arguments in higher category theory</p>",
        "id": 224708387,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612175745
    },
    {
        "content": "<p>Initially I was concerned that the system would not scale at all well (e.g. maybe we would have to put five auxiliary extra structures on every scheme in order to make things work) but this seems not to be the case.</p>",
        "id": 224708445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612175766
    },
    {
        "content": "<p>Especially when I discovered that despite the fact that these systems had been around for decades, nobody had bothered to even try and test this by making schemes...</p>",
        "id": 224708491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612175818
    },
    {
        "content": "<p>Part of the reason we formalised the definition of a perfectoid space was just to see whether this sort of issue actually turned the problem into a nightmare, or whether type theory really did work in practice as a foundation for mathematics beyond proving sqrt(2) is irrational and all finite groups of odd order were solvable. Turns out it did.</p>",
        "id": 224708617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612175902
    },
    {
        "content": "<p>One thing I find mildly confusing about type theory is that its advocates claim that when you form say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">1/x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span></span></span></span> it automatically checks for you that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is not zero, and that this is a very good thing. But in practice, things seem to be the other way around: You do not want to be bothered having to check that, so instead you simply define it to be some junk value in case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is not as expected. I've seen many such hacks in the code now, and it makes me believe that this whole justification for type theory is not really sound</p>",
        "id": 224709475,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612176513
    },
    {
        "content": "<p>I agree. In practice it's an art to find the right balance.</p>",
        "id": 224709625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612176648
    },
    {
        "content": "<p>I really view the type system as a tool. It can figure out a lot of things for me, because of the implicit information carried around by types. But sometimes it gets in your way, and then we resort to \"junk-value hacks\".</p>",
        "id": 224709678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612176698
    },
    {
        "content": "<p>I think it is in some sense an \"unsolved issue\". Sometimes having \"correctly typed\" functions really makes life a lot harder. Sometimes it just makes the code very ugly to read. I think it's worth a lot that we can just write <code>1/x</code>, instead of <code>1/&lt;x, proof that x \\ne 0&gt;</code>. If we could have solid automation deriving those proofs for us, then I would be a lot happier about using <code>1/x</code> as notation for <code>div 1 x (auto-inferred proof that x \\ne 0)</code>.</p>",
        "id": 224709996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612176915
    },
    {
        "content": "<p>But currently such automation is typically slow or brittle.</p>",
        "id": 224710015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612176935
    },
    {
        "content": "<p>On the other hand, there are still <em>lots</em> of places where the type system prohibits us from writing nonsense.</p>",
        "id": 224710140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612177001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/profinitely.20filtered.20pseudo.20normed.20topological.20groups/near/224710140\">said</a>:</p>\n<blockquote>\n<p>On the other hand, there are still <em>lots</em> of places where the type system prohibits us from writing nonsense.</p>\n</blockquote>\n<p>In the sense that this is actively helpful during the coding, catching stupid slips early on?</p>",
        "id": 224710212,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612177052
    },
    {
        "content": "<p>Yes, I definitely think so. Before you launch into the proof, you often already make a bunch of typos that you can immediately correct.</p>",
        "id": 224710392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612177153
    },
    {
        "content": "<p>But also because it will just infer a lot of information.</p>",
        "id": 224710405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612177164
    },
    {
        "content": "<p>OK, I see</p>",
        "id": 224710429,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612177180
    },
    {
        "content": "<p>For example, we can write <code>x + y</code>, which is in some sense quite a miracle. We don't have to explain to lean which <code>+</code> we mean all the time.</p>",
        "id": 224710542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612177226
    },
    {
        "content": "<p>Lean sees <code>x + y</code>, and thinks: \"now I need to figure out what <code>+</code> this is. So let's look up the type of <code>x</code>. Aha, that is <code>R</code>. Now let's look for <code>has_add R</code> in my database. Ok, there is some <code>_inst_3 : ring R</code>, and I know how to turn a <code>ring</code> into a <code>has_add</code> through a series of steps.\"</p>",
        "id": 224710730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612177336
    },
    {
        "content": "<p>Aha, I see the point. That's great!</p>",
        "id": 224710768,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612177362
    },
    {
        "content": "<p>Similarly, if <code>C : system_of_complexes</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msubsup><mi>C</mi><mi>c</mi><mi>i</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">x \\in C_c^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.071664em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>, we can just write <code>C.d x</code>, and Lean will figure out which differential we mean exactly.</p>",
        "id": 224710843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612177406
    },
    {
        "content": "<p>It will be able to infer <code>c</code> and <code>i</code> from the type of <code>x</code>, namely <code>C.X c i</code> (if I got the order of <code>c</code> and <code>i</code> right...)</p>",
        "id": 224710959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612177472
    },
    {
        "content": "<p>But that doesn't change the fact that you are completely right that <code>1/x</code> is hacky.</p>",
        "id": 224711063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612177536
    },
    {
        "content": "<p>On the other hand, when I work in set theory, I just ignore the issue. I never check (ok, maybe in 1% of the cases) that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x \\ne 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. And I think I'm not the only one who \"cheats\" like this.</p>",
        "id": 224711170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612177594
    },
    {
        "content": "<p>When I was doing undergraduate example sheets there were questions about square roots of real numbers, and Lean did not have square roots at that time, and so I defined sqrt(x, [proof that x&gt;=0]) to be the usual sup, and the computer scientists laughed at me for writing a function which took two inputs and then never used one of them.</p>",
        "id": 224711217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612177635
    },
    {
        "content": "<p>Turns out that if you feed in a set S which has no sup into the sup function, it just returns some junk value. At the time I was horrified by this, but it had got to the stage where I knew enough about what I was doing to make my square root function work anyway, and I was adamant that it was the \"correct\" thing to do. In the mean time, the computer scientists (who presumably could see what was about to happen) implemented a square root function which returned the correct value for x&gt;=0 and a junk value for x&lt;0. I then started on the example sheet questions and they drove me nuts! I was constantly having to insert proofs that e.g. 2&gt;=0, and in proofs showing stuff like sqrt(2)+sqrt(3)&lt;sqrt(10) it soon got tiring.</p>",
        "id": 224711493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612177825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/profinitely.20filtered.20pseudo.20normed.20topological.20groups/near/224710843\">said</a>:</p>\n<blockquote>\n<p>Similarly, if <code>C : system_of_complexes</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msubsup><mi>C</mi><mi>c</mi><mi>i</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">x \\in C_c^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.071664em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>, we can just write <code>C.d x</code>, and Lean will figure out which differential we mean exactly.</p>\n</blockquote>\n<p>Wow! Even in my very \"sloppy\" notes, I felt the need to put more quantifiers.</p>",
        "id": 224712618,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612178561
    },
    {
        "content": "<p>Yup, but in VScode, you can click on the <code>C.d</code> in the \"Goal window\", and it will tell you exactly which <code>c</code> and <code>i</code> it inferred.</p>",
        "id": 224712804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612178706
    },
    {
        "content": "<p>I think this is the start of where <em>interactive</em> theorem provers become interactive. There is a whole lot more that can be done here... and people are working on it. I'm excited about interactive diagram chases, etc...</p>",
        "id": 224712952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612178810
    },
    {
        "content": "<p>The question of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1/0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">0</span></span></span></span> is all about \"where do you want to put proofs?\". We want to talk first and apologize later (and only if really needed), because it saves a <em>lot</em> of typing. So, given a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, we define division as a function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>×</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k \\times k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, without any precondition, and it satisfies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>0</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1/0 = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. This is a definition, it can't be wrong in the sense it cannot bring a contradiction by itself. Now of course Lean won't let prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>×</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x \\times 1/x = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> without asking for a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is non-zero. The lemma simplifying this expressions asks for a proof, the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">1/x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span></span></span></span> doesn't. Note that apologizing is not always needed. For instance <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>c</mi><mo>=</mo><mi>a</mi><mi mathvariant=\"normal\">/</mi><mi>c</mi><mo>+</mo><mi>b</mi><mi mathvariant=\"normal\">/</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">(a+b)/c = a/c + b/c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">c</span></span></span></span> is true without any condition on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>. That's because we've clearly chosen the \"junk value\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi mathvariant=\"normal\">/</mi><mn>0</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a/0 = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">/</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. This is simply convenient in practice.</p>",
        "id": 224716890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612181630
    },
    {
        "content": "<p>I like that slogan Patrick. \"speak first, apologize later\".</p>",
        "id": 224717137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612181766
    },
    {
        "content": "<p>This has basically no mathematical content. The other trick that Johan mentioned (with metric spaces being a packages containing a distance function, a uniform structure and a proof of the fact that the uniform structure is compatible with the distance) does have some clarifying content. We met this in a slightly more sophisticated context while working on basic infrastructure for perfectoid spaces.  An abelian topological group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> have a unique reasonable uniform structure. Now complete this uniform structure to get a new uniform space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>G</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">G</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> and extend the group operations to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>G</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">G</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span>. The new group operations are continuous. So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>G</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">G</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> with its group structure and the topology underlying its uniform structure is a topological group. And now we have two uniform structures on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>G</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">G</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span>: the one offered by the completion functor acting on all uniform spaces and the reasonable one on a topological group. These are the same uniform structure, but this is <em>not</em> obvious. Bourbaki proves they are the same, but this proof is pretty well hidden inside a long discussion. This subtlety is painful for Lean if not handled through the trick described by Johan. But I claim you also get added clarity by openly defining a compatibility condition between a group structure and a uniform structure and openly stating 1) given a topological abelian group there is a unique uniform structure which is compatible with both its group structure and its topology and 2) if a group structure and a uniform structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> are compatible then  the group structure and the uniform structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>G</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">G</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> are compatible.</p>",
        "id": 224718022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612182353
    },
    {
        "content": "<p>I can totally relate to that second trick, but remain minimally perplexed by this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>0</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1/0=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> thing. (Another reason I remain perplexed by it is that another reason type theory is supposed to be great is that in suitable versions of type theory, you have to work constructively/continuously/internally in a topos/whatever, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>0</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1/0=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is a very discontinuous extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">1/x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span></span></span></span>. I guess in such versions of type theory, this cheat wouldn't work?) But I'm derailing this conversation, and also should do other things...!</p>",
        "id": 224720378,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612183829
    },
    {
        "content": "<p>The type theory purist would indeed argue that division should have the type <code>div : \\all (x y : R), y != 0 -&gt; R</code>. This concession to simple types is however very useful in practice. Personally I think it's great that lean has the tools to express very dependent types even if they are used only sparingly. We know that it's possible to get by with essentially no types at all (ZFC), but you get less assistance with type errors and typing when you have to do everything by hand. Lean (and mathlib specifically) represents a compromise on that spectrum, where lean can support very precise types but it's also okay to be a little inelegant sometimes and totalize when type purism hurts more than it helps.</p>",
        "id": 224721305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612184330
    },
    {
        "content": "<p>(Actually, the real purist would replace <code>y != 0</code> with <code>y # 0</code> using the apartness relation on the reals, but let's not get into that.)</p>",
        "id": 224721393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612184389
    },
    {
        "content": "<p>I pushed a definition of the category.</p>",
        "id": 224729704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612188301
    },
    {
        "content": "<p>The downside of making everything functorial is that we need to give things names that would usually be covered by notation.</p>",
        "id": 224732292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612189469
    },
    {
        "content": "<p>We used to go from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><msubsup><mo stretchy=\"false\">)</mo><mrow><mo>≤</mo><mi>c</mi></mrow><mi>m</mi></msubsup><mo>→</mo><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><msubsup><mo stretchy=\"false\">)</mo><mrow><mo>≤</mo><msup><mi>c</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal M}_{r'}(S)_{\\le c}^m \\to \\overline{\\mathcal M}_{r'}(S)_{\\le c'}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2255090000000002em;vertical-align:-0.342179em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.342179em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.253489em;vertical-align:-0.370159em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.42502em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.370159em;\"><span></span></span></span></span></span></span></span></span></span> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Mbar_le</span> <span class=\"n\">r'</span> <span class=\"n\">S</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Mbar_le</span> <span class=\"n\">r'</span> <span class=\"n\">S</span> <span class=\"n\">c'</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n</code></pre></div>\n<p>But now this has to become a natural transformation between functors that raise things to the power <code>m</code> and <code>n</code>. And so we can't use the <code>^m</code> notation.</p>",
        "id": 224732638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612189622
    },
    {
        "content": "<p>But I don't see how to avoid this. We'll have to think about how to make it look good later.</p>",
        "id": 224732745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612189681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/profinitely.20filtered.20pseudo.20normed.20topological.20groups/near/224720378\">said</a>:</p>\n<blockquote>\n<p>(Another reason I remain perplexed by it is that another reason type theory is supposed to be great is that in suitable versions of type theory, you have to work constructively/continuously/internally in a topos/whatever, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>0</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1/0=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is a very discontinuous extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">1/x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">x</span></span></span></span>. I guess in such versions of type theory, this cheat wouldn't work?)</p>\n</blockquote>\n<p>Yes.<br>\nLean's logic is classical, so you are working in a <em>Boolean</em> topos, where the by-cases definition is fine. Alternatively, this 1/0=0 hack means implicitly you are working with a <a href=\"https://ncatlab.org/nlab/show/field#constructive\">discrete field</a>, not one of the more the general versions (eg a Heyting field, which uses <code>#</code>). In other proof assistants that stick more closely to the constructive world this hack would not be ok.</p>\n<p>Kevin has publicly said this is a big plus for Lean, and for all the \"generic\" mathematics he wants to see done, as it is more optimal for usability vs purity.</p>",
        "id": 224809997,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1612222989
    },
    {
        "content": "<p>The reason it doesn't work in constructive settings is that given a random term representing a real number, such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>π</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>6</mn><mo>−</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><mn>1</mn><mi mathvariant=\"normal\">/</mi><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\pi^2/6-\\sum_{n\\geq1}1/n^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.208997em;vertical-align:-0.39488900000000005em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139799999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>, there's no algorithm which tells you if it's zero or not, so constructively you can't make a definition starting \"if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> then...\"</p>",
        "id": 224834913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612249109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span>  Thanks! I definitely side with Kevin on the question of constructivity, my love for (Grothendieck) topoi notwithstanding (sorry!...).</p>\n<p>One reason I like sets is that they are an extremely primitive language: Extremely few basic sorts of objects and relations. But you can still base everything on them, and at some point you can put some higher level languages on top of them. Type theory is much less primitive, it seems to me -- I never quite understood what a type is, I think this also depends heavily on the precise setup, and what the primitive objects and relations are is a little in flux, I believe -- often you allow yourself to produce new \"methods of forming types\" at will(?). This seems more like the kind of thing you would like to do <em>on top of</em> other foundations, not in the foundations themselves. That types are closer to how you actually think is not an argument that they are better foundations, only that you want to have some interface that has some type-like behaviour. If I want to work in a general cartesian-closed topos or whatever, I should be free to say so, but I shouldn't be forced to from the start. (Back when I was coding in C++ in my early youth, I used to appreciate C++'s \"pointers\" with which you could access arbitrary points in memory. I think that's a little akin to asking whether <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> is an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>. I assume use of pointers, if at all allowed in current languages, is considered very bad form? But somehow in the end whatever the computer is doing is saved somewhere on memory, and the question \"what is the bit at this point of memory\" <em>is</em> always a well-defined question, although often not one you should be asking as it misses context. I feel the same about the foundations of mathematics -- type theory seems to be like a way of denying that there's actually some physical memory with actual bits somewhere.)</p>",
        "id": 224848777,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612259551
    },
    {
        "content": "<p>Ha, you sound the same as <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  (-;</p>",
        "id": 224850030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612260257
    },
    {
        "content": "<p>He frequently says \"types are an editor feature\".</p>",
        "id": 224850065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612260288
    },
    {
        "content": "<p>I think I agree with what you say. But to carry on with the analogy with programming languages (which is a good one, I think): programming languages with \"strong\" foundations, like Rust or Lean 4 can make huge compiler optimizations because they have a very strong set of assumptions on what can and cannot be done with memory. There are benchmarks that show that Lean 4 beats the C++ stdlib on lots of common tasks.</p>",
        "id": 224850692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612260626
    },
    {
        "content": "<p>Of course mathlib is only a single data point. But the speed of growth of mathlib is tremendous compared to other libraries that have been around for decades. But who knows what Mario's Metamath Zero will accomplish. It's similar to what you describe. A low level language, with a type theory bolted on top (MM1).</p>",
        "id": 224850909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612260751
    },
    {
        "content": "<p>Aha, that's great!</p>",
        "id": 224850943,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612260777
    },
    {
        "content": "<p>About your point of \"methods of forming types\". I think the list is not so long, and quite natural. Basically, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Π</mi></mrow><annotation encoding=\"application/x-tex\">\\Pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Π</span></span></span></span>-types and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>-types.<br>\nAnd what I really like about type theory is that it merges the \"set-theoretic\" part of the foundations and the \"logic\" part. Because \"sets are types\" and \"propositions are types\". A function between sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> uses the same machinery as an implication of propositions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P \\implies Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span>.</p>",
        "id": 224851316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612260967
    },
    {
        "content": "<p>So that seems like a simplification to me, compared to the usual foundations.</p>",
        "id": 224851353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612260994
    },
    {
        "content": "<p>yes and no. There's this whole hierarchy of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-truncated homotopy types: For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n=-2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span></span></span></span>, just the one-point set, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>, the empty set and the one-point set, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> all sets, and then you get into actual homotopy types. I can see the appeal of starting directly from all homotopy types and then specializing, but I have never seen a convincing proposal for how to do this -- I think this is largely what HoTT is trying to achieve (and I think it's a very interesting and important question). So I think it's fine to instead start building it up from below, and then going in one-by-one steps seems like the good thing, instead of jumping right to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> (why not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> and allow groupoids as well? Why not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n=2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>? etc.)</p>",
        "id": 224851981,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612261338
    },
    {
        "content": "<p>I agree, and I'm certainly rooting for HoTT. Unfortunately there are still usability issues with HoTT in practice. Where \"practice\" means, in a formal theorem prover.</p>",
        "id": 224852228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612261473
    },
    {
        "content": "<p>I pushed some wip on \"continuous\" maps between profinitely filtered pseunormgrps. There are some sorrys left. They are maths-trivial... but I need to have dinner first.</p>",
        "id": 224896238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612283405
    },
    {
        "content": "<p>These sorrys are now done. I just realised that the objects in this category should also have an endomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><mi>M</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">T^{-1} \\colon M \\to M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</p>",
        "id": 224981400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612336677
    },
    {
        "content": "<p>So, I'll need to modify everything a bit. By now I no longer know how to call these objects...</p>",
        "id": 224981455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612336705
    },
    {
        "content": "<p><code>profinitely_filtered_pseudo_normed_group_with_Tinv</code> is a bit... long</p>",
        "id": 224981467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612336727
    },
    {
        "content": "<p>So you went with adding the topology to the abstract algebra? You could call them profinitely filtered pseudo normed modules</p>",
        "id": 224982038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612337310
    },
    {
        "content": "<p>But that doesn't mention the <code>T</code></p>",
        "id": 224982259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612337531
    },
    {
        "content": "<p>There is now no topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, only on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>c</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. But I introduce a new \"continuity\" predicate for functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>→</mo><msup><mi>M</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M \\to M'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, and prove the minimal amount of stuff that we need about them.</p>",
        "id": 224982312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612337596
    },
    {
        "content": "<p>Note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> does not send <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">M_{\\leq c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">M_{\\leq c}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>. What I suggested once was to define a rescaling functor that takes some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mrow><mo>≤</mo><mo>∙</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">M_{\\leq \\bullet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> sends it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mrow><mo>≤</mo><mi>r</mi><mo>∙</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">M_{\\leq r\\bullet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>, and then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> is a map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mrow><mo>≤</mo><mi>r</mi><mo>∙</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">M_{\\leq r\\bullet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mrow><mo>≤</mo><mo>∙</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">M_{\\leq \\bullet}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mtight\">∙</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 224986834,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612341444
    },
    {
        "content": "<p>Yes, that might be the best approach</p>",
        "id": 224987002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341567
    },
    {
        "content": "<p>We need the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> is \"additive\", right?</p>",
        "id": 224987018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341583
    },
    {
        "content": "<p>It has to commute with addition, so that it commutes with the maps coming from BD.</p>",
        "id": 224987113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341631
    },
    {
        "content": "<p>Sure</p>",
        "id": 224987114,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612341631
    },
    {
        "content": "<p>But that ought to be automatic in what I said above</p>",
        "id": 224987146,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612341654
    },
    {
        "content": "<p>But this still means we need a two stage rocket. Because we can't define the rescaling functor before defining profinitely filtered pseudo normed groups</p>",
        "id": 224987192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341688
    },
    {
        "content": "<p>Yes, but that seems very reasonable to me. In fact better than cooking the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> into the first stage</p>",
        "id": 224987227,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612341720
    },
    {
        "content": "<p>Another option would be to have non-strict maps in the first stage.</p>",
        "id": 224987293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341754
    },
    {
        "content": "<p>But that would destroy lots of functoriality, and control over constants</p>",
        "id": 224987324,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612341781
    },
    {
        "content": "<p>That might also help, because scalar multiplication with <code>n</code> would become a morphism</p>",
        "id": 224987336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341794
    },
    {
        "content": "<p>And so evaluation universal maps from BD would also become morphisms.</p>",
        "id": 224987350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341812
    },
    {
        "content": "<p>Hmm, I disagree</p>",
        "id": 224987362,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612341826
    },
    {
        "content": "<p>We would regain the functoriality on the subcategory with strict homs and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 224987372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341841
    },
    {
        "content": "<p>See the appendix to lecture 9: You carefully choose constants in the BD complex to make scalar multiplication by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> well-defined</p>",
        "id": 224987425,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612341852
    },
    {
        "content": "<p>Well my experience from thinking about the pure math is that it's better to work with the strict notion, and work around the fact that certain maps are not strict by explicitly keeping track of required rescalings</p>",
        "id": 224987508,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612341935
    },
    {
        "content": "<p>So then multiplication by <code>n</code> would also use the rescaling functor, right?</p>",
        "id": 224987596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341977
    },
    {
        "content": "<p>I guess that would work</p>",
        "id": 224987633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612341984
    },
    {
        "content": "<p>Yes</p>",
        "id": 224987638,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612341990
    },
    {
        "content": "<p>I'll start working on the second stage of the rocket (-;</p>",
        "id": 224987686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612342040
    },
    {
        "content": "<p>Then we should stay abstract and not try to get down to earth because <a href=\"https://www.youtube.com/watch?v=bLw4TB0xvHM\">landing rockets</a> is <a href=\"https://www.youtube.com/watch?v=1uJh6upUkRM\">tricky</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"1uJh6upUkRM\" href=\"https://www.youtube.com/watch?v=1uJh6upUkRM\"><img src=\"https://i.ytimg.com/vi/1uJh6upUkRM/default.jpg\"></a></div><div class=\"youtube-video message_inline_image\"><a data-id=\"bLw4TB0xvHM\" href=\"https://www.youtube.com/watch?v=bLw4TB0xvHM\"><img src=\"https://i.ytimg.com/vi/bLw4TB0xvHM/default.jpg\"></a></div>",
        "id": 224989861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612343463
    },
    {
        "content": "<p>I'm worried that the rescaling functor will lead to type theoretic motive headaches. (Yes, we wouldn't have those issues in set theory.)</p>",
        "id": 224992134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612344873
    },
    {
        "content": "<p>We'll end up with types <code>filtration M (r * (c1 + c2))</code> and <code>filtration M (r * c1 + r * c2)</code> that are not definitionally equal.</p>",
        "id": 224992191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612344920
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> = <span aria-label=\"rainbow\" class=\"emoji emoji-1f308\" role=\"img\" title=\"rainbow\">:rainbow:</span></p>",
        "id": 224992222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612344950
    },
    {
        "content": "<p>What about the previous cheat of putting extra proofs that the rescaling factor is what you think it is?</p>",
        "id": 224992344,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612345020
    },
    {
        "content": "<p>That's another option</p>",
        "id": 224992368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612345037
    },
    {
        "content": "<p>I'll just play around. My intuition is pushing me towards a predicate <code>is_rescaling_hom r</code>... but you warned against this, which is making me doubtful.</p>",
        "id": 224992530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612345127
    },
    {
        "content": "<p>Hmm no that might be OK too</p>",
        "id": 224992591,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612345167
    },
    {
        "content": "<p>As long as the rescaling is mentioned explicitly</p>",
        "id": 224992609,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612345177
    },
    {
        "content": "<p>Well, whatever you think works to formalize cleanly the BD resolutions in the appendix to lecture 9</p>",
        "id": 224992685,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612345208
    },
    {
        "content": "<p>The <code>suitable</code> predicate worked quite well there.</p>",
        "id": 224992722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612345238
    },
    {
        "content": "<p>I'll take another careful look at that appendix, to see what we need.</p>",
        "id": 224992773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612345269
    },
    {
        "content": "<p>My guess is that we'll have another predicate <code>very_suitable</code> that will assert that a sequence of constants is not only <code>suitable</code>, but also works for the homotopies from that appendix.</p>",
        "id": 224992904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612345338
    },
    {
        "content": "<p>But I agree that we should keep track of the constants. It just seems that it's better to pack them closer to the homs than to the objects</p>",
        "id": 224992970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612345395
    },
    {
        "content": "<p>OK, sounds good. I think I misunderstood the proposal. I was thinking about the analogue of any bounded homomorphism of Banach spaces, where that notion does not keep track of the bound. Such a notion would definitely be too weak</p>",
        "id": 224993712,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612345880
    },
    {
        "content": "<p>Another design question: we want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msub><mi>M</mi><mi>c</mi></msub><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>x</mi><mo>∈</mo><msub><mi>M</mi><mrow><mi>c</mi><mi mathvariant=\"normal\">/</mi><mi>r</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x \\in M_c \\implies T^{-1}x \\in M_{c/r}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.853208em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.03853em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span>. This is a condition on the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> that will be bundled into the objects. But do we want to vary <code>r</code> with the objects? Or is <code>r</code> fixed for the entire category?</p>",
        "id": 225008645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612355754
    },
    {
        "content": "<p>Since homs need to commute with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>, I'm guessing that <code>r</code> is fixed for the entire category. On the other hand, there are natural inclusions (that don't commute with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>) from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><mi>r</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal M}_{r'}(S) \\to \\overline{\\mathcal M}_{r}(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>≤</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r' \\le r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.887862em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>.</p>",
        "id": 225008848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612355882
    },
    {
        "content": "<p>For now, you should think of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> as fixed forever</p>",
        "id": 225014266,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612358842
    },
    {
        "content": "<p>Ok, thanks. That's what I was hoping <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 225014319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612358877
    },
    {
        "content": "<p>Although I guess, in the notation of the lecture notes, it is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> that is relevant here</p>",
        "id": 225014412,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612358913
    },
    {
        "content": "<p>But if (when?!) we get to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mrow><mo>&lt;</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}_{&lt;r}(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\">M</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>, we can start worrying about how to move <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>...</p>",
        "id": 225014428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612358925
    },
    {
        "content": "<p>But both are completely fixed throughout lecture 9</p>",
        "id": 225014433,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612358928
    },
    {
        "content": "<p>hmm yes for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mrow><mo>&lt;</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_{&lt;r}(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>, but there you don't have to worry about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> for example</p>",
        "id": 225014526,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612358992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> For the time being, we don't need functoriality in the normed group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> either, right?</p>",
        "id": 225071454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612381826
    },
    {
        "content": "<p>No, we don't! <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is fixed throughout lecture 9.</p>",
        "id": 225090286,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612390042
    },
    {
        "content": "<p>The second stage of the rocket is done. The third stage is coming along nicely.</p>",
        "id": 225222319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612472731
    },
    {
        "content": "<p>If anybody is looking for something to work on, you can show that (weak) exactness is isomorphism invariant for isos of systems of complexes.</p>",
        "id": 225228511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612475405
    },
    {
        "content": "<p>Another option is to turn <code>Mbar</code> into an object of <code>ProFiltPseuNormGrpWithTinv</code>, although that isn't as follow your nose as the other thing.</p>",
        "id": 225228730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612475509
    },
    {
        "content": "<p>I can do something next week... too much teaching this week!</p>",
        "id": 225228896,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612475561
    },
    {
        "content": "<p>I will have several hours tomorrow. I was just tidying up the stuff I did last weekend.</p>",
        "id": 225229021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612475621
    },
    {
        "content": "<p>I could try either thing -- do you have a preference?</p>",
        "id": 225229104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612475644
    },
    {
        "content": "<p>I don't really care</p>",
        "id": 225229237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612475717
    },
    {
        "content": "<p>The iso invariance should be easy... or there is something subtle I am missing?</p>",
        "id": 225229239,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612475717
    },
    {
        "content": "<p>No, it should be easy. But it has to be done.</p>",
        "id": 225229261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612475731
    },
    {
        "content": "<p>I think the <code>Mbar</code> thing should be done by somebody who wants to learn all about the API for <code>Mbar</code> and <code>ProFiltBazQuux</code>s</p>",
        "id": 225229360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612475764
    },
    {
        "content": "<p>I'll probably do it tomorrow, if nobody beats me.</p>",
        "id": 225229413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612475793
    },
    {
        "content": "<p>Once those things are done, and I finish the functoriality of the systems of complexes, then the only thing stopping us from stating 9.5 is the defn of polyhedral lattices, and turning <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Λ</mi><mo separator=\"true\">,</mo><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>r</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Hom}(\\Lambda, \\overline{\\mathcal M}_{r'}(S))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">H</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">m</span></span><span class=\"mopen\">(</span><span class=\"mord\">Λ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> into a <code>ProFiltBazQuux</code>.</p>",
        "id": 225229556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612475873
    },
    {
        "content": "<p>I haven't thought hard about that last thingy, but it shouldn't cause any surprises.</p>",
        "id": 225229637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612475898
    },
    {
        "content": "<p>I was going to start on Laurent series until I saw this thread. I'm flexible.</p>",
        "id": 225230025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612476073
    },
    {
        "content": "<p>\"(weak) exactness is isomorphism invariant for isos of systems of complexes\" is <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/system_of_complexes.lean#L197\">https://github.com/leanprover-community/lean-liquid/blob/master/src/system_of_complexes.lean#L197</a></p>",
        "id": 225233261,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612477639
    },
    {
        "content": "<p>We will probably also need the weak version, using <code>is_weak_bdd_exact_for_bdd_degree_above_idx</code> (with identical proof I think)</p>",
        "id": 225233659,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612477863
    },
    {
        "content": "<p>ah, okay</p>",
        "id": 225234745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612478430
    },
    {
        "content": "<p>I'm having a go at this now</p>",
        "id": 225234757,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612478437
    },
    {
        "content": "<p>I've only just started reading these definitions, so I'm probably missing something, but I don't see why this iso-invariance lemma is true. I see that <code>C₁.is_bdd_exact_for_bdd_degree_above_idx k m c₀</code> and <code>f : C₁ ≅ C₂</code> implies that <code>C₁.is_bdd_exact_for_bdd_degree_above_idx k' m c₀</code> for some potentially _larger_ <code>k'</code>, but not that you can use the same <code>k</code>. Perhaps I am just misunderstanding something basic about the definitions.</p>",
        "id": 225237184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612479681
    },
    {
        "content": "<p><code>f</code> doesn't preserve norms, does it?</p>",
        "id": 225237283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612479738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> That's right, a moprhism of normed abeliaan groups is only assumed to be bounded (with respect to some constant <code>C</code>). Maybe <code>k' = C * k</code>?</p>",
        "id": 225238353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612480326
    },
    {
        "content": "<p>Something like that. There will be appearances of <code>f</code> on both sides of the inequality, so potentially two appearances of that constant <code>C</code>.</p>",
        "id": 225238403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612480372
    },
    {
        "content": "<p>But there are many morphisms involved one of these systems of complexes, so it's unclear whether a single <code>k'</code> would work.</p>",
        "id": 225238438,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612480404
    },
    {
        "content": "<p>I've also been too busy to follow the discussion here the last few weeks, so maybe someone else can clarify.</p>",
        "id": 225238481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612480424
    },
    {
        "content": "<p>Hmm, yes. The different components of <code>f : C₁ ≅ C₂</code> could all have different bounds...</p>",
        "id": 225238676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612480526
    },
    {
        "content": "<p>Ah, I thought <code>f</code> preserved the norm... if this is not the case I agree it's not true</p>",
        "id": 225238881,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612480648
    },
    {
        "content": "<p>maybe we've just set up the category structure on <code>system_of_complexes</code> incorrectly, and it is meant to only have norm-nonincreasing morphisms?</p>",
        "id": 225239001,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612480703
    },
    {
        "content": "<p>in which case an isomorphism would be norm-preserving?</p>",
        "id": 225239008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612480711
    },
    {
        "content": "<p>If you think of just the case of normed abelian grouups, and you have an isomorphism <code>f</code> with inverse <code>g</code>, then <code>f</code> has an associated constant <code>C</code> aand same with <code>g</code>, say <code>D</code>, so you would end uup with<br>\n<code>|x| \\le C * D * |x|</code><br>\nfor all <code>x</code>. Of course, this doesn't mean that <code>C = 1</code></p>",
        "id": 225239023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612480729
    },
    {
        "content": "<p>I haven't discovered yet where we want to use this isomorphism-invariance result, so I don't know what statement we really want.</p>",
        "id": 225239179,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612480828
    },
    {
        "content": "<p>Yes, we should wait for someone who has a better understanding of the big picture</p>",
        "id": 225239215,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612480857
    },
    {
        "content": "<p>There was a discussion about optimizing the constants, so the existence of some <code>k</code> is definitely weaker than what we want</p>",
        "id": 225239253,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612480895
    },
    {
        "content": "<p>I'm interested in joining this project. I just finished a paper I was writing on the formalization of Haar measure, so I have time now.<br>\nI looked a bit at the library, and I tried this lemma, and am stuck at exactly the same place (also not having any high-level idea of what I'm doing :) )</p>",
        "id": 225244563,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1612484183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> A system is <code>admissible</code> if all the maps are norm-nonincreasing. So we can have two versions of \"iso-preserving\", I guess.</p>",
        "id": 225263905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612503952
    },
    {
        "content": "<p>But in practice, we will apply this to <code>admissible</code> examples only, so it's fine to add that as assumption.</p>",
        "id": 225263951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612503973
    },
    {
        "content": "<p>but <code>admissible</code> is about the maps within a system, not the morphisms between them?</p>",
        "id": 225263964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612503995
    },
    {
        "content": "<p>Oooh, you are right.</p>",
        "id": 225263967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612504005
    },
    {
        "content": "<p>Sorry, let me think for a sec about how I want to apply the iso invariance</p>",
        "id": 225263980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612504032
    },
    {
        "content": "<p>In <code>NormedGroup</code> we need norm-increasing morphisms, because we'll have automorphisms <code>T</code> that rescale the norm by some <code>r</code>.</p>",
        "id": 225264051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612504118
    },
    {
        "content": "<p>But for the iso-invariance, we can assume that the maps between the systems are norm-noninc.</p>",
        "id": 225264068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612504140
    },
    {
        "content": "<p>is it just that for <code>system_of_complexes</code> the morphisms should be norm nonincreasing?</p>",
        "id": 225264143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612504209
    },
    {
        "content": "<p>or do we even want norm-increasing morphisms there?</p>",
        "id": 225264153,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612504226
    },
    {
        "content": "<p>I don't know yet</p>",
        "id": 225264198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612504310
    },
    {
        "content": "<p>For the implication 9.5 =&gt; 9.4 we only need norm-noninc. But I don't know about the proof of 9.5.</p>",
        "id": 225264244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612504335
    },
    {
        "content": "<p>I think it should be fine to make everything norm-noninc. Because the main tool is the normed spectral sequence 9.6. And that one is assumed to be admissible.</p>",
        "id": 225264273,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612504384
    },
    {
        "content": "<p>Isomorphism invariance is definitely one of the things I might use without noticing. But I'm actually confused where we want to use it. Currently, I can only think of situations where the two are literally the same to my eyes, so in particular everything is compatible with norms.</p>",
        "id": 225273120,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612514747
    },
    {
        "content": "<p>I agree that for an isomorphism that has a weird behaviour with respect to norms, the translation may not be so obvious, but I don't think such a situation appears.</p>",
        "id": 225273242,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612514849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> In the proof of 9.5 =&gt; 9.4 you use that <code>Hom(Z, Mbar)</code> is the same as <code>Mbar</code>.</p>",
        "id": 225274169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612515636
    },
    {
        "content": "<p>But Lean doesn't agree that they are the same-same-same.</p>",
        "id": 225274188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612515649
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The system of complexes</span>\n<span class=\"sd\">`V-hat(M_{≤c})^{T⁻¹} ⟶ V-hat(M_{≤c_1c}^2)^{T⁻¹} ⟶ ...`</span>\n<span class=\"sd\">as a functor in `M`.</span>\n\n<span class=\"sd\">See also `system`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">System</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">system_of_complexes</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">BD.system</span> <span class=\"n\">c'</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">system.map</span> <span class=\"n\">BD</span> <span class=\"n\">c'</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"n\">f.unop</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">system.map_id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">M₃</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">system.map_comp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 225274599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612515947
    },
    {
        "content": "<p>So now we need to turn <code>Mbar</code> into an object of the source category, and then we can restate 9.4.<br>\nMuch ado about nothing...</p>",
        "id": 225274678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612515988
    },
    {
        "content": "<p>But the upshot is that we are now also quite a bit closer to the statement of 9.5</p>",
        "id": 225274697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612516007
    },
    {
        "content": "<p>Once <code>Mbar</code> is a <code>ProFiltDingsBums</code> we can also delete several hundreds of lines of dead code <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 225274740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612516044
    },
    {
        "content": "<p>OK, great! But then the norms are literally the same.</p>",
        "id": 225275105,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612516290
    },
    {
        "content": "<p>Sure, this is one of those hyper-canonical identifications that Lean will stumble over, but of course it's utterly trivial.</p>",
        "id": 225275181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612516335
    },
    {
        "content": "<p>Sure, that's OK. I was just trying to answer the question that came up in the chat above, about which version of isomorphism invariance is required</p>",
        "id": 225275233,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612516392
    },
    {
        "content": "<p>Ok, yes. That's helpful. You're saying that in the proof of 9.5 we will not need a more advanced version. That's useful info.</p>",
        "id": 225275267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612516431
    },
    {
        "content": "<p>So in practice we can add the assumption that the isomorphism preserves the norm?</p>",
        "id": 225275501,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612516572
    },
    {
        "content": "<p>If this is the case I can try to prove it now</p>",
        "id": 225275532,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612516598
    },
    {
        "content": "<p>Maybe we should do as Scott suggested, and bake this into the definition of morphism of <code>system_of_complexes</code>.</p>",
        "id": 225275580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612516643
    },
    {
        "content": "<p>But this means changing the category, right? Morphisms of system of complexes are never explicitly defined, they are just natural transformations. And if we do so we can never consider norm increasing morphism</p>",
        "id": 225275774,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612516780
    },
    {
        "content": "<p>True. So my inclination is to just add it as unbundled assumptions on top of morphisms-as-nat-trans when we need it.</p>",
        "id": 225275906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612516866
    },
    {
        "content": "<p>So something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_iso</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C₁.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C₁</span> <span class=\"bp\">≅</span> <span class=\"n\">C₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hnorm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C₁.X</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">C₂.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 225277098,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612517743
    },
    {
        "content": "<p>I think I strive to only ever consider norm-nonincreasing maps. If you formalize 9.6, you will find that it's best to have this assumption baked into the foundations, probably...</p>",
        "id": 225277238,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612517821
    },
    {
        "content": "<p>On the other hand, in the proof of 9.5, there is a point where I have to artificially divide by some factorials to make this assumption true. But I think it's still best to do the work there. In general, it's best to have norm-nonincreasing as the standard and make additional arguments when that's violated, because bounds are so important in this argument</p>",
        "id": 225277341,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612517889
    },
    {
        "content": "<p>It shouldn't be hard to do this. We can't just use a <code>@[derive]</code> statement to summon the category structure of <code>system_of_complexes</code>, but it will only be a few lemmas to define the subcategory of norm nonincreasing maps. (And I guess some straightforward helpful lemmas, e.g. that isomorphisms thus preserve norms.)</p>",
        "id": 225277547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612518035
    },
    {
        "content": "<p>We already have a special <code>apply</code> function to apply a morphism to an element, so it will be no harder to use, whether the morphisms are collections of natural transformations or collections of natural transformations satisfying a condition.</p>",
        "id": 225277630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612518114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> acts as automorphism on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>. But do you ever consider the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>? Or should we turn it into an norm-noninc endomorphism?</p>",
        "id": 225277677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612518122
    },
    {
        "content": "<p>I think I only ever use the action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> in Lecture 9. I'm sorry that this is bad notation... but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z((T^{-1}))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> didn't feel much better to me.</p>",
        "id": 225278171,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612518447
    },
    {
        "content": "<p>Also note that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> doesn't act on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8833300000000001em;vertical-align:0em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span>!</p>",
        "id": 225278194,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612518470
    },
    {
        "content": "<p>Right, only <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> does...</p>",
        "id": 225278258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612518495
    },
    {
        "content": "<p>I have no idea how to modify the definition, so I will let someone else doing it <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 225278481,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612518649
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/Mbar/Mbar_le.lean#L583\">https://github.com/leanprover-community/lean-liquid/blob/master/src/Mbar/Mbar_le.lean#L583</a><br>\ntwo <code>sorry</code>s here that shouldn't be too hard...</p>\n<p>Other than that, <code>Mbar</code> is now a <code>profinitely_filtered_pseudo_normed_group_with_Tinv</code>, and so we can use the general machinery to get a system of complexes (instead of the \"ad hoc\" approach that we first used to get the statement of 9.4).</p>",
        "id": 225285363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612523227
    },
    {
        "content": "<p>Is someone working on these? I can try them now</p>",
        "id": 225288558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612525560
    },
    {
        "content": "<p>I'm not</p>",
        "id": 225288605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612525571
    },
    {
        "content": "<p>I need to have lunch, and after that there is a seminar talk in Freiburg by a certain Heather Macbeth <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 225288654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612525630
    },
    {
        "content": "<p>OK I'm unsorrying Mbar_le</p>",
        "id": 225290378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612526844
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 225290424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612526879
    },
    {
        "content": "<p>I've done <code>neg</code> so all that's left is <code>embedding_cast_le</code>, although I'm wrestling with excessive memory consumption errors :-/</p>",
        "id": 225296391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612530773
    },
    {
        "content": "<p>I had the same problem of excessive memory consumption. I run <code>leanproject build</code> and now it seems to be gone</p>",
        "id": 225296805,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612531036
    },
    {
        "content": "<p>Yeah, although that's a bit weird (I did the same).</p>",
        "id": 225296831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612531055
    },
    {
        "content": "<p>Yes, there is something wrong...</p>",
        "id": 225296851,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612531071
    },
    {
        "content": "<p>We might have to ask the computer scientists, the code is nowhere near big or complicated enough to be causing problems, there might be some loop somewhere.</p>",
        "id": 225297011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612531153
    },
    {
        "content": "<p>Going back to mathematics, it seems that I'm supposed to be proving that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>≤</mo><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">c_1\\leq c_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> then the injection <code>Mbar_le r S c_1 \\to Mbar_le r S c_2</code> is an embedding (i.e. the topology on the source is induced by the topology on the target under the injection). Is this done or am I expected to prove it?</p>",
        "id": 225297173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612531241
    },
    {
        "content": "<p>(<code>Mbar_le r' S c</code> is the set of power series F_s = ∑ a_{n,s}T^n ∈ Tℤ[[T]] such that ∑_{n,s} |a_{n,s}|r'^n ≤ c, and S is finite)</p>",
        "id": 225297481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612531436
    },
    {
        "content": "<p>OK I think I have a maths proof, I'll just type that in.</p>",
        "id": 225297647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612531538
    },
    {
        "content": "<p>Any injective map of compact Hausdorff spaces acquires the subspace topology</p>",
        "id": 225299948,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612532923
    },
    {
        "content": "<p>not sure whether you already have that in mathlib, but it might be useful</p>",
        "id": 225299982,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612532939
    },
    {
        "content": "<p>oh that's a better approach than mine.</p>",
        "id": 225300028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612532970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I had a problem with a proof timing out in <code>Mbar_le</code> and I've written a much simpler one, so maybe if you pull that memory error will go away.</p>",
        "id": 225300142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612533023
    },
    {
        "content": "<p>I'm kind of annoyed I didn't spot that proof, I thought I had some counterexample but now I realise the source wasn't Hausdorff.</p>",
        "id": 225300196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612533073
    },
    {
        "content": "<p>I don't see any timeout anymore <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 225300255,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612533109
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closed_embedding_of_continuous_injective_closed\">docs#closed_embedding_of_continuous_injective_closed</a>. Is this what you need here?</p>",
        "id": 225300884,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612533482
    },
    {
        "content": "<p>I think not: There's something more specific to compact Hausdorff spaces, where merely being injective on underlying sets already implies it's closed immersion, with the subspace topology</p>",
        "id": 225302276,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612534179
    },
    {
        "content": "<p>I think it's exactly this lemma, plus the trivial fact that a continuous map on a compact space is closed, no?</p>",
        "id": 225303427,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612534746
    },
    {
        "content": "<p>Well, I find the other half more trivial, I believe?</p>",
        "id": 225303761,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612534929
    },
    {
        "content": "<p>(After all, that half works for any topological space, so I regard it as \"abstract nonsense\")</p>",
        "id": 225303896,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612535005
    },
    {
        "content": "<p>The other half is the fact that the image of a closed set is in fact the image of a compact set, hence it is compact, hence it is closed. We have all these facts in mathlib, but probably not glued together exactly in the form you need.</p>",
        "id": 225304057,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612535066
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.separation</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">embedding</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is what we seem to need.</p>",
        "id": 225304277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612535182
    },
    {
        "content": "<p>If I remember right, you can omit t2_space X</p>",
        "id": 225304304,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612535210
    },
    {
        "content": "<p>Let me do this now.</p>",
        "id": 225304379,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612535244
    },
    {
        "content": "<p>Many thanks -- it is the last sorry in the file I'm working on.</p>",
        "id": 225304399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612535255
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">embedding_of_injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">embedding</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is a tidier version</p>",
        "id": 225304637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612535361
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6057\">#6057</a></p>",
        "id": 225306292,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612536170
    },
    {
        "content": "<p>If you want to put it in your file, this is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">continuous.is_closed_map</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_closed_map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hs.compact.image</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_closed</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous.closed_embedding</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">closed_embedding</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">closed_embedding_of_continuous_injective_closed</span> <span class=\"n\">h</span> <span class=\"n\">hf</span> <span class=\"n\">h.is_closed_map</span>\n</code></pre></div>\n<p>(with topological space assumptions)</p>",
        "id": 225307370,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612536630
    },
    {
        "content": "<p>Did we decide what to do about (non)invariance under isomorphisms of systems of complexes? </p>\n<p>Here's a possible suggestion, which I think we discussed at some point before (possible in a different context):</p>\n<ol>\n<li>Redefine <code>normed_group_hom</code> to be norm nonincreasing.</li>\n<li>Introduce an endofunctor on <code>NormedGroup</code> which on objects just scales the norm by a positive constant <code>C</code>.</li>\n</ol>",
        "id": 225307894,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612536864
    },
    {
        "content": "<p>I think such an endofunctor will lead to annoying DTT hell, unfortunately.</p>",
        "id": 225309866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612537714
    },
    {
        "content": "<p>I would rather work with two separate categories.</p>",
        "id": 225309914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612537734
    },
    {
        "content": "<p>Will it be more annoying than not having invariance under isomorphisms?</p>",
        "id": 225309925,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612537740
    },
    {
        "content": "<p>I think we don't need invariance under isos that much.</p>",
        "id": 225310154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612537851
    },
    {
        "content": "<p>Oh ok.</p>",
        "id": 225310208,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612537872
    },
    {
        "content": "<p>But we could tweak the category structure on <code>system_of_complexes</code> instead, to ask that those maps are all norm-noninc</p>",
        "id": 225310218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612537881
    },
    {
        "content": "<p>that seems like the best of both worlds</p>",
        "id": 225310231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612537887
    },
    {
        "content": "<p>Should we explicitly make a <code>norm_nonincreasing</code> predicate? That might by more economical and ergonomical then explicitly writing out the condition every time.</p>",
        "id": 225328216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545433
    },
    {
        "content": "<p>Yes, I think making such a predicate would be a good option.</p>",
        "id": 225328432,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612545546
    },
    {
        "content": "<p>We can rewrite things like <code>admissible</code> using this</p>",
        "id": 225328469,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612545569
    },
    {
        "content": "<p>Should it be a class?</p>",
        "id": 225328505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612545588
    },
    {
        "content": "<p>(or we can use <code>fact</code>s again...)</p>",
        "id": 225328575,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612545608
    },
    {
        "content": "<p>No, I think just a regular predicate.</p>",
        "id": 225328652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545656
    },
    {
        "content": "<p>I'm thinking it might be nice to have it automatically for things like quotient maps</p>",
        "id": 225328712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612545683
    },
    {
        "content": "<p>If we start using it a lot, we can upgrade.</p>",
        "id": 225328736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545697
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 225328752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612545707
    },
    {
        "content": "<p>And with regular predicates, we can have dot notation, which is also a powerful tool.</p>",
        "id": 225328831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> do you want to do this (minor) refactor?</p>",
        "id": 225328954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545793
    },
    {
        "content": "<p>I can. But I won't be able to today. I'll have much more time starting next week</p>",
        "id": 225329018,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612545820
    },
    {
        "content": "<p>ok, then let's see if it's still waiting for you next week <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 225329125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612545867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> OK <code>Mbar_le</code> is now sorry-free.</p>",
        "id": 225331630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612547069
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 225331686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612547098
    },
    {
        "content": "<p>I did the refactor, and pushed a proof that strong exactness is isom invariant (assuming strictness).</p>",
        "id": 225344624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612553181
    },
    {
        "content": "<p>the condition <code>embedding_cast_le</code> is now replaced by <code>continuous_cast_le</code> (and <code>embedding_cast_le</code> is a lemma).</p>",
        "id": 225389336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612591556
    },
    {
        "content": "<p>Nice!</p>",
        "id": 225399521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612601711
    }
]