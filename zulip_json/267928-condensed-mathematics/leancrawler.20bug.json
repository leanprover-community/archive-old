[
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 298561978,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068063
    },
    {
        "content": "<p>Thanks for creating an easy case. I will investigate this but time is currently a very very scarce resource for me.</p>",
        "id": 298562891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068438
    },
    {
        "content": "<p>I'll try anyway at some point in the near future since it could be useful for our project paper writing</p>",
        "id": 298562954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Thanks for minimizing!</p>",
        "id": 298563100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663068531
    },
    {
        "content": "<p>I am opening a separate discussion, maybe someone else is interested in this.</p>",
        "id": 298563148,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068547
    },
    {
        "content": "<p>Wait, I don't understand the complain. Your example mentions <code>crawler.comm.comm</code> whose dependencies should mention <code>nat.add_comm</code></p>",
        "id": 298563432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068674
    },
    {
        "content": "<p>That is my complain, I don't see anywhere <code>nat.add_comm</code></p>",
        "id": 298563470,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068700
    },
    {
        "content": "<p>What you are printing here are only the direct dependencies, you need the full graph to see transitive dependencies</p>",
        "id": 298563484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068711
    },
    {
        "content": "<p>What does it says about <code>test</code>?</p>",
        "id": 298563585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663068747
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">lib</span><span class=\"o\">[</span><span class=\"bp\">'</span><span class=\"n\">crawler.test'</span><span class=\"o\">]</span>\n\n<span class=\"n\">Out</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"n\">LeanDecl</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">='</span><span class=\"n\">crawler.test'</span><span class=\"o\">,</span> <span class=\"n\">filename</span><span class=\"bp\">='/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">brasca</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">test_crawl</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test_crawl.lean'</span><span class=\"o\">,</span> <span class=\"n\">line_nb</span><span class=\"bp\">=</span><span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"n\">kind</span><span class=\"bp\">='</span><span class=\"kd\">definition</span><span class=\"bp\">'</span><span class=\"o\">,</span>\n<span class=\"n\">is_inductive</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure_field</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_class</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_instance</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_recursor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span>\n<span class=\"n\">is_constructor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"bp\">='</span><span class=\"n\">crawler.comm'</span><span class=\"o\">,</span> <span class=\"n\">type_uses_proofs</span><span class=\"bp\">=</span><span class=\"n\">set</span><span class=\"o\">(),</span> <span class=\"n\">type_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.comm'</span><span class=\"o\">},</span> <span class=\"n\">type_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">type_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">type_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Value</span><span class=\"bp\">='</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">crawler.test._proof_1</span><span class=\"o\">}</span><span class=\"bp\">'</span><span class=\"o\">,</span>\n<span class=\"n\">value_uses_proofs</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.test._proof_1'</span><span class=\"o\">},</span> <span class=\"n\">value_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">nat.has_add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">bit1'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat.has_one'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">bit0'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">crawler.comm.mk'</span><span class=\"o\">,</span>\n<span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">has_one.one'</span><span class=\"o\">},</span> <span class=\"n\">value_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">target_class</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">fields</span><span class=\"bp\">=</span><span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 298563744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068827
    },
    {
        "content": "<p>Ok, and for <code>crawler.test._proof_1</code>?</p>",
        "id": 298563864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663068865
    },
    {
        "content": "<p>it's not happy.</p>",
        "id": 298563933,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068897
    },
    {
        "content": "<p>Meaning it gives an error</p>",
        "id": 298563971,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663068910
    },
    {
        "content": "<p>So maybe that's the issue? Because I guess that is where <code>nat.add_comm</code> is supposed to show up.</p>",
        "id": 298564076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663068952
    },
    {
        "content": "<p><code>nat.add_comm</code> is indeed present in the full graph, but not in the connected component of <code>crwaler.stupid</code>. Maybe I don't understand something, but it should show up, right?</p>",
        "id": 298564356,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663069062
    },
    {
        "content": "<p>I mean, it is needed</p>",
        "id": 298564369,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663069066
    },
    {
        "content": "<p>Right, so somehow the code fails to add an edge. And it might be related to the fact that you got an error when querying about <code>._proof_1</code>?</p>",
        "id": 298564741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663069185
    },
    {
        "content": "<p>I think the error is there, but I have no idea  how the script works. In any case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nx.shortest_path</span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat.add_comm'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">crawler.stupid'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">NetworkXNoPath</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">path</span> <span class=\"n\">between</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">and</span> <span class=\"n\">crawler.stupid</span>\n</code></pre></div>",
        "id": 298565022,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663069311
    },
    {
        "content": "<p>Ok, there is a clear bug here. Floris and I will try to fix it soon.</p>",
        "id": 298565152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663069361
    },
    {
        "content": "<p>Thanks for you help!</p>",
        "id": 298565163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663069368
    },
    {
        "content": "<p>The full graph has 5177 nodes. To prove that <code>2+3=3+2</code>. Crazy.</p>",
        "id": 298565802,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663069593
    },
    {
        "content": "<p>Lean has proved that math is hard!</p>",
        "id": 298583493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663075484
    },
    {
        "content": "<p>to be fair, there is a proof of <code>2+3=3+2</code> that involves only <code>eq.refl</code>, <code>nat.zero</code> and <code>nat.succ</code></p>",
        "id": 298583653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663075528
    },
    {
        "content": "<p>Maybe this is because I used <code>structure</code>. In any case it is not so important.</p>",
        "id": 298584315,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663075753
    },
    {
        "content": "<p>And it is the full set of declarations used in <code>init.data.nat.lemmas</code> I think.</p>",
        "id": 298584471,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663075804
    },
    {
        "content": "<p>This should be fixed in <a href=\"https://github.com/leanprover-community/leancrawler/pull/7\">leancrawler#7</a>.<br>\nYou can already test this by manually changing your <code>crawl.lean</code> file.</p>",
        "id": 298637098,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1663091658
    },
    {
        "content": "<p>Cool! Thanks for hacking on this! Should Riccardo's MWE be recorded as a test in the repo?</p>",
        "id": 298637551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663091817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Can you now calculate how many definitions go into LTE? (As opposed to lemmas.)</p>",
        "id": 298716324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663140308
    },
    {
        "content": "<p>Maybe I actually want to know this for the statement, instead of the entire proof.</p>",
        "id": 298716355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663140323
    },
    {
        "content": "<p>I guess we should prepare a <code>def statement : Prop := ...</code> to do that.</p>",
        "id": 298716528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663140402
    },
    {
        "content": "<p>Yes I am going to run it against the LTE to gather the stats as before</p>",
        "id": 298719799,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663141997
    },
    {
        "content": "<p>But you'll have to wait until this afternoon for the results I think</p>",
        "id": 298719956,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663142086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> do you like this statement?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">liquid_tensor_experiment_statement</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">pBanach.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">is_zero</span> <span class=\"o\">(</span><span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">ℳ_</span><span class=\"o\">{</span><span class=\"n\">p'</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 298724608,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663144123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> LGTM</p>",
        "id": 298726286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663144886
    },
    {
        "content": "<p>You could just copy the statement from <code>challenge.lean</code></p>",
        "id": 298726314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663144902
    },
    {
        "content": "<p>I think it uses <code>\\iso 0</code>, instead of <code>is_zero</code>.</p>",
        "id": 298726336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663144919
    },
    {
        "content": "<p>But that shouldn't really have any effect on the nr of defs used in the statement.</p>",
        "id": 298726406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663144938
    }
]