[
    {
        "content": "<p>I know we have a <code>toric</code> thread already but this isn't about mathematics. </p>\n<p>We have tedious infrastructure problems with the <code>toric</code> branch. My observation is that the workflows which seem to work in this project are the following: either incremental pushes to master, or bigger developments which take a while (maybe a week or two) to make but then get merged quickly into master. The <code>toric</code> branch is neither of these. It looks like it is not a branch which is designed for merging, it is a branch which is designed for experimentation and perhaps a future general theory of toric varieties. This is of course fine, but life moves on, and mathlib moves and the definition of a monoid changes, and now if you merge master into toric you get conflicts and a bunch of breakage. We have to decide the purpose of this branch, because it is beginning to rot and there is a whole heap of stuff in it which might be important for toric varieties but which is not important for the main goal, which is to prove the unique <code>sorry</code> in the file <code>toric.lem97</code> on master. I was hoping to make progress on this today because we're now in good shape in terms of the formalisation: I am now sure that we have all the details of a maths proof, Filippo has reduced everything to Gordan, Eric and Damiano have proved to me that our definition of grading works, and Riccardo and Damiano have started on the details of the one missing proof. But we need this stuff in master. I had hoped to get it done by last week but we had some unexpected problems -- we have highly degraded internet right now and it takes me forever to download oleans so it's really difficult for me to switch between branches if they are on different mathlib commits, and I also had to spend a bunch of time hiring someone last week (we have a new number theory Lean post-doc at Imperial :D but I'll let them introduce themselves when they're ready). It is my top priority now to get this proof into master but I still didn't find the time to sort out the merge conflicts.</p>\n<p>My proposal is to leave the <code>toric</code> branch for now, and start moving the stuff we need into <code>master</code> because now is a really good time to finish this part of the story. I should have time over the next few days to nail this but I am going to do the development on master because my main goal is to remove this sorry.</p>",
        "id": 235099294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618778783
    },
    {
        "content": "<p>Concerning what I did (the monoid algebra is of finite type iff the monoid is finitely generated) I think it is suitable for mathlib and my plan is to PR it. In a few hours bors will have merged all the preliminary lemmas and I can start PRing the real theorem (probably tomorrow).</p>",
        "id": 235099634,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618779104
    },
    {
        "content": "<p>yes that's fine: we can access the theorem if it's in mathlib -- then you're PR'ing it upstream. What I'm worried about is the downstream stuff in the <code>toric</code> branch.</p>",
        "id": 235102471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618780445
    },
    {
        "content": "<p>Kevin, sorry, I think that I had not merger master into <code>toric</code> after one of Sébastien's refactor of <code>smul</code>: I just did!</p>\n<p>I thought that it was enough to keep merging <code>master</code> into <code>toric</code> to \"maintain\" it.  Is that wrong?  I can merge <code>toric</code> into <code>master</code> now, I think, since the merge of <code>master</code> into <code>toric</code> is done!</p>",
        "id": 235130210,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618810866
    },
    {
        "content": "<p>I just pushed another mathlib bump...</p>",
        "id": 235130456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618811126
    },
    {
        "content": "<p>Damiano does it compile after the merge? Were there conflicts?</p>",
        "id": 235133300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618813758
    },
    {
        "content": "<p>I am having trouble making the <code>towards_Gordan</code> file work: I have <code>is_basis ℤ b</code> as both a goal and as an assumption, but now it no longer works.  Note that this had issues from the start: it worked for a bit, but no longer does.</p>",
        "id": 235135681,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618815511
    },
    {
        "content": "<p>Around this point is where the issue first arose, but was fixed for some time.</p>\n<p><a href=\"#narrow/stream/267928-condensed-mathematics/topic/toric/near/232714180\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/toric/near/232714180</a></p>",
        "id": 235135909,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618815620
    },
    {
        "content": "<p>There is also a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>assumption and I am unable to close the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">submodule</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n</code></pre></div>",
        "id": 235136588,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618815858
    },
    {
        "content": "<p>I'm giving up: unfortunately, I had to comment out one of the proofs that Riccardo was able to provide, since I can no longer make it work.  I am checking that the rest builds.</p>",
        "id": 235146590,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618821779
    },
    {
        "content": "<p>Ok, with the exception of the proof that has been problematic since the beginning, the <code>toric</code> branch is works.</p>",
        "id": 235148131,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618822627
    },
    {
        "content": "<p>I am having a look at it... I don't think I will be able to fix if Damiano wasn't but I am curious to see what doesn't work.</p>",
        "id": 235151914,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618824586
    },
    {
        "content": "<p>Yes, I am also looking into this - let's see.</p>",
        "id": 235152037,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1618824640
    },
    {
        "content": "<p>I guess we're speaking about <code>reduction_to_lattice</code>, right?</p>",
        "id": 235152107,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1618824695
    },
    {
        "content": "<p>Yes, it is <code>reduction_to_lattice</code>.  The proof that used to work is commented.</p>",
        "id": 235152214,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618824743
    },
    {
        "content": "<p>Found it, yes.</p>",
        "id": 235152275,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1618824775
    },
    {
        "content": "<p>On a side note, I have merged the <code>toric</code> branch into <code>master</code> and pushed it to github.  This was not intended: my idea was to wait for confirmation that this was something desirable.</p>\n<p>If you think that the branches <code>toric</code>and <code>master</code> should continue to run parallel, feel free to undo this merge: I tried doing this myself, but failed.</p>",
        "id": 235152435,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618824846
    },
    {
        "content": "<p>no, if you can fix it, that's great! I just saw conflicts and problems and began to ask myself what the point of the branch was.</p>",
        "id": 235152521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618824880
    },
    {
        "content": "<p>Ok, so, on my machine, <code>leanproject build</code> worked on the <code>master_with_toric_merged</code> branch, modulo the single proof <code>reduction_to_lattice</code>.  Let's see how CI deals with it!</p>",
        "id": 235152640,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618824940
    },
    {
        "content": "<p>I was able to fix the proof... indeed it was already working, but I was getting a timeout. I increased the limits and it works</p>",
        "id": 235153230,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618825241
    },
    {
        "content": "<p>I am investigating what is causing the timeout</p>",
        "id": 235153261,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618825263
    },
    {
        "content": "<p>How do you increase the limits of the timeouts?  I either get the proofs working fast, or I look for shorter proofs...</p>",
        "id": 235153319,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618825305
    },
    {
        "content": "<p>Anyway, the <code>toric</code> branch with the commented proof is now merged into <code>master</code>, also on github.</p>",
        "id": 235153416,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618825345
    },
    {
        "content": "<p>It is in VS code (I think that if you compile from the command line there are no limits). Go to setting, search for lean and it is somewhere there</p>",
        "id": 235153521,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618825416
    },
    {
        "content": "<p>It could be around the <code>linear_independent_iff'.mpr (λ t g hg i hi, _),</code>, possibly. I tried also <code>swapping</code> a bit the <code>goals</code> (without increasing the timeout) and it seems to me that the timeout arises there.</p>",
        "id": 235153729,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1618825530
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">24</span><span class=\"n\">s</span>\n<span class=\"n\">num.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">5186</span>\n<span class=\"n\">num.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">5260</span>\n<span class=\"n\">num.</span> <span class=\"n\">allocated</span> <span class=\"n\">big</span> <span class=\"n\">nums</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n<span class=\"mi\">24045</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.istep</span>\n<span class=\"mi\">24045</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.step</span>\n<span class=\"mi\">24045</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction</span>\n<span class=\"mi\">24045</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.istep._lambda_1</span>\n<span class=\"mi\">24045</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">scope_trace</span>\n<span class=\"mi\">24045</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction._lambda_2</span>\n<span class=\"mi\">24004</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.solve1</span>\n<span class=\"mi\">23971</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction._lambda_3</span>\n<span class=\"mi\">23016</span><span class=\"n\">ms</span>    <span class=\"mi\">95</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.to_expr</span>\n<span class=\"mi\">22965</span><span class=\"n\">ms</span>    <span class=\"mi\">95</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.refine</span>\n  <span class=\"mi\">813</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad_orelse</span>\n  <span class=\"mi\">811</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.focus1</span>\n  <span class=\"mi\">741</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.convert</span>\n  <span class=\"mi\">740</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.try</span>\n  <span class=\"mi\">722</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.congr'._main._lambda_1</span>\n  <span class=\"mi\">634</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.congr_core'</span>\n  <span class=\"mi\">623</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_eq_congr_core</span>\n  <span class=\"mi\">602</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_specialized_congr_lemma</span>\n  <span class=\"mi\">425</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad.monad._lambda_9</span>\n  <span class=\"mi\">213</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">_private.423049959.all_goals'_core._main._lambda_2</span>\n  <span class=\"mi\">213</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.all_goals'</span>\n  <span class=\"mi\">213</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">all_goals'_core</span>\n  <span class=\"mi\">212</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">rw_core</span>\n  <span class=\"mi\">212</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.propagate_tags</span>\n  <span class=\"mi\">211</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">interactive.loc.apply</span>\n  <span class=\"mi\">211</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad.orelse'</span>\n  <span class=\"mi\">208</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rewrite_core</span>\n  <span class=\"mi\">208</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rewrite</span>\n  <span class=\"mi\">192</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">_private.1221263889.rw_goal._lambda_2</span>\n  <span class=\"mi\">192</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rewrite_target</span>\n  <span class=\"mi\">192</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">_private.1221263889.rw_goal._lambda_4</span>\n  <span class=\"mi\">166</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_core</span>\n   <span class=\"mi\">98</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply</span>\n   <span class=\"mi\">79</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.applyc</span>\n   <span class=\"mi\">70</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.ext</span>\n   <span class=\"mi\">70</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext_core._main._lambda_3</span>\n   <span class=\"mi\">70</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext_core</span>\n   <span class=\"mi\">70</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext1_core</span>\n   <span class=\"mi\">70</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext</span>\n   <span class=\"mi\">70</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext1_core._lambda_6</span>\n   <span class=\"mi\">70</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext1_core._lambda_7</span>\n   <span class=\"mi\">69</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext1_core._lambda_5</span>\n   <span class=\"mi\">69</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext1_core._lambda_4</span>\n   <span class=\"mi\">69</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.try_core</span>\n   <span class=\"mi\">69</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">list.any_of</span>\n   <span class=\"mi\">68</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">_private.2644768123.relation_tactic._lambda_1</span>\n   <span class=\"mi\">68</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext1_core._lambda_3</span>\n   <span class=\"mi\">68</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">relation_tactic</span>\n   <span class=\"mi\">40</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases._lambda_5</span>\n   <span class=\"mi\">40</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.obtain</span>\n   <span class=\"mi\">38</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.assumption._lambda_1</span>\n   <span class=\"mi\">38</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.find_same_type</span>\n   <span class=\"mi\">36</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.unify</span>\n   <span class=\"mi\">36</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.find_same_type._main._lambda_1</span>\n   <span class=\"mi\">33</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction._lambda_4</span>\n   <span class=\"mi\">21</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_congr_core</span>\n   <span class=\"mi\">19</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rewrite_hyp</span>\n   <span class=\"mi\">19</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">_private.3791888571.rw_hyp._main._lambda_2</span>\n   <span class=\"mi\">19</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">_private.3791888571.rw_hyp._main._lambda_3</span>\n   <span class=\"mi\">19</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">rw_hyp</span>\n   <span class=\"mi\">13</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.exact</span>\n   <span class=\"mi\">10</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_heq_congr_core</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.save_info_with_widgets</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.replace_target</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_eq_mpr</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.infer_type</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.save_widget</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases._lambda_2</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.assertv</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases_core._main._lambda_7</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.cleanup</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.set_goals</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases._lambda_3</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_private.2177920635.rw_core._lambda_1</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases_core._main._lambda_9</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_private.1387917865.get_pi_arity_aux._main._lambda_1</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases.process_constructors</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.save_info_thunk</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_app</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases_core._main._lambda_8</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext1_core._lambda_1</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">expr.local_const</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.replace._lambda_1</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.get_arity</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.exact</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">get_pi_arity_aux</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases.continue</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_id_eq</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases_core._main._lambda_5</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">declaration.univ_params</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases.continue._main._lambda_4</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.get_pi_arity</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.rcases_core</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.have._lambda_1</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_const</span>\n</code></pre></div>",
        "id": 235153883,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618825601
    },
    {
        "content": "<p>I think the problem is <code>by convert hb.2</code>. If you put <code>sorry</code> there everything works pretty fast.</p>",
        "id": 235154346,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618825863
    },
    {
        "content": "<p>Instead of <code>refine</code>, try to do some <code>apply</code> with the right number of underscores.</p>",
        "id": 235154363,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618825878
    },
    {
        "content": "<p>(I got pretty good at speeding up proofs without understanding what they were doing, so if you give me a pointer I may have a look :-)</p>",
        "id": 235154467,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618825931
    },
    {
        "content": "<p>Sébastien, the problematic proof is here:</p>\n<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/1f61562bd550887610e65c6ef1dd62d425863315/src/toric/towards_Gordan.lean#L71\">https://github.com/leanprover-community/lean-liquid/blob/1f61562bd550887610e65c6ef1dd62d425863315/src/toric/towards_Gordan.lean#L71</a></p>\n<p>Thank you very much for your interest!</p>",
        "id": 235154577,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618826011
    },
    {
        "content": "<p>Riccardo, thanks!  I think that I found it: it is currently at 100000, which I would have thought was a large number...  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 235154609,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618826031
    },
    {
        "content": "<p>I am not completely sure, but I think it's this line that is problematic<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/d001d927182ed5adf98f983befe51a4bd0d5e09d/src/toric/towards_Gordan.lean#L75\">https://github.com/leanprover-community/lean-liquid/blob/d001d927182ed5adf98f983befe51a4bd0d5e09d/src/toric/towards_Gordan.lean#L75</a></p>",
        "id": 235154610,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618826032
    },
    {
        "content": "<p>ops, I didn't see Damiano's message</p>",
        "id": 235154662,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618826048
    },
    {
        "content": "<p>Yes, I agree with <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  that the issue seems to come from the <code>convert hb.2</code>.</p>",
        "id": 235154694,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1618826069
    },
    {
        "content": "<p>Indeed <code>exact hb.2</code> should work... but it doesn't</p>",
        "id": 235154732,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618826091
    },
    {
        "content": "<p>Ok, my pointer was to the whole proof, not to a specific line.</p>",
        "id": 235154744,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618826098
    },
    {
        "content": "<p>Note that even <code>exact hb</code> looks like it should work...</p>",
        "id": 235154775,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618826114
    },
    {
        "content": "<p>It really seems a diamond issue to me, no?</p>",
        "id": 235154823,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1618826139
    },
    {
        "content": "<p>Also, the uncommented proof builds with <code>leanproject build</code> on my machine, but does not sit well with CI.</p>",
        "id": 235155241,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618826351
    },
    {
        "content": "<p>If I do <code>exact hb.2</code> I get an error <code>has type... but it is expected to have type...</code>. The <code>...</code> are of course extremely long, but here is a <code>diff</code> of the two types</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">25</span><span class=\"o\">,</span><span class=\"mi\">30</span><span class=\"n\">c25</span>\n<span class=\"bp\">&lt;</span>            <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>            <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"mi\">33</span><span class=\"o\">,</span><span class=\"mi\">36</span><span class=\"n\">c28</span>\n<span class=\"bp\">&lt;</span>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.ring</span><span class=\"o\">)</span>\n<span class=\"mi\">62</span><span class=\"o\">,</span><span class=\"mi\">67</span><span class=\"n\">c54</span>\n<span class=\"bp\">&lt;</span>               <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>               <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"mi\">94</span><span class=\"o\">,</span><span class=\"mi\">99</span><span class=\"n\">c81</span>\n<span class=\"bp\">&lt;</span>             <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>             <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"mi\">102</span><span class=\"o\">,</span><span class=\"mi\">113</span><span class=\"n\">c84</span>\n<span class=\"bp\">&lt;</span>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule.restricted_module</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_comm_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">)))</span>\n<span class=\"bp\">&lt;</span>          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.id</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_comm_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule.restricted_module</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.comm_semiring</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.ring</span><span class=\"o\">)</span>\n<span class=\"mi\">140</span><span class=\"o\">,</span><span class=\"mi\">145</span><span class=\"n\">c111</span>\n<span class=\"bp\">&lt;</span>             <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>             <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"mi\">173</span><span class=\"o\">,</span><span class=\"mi\">178</span><span class=\"n\">c139</span>\n<span class=\"bp\">&lt;</span>               <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>               <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 235155632,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618826508
    },
    {
        "content": "<p>This is exactly the kind of thing that <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> is supposed to fix. I would just accept the fact that this proof is super-slow for now, and wait for <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> to land.</p>",
        "id": 235155856,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618826601
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 235155857,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1618826602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/toric.20branch.20issues/near/235155632\">said</a>:</p>\n<blockquote>\n<p>If I do <code>exact hb.2</code> I get an error <code>has type... but it is expected to have type...</code>. The <code>...</code> are of course extremely long, but here is a <code>diff</code> of the two types</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">25</span><span class=\"o\">,</span><span class=\"mi\">30</span><span class=\"n\">c25</span>\n<span class=\"bp\">&lt;</span>            <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>            <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"mi\">33</span><span class=\"o\">,</span><span class=\"mi\">36</span><span class=\"n\">c28</span>\n<span class=\"bp\">&lt;</span>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.ring</span><span class=\"o\">)</span>\n<span class=\"mi\">62</span><span class=\"o\">,</span><span class=\"mi\">67</span><span class=\"n\">c54</span>\n<span class=\"bp\">&lt;</span>               <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>               <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"mi\">94</span><span class=\"o\">,</span><span class=\"mi\">99</span><span class=\"n\">c81</span>\n<span class=\"bp\">&lt;</span>             <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>             <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"mi\">102</span><span class=\"o\">,</span><span class=\"mi\">113</span><span class=\"n\">c84</span>\n<span class=\"bp\">&lt;</span>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule.restricted_module</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_comm_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">)))</span>\n<span class=\"bp\">&lt;</span>          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.id</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_comm_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule.restricted_module</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.comm_semiring</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_int</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.ring</span><span class=\"o\">)</span>\n<span class=\"mi\">140</span><span class=\"o\">,</span><span class=\"mi\">145</span><span class=\"n\">c111</span>\n<span class=\"bp\">&lt;</span>             <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>             <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"mi\">173</span><span class=\"o\">,</span><span class=\"mi\">178</span><span class=\"n\">c139</span>\n<span class=\"bp\">&lt;</span>               <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">&lt;</span>                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_ring.to_integral_domain</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.linear_ordered_comm_ring</span><span class=\"o\">))))</span>\n<span class=\"bp\">&lt;</span>                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"c1\">---</span>\n<span class=\"bp\">&gt;</span>               <span class=\"bp\">@</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"n\">V</span> <span class=\"n\">int.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">V</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, that's why I was thinking at diamonds.</p>",
        "id": 235155911,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1618826642
    },
    {
        "content": "<p>Ok, I am happy with the strategy of leaving the proof in, commented out and, after each mathlib bump, I can try to remove the comments and see if it builds</p>",
        "id": 235156030,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618826701
    },
    {
        "content": "<p>Presumably <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> will land fairly soon.</p>",
        "id": 235156143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618826756
    },
    {
        "content": "<p>Ok, my last push to <code>master</code> has been with the proof commented out and there are no further issues.</p>\n<p>Once <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> gets merged into mathlib and bumped into lean-liquid, I will uncomment the proof and give CI another chance!</p>",
        "id": 235157648,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618827541
    },
    {
        "content": "<p>Thank you all for your support!</p>",
        "id": 235157660,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618827549
    },
    {
        "content": "<p>Thanks for taking this on!</p>",
        "id": 235158341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618827938
    },
    {
        "content": "<p>I am compiling <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> inside my local <code>lean_liquid</code> to see if this works (I am not sure I am doing it the right way, but let's see)</p>",
        "id": 235158623,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618828094
    },
    {
        "content": "<p>Riccardo, I am curious to see what happens on your computer.</p>\n<p>When I do <code>leanproject build</code> on <code>master</code>, with the proof that was there already, <code>lean</code> clearly spends some time on <code>reduction_to_lattice</code>, but then moves on without flagging anything.  I do not know why the remote CI has issues with it.</p>",
        "id": 235158784,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618828206
    },
    {
        "content": "<p>I went to <code>_target/deps/mathlib</code> and I checked out  <code>gsmul_data</code>, that is the mathlib branch of <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a>. Now I am doing <code>leanproject build</code>. I hope that once this is finished I will have this version of mathlib in the <code>lean-liquid</code> project. Note that I use Lean on my university machine through SSH, so I don't care if I have to compile it</p>",
        "id": 235159160,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618828444
    },
    {
        "content": "<p>I recompiled mathlib but the proof is still slow. I am not sure I've done this correctly, so this can be my fault.</p>",
        "id": 235167029,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618833114
    },
    {
        "content": "<p>We can probably just wait <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 235167182,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618833191
    },
    {
        "content": "<p>Thanks a lot for the report, Riccardo!</p>",
        "id": 235173634,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618836386
    },
    {
        "content": "<p>It probably means that there is a diamond I forgot to solve. If you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for mathlib, I can investigate now, or we can wait for <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> to be merged and investigate then.</p>",
        "id": 235182279,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618839877
    },
    {
        "content": "<p>Here is a working example. Note that I am not sure that the problem is coming from something related to what are you working on and not from <code>submodule.exists_is_basis_of_le_span</code>. It is possible that this is coming from rational vs integer coefficients. I tried to make up a smaller example, without <code>submodule.exists_is_basis_of_le_span</code>, but the problem disappeared.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reduction_to_lattice</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℚ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vn</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">s.restrict_scalars</span> <span class=\"n\">ℤ</span> <span class=\"bp\">⊓</span> <span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)),</span>\n  <span class=\"n\">is_basis</span> <span class=\"n\">ℤ</span> <span class=\"n\">vn</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n    <span class=\"n\">submodule.exists_is_basis_of_le_span</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℤ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">hb.1</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">linear_independent_iff'.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_independent_iff'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hb</span> <span class=\"n\">t</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">submodule.coe_smul_of_tower</span><span class=\"o\">,</span> <span class=\"n\">submodule.coe_smul_of_tower</span><span class=\"o\">,</span> <span class=\"n\">algebra_map_smul</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">linear_independent.restrict_scalars_algebras</span> <span class=\"n\">_</span> <span class=\"n\">bv.1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">int.cast_inj.mp</span> <span class=\"n\">ab</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In your branch <code>gsmul_data</code>. If you replace the sorry with <code>convert hb.2</code> it works, but it takes a lot of time.</p>",
        "id": 235188682,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1618842176
    },
    {
        "content": "<p>Your problem is that you have an <code>algebra_int</code> and an <code>algebra.id</code>, giving two different <code>ℤ</code>-algebra structures on <code>ℤ</code>. This is unfortunately another problem than what <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> solves (well, it solves half of the problem, but not all of it). See <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234455219\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.237084/near/234455219</a> for a discussion of precisely this issue.</p>",
        "id": 235213047,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618851061
    },
    {
        "content": "<p>Here is a fixed proof disabling locally this instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">algebra_int</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reduction_to_lattice</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℚ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vn</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">s.restrict_scalars</span> <span class=\"n\">ℤ</span> <span class=\"bp\">⊓</span> <span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)),</span>\n  <span class=\"n\">is_basis</span> <span class=\"n\">ℤ</span> <span class=\"n\">vn</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">submodule.exists_is_basis_of_le_span</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℤ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_int</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_independent.restrict_scalars_algebras</span> <span class=\"n\">_</span> <span class=\"n\">bv.1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">int.cast_inj.mp</span> <span class=\"n\">ab</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>All the dance you had to convert stuff disappears, as you can see.</p>",
        "id": 235213570,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618851298
    },
    {
        "content": "<p>Or better, by adjusting the instance priority:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">99</span><span class=\"o\">]</span> <span class=\"n\">algebra_int</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reduction_to_lattice</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℚ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">ℚ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vn</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">s.restrict_scalars</span> <span class=\"n\">ℤ</span> <span class=\"bp\">⊓</span> <span class=\"n\">submodule.span</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)),</span>\n  <span class=\"n\">is_basis</span> <span class=\"n\">ℤ</span> <span class=\"n\">vn</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">submodule.exists_is_basis_of_le_span</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℤ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">linear_independent.restrict_scalars_algebras</span> <span class=\"n\">_</span> <span class=\"n\">bv.1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">int.cast_inj.mp</span> <span class=\"n\">ab</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It might be worth doing it in mathlib master, if it doesn't break anything.</p>",
        "id": 235219535,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618853882
    },
    {
        "content": "<p>Sébastien, thank you very much for unwinding this problem!</p>",
        "id": 235231039,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618858767
    },
    {
        "content": "<p>The slow proof now works great!</p>\n<p>Sébastien: thanks again!</p>",
        "id": 235236577,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618861093
    },
    {
        "content": "<p>I have adjusted the priorities of <code>algebra_int</code> in the most recent version of <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a>, so hopefully you shouldn't have anything special to do on your side once it is merged.</p>",
        "id": 235236931,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618861263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> have you has a look at this now that <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> has been merged? Otherwise I can try to do it</p>",
        "id": 236234778,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619467557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I have not tried to fix the toric branch after <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a>.  Also, I have had a conversation with Kevin where I think that he told me that whatever was needed from this branch to get the algebraic version of Gordan's lemma working is already on <code>master</code>.  This takes some pressure off the <code>toric</code> branch.</p>\n<p>I would still like to port this stuff to mathlib, but I will probably not have the time to do so soon.  If you feel like bumping <code>toric</code>, I would be very grateful!  However, as I mentioned, this may not be strictly necessary for the <code>liquid</code> application.</p>",
        "id": 236294606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619508450
    },
    {
        "content": "<p>Yes, everything from the toric branch which is needed for the algebraic proof of Gordan is now merged into master and as far as I'm concerned the branch can be deleted from the project and parts relevant for toric geometry in general can be ultimately moved into mathlib</p>",
        "id": 236296381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619509647
    }
]