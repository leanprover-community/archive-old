[
    {
        "content": "<p>Status update: I've been working on the last part of the proof of 9.5, where we need to construct a homotopy between two maps between the first two rows of a certain double complex.<br>\n(Aside: at some point, I said that the middle part of the proof (condition <code>col_exact</code>) might be the hardest to formalize. Now I'm hoping sincerely that this third part is actually the hardest... because it's quite hard right now <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>)</p>\n<p>What we have right now is a whole bunch of definitions and some <code>sorry</code>d lemmas that ultimately give us a homotopy between two maps between the first row of the double complex and another complex <code>C</code>. What is left:</p>\n<ul>\n<li>construct an isomorphism between <code>C</code> and the second row of the double complex</li>\n<li>show that one of the homotopic maps, composed with <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> isomorphism gives the vertical differential in the double complex</li>\n<li>the actual proof of the homotopy condition</li>\n</ul>",
        "id": 231705559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616618774
    },
    {
        "content": "<p>What is making this hard, is that the objects in the double complex are functorial in something like 6 different directions, and we need to move in all those 6 directions</p>",
        "id": 231707246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616619534
    },
    {
        "content": "<p>So, if we don't maneuver carefully, then we need to show that all the faces of a 6-dimensional cube commute.</p>",
        "id": 231707386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616619599
    },
    {
        "content": "<p>If we had some automation to help us...</p>",
        "id": 231764670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616661933
    },
    {
        "content": "<p>But I don't think this part can be easily automated</p>",
        "id": 231764679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616661944
    },
    {
        "content": "<p>Hmm that's bad. What are the 6 directions?</p>",
        "id": 231764693,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616661957
    },
    {
        "content": "<p>Let me see:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>, the lattice</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, the profinitely filtered pseudo normed group with action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></li>\n<li><code>BD</code>, a package of Breen--Deligne data (ranks + formal sums of matrices)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msubsup><mi>c</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup><msub><mo stretchy=\"false\">)</mo><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">(c'_i)_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, some constants, which can be rescaled</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>, an independent constant</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>, some normed group, on which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> acts</li>\n</ul>",
        "id": 231765101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662170
    },
    {
        "content": "<p>Wait, aren't most of those kept constant during the proof?</p>",
        "id": 231765139,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662201
    },
    {
        "content": "<p>So far, I have been able to avoid tweaking the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>c</mi><mi>i</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">c'_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>, but all the others move</p>",
        "id": 231765140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662201
    },
    {
        "content": "<p>Why are <code>BD</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> moving?</p>",
        "id": 231765210,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662223
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> doesn't really move, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> acts on it, so you still need some sort of functoriality of several constructions.</p>",
        "id": 231765272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662261
    },
    {
        "content": "<p>Ah</p>",
        "id": 231765309,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662281
    },
    {
        "content": "<p><code>BD</code> moves because the homotopy is a priori a hom <code>BD.double -&gt; BD</code></p>",
        "id": 231765314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662284
    },
    {
        "content": "<p>Ah...</p>",
        "id": 231765332,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662296
    },
    {
        "content": "<p>And you need to convert that into a homotopy between <code>the system of M relative to BD</code> and <code>the system of M^2 relative to BD</code></p>",
        "id": 231765413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662329
    },
    {
        "content": "<p>But at first you get <code>the system of M relative to BD.double</code></p>",
        "id": 231765437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662344
    },
    {
        "content": "<p>And somewhere in the middle you need to rescale <code>M</code> or the <code>c'_i</code> to take into account that summation on <code>M</code> isn't strict.</p>",
        "id": 231765488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662378
    },
    {
        "content": "<p>Hmm, it isn't even just for the double, but for double <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">^m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span>, right?</p>",
        "id": 231765494,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662384
    },
    {
        "content": "<p>Yes, so you have to throw another induction in the mix</p>",
        "id": 231765517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662401
    },
    {
        "content": "<p>Hmm, I hoped that some of this is taken care of by those lemmas in the appendix, but I'm not sure how much they help with the question at hand</p>",
        "id": 231765567,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662441
    },
    {
        "content": "<p>Currently I'm wondering whether the diagonal embedding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda \\to \\Lambda'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> should also be an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>-fold iteration of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><mi mathvariant=\"normal\">Λ</mi><mo>⊕</mo><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda \\to \\Lambda \\oplus \\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>.</p>",
        "id": 231765610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662444
    },
    {
        "content": "<p>That might be useful</p>",
        "id": 231765658,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662482
    },
    {
        "content": "<p>Those two lemmas have all the maths content. All that needs to happen is composing a bunch of \"canonical\" isomorphisms.</p>",
        "id": 231765661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662483
    },
    {
        "content": "<p>So, here's a question about the middle part of the proof, the Dold-Kan part/condition: do we need to know anything about the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda \\to \\Lambda'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> there?</p>",
        "id": 231765729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662529
    },
    {
        "content": "<p>A first sight, it seems that we just use that we have a cosimplicial complex, and we push this through <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">H</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">_</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Hom}(\\_, M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">H</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">m</span></span><span class=\"mopen\">(</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 231765807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662564
    },
    {
        "content": "<p>Do you mean condition (2) of 9.6?</p>",
        "id": 231765812,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662567
    },
    {
        "content": "<p>yes</p>",
        "id": 231765831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662578
    },
    {
        "content": "<p>Well, you need 9.8</p>",
        "id": 231765853,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662600
    },
    {
        "content": "<p>Ooh, yes, of course.</p>",
        "id": 231765869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662612
    },
    {
        "content": "<p>But to get the right estimate for condition (3) in 9.6, you do need to take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> large enough</p>",
        "id": 231765902,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662640
    },
    {
        "content": "<p>I think you can't get that by some inductive argument</p>",
        "id": 231765918,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662653
    },
    {
        "content": "<p>So at some point we have to move between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">_</mi><msup><mo stretchy=\"false\">)</mo><mi>N</mi></msup></mrow><annotation encoding=\"application/x-tex\">(\\_)^N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1513309999999999em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">_</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">((((\\_)^2)^2)^2)^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1241079999999999em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 231765924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662658
    },
    {
        "content": "<p>Of course the desired commutative diagram can likely be chained together by an inductive argument</p>",
        "id": 231765936,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662670
    },
    {
        "content": "<p>Currently I'm trying to figure out what is the most ergonomic place to do that</p>",
        "id": 231765952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662682
    },
    {
        "content": "<p>Maybe it's best to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Lambda \\to \\Lambda'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is isomorphic to an n-fold iteration of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>→</mo><mi mathvariant=\"normal\">Λ</mi><mo>⊕</mo><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda \\to \\Lambda \\oplus \\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span></p>",
        "id": 231766083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662745
    },
    {
        "content": "<p>Sounds reasonable</p>",
        "id": 231766109,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662764
    },
    {
        "content": "<p>(Of course there is a rescale on the codomain, just to make sure this will not be too trivial <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>)</p>",
        "id": 231766268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662847
    },
    {
        "content": "<p>Right. And I think when chaining stuff together, some more constants might move... argh.</p>",
        "id": 231766471,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662941
    },
    {
        "content": "<p>Hmm, which constants do you mean?</p>",
        "id": 231766514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616662981
    },
    {
        "content": "<p>One question about the 6-dimensional cubes: Mathwise it's enough that all the squares commute (in $1$-categories, as we are in). Is Lean also happy with only knowing that the squares commute?</p>",
        "id": 231766543,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616662988
    },
    {
        "content": "<p>Well, I'm not sure which ones I mean; probably none.</p>",
        "id": 231766691,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616663053
    },
    {
        "content": "<p>Not without further help, but it's certainly true that after you know the squares commute, the rest of the work is mechanical and can make use of some automation</p>",
        "id": 231766714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663067
    },
    {
        "content": "<p>I mean, once you start taking paths on the cube whose length is &gt; 2... then you can homotope them to each other along the squares.</p>",
        "id": 231766793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663111
    },
    {
        "content": "<p>right</p>",
        "id": 231766821,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616663125
    },
    {
        "content": "<p>But in the current setting it would take some effort to make Lean do this alone.</p>",
        "id": 231766822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663126
    },
    {
        "content": "<p>Is this something that could be proved in Lean in a very abstract setting?</p>",
        "id": 231766864,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616663156
    },
    {
        "content": "<p>The problem is that there isn't enough abstraction so that Lean can only do the right thing. There is too much concrete distraction, so it will probably get itself confused.</p>",
        "id": 231766865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663156
    },
    {
        "content": "<p>But I got very confused trying to figure out what the correct abstraction would be, in a form where it is still applicable to the setting at hand</p>",
        "id": 231766990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663218
    },
    {
        "content": "<p>It's funny that Lean works like a real mathematician here: You explain general statements in the right generality, then they become self-evident</p>",
        "id": 231767002,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616663224
    },
    {
        "content": "<p>Yes, this point is even more important when formalising things.</p>",
        "id": 231767060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663261
    },
    {
        "content": "<p>From the quasi-categorical perspective, I would probably try to formalize the statement that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>↪</mo><msup><mi>S</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">S\\hookrightarrow S'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is an injection of simplicial sets with the same <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>-skeleton, then any map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">S\\to C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to some category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> (i.e. its nerve) extends uniquely to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">S'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 231767337,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616663404
    },
    {
        "content": "<p>But I'm not sure whether this can be translated into the question at hand</p>",
        "id": 231767360,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616663418
    },
    {
        "content": "<p>If we want to automate this, it's probably most effective to have some term rewriting system that we feed the commutativity assumptions of the squares, and then ask it to use some shortest path algorithm to rewrite one expression into another.</p>",
        "id": 231767506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663520
    },
    {
        "content": "<p>That machinery is already there, but I'm currently spoon-feeding it the order in which to rewrite along the cubes.</p>",
        "id": 231767588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663554
    },
    {
        "content": "<p>I see</p>",
        "id": 231767640,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616663599
    },
    {
        "content": "<p>The part that is the least functorial at the moment is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">_</mi><msup><mo stretchy=\"false\">)</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></msup></mrow><annotation encoding=\"application/x-tex\">(\\_)^{T^{-1}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2969199999999999em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869199999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 231767850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663716
    },
    {
        "content": "<p>We could factor the construction through a category <code>NormedGroup_with_two_Tinv_actions</code>...</p>",
        "id": 231767960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663768
    },
    {
        "content": "<p>But I'm reluctant to do that...</p>",
        "id": 231767981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616663779
    },
    {
        "content": "<p>It seems that you never need to know that the homotopy is compatible with restriction maps</p>",
        "id": 231770449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616665125
    },
    {
        "content": "<p>At least that is 1 square that we don't need to worry about (-;</p>",
        "id": 231770480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616665142
    },
    {
        "content": "<p>That's surprising!</p>",
        "id": 231770661,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616665225
    },
    {
        "content": "<p>You mean even in the statement of 9.6, you don't need that?</p>",
        "id": 231770689,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616665235
    },
    {
        "content": "<p>Well, I guess that's even how it's formulated it in the lecture notes</p>",
        "id": 231770795,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616665310
    },
    {
        "content": "<p>yes, I only realised it now</p>",
        "id": 231771290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616665559
    },
    {
        "content": "<p>But since it's already formalized, there wasn't some unplanned \"<code>h</code> commutes with <code>res</code>\" either</p>",
        "id": 231771439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616665612
    },
    {
        "content": "<p>Did you already fill in some of the constants?</p>",
        "id": 231772058,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616665908
    },
    {
        "content": "<p>In 9.6? Or in the main proof?</p>",
        "id": 231772149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616665943
    },
    {
        "content": "<p>In the main proof</p>",
        "id": 231772194,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616665967
    },
    {
        "content": "<p>No, I haven't really fixed the constants yet.</p>",
        "id": 231772229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616665991
    },
    {
        "content": "<p>I think that in the lecture notes, it's really the computations that happen in the last lines, that justify the choice of <code>b</code> and <code>N</code>.</p>",
        "id": 231772274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616666019
    },
    {
        "content": "<p>To check condition (2) of 9.6, there are also some computations that are not really carried out in detail</p>",
        "id": 231772419,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616666081
    },
    {
        "content": "<p>I'm just asking because the only remaining possible source of error I can see is if I was screwing up something about the choice of constants</p>",
        "id": 231772738,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616666238
    },
    {
        "content": "<p>I haven't spent much time thinking about how to check (2) yet. But with (3) I'm quite optimistic that it will work out (even in Lean <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>)</p>",
        "id": 231772845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616666288
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this is not `iso.refl` -- so close, and yet so far away</span>\n<span class=\"c1\">-- the difference is `M_{(c * c_i) * N⁻¹}` vs `M_{c * (c_i * N⁻¹)}`</span>\n<span class=\"kd\">def</span> <span class=\"n\">complex_rescale_iso</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">BD.complex</span> <span class=\"o\">(</span><span class=\"n\">rescale_constants</span> <span class=\"n\">c'</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"bp\">≅</span>\n  <span class=\"n\">BD.complex</span> <span class=\"n\">c'</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">r'</span> <span class=\"bp\">$</span> <span class=\"n\">rescale</span> <span class=\"n\">N</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">iso_of_components</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 231774924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616667243
    },
    {
        "content": "<p>I really wish we could tell Lean that <code>c * c_i * N⁻¹</code> is defeq to itself, no matter how the parentheses are placed.</p>",
        "id": 231775001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616667295
    },
    {
        "content": "<p>That seems annoying as hell</p>",
        "id": 231775032,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1616667313
    },
    {
        "content": "<p>You mean you wish they were defeq? They're not, right?</p>",
        "id": 231775058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616667327
    },
    {
        "content": "<p>but isn't there some <code>eq_to_iso</code> thing which sends a proof of <code>a = b</code> to an isomorphism between <code>M a</code> and <code>M b</code>?</p>",
        "id": 231775181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616667378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> certainly, but this <code>=</code> is burried beneath 5 layers of functors.</p>",
        "id": 231775259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616667417
    },
    {
        "content": "<p>So it's still a hassle</p>",
        "id": 231775274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616667426
    },
    {
        "content": "<p>And the top-most construction isn't a functor, but taking equalizers...</p>",
        "id": 231775385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616667481
    },
    {
        "content": "<p>this is most frustrating. It's like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f][1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> not being equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mi>g</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/fg]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> -- but there I could understand Lean's point because they really were not equal if you thought about it carefully.</p>",
        "id": 231775426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616667487
    },
    {
        "content": "<p>So it's also not <code>functor.map_iso</code></p>",
        "id": 231775432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616667492
    },
    {
        "content": "<p>Yes, this is even more silly than the localisation issues</p>",
        "id": 231775472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616667518
    },
    {
        "content": "<p>It seems to me that an algorithm could do all this.</p>",
        "id": 231775482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616667523
    },
    {
        "content": "<p>Would <code>eq.subst</code> take care of all this if instead of <code>(c * c_i) * N⁻¹</code> and <code>c * (c_i * N⁻¹)</code> you had two new variables <code>x</code> and <code>y</code> and a proof that <code>x=y</code>?</p>",
        "id": 231775722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616667658
    },
    {
        "content": "<p>Or is the \"motive is type incorrect\" issue inevitable?</p>",
        "id": 231775773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616667684
    },
    {
        "content": "<p>I currently don't see an easy way to use <code>eq.subst</code></p>",
        "id": 231776215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616667951
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How do I get myself into a situation where the naive approach gives me the motive is not type correct error?</p>",
        "id": 231776268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616667963
    },
    {
        "content": "<p>You need dependent arguments, where rewriting in one place will cause something somewhere else to no longer type check.</p>",
        "id": 231776417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616668036
    },
    {
        "content": "<p>(I need to sleep, I won't come up with an example now. :-)</p>",
        "id": 231776444,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616668052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if you have any sort of magic tricks that can help us through get out of the sticky mud, that would be awesome</p>",
        "id": 231776807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616668238
    },
    {
        "content": "<p>The defeq trouble actually goes a bit deeper, because the parentheses also disturb the <code>Tinv</code> map, meaning the equalizers are now no longer defeq.</p>",
        "id": 231779587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616669603
    },
    {
        "content": "<p>In particular, the <code>hom</code> of the iso in question is not even a <code>res</code>triction map along an equality.</p>",
        "id": 231779644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616669640
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux₀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">nnreal.fact_le_refl</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux₀'</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">≤</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">nnreal.fact_le_refl</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">aux₀</span> <span class=\"n\">aux₀'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rescale_hom</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">CLCFPTinv</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"bp\">⟶</span> <span class=\"n\">CLCFPTinv</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">rescale</span> <span class=\"n\">N</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">equalizer.map</span> <span class=\"o\">(</span><span class=\"n\">CLCFP.res</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CLCFP.res</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 231780094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616669818
    },
    {
        "content": "<p>Now prove the <code>sorry</code>s, do the same for <code>inv</code>, show that <code>hom</code> and <code>inv</code> are inverse to each other...</p>",
        "id": 231780137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616669847
    },
    {
        "content": "<p>De Bruijn factor: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>π</mi><msup><mi>π</mi><msup><mi>π</mi><mi>π</mi></msup></msup></msup></mrow><annotation encoding=\"application/x-tex\">\\pi^{\\pi^{\\pi^\\pi}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.08198em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.08198em;\"><span style=\"top:-3.08198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.71898em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0271142857142856em;\"><span style=\"top:-3.0271142857142856em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5961142857142856em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.83456em;\"><span style=\"top:-2.904em;margin-right:0.1em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 231780165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616669875
    },
    {
        "content": "<p>It should be possible to express this using <code>eq.rec</code> as long as you can get the term to be type correct if you replace <code>c * c' * N⁻¹</code> with an arbitrary variable <code>a</code></p>",
        "id": 231782537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616671004
    },
    {
        "content": "<p>This is generally not recommended, but as long as you only rarely need to compute the action of the isomorphism it should be fine</p>",
        "id": 231782624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616671052
    },
    {
        "content": "<p>you can still prove that it commutes with other isomorphisms by casing on the equality</p>",
        "id": 231782662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616671074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> can you MWE this for Mario?</p>",
        "id": 231786462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616672994
    },
    {
        "content": "<p>I'm wondering how far we can get by somehow generalizing to two variables <code>a</code> and <code>b</code> which are equal</p>",
        "id": 231786570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616673036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/thm95.2Ehomotopy/near/231782537\">said</a>:</p>\n<blockquote>\n<p>It should be possible to express this using <code>eq.rec</code> as long as you can get the term to be type correct if you replace <code>c * c' * N⁻¹</code> with an arbitrary variable <code>a</code></p>\n</blockquote>\n<p>I'm afraid we can't do that... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 231786602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616673054
    },
    {
        "content": "<p>(or can I do it somehow? I am giving a talk in 1 hour for one hour but will be free to think about this afterwards)</p>",
        "id": 231786637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616673072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> let's discuss after your talk!</p>",
        "id": 231786812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616673163
    },
    {
        "content": "<p>I wouldn't mind talking someone through the plan for part (3) of the proof.</p>",
        "id": 231786870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616673193
    },
    {
        "content": "<p>It will probably help me clear up some details</p>",
        "id": 231786888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616673204
    },
    {
        "content": "<p>Your aux lemmas above remind me of Reid's hack when we were doing schemes: to prove that an affine scheme was a scheme we had to pull back along the identity map, and ended up needing a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}(U)\\to\\mathcal{F}(i(U))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> the identity map. Trying to make this map \"the identity\" was horrible, but then Reid pointed out that one could just make it restriction and then everything worked gloriously.</p>",
        "id": 231787304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616673410
    },
    {
        "content": "<p>Sure, it works great, but the De Bruijn factor is still ridiculous</p>",
        "id": 231787379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616673460
    },
    {
        "content": "<p>I can check out the project if you have a line and commit to point to</p>",
        "id": 231788045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616673745
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/pseudo_normed_group/homotopy.lean#L119\">https://github.com/leanprover-community/lean-liquid/blob/master/src/pseudo_normed_group/homotopy.lean#L119</a></p>",
        "id": 231788663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616673999
    },
    {
        "content": "<p>Apart from <code>pseudo_normed_group/homotopy.lean</code> everything compiles again. So I'm commenting out <code>homotopy.lean</code> (nothing else depends on it yet.</p>",
        "id": 232439167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617116016
    },
    {
        "content": "<p>That means we can merge <code>rescale_iso</code> into master, so that we have \"1 source of truth\" again (-;</p>",
        "id": 232439223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617116036
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code> src/breen_deligne/suitable.lean                  |  16 ++--\n src/locally_constant/Vhat.lean                   |  15 ++--\n src/polyhedral_lattice/Hom.lean                  |   8 +-\n src/polyhedral_lattice/pseudo_normed_group.lean  |   5 +-\n src/pseudo_normed_group/CLC.lean                 | 244 ++++++++++++++++++++++++++++--------------------------\n src/pseudo_normed_group/FiltrationPow.lean       | 214 +++++++++++++++++++++++++++---------------------\n src/pseudo_normed_group/LC.lean                  | 390 +++++++++++++++++++++++++++++++++++++++++---------------------------------------------\n src/pseudo_normed_group/Tinv.lean                | 396 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++---------------------------\n src/pseudo_normed_group/category.lean            |  11 +++\n src/pseudo_normed_group/homotopy.lean            |  62 +++++++++++++-\n src/pseudo_normed_group/rescale.lean             |   9 +-\n src/pseudo_normed_group/system_of_complexes.lean |  84 +++++++++++--------\n src/pseudo_normed_group/with_Tinv.lean           |  69 +++++++++-------\n src/thm95/row_iso.lean                           |   4 +-\n</code></pre></div>",
        "id": 232439818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617116207
    },
    {
        "content": "<p>merged and pushed</p>",
        "id": 232439830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617116211
    },
    {
        "content": "<p>After even more relentless refactoring by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> we had another huge merge into <code>master</code> just now.</p>",
        "id": 233280660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617696137
    },
    {
        "content": "<p>The upshot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this is not `iso.refl` -- so close, and yet so far away</span>\n<span class=\"c1\">-- the difference is `M_{(c * c_i) * N⁻¹}` vs `M_{c * (c_i * N⁻¹)}`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">complex_rescale_eq</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">BD.complex</span> <span class=\"o\">(</span><span class=\"n\">rescale_constants</span> <span class=\"n\">c'</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">BD.complex</span> <span class=\"n\">c'</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">of</span> <span class=\"n\">r'</span> <span class=\"bp\">$</span> <span class=\"n\">rescale</span> <span class=\"n\">N</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">data.complex</span><span class=\"o\">,</span> <span class=\"n\">rescale_constants</span><span class=\"o\">],</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">c'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">nnreal.fact_le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span>\n    <span class=\"o\">(</span><span class=\"n\">BD.complex₂</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">of</span> <span class=\"n\">r'</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv.of_coe</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">cochain_complex.ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">data.complex₂</span><span class=\"o\">,</span> <span class=\"n\">rescale_constants</span><span class=\"o\">,</span> <span class=\"n\">data.complex₂_d</span><span class=\"o\">,</span> <span class=\"n\">universal_map.eval_CLCFPTinv₂</span><span class=\"o\">,</span>\n    <span class=\"n\">_root_.id</span><span class=\"o\">,</span> <span class=\"n\">NormedGroup.equalizer.map_nat_app</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">NormedGroup.equalizer.map_congr</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">universal_map.eval_CLCFP_rescale</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">universal_map.eval_CLCFP_rescale</span> <span class=\"n\">V</span> <span class=\"n\">r'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">BD.d</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233280682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617696151
    },
    {
        "content": "<p>It's clear that this proof will never be <code>iso.refl</code> bycause of the associativity issue.<br>\nBut on line <code>3</code> of the proof you can see a <code>mul_assoc</code> that now \"just works\".</p>",
        "id": 233280761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617696194
    },
    {
        "content": "<p>The rest of the proof is messing around with <code>eval_CLCFP</code> and friends. And that's mostly because the action of <code>f : FreeMat</code> is defined by evaluating some formal sum of matrices. And <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mo>∑</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mo>∑</mo><mi>ϕ</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi (\\sum x_i) = \\sum \\phi(x_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is not defeq, even if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi (a + b) = \\phi(a) + \\phi(b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> is defeq.</p>",
        "id": 233281036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617696321
    },
    {
        "content": "<p>So we need to do a bit more \"honest proving\", and can't <code>rfl</code> all the way through.</p>",
        "id": 233281072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617696345
    },
    {
        "content": "<p>After a lot of refactoring of Breen Deligne data, and many computations with kronecker products of matrices, I'm delighted to announce:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">homotopy_σπ</span> <span class=\"o\">:=</span>\n<span class=\"n\">homotopy.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">data.homotopy_mul</span> <span class=\"n\">BD.data</span> <span class=\"n\">BD.homotopy</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rescale_constants</span> <span class=\"n\">c_</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">c</span> <span class=\"n\">M</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">homotopy_σπ</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">homotopy_σπ</span>\n</code></pre></div>",
        "id": 234450752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618383679
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- homotopy.lean:179:0</span>\n<span class=\"n\">homotopy_σπ</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">package</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c_</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">BD.data.suitable</span> <span class=\"n\">c_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">package.adept</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">c'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">normed_with_aut</span> <span class=\"bp\">↑</span><span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n    <span class=\"n\">differential_object.complex_like.homotopy</span>\n      <span class=\"o\">((</span><span class=\"n\">BD_map</span> <span class=\"o\">(</span><span class=\"n\">BD.data.sum</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rescale_constants</span> <span class=\"n\">c_</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"n\">BD_map</span> <span class=\"o\">(</span><span class=\"n\">BD.data.proj</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c'</span> <span class=\"bp\">*</span> <span class=\"n\">c_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rescale_constants</span> <span class=\"n\">c_</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The axioms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- homotopy.lean:181:0</span>\n<span class=\"n\">propext</span>\n<span class=\"n\">quot.sound</span>\n<span class=\"n\">classical.choice</span>\n</code></pre></div>",
        "id": 234450776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618383701
    },
    {
        "content": "<p>You rescaled!</p>",
        "id": 234450791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618383720
    },
    {
        "content": "<p>Most notably: this construction is now entirely <code>sorry</code>-free.</p>",
        "id": 234450793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618383721
    },
    {
        "content": "<p>This is now almost in the shape that we need for the proof of 9.5.</p>",
        "id": 234450880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618383766
    },
    {
        "content": "<p>In particular, this homotopy is in terms of <code>BD.data.sum (2 ^ N)</code> instead of the <code>N</code>-fold iteration of the addition map.</p>",
        "id": 234450955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618383803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> At this point, only the constants are being rescaled. But we will need to move that over to a rescaling of some pseudo normed group. This should now be relatively straight-forward, thanks to the massive refactor that Mario did a little while ago.</p>",
        "id": 234451091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618383879
    },
    {
        "content": "<p>To some extent, I would say that this is now a pretty solid proof of 9.12 and 9.13 from the appendix to section 9 of Analytic.pdf. Plus epsilon for pushing the homotopy through the system_of_complexes construction.</p>",
        "id": 234451153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618383946
    },
    {
        "content": "<p>This means that we can now tick of <a href=\"https://leanprover-community.github.io/liquid/sec-more_breen_deligne.html#basehomotopy\">https://leanprover-community.github.io/liquid/sec-more_breen_deligne.html#basehomotopy</a> and the lemma after it.</p>",
        "id": 234452138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618384542
    },
    {
        "content": "<p>Hmm, actually, I need to rewrite that part of the blueprint, before ticking anything off. But I first need to prepare a talk for tomorrow.</p>",
        "id": 234453759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618385481
    },
    {
        "content": "<p>Up to an isomorphism between two complexes, and a very nasty Lean problem that I don't understand, the homotopy section is now done.<br>\nI don't expect and (math or Lean) problems with the iso. But I didn't expect Lean problems, and now I still have one.<br>\nIf some Lean hacker wants to look at <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/thm95/default.lean#L202\">https://github.com/leanprover-community/lean-liquid/blob/master/src/thm95/default.lean#L202</a> and <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/thm95/default.lean#L260\">https://github.com/leanprover-community/lean-liquid/blob/master/src/thm95/default.lean#L260</a> that would be very kind.</p>",
        "id": 234846597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618577280
    },
    {
        "content": "<p>On L202 I define a lemma, which seems to be exactly what is needed on L260.</p>",
        "id": 234846689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618577304
    },
    {
        "content": "<p>But on L260, the proof times out.</p>",
        "id": 234846719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618577319
    },
    {
        "content": "<p>I am stretching Lean to its limits, it seems. Which probably means I'm doing something Lean-stupid.</p>",
        "id": 234846763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618577348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or some other Lean hacker. Could you please take a look at this?</p>",
        "id": 234981256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618658264
    },
    {
        "content": "<p>I have some free time if you want to do some hacking on this together</p>",
        "id": 234981889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618658946
    },
    {
        "content": "<p>I don't have free time this afternoon CEST. We're having a small birthday party.</p>",
        "id": 234983008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618660128
    },
    {
        "content": "<p>The problem is that there is a <code>lemma foo : X := some_proof</code> and then a declaration</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">some_structure</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">field_of_type_X</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- times out</span>\n  <span class=\"n\">etc</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 234983105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618660214
    },
    {
        "content": "<p>Everything is done. I just need that time out to go away (-;</p>",
        "id": 234983135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618660241
    },
    {
        "content": "<p>I'm playing with it now, I'll report back if I figure anything out</p>",
        "id": 234983137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618660243
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">NSH_aux</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NSH_aux_type</span> <span class=\"n\">BD</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"n\">c_</span> <span class=\"n\">c'</span> <span class=\"n\">m</span> <span class=\"bp\">Λ</span> <span class=\"o\">(</span><span class=\"n\">N₂</span> <span class=\"n\">c'</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">NSH_aux'</span> <span class=\"n\">BD</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"n\">c_</span> <span class=\"n\">c'</span> <span class=\"n\">m</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">q</span> <span class=\"n\">hqm</span><span class=\"o\">,</span>\n<span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">NSH_hδ</span> <span class=\"n\">V</span> <span class=\"n\">c'</span> <span class=\"n\">m</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">q</span> <span class=\"n\">hqm</span>\n</code></pre></div>\n<p>works</p>",
        "id": 234983175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618660304
    },
    {
        "content": "<p>even <code>convert using 0</code> works</p>",
        "id": 234983273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618660440
    },
    {
        "content": "<p>but <code>exact</code> takes way longer</p>",
        "id": 234983317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618660451
    },
    {
        "content": "<p>Ooh, I hadn't tried <code>convert</code></p>",
        "id": 234983347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618660504
    },
    {
        "content": "<p>Still, this is very mysterious. Maybe related to the \"slow proof\" discussion happening in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a>  right now?</p>",
        "id": 234983377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618660533
    },
    {
        "content": "<p>you can also inline that into <code>NSH_aux'</code> although that declaration is pushing 10 seconds</p>",
        "id": 234983450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618660615
    },
    {
        "content": "<p>Yeah there is more than 1 slow decl (-;</p>",
        "id": 234983651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618660828
    },
    {
        "content": "<p>I just checked, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">NSH_hδ</span> <span class=\"n\">V</span> <span class=\"n\">c'</span> <span class=\"n\">m</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">q</span> <span class=\"n\">hqm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does not work. So it's probably not the same as the issue that <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> is seeing.</p>",
        "id": 234985282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618662467
    },
    {
        "content": "<p>(<a href=\"#narrow/stream/113488-general/topic/slow.20proof/near/234979594\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/slow.20proof/near/234979594</a> fyi)</p>",
        "id": 234985331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618662502
    },
    {
        "content": "<p>I've pushed Mario's <code>by convert</code> solution.</p>",
        "id": 235003670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618679874
    },
    {
        "content": "<p>I feel like there is still some issue/bug that we don't really understand. But I don't know enough about Lean's internals to understand why it's being so slow here.</p>",
        "id": 235003743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618679920
    },
    {
        "content": "<p>I'm excited, exhausted and relieved to announce that all the glue that still had to be written for the homotopy argument has been filled in. It wasn't even that bad in the end. But the proofs are very slow. So I'm glad we can park these away in some separate files that we hopefully will not need to touch again in the future.</p>",
        "id": 236993229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619897866
    },
    {
        "content": "<p>Thanks for all your incredible work!!</p>",
        "id": 236994426,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619899189
    },
    {
        "content": "<p>Amazing work, Johan!! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 236994766,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1619899454
    }
]