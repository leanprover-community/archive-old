[
    {
        "content": "<p>A little project: develop some API for <code>module.finite</code>. Mathlib knows the definition.</p>\n<ul>\n<li>Do we also want a predicate for finitely generated (mul/add) groups? And glue with the module version in the additive case?</li>\n<li>Do we care about the noncommutative case?</li>\n</ul>\n<p>For LTE we will need</p>\n<ul>\n<li>finite direct sums of fin.gen modules (or add_groups) are fin.gen</li>\n<li>an add_subgroup of a fin.gen add_group is again finitely generated</li>\n</ul>",
        "id": 227615836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614180627
    },
    {
        "content": "<p>Which proof of the third bullet point do you have in mind that would use commutativity?  Finitely generated modules are definitely also studied in the noncommutative setting.</p>",
        "id": 227647195,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1614190981
    },
    {
        "content": "<p>I didn't think carefully at all about the noncommutative case. There are actually two kinds of noncommutativity here. The base ring, in the module case, but also the group itself in the case of fin.gen. groups.</p>",
        "id": 227648538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614191497
    },
    {
        "content": "<p>Re LTE needs: when Mario did Noetherian modules years ago I'm pretty sure he did that a submodule of a Noetherian module was Noetherian. Do we have finite direct sums? This feels like one of those things where there are about four ways of formalising it.</p>",
        "id": 227839900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614287611
    },
    {
        "content": "<p>I have no idea what's there... <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 227840221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614287760
    },
    {
        "content": "<p>For <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules we have the <code>is_noetherian</code> predicate, a proof that a f.g. module over a Noetherian ring is Noetherian, a submodule of a Noetherian module is Noetherian, and a Noetherian module is finitely-generated. That gives us the second bullet point for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>-modules, but then there's the usual song and dance to translate this into questions about abelian groups.</p>",
        "id": 227841390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614288239
    },
    {
        "content": "<p>How do you want to do this? Define <code>add_comm_group.fg</code> or resist doing this?</p>",
        "id": 227841833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614288428
    },
    {
        "content": "<p>Aah, I see you ask the same question! I don't see why we shouldn't have <code>is_fg</code> a predicate on <code>add_comm_group</code>, it could maybe be a class but maybe not, I think there's some lemma that Z-module structure on an add_comm_group is unique so there shouldn't be problems just pulling results over. The third bullet point is certainly fine in the case where the ring is noncommutative. I think finitely generated groups are a different thing to this.</p>",
        "id": 227846168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614290285
    },
    {
        "content": "<p>I am playing with finitely generated modules to develop the API for finitely presented morphisms, so I can very well work on finitely generated groups... but as usual I leave the design decisions to you the experts <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 227847062,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614290662
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_top</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">gi</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_fg</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">group.is_fg</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">is_fg</span> <span class=\"o\">(</span><span class=\"n\">subgroup.gi</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">module.is_fg</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">is_fg</span> <span class=\"o\">(</span><span class=\"n\">submodule.gi</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- etc...</span>\n</code></pre></div>",
        "id": 227852399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614293144
    },
    {
        "content": "<p>FWIW, a subwidget being fg is should be equivalent to <code>complete_lattice.is_compact_element</code></p>",
        "id": 227870704,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614304705
    },
    {
        "content": "<p>We should prove some theorems about that and galois insertions that connect this to the above definition of <code>is_fg</code></p>",
        "id": 227870739,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614304758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> I like that idea of generalisation. A good API for compact elements can probably be easily specialised to different forms of <code>is_fg</code>. Thanks for the suggestion</p>",
        "id": 227885350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614318011
    },
    {
        "content": "<p>The theory I've had in mind for a while but haven't fully put into practice is classifying all of these examples of galois insertions as \"finitary\" or \"algebraic\" (terms usually used for closure operators, but Galois insertions are basically the same). That should be enough specificity to prove that being the closure of a finset is equivalent to being a compact element (as well as lots of other good things, this is nearly the definition of matroids/pregeometries).</p>",
        "id": 227886286,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614319120
    }
]