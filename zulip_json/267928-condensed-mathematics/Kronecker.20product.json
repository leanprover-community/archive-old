[
    {
        "content": "<p>I am preparing a file defining the Kronecker product and I have defined it in a somewhat general setting of two <code>R</code>-algebras <code>A,B</code> as a map</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>M</mi><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>m</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mi>M</mi><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>p</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mi>M</mi><mrow><mo stretchy=\"false\">(</mo><mi>l</mi><mo>⋅</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mo>⋅</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow></msub><mo stretchy=\"false\">(</mo><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">M_{l, m} (A) \\rightarrow M_{n, p} (B) \\rightarrow M_{(l\\cdot n), (m\\cdot p)} (A\\otimes_R B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mbin mtight\">⋅</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span><span class=\"mpunct mtight\">,</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">⋅</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>and I wonder if it is the right setting</p>",
        "id": 244007513,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  and I discussed this privately, and I think we concluded it was, but we might also need a shorthand for the multiplication version</p>",
        "id": 244007593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624703150
    },
    {
        "content": "<p>Yes, this is what I though. May be the best option is to discuss having a look at the <code>mathlib</code> branch <code>fae_kronecker</code> where I define it and to tell me what you came up with?</p>",
        "id": 244007647,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Great! Are both maps lean-<code>R</code>-linear?</p>",
        "id": 244007670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624703230
    },
    {
        "content": "<p>They are</p>",
        "id": 244007676,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703239
    },
    {
        "content": "<p>If LTE compiles using your version, then I'm happy</p>",
        "id": 244007684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624703262
    },
    {
        "content": "<p>Well, the problem is that I have to do a thousands modifications and I'd like a bit of feedback before starting them. The main point, as <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  was observing, is that in LTE we mostly use it for A=R=B=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> and it might be important to have a simplified version, no?</p>",
        "id": 244007764,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703333
    },
    {
        "content": "<p>I don't know if you have time now, at any rate my definition is is <code>linear_algebra/matrix/kronecker_product</code> of the branch <code>fae_kronecker</code>  <a href=\"https://github.com/leanprover-community/mathlib/tree/fae_kronecker\">https://github.com/leanprover-community/mathlib/tree/fae_kronecker</a></p>",
        "id": 244007833,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703411
    },
    {
        "content": "<p>I think the question I have is mainly with things like <a href=\"https://github.com/leanprover-community/mathlib/compare/fae_kronecker#diff-3fccdc12101122868979386cc6fcf6a22bb09a32cff57bc5d0fc92a7480a6f6bR30\">https://github.com/leanprover-community/mathlib/compare/fae_kronecker#diff-3fccdc12101122868979386cc6fcf6a22bb09a32cff57bc5d0fc92a7480a6f6bR30</a> how often will Lean complain that it can't figure out <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>?</p>",
        "id": 244007977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624703616
    },
    {
        "content": "<p>Indeed it sometimes/often does.</p>",
        "id": 244008043,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703664
    },
    {
        "content": "<p>And also, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>R</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A = R = B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>B</mi><mo>≅</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes_{R} B \\cong R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, but that's of course not defeq. So we want a version that is post-composed with the canonical iso <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>B</mi><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">A \\otimes_R B \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> so that it takes values in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Mat}_{m,n}(R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Mat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 244008050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624703679
    },
    {
        "content": "<p>Yes, I see.</p>",
        "id": 244008066,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703707
    },
    {
        "content": "<p>This should not be hard having what I have already.</p>",
        "id": 244008074,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703721
    },
    {
        "content": "<p>But would you keep in the new version <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> as an explicit or implicit variable?</p>",
        "id": 244008128,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703745
    },
    {
        "content": "<p>In the case where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>R</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A = R = B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> can be implicit, because it can be inferred from either of the two matrices.</p>",
        "id": 244008214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624703778
    },
    {
        "content": "<p>And, secondly, is there a way to make all lemmas about additivity/transitivity/associativity/blabla go through automagically from the previous versions or should I restate them all?</p>",
        "id": 244008226,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703797
    },
    {
        "content": "<p>It won't take long but I just want to avoid stupid work...</p>",
        "id": 244008232,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703810
    },
    {
        "content": "<p>I'm afraid we don't have any magic for that yet <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 244008256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624703825
    },
    {
        "content": "<p>OK. Does it then sound like a good plan that I start a second section in that file introducing the special case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>B</mi><mo>=</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">A=B=R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and that I restate and prove all the previous results?</p>",
        "id": 244008311,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703876
    },
    {
        "content": "<p>I will then try to use this in LTE and keep you informed.</p>",
        "id": 244008404,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624703925
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 244008533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624704120
    },
    {
        "content": "<p>And is there a way to specify this in the notation? Because I have introduced</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">⊗ₖ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">kronecker_prod</span> <span class=\"n\">_</span>\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">⊗ₖ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"n\">α</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">kronecker_prod</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>for the generic Kronecker product, and was wondering if this can be \"specialized\" to the case where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi>R</mi><mo>=</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A=R=B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.</p>",
        "id": 244010728,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624707392
    },
    {
        "content": "<p>Maybe reserve</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">⊗ₖ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>for the specialized version?</p>",
        "id": 244010876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624707649
    },
    {
        "content": "<p>This is certainly one option, but it is a bit sad.</p>",
        "id": 244010890,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624707697
    },
    {
        "content": "<p>At any rate, if that's your advice, I'll follow it.</p>",
        "id": 244010896,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624707718
    },
    {
        "content": "<p>Well, probably the other option is to add a <code>'</code> somewhere.</p>",
        "id": 244010939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624707738
    },
    {
        "content": "<p>Ah, can I also do this on the notation?</p>",
        "id": 244010947,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624707752
    },
    {
        "content": "<p>(in the sense: is it enough for Lean to figure out they're different operations according at whether the apostrophe is there or not?)</p>",
        "id": 244010960,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624707790
    },
    {
        "content": "<p><code>⊗ₖ'</code> can certainly be a new sort of notation</p>",
        "id": 244010971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624707830
    },
    {
        "content": "<p>I'm a bit late to the party, but to avoid defeq stuff, you can replace the tensor product with an arbitrary algebra endowed with morphisms from A and B.</p>",
        "id": 244017586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624717584
    },
    {
        "content": "<p>I'm also a little bit late now (and am running away, but will read your answer later): do you mean to replace which of the three terms? Are you speaking about the general definition, so defining something along the lines of </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>m</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>⟶</mo><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⟶</mo><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>l</mi><mo>⋅</mo><mi>p</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>⋅</mo><mi>q</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Mat}_{l,m}(A)\\longrightarrow \\mathrm{Mat}_{p,q}(B)\\longrightarrow \\mathrm{Mat}_{l\\cdot p, m\\cdot q}(R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Mat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Mat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Mat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mbin mtight\">⋅</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">⋅</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A,B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span>-bimodule/bialgebra? If I got it right, it seems a nice idea and I will probably try to implement this.</p>",
        "id": 244020629,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624721733
    },
    {
        "content": "<p>TBH I only had the commutative case in mind (i.e. where the base-ring, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> are all commutative)</p>",
        "id": 244020760,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624721928
    },
    {
        "content": "<p>Following <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  suggestions, I have finally created a file developing Kronecker product in the general setting of three algebras as a map </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>m</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>⟶</mo><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>⟶</mo><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mrow><mi>l</mi><mo>⋅</mo><mi>p</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>⋅</mo><mi>q</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Mat}_{l,m}(A)\\longrightarrow \\mathrm{Mat}_{p,q}(B)\\longrightarrow \\mathrm{Mat}_{l\\cdot p, m\\cdot q}(R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Mat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Mat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">Mat</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mbin mtight\">⋅</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">⋅</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>I have just pushed the <code>PR</code> <a href=\"https://github.com/leanprover-community/mathlib/issues/8147\">#8147</a> constructing the equivalence between <code>((l x m) x n) ((l' x m') x n')</code>-matrices and <code>(l x m x n) (l' x m' x n')</code>-matrices. Once it will be merged, I will be able to push the file about Kronecker product.</p>",
        "id": 244426999,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1625061396
    },
    {
        "content": "<p>I think I will also introduce some version of Kronecker product for tensor algebras (and compare the two) to show that the Kronecker product of matrices corresponds to the abstract tensor product of linear maps.</p>",
        "id": 244427806,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1625061753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span></p>",
        "id": 244462437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625075317
    },
    {
        "content": "<p>I have created <a href=\"https://github.com/leanprover-community/mathlib/issues/8152\">#8152</a> containing the Kronecker product as above. It relies on the previous one, so it is marked <code>blocked-by-other-PR</code>.</p>",
        "id": 244464703,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1625076319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The last suggestions on <a href=\"https://github.com/leanprover-community/mathlib/issues/8147\">#8147</a> are committed and I have made a couple of small changes to <a href=\"https://github.com/leanprover-community/mathlib/issues/8152\">#8152</a>. I am leaving for 2/3 weeks on vacation. If nothing is too urgent, you can add a <code>waiting-for-author</code> tag and I can resume working on both <code>PR</code> as well as implementing the tensor-product version of Kronecker product. Thanks to both for your suggestions and improvements!</p>",
        "id": 244550458,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1625138230
    },
    {
        "content": "<p>Enjoy your holidays!</p>",
        "id": 244550504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625138262
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>'s suggestion to replace the tensor product with an algebra endowed with a pair of morphisms was a distraction; that's just composing the simple <code>*</code> version with <code>algebra_map</code>, and pulls in lots of unnecessary assumptions and noise in proofs as a result. A better generalization in my opinion is just \"any bilinear operation\", which is what I've tried in <a href=\"https://github.com/leanprover-community/mathlib/issues/8560\">#8560</a>.</p>",
        "id": 248548206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628204603
    },
    {
        "content": "<p>(or actually just \"any binary operation\", but the interesting lemmas require bilinearity)</p>",
        "id": 248548343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628204693
    },
    {
        "content": "<p>the kronecker PRs have been merged!</p>",
        "id": 249862070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629298640
    },
    {
        "content": "<p>Yes, I am working on the <code>mathlib bump</code>right now!</p>",
        "id": 249862115,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629298659
    },
    {
        "content": "<p>I wanted to check everything works with the new versions before merging</p>",
        "id": 249862221,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629298695
    },
    {
        "content": "<p>OK, I have <code>bumped mathlib</code> and <code>merged</code>. Most of the files are still OK but I have <code>sorry</code>d out four lemmas which need to be refactored a bit. I won't have time today but I'll do it tomorrow.</p>",
        "id": 249875702,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629304277
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 249883630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629307655
    },
    {
        "content": "<p>It looks like we are missing lemmas that say how kronecker interacts with <code>reindex</code></p>",
        "id": 249883661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629307670
    },
    {
        "content": "<p>Probably because those statements are all proved with <code>ext; refl</code> and there are tonnes of variants.</p>",
        "id": 249891966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629311262
    },
    {
        "content": "<p>I guess <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.kronecker_assoc\">docs#matrix.kronecker_assoc</a> is not the right variant?</p>",
        "id": 249892125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629311335
    },
    {
        "content": "<p>(also, I don't understand why the <code>simp_nf</code> linter accepts that lemma, <code>reindex</code> is not simp-normal)</p>",
        "id": 249892214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629311384
    },
    {
        "content": "<p>Maybe it is in LTE's nolints.txt?</p>",
        "id": 249893961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629312149
    },
    {
        "content": "<p>Given the lemma is in mathlib that probably wouldn't have an effect ;)</p>",
        "id": 249898498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629314026
    },
    {
        "content": "<p>Yes, this is exactly the point.</p>",
        "id": 249947657,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629355774
    },
    {
        "content": "<p>My first option would be to re-add them to LTE as they were (it would suffice to add them to <code>Breen-Deligne/universal.lean</code>), given that they have not been accepted as part of <code>mathlib</code>. Another option is to play a bit with the <code>simp</code> call in these four LTE lemmas and work out the situation. I am happy with the second, although the first is certainly quicker.</p>",
        "id": 249947658,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629355775
    },
    {
        "content": "<p>I think option (1) is fine. We can always improve later.</p>",
        "id": 249951629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629359173
    },
    {
        "content": "<p>Ok, this won't take a lot of time. I'll do it later this morning.</p>",
        "id": 249951675,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629359204
    },
    {
        "content": "<p>Could you link to a place in lean-liquid where the lemmas are used?</p>",
        "id": 249951874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629359322
    },
    {
        "content": "<p>Give me 3 mins</p>",
        "id": 249951908,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629359348
    },
    {
        "content": "<p>From the first file:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/5ee83405041faa4c50807333477f0949a47a2c2f/src/breen_deligne/universal_map.lean#L257\">https://github.com/leanprover-community/lean-liquid/blob/5ee83405041faa4c50807333477f0949a47a2c2f/src/breen_deligne/universal_map.lean#L257</a></p>",
        "id": 249952091,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629359456
    },
    {
        "content": "<p>Then<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/5ee83405041faa4c50807333477f0949a47a2c2f/src/breen_deligne/category.lean#L76\">https://github.com/leanprover-community/lean-liquid/blob/5ee83405041faa4c50807333477f0949a47a2c2f/src/breen_deligne/category.lean#L76</a><br>\nand<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/5ee83405041faa4c50807333477f0949a47a2c2f/src/breen_deligne/category.lean#L104\">https://github.com/leanprover-community/lean-liquid/blob/5ee83405041faa4c50807333477f0949a47a2c2f/src/breen_deligne/category.lean#L104</a></p>",
        "id": 249952146,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629359504
    },
    {
        "content": "<p>And finally<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/5ee83405041faa4c50807333477f0949a47a2c2f/src/thm95/row_iso.lean#L279\">https://github.com/leanprover-community/lean-liquid/blob/5ee83405041faa4c50807333477f0949a47a2c2f/src/thm95/row_iso.lean#L279</a></p>",
        "id": 249952243,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629359548
    },
    {
        "content": "<p>All other occurrences of <code>kronecker</code>-stuff are OK (AFAIK).</p>",
        "id": 249952280,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629359571
    },
    {
        "content": "<p>The first lemma (in <code>breen_deligne/universal_map</code>) is now OK (without reinserting the <code>reindex</code> lemmas)</p>",
        "id": 249984338,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629379004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Are you working on some of the others (I ask simply to avoid working on the same lemma at the same time)?</p>",
        "id": 249984501,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629379079
    },
    {
        "content": "<p>Nope, I was just curious</p>",
        "id": 249984711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629379179
    },
    {
        "content": "<p>I'm surprised your proof doesn't use the assoc lemma we have already though</p>",
        "id": 249984904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629379261
    },
    {
        "content": "<p>Why doesn't that lemma apply?</p>",
        "id": 249984925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629379268
    },
    {
        "content": "<p>Well, because it needed some application of the reindexing lemmas and apparently the simplifier was not able to work things through.</p>",
        "id": 249985177,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629379367
    },
    {
        "content": "<p>Do you have the goal state which the lemma wouldn't match against?</p>",
        "id": 249985231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629379397
    },
    {
        "content": "<p>No, I am sorry. I have refactored the proof a bit and now I don't have it anymore (it is in some past commit, though, of course).</p>",
        "id": 249985312,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629379437
    },
    {
        "content": "<p>One lemma left to go. For <code>mul_mul_iso_aux</code> I had to re-insert two of the three <code>kronecker-reindex</code> lemmas (see <a href=\"https://github.com/leanprover-community/lean-liquid/blob/342f4779232d0b7a54305058e2c4566d2fbb4782/src/breen_deligne/category.lean#L129\">https://github.com/leanprover-community/lean-liquid/blob/342f4779232d0b7a54305058e2c4566d2fbb4782/src/breen_deligne/category.lean#L129</a> for the <code>rw</code>, which I have intentionally not merged with the one in the previous line, where these lemmas are needed).</p>",
        "id": 249998621,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629385141
    },
    {
        "content": "<p>IMHO it is worth opening a <code>PR</code> and insert these two  into <code>mathlib</code>, but I would like <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's opinion before starting another <em>tour de force</em> for just two small lemmas.</p>",
        "id": 249998835,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629385207
    },
    {
        "content": "<p>If those go into mathlib they should probably be expressed with <code>matrix.reindex</code> or even <code>matrix.minor</code> since that's the simp normal form</p>",
        "id": 250001730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629386330
    },
    {
        "content": "<p>I think otherwise they'd be fine though</p>",
        "id": 250001743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629386337
    },
    {
        "content": "<p>instead of <code>matrix.reindex_linear_equiv</code>, you mean?</p>",
        "id": 250001837,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629386385
    },
    {
        "content": "<p>but how to derive the <code>linear</code> version from that one, then?</p>",
        "id": 250001962,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629386436
    },
    {
        "content": "<p><code>simp</code> will unfold <code>matrix.reindex_linear_equiv</code> to <code>minor</code> via <code>reindex</code></p>",
        "id": 250001993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629386462
    },
    {
        "content": "<p>but they are not <code>simp</code> lemma now: you would like them to be marked as such?</p>",
        "id": 250002027,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629386486
    },
    {
        "content": "<p>No, I mean that if you have an applied<code>matrix.reindex_linear_equiv</code> in your goal state, you should <code>dsimp</code> it to <code>minor</code> before looking for a suitable lemma to rewrite by</p>",
        "id": 250002149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629386535
    },
    {
        "content": "<p>Having said that, I think this would be a good simp lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗ₖ</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">minor</span> <span class=\"o\">(</span><span class=\"n\">e1.prod_congr</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e3.prod_congr</span> <span class=\"n\">e4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">M.minor</span> <span class=\"n\">e1</span> <span class=\"n\">e3</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₖ</span> <span class=\"o\">(</span><span class=\"n\">N.minor</span> <span class=\"n\">e1</span> <span class=\"n\">e3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250002485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629386690
    },
    {
        "content": "<p>I would possibly argue that this lemma:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/7fc9a246aba1ff88996d2a3a8a8b3dc7ed7b833a/src/breen_deligne/universal_map.lean#L128-L130\">https://github.com/leanprover-community/lean-liquid/blob/7fc9a246aba1ff88996d2a3a8a8b3dc7ed7b833a/src/breen_deligne/universal_map.lean#L128-L130</a><br>\nshould state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_apply</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">basic_universal_map</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul</span> <span class=\"n\">N</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.reindex</span> <span class=\"n\">fin_prod_fin_equiv</span> <span class=\"n\">fin_prod_fin_equiv</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₖ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>which would get <code>reindex_linear_equiv</code> out of the way immediately.</p>",
        "id": 250002978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629386932
    },
    {
        "content": "<p>But would probably entail a huge deal of refactor for all other lemmas calling it, no?</p>",
        "id": 250003085,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629386999
    },
    {
        "content": "<p>I guess this is the statement you had in mind, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">kronecker_reindex_right'</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">:</span> <span class=\"n\">m₂</span> <span class=\"bp\">≃</span> <span class=\"n\">m₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">en</span> <span class=\"o\">:</span> <span class=\"n\">n₂</span> <span class=\"bp\">≃</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m₁</span> <span class=\"n\">n₁</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗ₖ</span> <span class=\"o\">(</span><span class=\"n\">N.minor</span> <span class=\"n\">em</span> <span class=\"n\">en</span><span class=\"o\">)</span>  <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗ₖ</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">minor</span> <span class=\"o\">((</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod_congr</span> <span class=\"n\">em</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod_congr</span> <span class=\"n\">en</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j'</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Yet I have not understood what you mean by \"<code>dsimp</code> my goal (where I have <code>matrix.reindex_linear_equiv</code>) to <code>minor</code>.</p>",
        "id": 250005925,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629388328
    },
    {
        "content": "<p>I wouldn't expect the refactor to be that bad</p>",
        "id": 250019991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629394749
    },
    {
        "content": "<p>I mean \"if you have that def in your goal state, run dsimp before looking for a suitable lemma\"</p>",
        "id": 250020169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629394808
    },
    {
        "content": "<p>Some of the proofs in <code>col_exact.lean</code> can timeout by adding an extra <code>dsimp</code>... it's that bad</p>",
        "id": 250020268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629394858
    },
    {
        "content": "<p>Then I guess I mean pretend to be dsimp and <code>rw matrix.reindex_linear_equiv_apply</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.reindex_linear_equiv_apply\">docs#matrix.reindex_linear_equiv_apply</a>)</p>",
        "id": 250022531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629395865
    },
    {
        "content": "<p>Btw, CI is now showing a <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> since we enabled a check that shows <code>thm95</code> is sorry free.</p>",
        "id": 250078534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629435734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> do you think you can fix the Kronecker sorry's today? Or would you like some help?</p>",
        "id": 250078542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629435765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think it will be OK very soon (with the two added lemmas, while we decide  whether or not to integrate them in <code>mathlib</code> but the <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span>  will disappear).</p>",
        "id": 250083713,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629441969
    },
    {
        "content": "<p>Ok, done. I have also applied some of <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's suggestions: the lemmas to add to <code>mathlib</code> would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">kronecker_reindex_right</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">:</span> <span class=\"n\">m₁</span> <span class=\"bp\">≃</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">en</span> <span class=\"o\">:</span> <span class=\"n\">n₁</span> <span class=\"bp\">≃</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m₁</span> <span class=\"n\">n₁</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⊗ₖ</span> <span class=\"o\">(</span><span class=\"n\">matrix.reindex</span> <span class=\"n\">em</span> <span class=\"n\">en</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">matrix.reindex</span>\n    <span class=\"o\">((</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod_congr</span> <span class=\"n\">em</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod_congr</span> <span class=\"n\">en</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗ₖ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j'</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>together with the  <code>left</code> variant. If this seems OK I can open a <code>PR</code> (the variant with <code>.minor</code> is like an <code>_apply</code>-version, I guess: in particular, it requires more rewriting than the above ones).</p>",
        "id": 250088818,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629446430
    },
    {
        "content": "<p>That looks reasonable to me, and matches the style of the existing assoc lemmas</p>",
        "id": 250091172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629448418
    },
    {
        "content": "<p>Although it should be about <code>kronecker_map f</code> not <code>kronecker</code>, since it's true for all <code>f</code></p>",
        "id": 250091184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629448433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Kronecker.20product/near/250083713\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> I think it will be OK very soon (with the two added lemmas, while we decide  whether or not to integrate them in <code>mathlib</code>, but the <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span>  will disappear).</p>\n</blockquote>\n<p>Green again! <span aria-label=\"check mark\" class=\"emoji emoji-2714\" role=\"img\" title=\"check mark\">:check_mark:</span></p>",
        "id": 250096060,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629451424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Kronecker.20product/near/250091184\">said</a>:</p>\n<blockquote>\n<p>Although it should be about <code>kronecker_map f</code> not <code>kronecker</code>, since it's true for all <code>f</code></p>\n</blockquote>\n<p>Done! <a href=\"https://github.com/leanprover-community/mathlib/issues/8774\">#8774</a></p>",
        "id": 250099072,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629453598
    }
]