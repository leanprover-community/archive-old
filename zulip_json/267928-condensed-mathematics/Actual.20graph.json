[
    {
        "content": "<p>I should have done that yesterday night to get it ready for the party, but I was stuck with primitives of integrable functions. Tonight I managed to bugfix leancrawler thanks to <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span>'s I/O advice and generated a couple of graphs, including <br>\n<a href=\"/user_uploads/3121/BqMi35_zwWlfuuyadRH9RIgH/final_graph.png\">final_graph.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BqMi35_zwWlfuuyadRH9RIgH/final_graph.png\" title=\"final_graph.png\"><img src=\"/user_uploads/3121/BqMi35_zwWlfuuyadRH9RIgH/final_graph.png\"></a></div>",
        "id": 242263659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623355840
    },
    {
        "content": "<p>Remember <a href=\"https://leanprover-community.github.io/liquid/dep_graph.html\">this</a> is what human being think is the project dependency graph. The picture above is Lean's point of view.</p>",
        "id": 242263728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623355884
    },
    {
        "content": "<p>Of course the big graph includes everything needed from mathlib (and even the core library).</p>",
        "id": 242263837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623355927
    },
    {
        "content": "<p>Each node is either a definition or a lemma (instances included).</p>",
        "id": 242264110,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356063
    },
    {
        "content": "<p>I tried to write a poll to see who could guess how many nodes there are, but I can't get it to work.</p>",
        "id": 242264474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356230
    },
    {
        "content": "<p>Johan do you know how to make a Zulip poll that work?</p>",
        "id": 242264503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356247
    },
    {
        "content": "<p>Some of those nodes are a bit surprising. Who knows why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal\">docs#ordinal</a> is involved?</p>",
        "id": 242264637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356296
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">poll</span> <span class=\"n\">title</span>\n<span class=\"bp\">-</span> <span class=\"n\">option</span> <span class=\"mi\">1</span>\n<span class=\"bp\">-</span> <span class=\"n\">option</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 242264648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623356301
    },
    {
        "content": "<p>Can you preview it when you write it?</p>",
        "id": 242264727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356341
    },
    {
        "content": "<p>Because I tried that and then clicked the preview button and never see my poll</p>",
        "id": 242264757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356358
    },
    {
        "content": "<p>/poll Which city in France represents the vertex <code>first_target</code></p>\n<ul>\n<li>Paris</li>\n<li>Marseille</li>\n<li>Nancy</li>\n<li>Lille</li>\n<li>Bordeaux</li>\n</ul>",
        "id": 242264814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623356399
    },
    {
        "content": "<p>/poll How many nodes?<br>\n1000<br>\n4000<br>\n8000<br>\n12000<br>\n15000<br>\n20000</p>",
        "id": 242264819,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356401
    },
    {
        "content": "<p>/poll How long is the longest (directed) path in this graph?<br>\nbetween 10 and 50<br>\nbetween 50 and 100<br>\nbetween 100 and 150</p>",
        "id": 242265039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356498
    },
    {
        "content": "<p>Free form question: why is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.cosh_neg\">docs#complex.cosh_neg</a> involved?!</p>",
        "id": 242265150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356550
    },
    {
        "content": "<p>(Shameless self-advertisement: <code>leancrawler</code> does know all the answers)</p>",
        "id": 242265222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/242265150\">said</a>:</p>\n<blockquote>\n<p>Free form question: why is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.cosh_neg\">docs#complex.cosh_neg</a> involved?!</p>\n</blockquote>\n<p>It is not involved and you're just playing with us. Right? How else could it be :-)</p>",
        "id": 242265729,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623356820
    },
    {
        "content": "<p>Sébastien I can see your understanding of condensed mathematics is not so deep. Then you'll be surprised when it will replace topology and analysis.</p>",
        "id": 242265979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356917
    },
    {
        "content": "<p>Actually, why the heck is that involved??</p>",
        "id": 242266065,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623356955
    },
    {
        "content": "<p>And then Peter will come along and ask why <code>cosh</code> is involved at all, and maybe we'll reconsider how we prove things in mathlib</p>",
        "id": 242266072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356961
    },
    {
        "content": "<p>Oh, here he is</p>",
        "id": 242266096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623356968
    },
    {
        "content": "<p>Did you make the graph look like France on purpose?</p>",
        "id": 242266249,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623357012
    },
    {
        "content": "<p>It's all automatically generated by <a href=\"http://gephi.org/\">gephi</a>. Johan and Kevin saw it live, they can testify I didn't change anything</p>",
        "id": 242266364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357062
    },
    {
        "content": "<p>/poll How many edges are there in the graph?</p>\n<ul>\n<li>between 10,000 and 20,000</li>\n<li>between 20,000 and 40,000</li>\n<li>between 40,000 and 80,000</li>\n<li>between 80,000 and 125,000</li>\n<li>between 125,000 and 175,000</li>\n</ul>",
        "id": 242266427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623357091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/242265979\">said</a>:</p>\n<blockquote>\n<p>Sébastien I can see your understanding of condensed mathematics is not so deep. Then you'll be surprised when it will replace topology and analysis.</p>\n</blockquote>\n<p>I can confirm that my understanding of condensed mathematics is not so deep. And that I'll be very surprised if it replaces topology and analysis (but I guess you'll have a hard time convincing people that condensed Sobolev spaces are the way to go :-)</p>",
        "id": 242266704,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623357208
    },
    {
        "content": "<p>(unless you explain that wavelets are a version of condensed mathematics, which is possibly something that could be argued for)</p>",
        "id": 242266839,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623357259
    },
    {
        "content": "<p>Let's go back to serious mathematics and comtemplate the path from <code>cosh_neg</code> to <code>first_target</code>:</p>\n<div class=\"codehilite\" data-code-language=\"IPython3\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">36</span><span class=\"p\">]:</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">shortest_path</span><span class=\"p\">(</span><span class=\"n\">gr</span><span class=\"p\">,</span> <span class=\"s1\">'complex.cosh_neg'</span><span class=\"p\">,</span> <span class=\"s1\">'first_target'</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">36</span><span class=\"p\">]:</span>\n<span class=\"p\">[</span><span class=\"s1\">'complex.cosh_neg'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.cos_conj'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.of_real_cos_of_real_re'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.of_real_cos'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.exp_log'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.cpow_one'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.cpow_nat_cast'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.rpow_nat_cast'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nnreal.rpow_nat_cast'</span><span class=\"p\">,</span>\n <span class=\"s1\">'thm95.universal_constants.N₂_spec'</span><span class=\"p\">,</span>\n <span class=\"s2\">\"thm95.universal_constants.k'_le_two_pow_N\"</span><span class=\"p\">,</span>\n <span class=\"s1\">'NSH_δ'</span><span class=\"p\">,</span>\n <span class=\"s2\">\"NSH_aux'\"</span><span class=\"p\">,</span>\n <span class=\"s1\">'NSH_aux'</span><span class=\"p\">,</span>\n <span class=\"s1\">'NSC_htpy'</span><span class=\"p\">,</span>\n <span class=\"s1\">'NSC'</span><span class=\"p\">,</span>\n <span class=\"s2\">\"thm95'\"</span><span class=\"p\">,</span>\n <span class=\"s2\">\"thm95''\"</span><span class=\"p\">,</span>\n <span class=\"s1\">'first_target'</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 242267196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357409
    },
    {
        "content": "<p>It obviously goes through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.rpow_nat_cast\">docs#real.rpow_nat_cast</a></p>",
        "id": 242267259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357442
    },
    {
        "content": "<p>whose importance cannot be overestimated and whose proof obviously uses <code>cosh</code></p>",
        "id": 242267326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357476
    },
    {
        "content": "<p>More generally, the definition of a real number raised to a real power is what drags in all of trigonometry, through log and exp</p>",
        "id": 242267488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357548
    },
    {
        "content": "<p>Don't you only ever need natural number powers of real numbers?</p>",
        "id": 242267541,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623357581
    },
    {
        "content": "<p>It also features in the longest path of the graph:</p>\n<div class=\"codehilite\" data-code-language=\"IPython3\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">]:</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">dag_longest_path</span><span class=\"p\">(</span><span class=\"n\">gr</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">]:</span>\n<span class=\"p\">[</span><span class=\"s1\">'nat'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.less_than_or_equal'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.has_le'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.le_refl'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.pred_le_pred'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.le_of_succ_le_succ'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.not_succ_le_self'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.lt_irrefl'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.lt_iff_le_not_le'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.linear_order'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nat.le_of_sub_eq_zero'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.sub_nat_nat_elim'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.sub_nat_nat_add_add'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.sub_nat_nat_sub'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.sub_nat_nat_add_neg_succ_of_nat'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.add_assoc_aux2'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.add_assoc'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.le.dest'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.le.elim'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.lt.dest'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.lt.elim'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.lt_irrefl'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.ne_of_lt'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.lt_iff_le_and_ne'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.lt_iff_le_not_le'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.linear_order'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.linear_ordered_comm_ring'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.linear_ordered_add_comm_group'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.zero_div'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.mod_add_div'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.mod_def'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.add_mul_mod_self'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.mul_mod_left'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.mul_mod_right'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.mod_eq_zero_of_dvd'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.div_mul_cancel'</span><span class=\"p\">,</span>\n <span class=\"s2\">\"int.mul_div_cancel'\"</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.eq_mul_of_div_eq_right'</span><span class=\"p\">,</span>\n <span class=\"s1\">'int.eq_mul_of_div_eq_left'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.mk_eq'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.lift_binop_eq'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.mul_def'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.mul_comm'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.mul_add'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.field'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.division_ring'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.add_comm_group'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.add_group'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.le'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.has_le'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.le_trans'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.linear_order'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.linear_ordered_field'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.linear_ordered_comm_ring'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.linear_ordered_ring'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rat.linear_ordered_add_comm_group'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.has_mul'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.comm_ring'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.ring'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.semiring'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.of_rat'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.of_rat_lt'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.zero_lt_one'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.nontrivial'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.linear_ordered_comm_ring'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.linear_ordered_field'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.field'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nnreal.has_div'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nnreal.comm_group_with_zero'</span><span class=\"p\">,</span>\n <span class=\"s1\">'nnreal.linear_ordered_comm_group_with_zero'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.to_nnreal_eq_zero'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.to_nnreal_mul'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.sqrt_mul'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.abs_mul'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.abs_add'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.abs.is_absolute_value'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.abs_div'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.is_cau_abs_exp'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.is_cau_exp'</span><span class=\"p\">,</span>\n <span class=\"s2\">\"complex.exp'\"</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.exp'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.exp_add'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.exp_ne_zero'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.exp_neg'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.cosh_neg'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.cos_conj'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.of_real_cos_of_real_re'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.of_real_cos'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.cos_bound'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.cos_pos_of_le_one'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.cos_one_pos'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.cos_two_neg'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.exists_cos_eq_zero'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.pi'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.cos_pi_div_two'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.cos_pi'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.sin_pi_sub'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.sin_pos_of_pos_of_lt_pi'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.sin_pi_div_two'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.sin_add_pi_div_two'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.cos_pos_of_mem_Ioo'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.cos_neg_of_pi_div_two_lt_of_lt'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.cos_lt_cos_of_nonneg_of_le_pi'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.sin_lt_sin_of_lt_of_le_pi_div_two'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.strict_mono_incr_on_sin'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.sin_order_iso'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.arcsin'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.arg'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.log'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.cpow'</span><span class=\"p\">,</span>\n <span class=\"s1\">'complex.has_pow'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.rpow'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.has_pow'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.rpow_def'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.rpow_def_of_nonneg'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.rpow_def_of_pos'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.rpow_pos_of_pos'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.log_rpow'</span><span class=\"p\">,</span>\n <span class=\"s1\">'real.log_pow'</span><span class=\"p\">,</span>\n <span class=\"s1\">'helper.N₂_spec'</span><span class=\"p\">,</span>\n <span class=\"s1\">'thm95.universal_constants.N₂_spec'</span><span class=\"p\">,</span>\n <span class=\"s2\">\"thm95.universal_constants.k'_le_two_pow_N\"</span><span class=\"p\">,</span>\n <span class=\"s1\">'NSH_δ'</span><span class=\"p\">,</span>\n <span class=\"s2\">\"NSH_aux'\"</span><span class=\"p\">,</span>\n <span class=\"s1\">'NSH_aux'</span><span class=\"p\">,</span>\n <span class=\"s1\">'NSC_htpy'</span><span class=\"p\">,</span>\n <span class=\"s1\">'NSC'</span><span class=\"p\">,</span>\n <span class=\"s2\">\"thm95'\"</span><span class=\"p\">,</span>\n <span class=\"s2\">\"thm95''\"</span><span class=\"p\">,</span>\n <span class=\"s1\">'first_target'</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 242267649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357622
    },
    {
        "content": "<p>We use real powers in the constants quest</p>",
        "id": 242267677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357636
    },
    {
        "content": "<p>'thm95.universal_constants.N₂_spec' is the begin of LTE in this path from cosh_neg to first_target</p>",
        "id": 242267739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357671
    },
    {
        "content": "<p>Hmm, but actually we can maybe avoid taking real powers there.</p>",
        "id": 242267837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623357719
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/thm95/constants/default.lean#L45\">here</a></p>",
        "id": 242267887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357729
    },
    {
        "content": "<p>We are using a lemma that is true for real powers, but we can probably specialize it to nat-powers</p>",
        "id": 242267918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623357749
    },
    {
        "content": "<p>OK, I see</p>",
        "id": 242267933,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623357756
    },
    {
        "content": "<p>Of course we're actually defining a natural number there</p>",
        "id": 242267935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357757
    },
    {
        "content": "<p>So if I count it right, my answer to your second poll is correct!</p>",
        "id": 242268081,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623357836
    },
    {
        "content": "<p>I'm guilty here. Initially Johan had an abstract definition involving archimedianity (is that an English word?) and I fount it more convenient to simply put that actual minimal value there, because it meant less nested inductive definitions</p>",
        "id": 242268084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357837
    },
    {
        "content": "<p>Yes! the longest path has 131 vertices</p>",
        "id": 242268173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357869
    },
    {
        "content": "<p>And it goes from <code>nat</code> to <code>first_target</code>, which is pretty satisfying</p>",
        "id": 242268221,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623357890
    },
    {
        "content": "<p>Kronecker would be happy</p>",
        "id": 242268332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623357953
    },
    {
        "content": "<p>Kronecker would be happy with the foundations we have. The variant of type theory that Lean uses is a variant of the calculus of inductive construction where inductive types (including natural numbers) are right at the bottom, not defined in term of anything else.</p>",
        "id": 242268541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623358053
    },
    {
        "content": "<p>I guess there enough messages in this thread that we can post more answers to the polls without spoiling</p>",
        "id": 242268804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623358182
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>There are 7859 nodes and more than 100.000 edges</p>\n</div></div>",
        "id": 242268931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623358227
    },
    {
        "content": "<p>I'm always amazed to see that those graphs are basically always a giant ball with some many edges compared to nodes.</p>",
        "id": 242269005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623358266
    },
    {
        "content": "<p>And actually it could be much tighter, I always remove things that are too foundational like logic or <code>set</code></p>",
        "id": 242269098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623358312
    },
    {
        "content": "<p>It reminds me another fun question: what is the small green group that seems separated from the main blob on the top-right between the two pink areas?</p>",
        "id": 242269314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623358388
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The <code>first_target</code> vertex is close to Nancy (in the orange blob in the East)</p>\n</div></div>",
        "id": 242269474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623358456
    },
    {
        "content": "<p>What's interesting about this <code>first_target</code> node is it's completely surrounded by category theory</p>",
        "id": 242269600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623358541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/242268173\">said</a>:</p>\n<blockquote>\n<p>Yes! the longest path has 131 vertices</p>\n</blockquote>\n<p>That's still 53 steps shorter than the longest path in the Metamath proof of 2+2=4 ... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 242291494,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1623375128
    },
    {
        "content": "<p>Not sure who to credit for those additional steps (Cantor?) - most of the excess depth in the metamath proof is building up <code>nat</code> from set theory</p>",
        "id": 242292643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623376440
    },
    {
        "content": "<p>This kind of data is really fascinating and something that I can only imagine doing after formalization!</p>\n<p>Regarding the graph and its tightness, a different point of view is that it only has a small fraction of the edges that it <em>could</em> have: there are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∼</mo><mtext> ⁣</mtext><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mn>8000</mn><mn>2</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>≈</mo><mn>1.6</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\sim \\! \\binom{8000}{2} \\approx 1.6 \\cdot 10^7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8000</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1.6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span> pairs of vertices, as opposed to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≈</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\approx 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.48312em;vertical-align:0em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>.  (Unless, of course, when you said that it had more than 100.000 edges you really meant <em>a lot</em> more than 100.000! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> )</p>",
        "id": 242298962,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623384173
    },
    {
        "content": "<p>No, it's not <em>a lot</em> more. I don't remember the exact number, but it's less than 125,000.</p>",
        "id": 242300024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623385631
    },
    {
        "content": "<p>I think a better metric is to solve for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>∼</mo><msup><mi>V</mi><mi>α</mi></msup></mrow><annotation encoding=\"application/x-tex\">E\\sim V^\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 242300419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623386168
    },
    {
        "content": "<p>A sparse graph has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>≈</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\alpha\\approx 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.48312em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> but I think this is higher</p>",
        "id": 242300428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623386208
    },
    {
        "content": "<p>Yeah, it's a bit of an apples/oranges comparison. But allowing for Metamath starting from set theory and getting basic arithmetic, and Lean starting from nat as an inductive type, but getting up to condensed mathematics (or near to it), it's at least anecdotally interesting.</p>",
        "id": 242300437,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1623386226
    },
    {
        "content": "<p>I think a lot of people draw the wrong conclusions from that factoid though, it's just a bit harmful</p>",
        "id": 242300506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623386302
    },
    {
        "content": "<p>for example, if you were to guess that it means that lean can get more done with less work, I think it's not true at all at the low level. There is a large fixed cost of setting up set theory, proving that functions exist etc, and then it's just a matter of the size of theorems. Metamath has more broken up proofs like <code>foolem1, foolem2, ... foolem14, foo</code> instead of having one huge theorem</p>",
        "id": 242300691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623386596
    },
    {
        "content": "<p>Oh wow! I picked up a random little off the graph, counted the number of nodes in there, then counted how many times I could fit it in, and got pretty pretty close!</p>",
        "id": 242304820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623391814
    },
    {
        "content": "<p>I'm trying not to draw a conclusion, just thought it was a randomly interesting fact.</p>",
        "id": 242307160,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1623394326
    },
    {
        "content": "<p>So what do the colours actually represent in the graph?</p>",
        "id": 242309074,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623396098
    },
    {
        "content": "<p>I was trying to edit the picture to add some labels, but my graphics program is crashing <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 242309365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623396296
    },
    {
        "content": "<p>The colours are clusters calculated by gephi. There is a mild correspondence between these clusters and mathematical subfields</p>",
        "id": 242309515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623396365
    },
    {
        "content": "<p>The orange blob in the east which contains <code>first_target</code> is a mix of <code>semi_normed_group</code> and category theory.</p>",
        "id": 242309555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623396394
    },
    {
        "content": "<p>The big blob below it is a mix of algebra (groups/rings) and stuff about the reals.</p>",
        "id": 242309590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623396423
    },
    {
        "content": "<p>Is all this stuff about profinite sets and Mbar and so on considered part of category theory?</p>",
        "id": 242309643,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623396473
    },
    {
        "content": "<p>In the south west, we get linear algebra. The blue peninsula in the west is stuff about finite discrete maths (lists/multisets/finsets). Then we get a small pink peninsula about ordinals/cardinals. Finally the big pinkish region in the north is topology.</p>",
        "id": 242309745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623396535
    },
    {
        "content": "<p><code>Mbar</code> and <code>breen_deligne</code> are scattered all over the place.</p>",
        "id": 242309760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623396557
    },
    {
        "content": "<p>But note that vertices belonging to the project only make up a very small part of this graph. I don't have exact numbers, but my guess is it's &lt; 15%.</p>",
        "id": 242309777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623396587
    },
    {
        "content": "<p>The project is 20,000 lines of code, mathlib is more like 600,000. Of course we don't use all of mathlib. But I wouldn't be surprised if we use quite a fraction of mathlib.</p>",
        "id": 242309871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623396644
    },
    {
        "content": "<p>I guess a bunch of profinite stuff is in the topology blob, but we didn't check yesterday night. Patrick can give more precise answers.</p>",
        "id": 242310052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623396793
    },
    {
        "content": "<p>Wow, this is really fascinating! Where can I find out how you did it?</p>",
        "id": 242311814,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623398101
    },
    {
        "content": "<p>Patrick wrote a tool <code>leancrawler</code> which can generate (amongst other things) the data that gephi needs to generate this graph.</p>",
        "id": 242311949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623398196
    },
    {
        "content": "<p>But I'm not an expert on this. I just watched his screen last night, while he was exploring the data</p>",
        "id": 242311974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623398221
    },
    {
        "content": "<p>I'm away from my computer until dinner. I'll share more tonight. The version of leancrawler that is on github won't work because of issues in Lean3 IO and I didn't push the workaround yet.</p>",
        "id": 242314074,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623399599
    },
    {
        "content": "<p>Do someone have an idea of why ordinals are there?</p>",
        "id": 242346253,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623418892
    },
    {
        "content": "<p>Yeah, in the proof of 9.8 we <del>need to show</del> use that something is countable</p>",
        "id": 242346884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623419158
    },
    {
        "content": "<p>I guess we can avoid it by writing down a hands-on equiv to <code>nat</code>. But I don't care too much</p>",
        "id": 242346965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623419179
    },
    {
        "content": "<p>Or rather, in the proof of 9.8, we need a bijection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi><mo>→</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">S \\times \\mathbb N \\to \\mathbb N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is finite. And I just pull one out of the hat using some lemma about cardinals.</p>",
        "id": 242347191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623419285
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/yjiftYcc84SvkgyeUIrgqFA2/final_graph_labels.png\">final_graph_labels.png</a> <a href=\"/user_uploads/3121/fK8pkXuY8b6anvwqJaejrjOC/final_graph_labels.png.svg\">final_graph_labels.png.svg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yjiftYcc84SvkgyeUIrgqFA2/final_graph_labels.png\" title=\"final_graph_labels.png\"><img src=\"/user_uploads/3121/yjiftYcc84SvkgyeUIrgqFA2/final_graph_labels.png\"></a></div>",
        "id": 242561703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656182
    },
    {
        "content": "<p>My silly attempt at adding some labels to the graph</p>",
        "id": 242561708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656195
    },
    {
        "content": "<p>The somewhat correspond to reality.</p>",
        "id": 242561718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656203
    },
    {
        "content": "<p>If someone wants to do a better job (I'm terrible at this), I've posted the <code>.svg</code> above.</p>",
        "id": 242561737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656223
    },
    {
        "content": "<p>The functional analysis label is a bit random isn't it?</p>",
        "id": 242562058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623656469
    },
    {
        "content": "<p>Yep, in reality it's basically mixed with category theory</p>",
        "id": 242562097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656514
    },
    {
        "content": "<p>The middle of the graph is a grab bag with lots of stuff. But there is a bit of functional analysis there, I think.</p>",
        "id": 242562182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656563
    },
    {
        "content": "<p>I'm open to other suggestions</p>",
        "id": 242562195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656575
    },
    {
        "content": "<p>The middle of the graph is just a mess.</p>",
        "id": 242562250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623656614
    },
    {
        "content": "<p>So we replace the label with <code>Mess</code>? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 242562263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656625
    },
    {
        "content": "<p>The big dot below the a of analysis is <code>add_monoid.to_add_zero_class</code>...</p>",
        "id": 242562285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623656642
    },
    {
        "content": "<p>Which is clearly one of the cornerstones of this proof <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 242562353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656665
    },
    {
        "content": "<p>It's like France: In the middle of it, there's just... stuff.</p>",
        "id": 242562369,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623656677
    },
    {
        "content": "<p>All the other big dots in this area are similar (like <code>add_comm_group.to_add_group</code>)</p>",
        "id": 242562383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623656694
    },
    {
        "content": "<p>No, in the middle of France there is nothing at all.</p>",
        "id": 242562408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623656710
    },
    {
        "content": "<p>Should we move the algebra label over there? And call the blue blob <code>Real and complex numbers</code> instead?</p>",
        "id": 242562445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656736
    },
    {
        "content": "<p>We want <code>(Functional) analysis</code> somewhere, I guess.</p>",
        "id": 242562478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656760
    },
    {
        "content": "<p>By the way, is it surprising or not that most nodes are very small?</p>",
        "id": 242562530,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623656772
    },
    {
        "content": "<p>The size of a node corresponds to the out-degree</p>",
        "id": 242562543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656783
    },
    {
        "content": "<p>Which means that most things get used just a couple of times.</p>",
        "id": 242562580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656812
    },
    {
        "content": "<p>sure... but this seems to indicate that there are very few nodes of large importance</p>",
        "id": 242562584,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623656816
    },
    {
        "content": "<p>Ooh, Patrick has cut away all the logic from this graph</p>",
        "id": 242562619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656843
    },
    {
        "content": "<p>I recall that the perfectoid spaces graph looked pretty different</p>",
        "id": 242562626,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623656848
    },
    {
        "content": "<p>Otherwise we would have one big mess, where everything is connected to basic logic lemmas that are not important.</p>",
        "id": 242562654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656873
    },
    {
        "content": "<p>Probably <code>iff.mp</code> would be one of the most used results or so.</p>",
        "id": 242562703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656888
    },
    {
        "content": "<p>It had some discernible structure (other than colors), and  quite a few bigger nodes, I think</p>",
        "id": 242562711,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623656893
    },
    {
        "content": "<p>There are two kinds of large nodes. The first kind is what we just discussed. The second one is made of central actual definition, like real numbers or topological spaces.</p>",
        "id": 242562726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623656910
    },
    {
        "content": "<p>Better than <code>add_comm_group.to_add_group</code>...</p>",
        "id": 242562734,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623656914
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/images/perfectoid_graph_small.png\"><img src=\"https://uploads.zulipusercontent.net/362341bc8806a7d221019d5c30f09be078d4fb5d/68747470733a2f2f6c65616e70726f7665722d636f6d6d756e6974792e6769746875622e696f2f6c65616e2d706572666563746f69642d7370616365732f696d616765732f706572666563746f69645f67726170685f736d616c6c2e706e67\"></a></div>",
        "id": 242562742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623656922
    },
    {
        "content": "<p>I'm not sure we can do much science on these graphs. As Patrick pointed out somewhere, the main benefits are<br>\n(1) They look really nice <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <br>\n(2) An actual use case: we can now easily find out which definitions are in the dependency chain of the <em>statement</em> of the main theorem.</p>",
        "id": 242563321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623657342
    },
    {
        "content": "<p>Fun fact: when Soergel (a prof in Freiburg) saw the graph for perfectoid spaces somewhere in 2019, he asked what consequences Brexit would have for Lists and Finite sets.</p>",
        "id": 242563449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623657439
    },
    {
        "content": "<p>I think that one difference with the perfectoid graph is we added even more weird classes to the algebra hierarchy since then.</p>",
        "id": 242563861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623657679
    },
    {
        "content": "<p>Actually, why was the key node large in the perfectoid graph? Or does it just overlap with a large node?</p>",
        "id": 242563991,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623657750
    },
    {
        "content": "<p>The key node had a special treatment, so that we can see it.</p>",
        "id": 242564089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623657819
    },
    {
        "content": "<p>Ah, so you tricked me into believing that I should also look for a large node in the new graph</p>",
        "id": 242564181,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1623657854
    },
    {
        "content": "<p>I'm impressed at how the LTE graph is much denser than the perfectoid one. And I was already impressed by the latter! Now it looks quite sparse to me.</p>",
        "id": 242564624,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623658195
    },
    {
        "content": "<p>Is it that the definition of perfectoids really uses much less, or is that an artifact of the graph presentation?</p>",
        "id": 242564724,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623658230
    },
    {
        "content": "<p>LTE has about 2x as many lines of lean code. It also imports more from mathlib.</p>",
        "id": 242565061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623658446
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/scjEw5jqwKxLNJVWQMGRwF8W/final_graph_labels.png\">final_graph_labels.png</a> <br>\nHere's a version where the star has a more distinct colour.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/scjEw5jqwKxLNJVWQMGRwF8W/final_graph_labels.png\" title=\"final_graph_labels.png\"><img src=\"/user_uploads/3121/scjEw5jqwKxLNJVWQMGRwF8W/final_graph_labels.png\"></a></div>",
        "id": 242583715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623670567
    },
    {
        "content": "<p>What is the mixed in blueish-purple to the left of topology?</p>",
        "id": 242599631,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623678696
    },
    {
        "content": "<p>I am trying to make the graph now that the project is done, following the tutorial <a href=\"https://github.com/leanprover-community/leancrawler/\">here</a>. If someone is interested in the data produced by <code>lib = LeanLib.load_dump('my_py_data')</code> they're here <a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/LTE_data\">data</a> <a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/data.yaml\">data.yaml</a>.</p>\n<p>But how am I supposed to make the graph? After <code>G = LeanDeclGraph.from_lib(lib)</code> it thinks a little bit, but no file is created. Should I save it somehow?</p>",
        "id": 289965702,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658151273
    },
    {
        "content": "<p>BTW here is the longest path</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.less_than_or_equal'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.has_le'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.le_refl'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.le_succ'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.le_succ_of_le'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.le_add_right'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.le.intro'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.add_le_add_left'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.add_le_add_right'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nat.le_of_sub_eq_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.sub_nat_nat_elim'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.sub_nat_nat_add_add'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.sub_nat_nat_sub'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.sub_nat_nat_add_neg_succ_of_nat'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.add_assoc_aux2'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.add_assoc'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.le.dest'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.le.elim'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.lt.dest'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.lt.elim'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.lt_irrefl'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.ne_of_lt'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.lt_iff_le_and_ne'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.lt_iff_le_not_le'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.linear_order'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.linear_ordered_comm_ring'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.add_mul_div_right'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.add_mul_mod_self'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.mul_mod_left'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.mul_mod_right'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.mod_eq_zero_of_dvd'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.div_mul_cancel'</span><span class=\"o\">,</span>\n <span class=\"s2\">\"int.mul_div_cancel'\"</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.eq_mul_of_div_eq_right'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">int.eq_mul_of_div_eq_left'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.mk_eq'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.lift_binop_eq'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.mul_def'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.mul_comm'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.mul_add'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.field'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.division_ring'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.add_comm_group'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.add_group'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.le'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.has_le'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.le_trans'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.linear_order'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.linear_ordered_field'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.linear_ordered_comm_ring'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">rat.linear_ordered_ring'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.has_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.of_cauchy_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.mk_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.mk_pos'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.mul_pos'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.ordered_comm_ring'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.ordered_ring'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.ordered_semiring'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nnreal.ordered_semiring'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nnreal.sqrt'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nnreal.sqrt_eq_iff_sq_eq'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nnreal.sqrt_eq_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nnreal.sqrt_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.sqrt_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.sqrt_eq_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.abs_eq_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.abs.is_absolute_value'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.abs_div'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.is_cau_abs_exp'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.is_cau_exp'</span><span class=\"o\">,</span>\n <span class=\"s2\">\"complex.exp'\"</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.exp'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.exp_add'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.exp_ne_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.exp_neg'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.cosh_neg'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.cos_conj'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.of_real_cos_of_real_re'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.cos_of_real_im'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.exp_of_real_mul_I_im'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.cos_bound'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.cos_pos_of_le_one'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.cos_one_pos'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.cos_two_neg'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.exists_cos_eq_zero'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.pi'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.cos_pi_div_two'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.cos_pi'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.sin_antiperiodic'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.sin_pi_sub'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.sin_pos_of_pos_of_lt_pi'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.sin_pi_div_two'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.sin_add_pi_div_two'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.cos_pos_of_mem_Ioo'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.cos_neg_of_pi_div_two_lt_of_lt'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.cos_lt_cos_of_nonneg_of_le_pi'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.sin_lt_sin_of_lt_of_le_pi_div_two'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.strict_mono_on_sin'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.sin_order_iso'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.arcsin'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.arcsin_mem_Icc'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.arcsin_eq_of_sin_eq'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.arcsin_neg_one'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.arcsin_of_le_neg_one'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.arcsin_neg'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.sin_arg'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.abs_mul_exp_arg_mul_I'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.abs_mul_cos_add_sin_mul_I'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.arg_mem_Ioc'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.arg_real_mul'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.arg_eq_pi_iff'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">complex.arg_of_real_of_neg'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.rpow_def_of_neg'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.abs_rpow_le_abs_rpow'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.abs_rpow_le_exp_log_mul'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.continuous_at_rpow_of_pos'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">real.continuous_at_rpow'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nnreal.continuous_at_rpow'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">filter.tendsto.nnrpow'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nnreal.continuous_at_rpow_const'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">nnreal.continuous_rpow_const'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">laurent_measures_ses.nnreal.tsum_geom_arit_inequality'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">laurent_measures_ses.θ_bound'</span><span class=\"o\">,</span>\n <span class=\"s2\">\"laurent_measures_ses.θ_bound'\"</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">laurent_measures.psi_bound'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">invpoly.short_exact'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">laurent_measures.epi_and_is_iso'</span><span class=\"o\">,</span>\n <span class=\"bp\">'</span><span class=\"n\">liquid_tensor_experiment'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 289966547,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658151695
    },
    {
        "content": "<p>Ah, it's done by gephi.</p>",
        "id": 289967150,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658151978
    },
    {
        "content": "<p>Am I supposed to feed to gephi the file <code>data.yaml</code>? The other one?</p>",
        "id": 289974077,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658155001
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 289977237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658156341
    },
    {
        "content": "<p>Riccardo, this is  explained in the README. You need to use <code>G.write('riccardo.gexf')</code> to get something you can open in gephi</p>",
        "id": 290047483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1658198687
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/mQtFKHROJulo24hIlVr-hFFu/test.png\">test.png</a> file:///home/ricky/Documenti/test.png</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mQtFKHROJulo24hIlVr-hFFu/test.png\" title=\"test.png\"><img src=\"/user_uploads/3121/mQtFKHROJulo24hIlVr-hFFu/test.png\"></a></div><p>I've played a little bit with gephi, and the graph looks like this</p>",
        "id": 290127772,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658249108
    },
    {
        "content": "<p>The big node in the middle is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/id_tag\">docs#id_tag</a>, that makes sense I guess..</p>",
        "id": 290129133,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658249698
    },
    {
        "content": "<p>Tomorrow I will remove the nodes in <code>core</code>.</p>",
        "id": 290134754,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658252194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> are you going to tweet it?</p>",
        "id": 290179153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658277830
    },
    {
        "content": "<p>It would be nice to include the text saying what each of the (main) colours mean.</p>",
        "id": 290182006,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658278664
    },
    {
        "content": "<p>I will do a better version later today, then <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> feel free to tweet it, you have much more followers than me</p>",
        "id": 290210087,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658307950
    },
    {
        "content": "<p>I am sharing what I did to get the graph, to see if someone has some suggestions to make it more interesting. To get rid of foundational stuff and things in <code>core</code> I did <code>lib.prune_foundations(files=['elan'])</code>. Then I used <code>G.component_of('liquid_tensor_experiment')</code> since we probably only want the results used to prove <code>liquid_tensor_experiment</code>.</p>\n<p>This graph has 16710 nodes and 270489 edges, with an average degree of 32,375 and a diameter of ... wait for it.</p>\n<p>Modularity found 9 classes. Here are some results in each class.</p>\n<p>This is definitely category theory.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">category_theory.limits.is_zero_initial</span>  <span class=\"kd\">lemma</span>   <span class=\"mi\">0</span>\n<span class=\"n\">category_theory.limits.equalizer.ι</span>  <span class=\"kd\">definition</span>  <span class=\"mi\">0</span>\n<span class=\"n\">category_theory.limits.colimit.desc</span> <span class=\"kd\">definition</span>  <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Stuff related to <code>multiset</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">list.find_cons_of_pos</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">1</span>\n<span class=\"n\">multiset.ndinter_le_right</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">1</span>\n<span class=\"n\">multiset.fold</span>   <span class=\"kd\">definition</span>  <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Topology?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">continuous_linear_map.lipschitz</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">2</span>\n<span class=\"n\">nnreal.topological_semiring</span> <span class=\"kd\">instance</span>    <span class=\"mi\">2</span>\n<span class=\"n\">CLCFPTinv₂.res_refl</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">2</span>\n<span class=\"n\">pseudo_normed_group.injective_cast_le</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">2</span>\n<span class=\"n\">laurent_measures.shift_add_monoid_hom_apply_to_fun</span>  <span class=\"kd\">lemma</span>   <span class=\"mi\">2</span>\n<span class=\"n\">hom_complex_QprimeFP_nat_iso_aux_system_naturality_in_T_inv</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">2</span>\n</code></pre></div>\n<p>This is less clear, maybe analysis.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">metric.bounded.union</span>    <span class=\"kd\">lemma</span>   <span class=\"mi\">3</span>\n<span class=\"n\">cau_seq.lim_eq_of_equiv_const</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">3</span>\n<span class=\"n\">one_div_neg_one_eq_neg_one</span>  <span class=\"kd\">lemma</span>   <span class=\"mi\">3</span>\n<span class=\"n\">sub_mul</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">3</span>\n<span class=\"n\">rat.cast_inv</span>    <span class=\"kd\">lemma</span>   <span class=\"mi\">3</span>\n<span class=\"n\">real.exp_bound_div_one_sub_of_interval_approx</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">3</span>\n<span class=\"n\">pow_unbounded_of_one_lt</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">3</span>\n</code></pre></div>\n<p>Basic algebra.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">finsupp.single_mem_supported</span>    <span class=\"kd\">lemma</span>   <span class=\"mi\">4</span>\n<span class=\"n\">add_monoid_hom.lift_of_surjective_apply</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">4</span>\n<span class=\"n\">submodule.fg</span>    <span class=\"kd\">definition</span>  <span class=\"mi\">4</span>\n<span class=\"n\">linear_equiv.linear_map.has_coe</span> <span class=\"kd\">instance</span>    <span class=\"mi\">4</span>\n<span class=\"n\">continuous_linear_map.has_sub</span>   <span class=\"kd\">instance</span>    <span class=\"mi\">4</span>\n<span class=\"n\">polynomial.degree_neg</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">4</span>\n<span class=\"n\">finset.smul_sum</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">4</span>\n<span class=\"n\">add_monoid_hom.pushout_inl</span>  <span class=\"kd\">definition</span>  <span class=\"mi\">4</span>\n<span class=\"n\">add_equiv.of_bijective</span>  <span class=\"kd\">definition</span>  <span class=\"mi\">4</span>\n</code></pre></div>\n<p>Cardinal and friends.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cardinal.mk_fintype</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">5</span>\n<span class=\"n\">ordinal.one_add_of_omega_le</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">5</span>\n<span class=\"n\">cardinal.lift_one</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">5</span>\n<span class=\"n\">rel_embedding</span>   <span class=\"kd\">structure</span>   <span class=\"mi\">5</span>\n</code></pre></div>\n<p>Again category theory! I don't know why, we can maybe use the same color.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">homological_complex.exact.congr</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">6</span>\n<span class=\"n\">category_theory.strong_mono_category</span>    <span class=\"kd\">class</span>   <span class=\"mi\">6</span>\n<span class=\"n\">category_theory.triangulated.pretriangulated</span>    <span class=\"kd\">class</span>   <span class=\"mi\">6</span>\n<span class=\"n\">category_theory.arrow.lift_mk'_left</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">6</span>\n</code></pre></div>\n<p>I don't know what this is, but it is very small (only 25 nodes)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">not_covby_iff</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">7</span>\n<span class=\"n\">order.covby_succ</span>    <span class=\"kd\">lemma</span>   <span class=\"mi\">7</span>\n<span class=\"n\">order.lt_succ_iff_not_is_max</span>    <span class=\"kd\">lemma</span>   <span class=\"mi\">7</span>\n<span class=\"n\">order.le_of_lt_succ</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">7</span>\n<span class=\"n\">order.succ_le_of_lt</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">7</span>\n<span class=\"n\">wcovby.covby_of_lt</span>  <span class=\"kd\">lemma</span>   <span class=\"mi\">7</span>\n</code></pre></div>\n<p>Topology again?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">embedding.is_compact_iff_is_compact_image</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">8</span>\n<span class=\"n\">filter.prod_comm</span>    <span class=\"kd\">lemma</span>   <span class=\"mi\">8</span>\n<span class=\"n\">ne_top_of_lt</span>    <span class=\"kd\">lemma</span>   <span class=\"mi\">8</span>\n<span class=\"n\">is_irreducible.is_connected</span> <span class=\"kd\">lemma</span>   <span class=\"mi\">8</span>\n<span class=\"n\">is_open.add_left</span>    <span class=\"kd\">lemma</span>   <span class=\"mi\">8</span>\n<span class=\"n\">interior_eq_nhds'</span>   <span class=\"kd\">lemma</span>   <span class=\"mi\">8</span>\n</code></pre></div>",
        "id": 290218793,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658314202
    },
    {
        "content": "<p>/poll &lt;Where <code>liquid_tensor_experiment</code> is?&gt;<br>\n0<br>\n1<br>\n2<br>\n3<br>\n4<br>\n5<br>\n6<br>\n7<br>\n8</p>",
        "id": 290219192,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658314496
    },
    {
        "content": "<p>The very small stuff with 25 nodes is the order theory I've been doing!</p>",
        "id": 290219357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658314614
    },
    {
        "content": "<p>Maybe number <code>6</code> is homological algebra?</p>",
        "id": 290219748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658314907
    },
    {
        "content": "<p>Is it normal that <code>first_target</code> is not there?</p>",
        "id": 290219999,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658315101
    },
    {
        "content": "<p>It is called <code>thm95.profinite</code> in Lean, I guess.</p>",
        "id": 290220021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315122
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid//blob/b646a1f131d272c7d994abeff318e626561a666e/src/liquid.lean#L101\">https://github.com/leanprover-community/lean-liquid//blob/b646a1f131d272c7d994abeff318e626561a666e/src/liquid.lean#L101</a></p>",
        "id": 290220044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315156
    },
    {
        "content": "<p><code>thm94</code></p>",
        "id": 290220101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315171
    },
    {
        "content": "<p><code>first_target</code> is the LaTeX label in the blueprint</p>",
        "id": 290220133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315197
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/0a3c7ec2eb620a158e775233c47ad217127b5281/src/liquid.lean#L37\">https://github.com/leanprover-community/lean-liquid/blob/0a3c7ec2eb620a158e775233c47ad217127b5281/src/liquid.lean#L37</a></p>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 290220189,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658315254
    },
    {
        "content": "<p>In any case the only <code>thm94</code> that is there is <code>thm94.explicit</code></p>",
        "id": 290220257,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658315287
    },
    {
        "content": "<p>Ooh, lol. I forgot about that one <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 290220262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315288
    },
    {
        "content": "<p><code> thm94.explicit</code> is used in <code>Lbar/ext.lean</code>.</p>",
        "id": 290220321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315343
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/0a3c7ec2eb620a158e775233c47ad217127b5281/src/thm95/default.lean#L158\">https://github.com/leanprover-community/lean-liquid/blob/0a3c7ec2eb620a158e775233c47ad217127b5281/src/thm95/default.lean#L158</a></p>",
        "id": 290220361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315385
    },
    {
        "content": "<p>I mean that if we delete <code>thm94</code> then <code>liquid_tensor_experiment</code> should still compile, unless I messed up something.</p>",
        "id": 290220478,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658315471
    },
    {
        "content": "<p>Yes, technically we can delete all of <code>liquid.lean</code></p>",
        "id": 290220510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315505
    },
    {
        "content": "<p>We only need <code>thm94.explicit</code> from the file <code>thm95/default.lean</code> (yes, I know, the names are confusing).</p>",
        "id": 290220586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315534
    },
    {
        "content": "<p>Although</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ext_preamble.lean</span>\n<span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"kn\">import</span> <span class=\"n\">liquid</span>\n</code></pre></div>\n<p>will cause breakage if we actually do that.</p>",
        "id": 290220635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315583
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/iPLT8fvnR4FOEw6eb31rNk9O/LTE.png\">LTE.png</a> file:///home/ricky/lean/lean-liquid/LTE.png</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iPLT8fvnR4FOEw6eb31rNk9O/LTE.png\" title=\"LTE.png\"><img src=\"/user_uploads/3121/iPLT8fvnR4FOEw6eb31rNk9O/LTE.png\"></a></div><p>If we like this image I can add the labels. I don't know how to avoid the drift in the bottom without having a too dense image.</p>",
        "id": 290222063,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658316473
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/vEFfkNb6FG3KvrgLZiCzDgxc/LTE_labels.png\">LTE_labels.png</a><br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> feel free to tweet it. I can change the labels, but I don't think I am able to make it nicer</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vEFfkNb6FG3KvrgLZiCzDgxc/LTE_labels.png\" title=\"LTE_labels.png\"><img src=\"/user_uploads/3121/vEFfkNb6FG3KvrgLZiCzDgxc/LTE_labels.png\"></a></div>",
        "id": 290229411,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658321072
    },
    {
        "content": "<p>What have \"cardinals\" got to do with things? Did they really play a role? Can we think of a better label?</p>",
        "id": 290230493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658321741
    },
    {
        "content": "<p>How about \"finiteness\"?</p>",
        "id": 290230566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658321771
    },
    {
        "content": "<p>How viable would it be to generate another version of the graph with everything from mathlib at 50% opacity? My thinking was this would  styll show both LTE is a substantial body of work, but also that mathlib was essential in providing foundations for it.</p>",
        "id": 290230577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658321782
    },
    {
        "content": "<p>Cardinals were there even in the first part of the project</p>",
        "id": 290230817,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658321945
    },
    {
        "content": "<p><a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/242346884\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/242346884</a></p>",
        "id": 290230954,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658322022
    },
    {
        "content": "<p>What I don't like is that the graph right now seems to say \"an obscure mathematical concept was important in about 10% of the results\" which I think is misleading (and unhelpful).</p>",
        "id": 290230979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658322036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/290230577\">said</a>:</p>\n<blockquote>\n<p>How viable would it be to generate another version of the graph with everything from mathlib at 50% opacity? My thinking was this would  styll show both LTE is a substantial body of work, but also that mathlib was essential in providing foundations for it.</p>\n</blockquote>\n<p>Unfortunately I have no idea how to do this.</p>",
        "id": 290231362,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658322236
    },
    {
        "content": "<p>I think you'd have to add an \"ismathlib\" flag to the graph on these lines:</p>\n<p><a href=\"https://github.com/leanprover-community/leancrawler/blob/3d5dc53e40636f106be37c67e6af84109d888679/leancrawler/crawler.py#L270-L273\">https://github.com/leanprover-community/leancrawler/blob/3d5dc53e40636f106be37c67e6af84109d888679/leancrawler/crawler.py#L270-L273</a></p>\n<p>which would at least ensure that data makes it to the .gexf</p>",
        "id": 290231682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658322427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/290230979\">said</a>:</p>\n<blockquote>\n<p>What I don't like is that the graph right now seems to say \"an obscure mathematical concept was important in about 10% of the results\" which I think is misleading (and unhelpful).</p>\n</blockquote>\n<p>I agree this looks strange, but if you look at the results we used it really seems that the only reasonable label is \"cardinal\" or \"ordinal\". Here is a random selection.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ordinal.nat_lt_card</span>\n<span class=\"n\">subrel.rel_embedding</span>\n<span class=\"n\">nat.add_succ_sub_one</span>\n<span class=\"n\">cardinal.mk_prod</span>\n<span class=\"n\">ordinal.card_zero</span>\n<span class=\"n\">cardinal.omega_mul_mk_eq</span>\n<span class=\"n\">ordinal.succ</span>\n<span class=\"n\">ordinal.has_add</span>\n<span class=\"n\">cardinal.sum_const'</span>\n<span class=\"n\">cardinal.mk_Prop</span>\n<span class=\"n\">ordinal.enum_lt_enum</span>\n<span class=\"n\">order_iso.symm_apply_apply</span>\n<span class=\"n\">ordinal.lift_lt</span>\n<span class=\"n\">rel_embedding.map_rel_iff</span>\n<span class=\"n\">ordinal.lsub_le_iff</span>\n<span class=\"n\">ordinal.nat_lt_omega</span>\n<span class=\"n\">ordinal.enum_typein</span>\n<span class=\"n\">cardinal.omega_le_mk</span>\n<span class=\"n\">cardinal.zero_mul</span>\n<span class=\"n\">cardinal.lift_le</span>\n<span class=\"n\">ordinal.lift_add</span>\n<span class=\"n\">cardinal.lift_lt</span>\n<span class=\"n\">cardinal.power</span>\n<span class=\"n\">ordinal.lift_down'</span>\n<span class=\"n\">covariant_swap_mul_le_of_covariant_mul_le</span>\n<span class=\"n\">initial_seg.unique_of_extensional</span>\n<span class=\"n\">cardinal.ord_nat</span>\n<span class=\"n\">cardinal.mk_vector</span>\n<span class=\"n\">ordinal.sub_nonempty</span>\n<span class=\"n\">empty_relation.is_well_order</span>\n<span class=\"n\">cardinal.has_add</span>\n<span class=\"n\">ordinal.lt_sub</span>\n<span class=\"n\">cardinal.mk_le_mk_of_subset</span>\n<span class=\"n\">strict_mono.compares</span>\n<span class=\"n\">cardinal.mk_pi</span>\n<span class=\"n\">cardinal.power_one</span>\n<span class=\"n\">fin.succ_above_pred</span>\n<span class=\"n\">ordinal.lt_lsub_iff</span>\n<span class=\"n\">strict_mono.order_iso</span>\n<span class=\"n\">ordinal.omega_is_limit</span>\n<span class=\"n\">order_iso.to_order_embedding</span>\n<span class=\"n\">order_iso.symm_apply_le</span>\n<span class=\"n\">ordinal.lift</span>\n<span class=\"n\">ordinal.add_le_of_limit</span>\n<span class=\"n\">ordinal.has_lt</span>\n<span class=\"n\">ordinal.typein_lt_type</span>\n<span class=\"n\">fin.exists_succ_above_eq</span>\n<span class=\"n\">ordinal.type_lt</span>\n<span class=\"n\">ordinal.card_typein</span>\n<span class=\"n\">fin.succ_above_eq_zero_iff</span>\n<span class=\"n\">is_order_connected_of_is_strict_total_order'</span>\n<span class=\"n\">ordinal.lift_one</span>\n<span class=\"n\">ordinal.infinite_pigeonhole</span>\n<span class=\"n\">is_well_order.is_irrefl</span>\n<span class=\"n\">is_extensional_of_is_strict_total_order'</span>\n<span class=\"n\">le_of_forall_lt</span>\n<span class=\"n\">fin.coe_zero</span>\n<span class=\"n\">cardinal.lift_mk_eq</span>\n<span class=\"n\">cardinal.one_lt_omega</span>\n<span class=\"n\">strict_order.cof</span>\n<span class=\"n\">principal_seg.has_coe_initial_seg</span>\n<span class=\"n\">order_iso.trans</span>\n<span class=\"n\">order_hom_class</span>\n<span class=\"n\">initial_seg.init_iff</span>\n<span class=\"n\">cardinal.lift_sup</span>\n<span class=\"n\">cardinal.sum</span>\n<span class=\"n\">cardinal.induction_on₃</span>\n<span class=\"n\">order_iso.symm</span>\n<span class=\"n\">cardinal.lift_add</span>\n<span class=\"n\">well_founded.min</span>\n<span class=\"n\">ordinal.zero_or_succ_or_limit</span>\n</code></pre></div>",
        "id": 290231835,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658322494
    },
    {
        "content": "<p>Are the cardinals in practice all finite?</p>",
        "id": 290232065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658322626
    },
    {
        "content": "<p>I don't know, but I suspect they're at most countable.</p>",
        "id": 290232335,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658322785
    },
    {
        "content": "<p>Can you relabel it \"finiteness\" then?</p>",
        "id": 290232371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658322809
    },
    {
        "content": "<p>Oh, I didn't save the gimp file... give me 10 minutes</p>",
        "id": 290232782,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658322999
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/W7JUgBCyEjb4g7BpN8_RPQhg/LTE_labels.png\">LTE_labels.png</a> <br>\nVoilà</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/W7JUgBCyEjb4g7BpN8_RPQhg/LTE_labels.png\" title=\"LTE_labels.png\"><img src=\"/user_uploads/3121/W7JUgBCyEjb4g7BpN8_RPQhg/LTE_labels.png\"></a></div>",
        "id": 290233665,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658323451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/290231682\">said</a>:</p>\n<blockquote>\n<p>I think you'd have to add an \"ismathlib\" flag to the graph on these lines:</p>\n<p><a href=\"https://github.com/leanprover-community/leancrawler/blob/3d5dc53e40636f106be37c67e6af84109d888679/leancrawler/crawler.py#L270-L273\">https://github.com/leanprover-community/leancrawler/blob/3d5dc53e40636f106be37c67e6af84109d888679/leancrawler/crawler.py#L270-L273</a></p>\n<p>which would at least ensure that data makes it to the .gexf</p>\n</blockquote>\n<p>Yes, the problem is how to find mathlib declaration. Once this is done gephi can handle the opacity. I agree it can be done, but I basically don't know any python...</p>",
        "id": 290246950,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658329231
    },
    {
        "content": "<p>A quick implementation would probably be</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s1\">'is_mathlib'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"/mathlib/\"</span> <span class=\"ow\">in</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">filename</span>\n</code></pre></div>",
        "id": 290249029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658330063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/290230979\">said</a>:</p>\n<blockquote>\n<p>What I don't like is that the graph right now seems to say \"an obscure mathematical concept was important in about 10% of the results\" which I think is misleading (and unhelpful).</p>\n</blockquote>\n<p>Cardinals are obscure? I think a more precise statement would be \"they prove a bunch of weird foundational results and that's it\" <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 290255807,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658332696
    },
    {
        "content": "<p>Can confirm that cardinals are pretty obscure.</p>",
        "id": 290260506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658334660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/290249029\">said</a>:</p>\n<blockquote>\n<p>A quick implementation would probably be</p>\n<p><div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"s1\">'is_mathlib'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"/mathlib/\"</span> <span class=\"ow\">in</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">filename</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I've added this line to the source code but nothing has changed.</p>",
        "id": 290284903,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658344691
    },
    {
        "content": "<p>Sorry, it worked perfectly!</p>",
        "id": 290286190,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658345225
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/u9ZNds3H-2ZihA4olE1EoJPL/graph.gephi\">graph.gephi</a> </p>\n<p>Here is the gephi file. It should be easy to set opacity of the note with <code>is_mathlib</code>, but for some reason the setting is ignored when I change it (I can change the color of a single node, but that's it).</p>",
        "id": 290298260,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658350852
    },
    {
        "content": "<p>What percentage of the nodes are core Lean?</p>",
        "id": 290299452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658351443
    },
    {
        "content": "<p>I've removed everything from core (at least, I think I did) to avoid having a gigantic node corresponding to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/id_tag\">docs#id_tag</a> and similar stuff</p>",
        "id": 290299852,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658351656
    },
    {
        "content": "<p>Including core there are 17381 nodes, so only 671 are in core. I don't know, maybe it was a better idea to keep them, now <code>nat</code> is not there.</p>\n<p>Note that in any case I used the <code>prune_foundations</code> function to avoid the definition of <code>eq</code> and stuff like that. Without removing anything there are 19538 nodes. The biggest one is <code>eq</code>, with a degree of 9902.</p>",
        "id": 290307182,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658355587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Actual.20graph/near/290298260\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/u9ZNds3H-2ZihA4olE1EoJPL/graph.gephi\">graph.gephi</a> </p>\n<p>Here is the gephi file. It should be easy to set opacity of the note with <code>is_mathlib</code>, but for some reason the setting is ignored when I change it (I can change the color of a single node, but that's it).</p>\n</blockquote>\n<p>I'm afraid I have no experience at all with (nor installation of!) gephi</p>",
        "id": 290309617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658357093
    }
]