[
    {
        "content": "<p>A quick update:<br>\nI defined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finite_product_condition</span> <span class=\"o\">[</span><span class=\"n\">limits.has_finite_products</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">ExtrDisc.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ExtrDisc</span><span class=\"o\">),</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Lean is being annoying here...</span>\n  <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">sigma</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">⟶</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">sigma.ι</span> <span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">limits.pi.lift</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ExtrSheafProd</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u'</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v'</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">limits.has_finite_products</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">ExtrDisc.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">ExtrDisc.finite_product_condition</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with the natural category structure obtained from the category structure for presheaves.</p>\n<p>And the following equivalence is now sorry-free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">Condensed_ExtrSheafProd_equiv</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u'</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">limits.has_limits</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"bp\">≌</span> <span class=\"n\">ExtrSheafProd.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Condensed_ExtrSheaf_equiv</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"o\">(</span><span class=\"n\">ExtrSheaf_ExtrSheafProd_equiv</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Sanity check</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Condensed_ExtrSheafProd_equiv_functor_obj_val</span>\n  <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u'</span><span class=\"o\">}}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">limits.has_limits</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Condensed</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Condensed_ExtrSheafProd_equiv</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">functor.obj</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">ExtrDisc_to_Profinite.op</span> <span class=\"bp\">⋙</span> <span class=\"n\">F.val</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>This was harder to formalize than I had expected, because <code>ExtrDisc</code> does not have pullbacks. Can anyone think of a reasonable generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.pretopology\">docs#category_theory.pretopology</a> that does not require pullbacks? </p>\n<p>I have an idea, essentially using the following fact about <code>ExtrDisc</code>: For any objects <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">X_1, X_2, B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub><mo>:</mo><msub><mi>X</mi><mi>i</mi></msub><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f_i : X_i \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, there is an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> and morphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>:</mo><mi>G</mi><mo>→</mo><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i : G \\to X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> making the obvious diagram commute, such whenever <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span>  and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>g</mi><mi>i</mi></msub><mo>:</mo><mi>H</mi><mo>→</mo><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">g_i : H \\to X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> also satisfy this condition, there is a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>→</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">H \\to G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>g</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">g_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> factors through <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo>→</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">H \\to G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> via <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (essentially, take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> to be a projective presentation of the pullback in <code>Profinite</code>). This is not as strong as having actual pullbacks, but seems to be good enough for most things.</p>",
        "id": 269044032,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642978321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Sheaves.20on.20ExtrDisc/near/269044032\">said</a>:</p>\n<blockquote>\n<p>This was harder to formalize than I had expected, because <code>ExtrDisc</code> does not have pullbacks. Can anyone think of a reasonable generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.pretopology\">docs#category_theory.pretopology</a> that does not require pullbacks? </p>\n</blockquote>\n<p>The Elephant defines essentially this exact thing - I decided not to put it in mathlib because I thought it was never useful! In particular, we replace the pullback part of the condition with this: <a href=\"http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/coverage#Definition\">http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/coverage#Definition</a>, and the other two conditions remain the same</p>",
        "id": 269053145,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642990668
    },
    {
        "content": "<p>I was confused because I thought I remembered seeing a Lean definition of a coverage but then I couldn't find it in mathlib--was it in your other library?</p>",
        "id": 269053327,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642990915
    },
    {
        "content": "<p>I don't think I ever wrote down a \"coverage\" as it is there - and most of the stuff which is about sites and not more general is in mathlib by now</p>",
        "id": 269053883,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642991290
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.grothendieck_topology\">docs#category_theory.grothendieck_topology</a> just to make sure!</p>",
        "id": 269053906,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642991351
    },
    {
        "content": "<p>Hmm maybe I imagined it then, or maybe it was in what Johan wrote in 2019.</p>",
        "id": 269055600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642993778
    },
    {
        "content": "<p>Anyways, I definitely think coverages are important, at least from a theoretical perspective. It's the least condition you can have on something defining a topology.</p>",
        "id": 269055702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642993909
    },
    {
        "content": "<p>I should mention that I spent most of my mathematical life completely happy with the definition on the stacks project, which is essentially mathlib's current def of a pretopology, pullbacks and all!</p>\n<p>In this case, the Grothendieck topology on <code>Profinite</code> is the one generated by a pretopology, and the one of <code>ExtrDisc</code> is the induced one. It would have made some of the proofs easier if I was able to obtain an induced pretopology on <code>ExtrDisc</code> (which I see now would require changing the def to use coverages!), but that's mostly just because I wanted to prove the equivalence with a \"simple\" sheaf condition on <code>ExtrDisc</code>. But the key part of the argument showing the equivalence with the condition involving only products is a separate thing (involving splitting a coequalizer). BTW, do we have some API for split (co)equalizers?</p>",
        "id": 269056247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642994579
    },
    {
        "content": "<p>Ha, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.is_split_coequalizer\">docs#category_theory.is_split_coequalizer</a></p>",
        "id": 269056331,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642994692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Indeed, that's what I did back in A'dam in 2019. And I got horribly stuck, because I had no clue what I was doing Leanwise.</p>",
        "id": 269061579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643001967
    },
    {
        "content": "<p>Another update: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"n\">preserves_colimits_Condensed_evaluation'</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">projective</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_limits</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_colimits</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_finite_biproducts</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">limits.preserves_colimits</span> <span class=\"o\">(</span><span class=\"n\">Condensed.evaluation</span> <span class=\"n\">C</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">preserves_colimits_Condensed_evaluation</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">⟩</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>is sorry-free, and as a result, we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">projective</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">projective</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>sorry-free as well!</p>",
        "id": 269121410,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643037924
    },
    {
        "content": "<p>Even better, we also have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Forgetting to presheaves, and restricting to `ExtrDisc` creates colimits.</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Condensed_to_ExtrDisc_presheaf_creates_colimits</span> <span class=\"o\">[</span><span class=\"n\">has_colimits</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">creates_colimits</span>\n  <span class=\"o\">((</span><span class=\"n\">Sheaf_to_presheaf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Condensed</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">⋙</span>\n  <span class=\"o\">(</span><span class=\"n\">whiskering_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">ExtrDisc_to_Profinite.op</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>which says that colimits can be computed objectwise using <code>ExtrDisc</code>.</p>",
        "id": 269122013,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643038153
    },
    {
        "content": "<p>Fantastic!</p>",
        "id": 269125422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643039577
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Condensed_Ab_has_enough_projective</span> <span class=\"o\">:</span> <span class=\"n\">enough_projectives</span> <span class=\"o\">(</span><span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/088847b7403edd8e4bd6f625140091e48a1b75cb/src/condensed/projective_resolution.lean#L258\">https://github.com/leanprover-community/lean-liquid/blob/088847b7403edd8e4bd6f625140091e48a1b75cb/src/condensed/projective_resolution.lean#L258</a></p>",
        "id": 269153566,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643050874
    },
    {
        "content": "<p>This is now sorry-free ?!?!</p>",
        "id": 269154576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643051272
    },
    {
        "content": "<p>yeah ;)</p>",
        "id": 269154592,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643051277
    },
    {
        "content": "<p>Nice! That took a long breath. Great milestone.</p>",
        "id": 269154682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643051305
    },
    {
        "content": "<p>I'm building now (after changing some imports) to double check everything is working.</p>",
        "id": 269154683,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643051305
    },
    {
        "content": "<p>Great job, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> !</p>",
        "id": 269154755,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1643051338
    },
    {
        "content": "<p>So now <code>Ext</code> actually means something ;)</p>",
        "id": 269154775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643051344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I still see 23 sorry's in <code>extr.lean</code>. Are those unrelated?</p>",
        "id": 269154820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643051368
    },
    {
        "content": "<p>try now</p>",
        "id": 269154866,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643051395
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">6</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">combinatorial_lemma</span><span class=\"bp\">/</span><span class=\"n\">profinite.lean</span>\n<span class=\"mi\">9</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">aux_lemmas.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">29</span>\n</code></pre></div>",
        "id": 269155046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643051449
    },
    {
        "content": "<p>Wonderful!</p>",
        "id": 269155051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643051454
    },
    {
        "content": "<p>Can't we add 8 <code>sorries</code>?</p>",
        "id": 269155117,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1643051486
    },
    {
        "content": "<p>0 &gt; 37</p>",
        "id": 269155434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643051615
    },
    {
        "content": "<p>It's even better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">combinatorial_lemma</span><span class=\"bp\">/</span><span class=\"n\">profinite.lean</span>\n<span class=\"mi\">9</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">aux_lemmas.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">24</span>\n</code></pre></div>",
        "id": 269165440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643054786
    }
]