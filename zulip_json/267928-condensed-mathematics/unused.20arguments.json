[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> helpfully worked on CI for LTE. As a result, here is a list of unused arguments (for now):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `unused_arguments` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> UNUSED ARGUMENTS. -/</span>\n\n\n<span class=\"c1\">-- for_mathlib/Gordan.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">missing</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_2 : fintype α] -/</span>\n\n<span class=\"c1\">-- for_mathlib/kronecker.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">matrix.kronecker_mul</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 14: [_inst_9 : decidable_eq n'] -/</span>\n\n<span class=\"c1\">-- for_mathlib/rational_cones.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">extended_le_span</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 11: (hx : x ∉ l) -/</span>\n\n<span class=\"c1\">-- normed_spectral.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">system_of_double_complexes.normed_spectral_conditions.of_le</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 8: [_inst_4 : fact (1 ≤ k')] (duplicate) -/</span>\n\n<span class=\"c1\">-- polyhedral_lattice/Hom.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">polyhedral_lattice.HomZ_map_equiv</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_2 : fact (r' ≤ 1)] -/</span>\n\n<span class=\"c1\">-- polyhedral_lattice/cech.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">PolyhedralLattice.Cech_conerve</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [_inst_1 : fact (polyhedral_lattice_hom.to_add_monoid_hom f).range.saturated] (duplicate) -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">PolyhedralLattice.Cech_augmentation_map</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [_inst_1 : fact (polyhedral_lattice_hom.to_add_monoid_hom f).range.saturated] (duplicate) -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">PolyhedralLattice.augmented_Cech_conerve</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [_inst_1 : fact (polyhedral_lattice_hom.to_add_monoid_hom f).range.saturated] (duplicate) -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">PolyhedralLattice.augmentation_map_equalizes</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [_inst_1 : fact (polyhedral_lattice_hom.to_add_monoid_hom f).range.saturated] (duplicate) -/</span>\n\n<span class=\"c1\">-- polyhedral_lattice/finsupp.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">finsupp.has_norm</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : fintype ι] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">generates_norm.finsupp_generators</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : fintype ι], argument 6: [_inst_3 : fintype J] -/</span>\n\n<span class=\"c1\">-- polyhedral_lattice/quotient.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">polyhedral_lattice.quotient_finite</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [H : fact L.saturated] -/</span>\n\n<span class=\"c1\">-- prop_92/concrete.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">partial_sum_geom</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: (hr : 0 ≤ r) -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">locally_constant.map_zero</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_2 : compact_space X] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">locally_constant.comap_map</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 7: [_inst_10 : topological_space Y] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">locally_constant.norm_map_aut</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [_inst_5 : t2_space Y], argument 5: [_inst_6 : totally_disconnected_space Y] -/</span>\n\n<span class=\"c1\">-- prop_92/prop_92.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">CLCFP.T_inv_sub_Tinv</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 10: [_inst_4 : fact (r' ≤ 1)] -/</span>\n\n<span class=\"c1\">-- pseudo_normed_group/CLC.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">CLC.T</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [_inst_2 : fact (0 &lt; r)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">CLCFP.Tinv</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: [_inst_1 : fact (0 &lt; r')] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">CLCFP.T_inv_eq</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: [_inst_1 : normed_with_aut r V] (duplicate), argument 7: [_inst_2 : fact (0 &lt; r)] (duplicate) -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">CLCFP.T_inv_app</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 7: [_inst_2 : fact (0 &lt; r)] (duplicate) -/</span>\n\n<span class=\"c1\">-- pseudo_normed_group/LC.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">LC.T_inv</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [_inst_2 : fact (0 &lt; r)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">LCFP.Tinv</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: [_inst_1 : fact (0 &lt; r')] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">LCFP.T</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 7: [_inst_2 : fact (0 &lt; r)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">breen_deligne.universal_map.norm_eval_LCFP_le</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 9: [_inst_1 : normed_with_aut r V], argument 10: [_inst_2 : fact (0 &lt; r)] -/</span>\n\n<span class=\"c1\">-- pseudo_normed_group/Tinv.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">SemiNormedGroup.equalizer.map_id</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_1 : category_theory.category J] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">CLCFPTinv₂</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 5: [_inst_6 : fact (0 &lt; r')] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">CLCFPTinv₂.map_norm_noninc</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 12: [_inst_6 : fact (c₂ ≤ c)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">CLCFPTinv₂.res</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 14: [_inst_6 : fact (c₂ ≤ c₁)], argument 16: [_inst_8 : fact (c₄ ≤ c₃)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">breen_deligne.universal_map.norm_eval_CLCFPTinv_le</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : normed_with_aut r V] (duplicate), argument 4: [_inst_2 : fact (0 &lt; r)] (duplicate) -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">breen_deligne.universal_map.eval_CLCFPTinv_norm_noninc</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : normed_with_aut r V] (duplicate), argument 4: [_inst_2 : fact (0 &lt; r)] (duplicate) -/</span>\n\n<span class=\"c1\">-- pseudo_normed_group/profinitely_filtered.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">profinitely_filtered_pseudo_normed_group.prod_pi_homeo_pi_prod</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : Π (i : ι), profinitely_filtered_pseudo_normed_group (M i)] (duplicate) -/</span>\n\n<span class=\"c1\">-- rescale/FiltrationPow.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">Filtration_cast_eq</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 5: [_inst_1 : fact (0 &lt; r')] -/</span>\n\n<span class=\"c1\">-- rescale/normed_group.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">SemiNormedGroup.nnnorm_to_rescale</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_1 : fact (0 &lt; r)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">SemiNormedGroup.of_rescale</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_1 : fact (0 &lt; r)] (duplicate) -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">SemiNormedGroup.iso_rescale</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_1 : fact (0 &lt; r)] (duplicate) -/</span>\n\n<span class=\"c1\">-- rescale/polyhedral_lattice.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">generates_norm.rescale_generators</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : polyhedral_lattice Λ], argument 5: [_inst_2 : fintype J] -/</span>\n\n<span class=\"c1\">-- statement.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">first_target_stmt</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 5: [_inst_3 : fact (r &lt; r')], argument 6: [_inst_4 : fact (r &lt; 1)], argument 11: [_inst_7 : ∀ (i : ℕ), fact (0 &lt; κ i)] -/</span>\n\n<span class=\"c1\">-- thm95/col_exact.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.CLCFP'</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_3 : fact (0 &lt; r')], argument 3: [_inst_5 : fact (r' &lt; 1)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.FLC_arrow_hom'</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_3 : fact (0 &lt; r')], argument 3: [_inst_5 : fact (r' &lt; 1)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.col_complex_rescaled.move_pls2</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_3 : fact (0 &lt; r')] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.col_complex_rescaled.T_inv_sub_Tinv_f_succ</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 5: [_inst_4 : fact (r &lt; r')] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.col_exact'_aux1</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : BD.suitable κ] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.col_exact'_aux2</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : BD.suitable κ] -/</span>\n\n<span class=\"c1\">-- thm95/constants/default.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.universal_constants.b</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: [_inst_3 : fact (0 &lt; r)], argument 7: [_inst_4 : fact (0 &lt; r')], argument 8: [_inst_5 : fact (r &lt; r')], argument 9: [_inst_6 : fact (r' ≤ 1)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.universal_constants.K₁_spec</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: [_inst_3 : fact (0 &lt; r)], argument 7: [_inst_4 : fact (0 &lt; r')], argument 8: [_inst_5 : fact (r &lt; r')], argument 9: [_inst_6 : fact (r' ≤ 1)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.universal_constants.c₀_aux</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: [_inst_1 : breen_deligne.package.adept BD κ κ'], argument 7: [_inst_2 : BD.data.very_suitable r r' κ] -/</span>\n\n<span class=\"c1\">-- thm95/default.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.IH</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: [_inst_4 : fact (r &lt; 1)] -/</span>\n\n<span class=\"c1\">-- thm95/double_complex.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.Cech_nerve</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_5 : fact (r' ≤ 1)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.cosimplicial_system_of_complexes</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 8: [_inst_4 : fact (r &lt; r')] -/</span>\n\n<span class=\"c1\">-- thm95/homotopy.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">norm_NSH_h_le</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 20: [_inst_8 : fact (thm95.universal_constants.c₀ r r' BD κ κ' m Λ ≤ c)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">NSH_δ_res</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 5: [_inst_3 : fact (r &lt; r')] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">NSH_δ</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 13: [_inst_7 : breen_deligne.package.adept BD κ κ'] -/</span>\n\n<span class=\"c1\">-- thm95/pfpng_iso.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv.Pow_mul_comm_obj_equiv</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_1 : fact (0 &lt; r')] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv.Pow_rescale_aux</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_1 : fact (0 &lt; r')] -/</span>\n\n<span class=\"c1\">-- thm95/polyhedral_iso.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">PolyhedralLattice.Hom_finsupp_equiv</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : fact (0 &lt; N)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">PolyhedralLattice.Hom_cosimplicial_zero_iso_aux</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : fact (0 &lt; N)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">PolyhedralLattice.Hom_sum</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 7: [_inst_3 : fact (r' ≤ 1)] -/</span>\n\n<span class=\"c1\">-- thm95/row_iso.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">FiltrationPow_rescale_iso</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_5 : fact (r' ≤ 1)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.eval_FP_mul</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_4 : fact (0 &lt; r')], argument 4: [_inst_6 : fact (r' ≤ 1)], argument 11: [_inst_7 : fact (0 &lt; N)] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.mul_complex_iso</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 10: [_inst_5 : fact (r &lt; r')] -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">thm95.quux</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_4 : fact (0 &lt; r')], argument 4: [_inst_6 : fact (r' ≤ 1)], argument 6: [_inst_7 : fact (0 &lt; N)] -/</span>\n</code></pre></div>",
        "id": 244106314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624862070
    },
    {
        "content": "<p>(Of course, this is a recursive process: once we've fixed these, new arguments may have become unused.)</p>",
        "id": 244106332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624862100
    }
]