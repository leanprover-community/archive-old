[
    {
        "content": "<p>If anyone is looking for something to get started with the second half: we'll need the definition of <em>extremally disconnected sets</em> and the fact that they are projective objects in Profinite.<br>\nHere's a tiny bit that starts on this (from way before LTE was a thing): <a href=\"https://github.com/ImperialCollegeLondon/condensed-sets/blob/master/src/extremally_disconnected.lean\">https://github.com/ImperialCollegeLondon/condensed-sets/blob/master/src/extremally_disconnected.lean</a></p>",
        "id": 244916749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625479541
    },
    {
        "content": "<p>Feel free to copy-pasta this into the LTE repo, but it could also go directly to mathlib.</p>",
        "id": 244916824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625479564
    },
    {
        "content": "<p>Johan, I am happy to create a PR to mathlib, but why don't you want to do it yourself?  Is there some trap?</p>",
        "id": 244919411,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625481335
    },
    {
        "content": "<p>No, it's just that it isn't finished yet.</p>",
        "id": 244922027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625483036
    },
    {
        "content": "<p>I think I only did one direction of \"extr.disc = projective\"</p>",
        "id": 244922087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625483054
    },
    {
        "content": "<p>Ok, I updated the code, since some lemmas had changed names, others were already in mathlib!</p>\n<p>PR  <a href=\"https://github.com/leanprover-community/mathlib/issues/8196\">#8196</a></p>",
        "id": 244922237,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625483166
    },
    {
        "content": "<p>Now we'll need a linter checking that nobody writes \"extremely disconnected\" instead of \"extremally  disconnected\".</p>",
        "id": 244932761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625489909
    },
    {
        "content": "<p>(and then a brain linter to prevent me from reading extremely anyway).</p>",
        "id": 244932810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625489945
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compact_t2.projective</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Z</span><span class=\"o\">],</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Z</span><span class=\"o\">],</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g_sur</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"n\">h</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Don't you think it would be better to just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/CompHaus\">docs#CompHaus</a>?</p>",
        "id": 244934087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625490714
    },
    {
        "content": "<p>and maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.projective\">docs#category_theory.projective</a></p>",
        "id": 244934308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625490844
    },
    {
        "content": "<p>(I guess we would have to prove that <code>epi = surjective</code> in <code>CompHaus</code>, but this should be easy)</p>",
        "id": 244934439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625490928
    },
    {
        "content": "<p>Certainly! This code is very old.</p>",
        "id": 244934996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625491251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Do you feel like implementing these changes? (I can understand if you are too busy with the order refactor, and such.)</p>",
        "id": 244937004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625492408
    },
    {
        "content": "<p>I will give it a go and will let you know if I need help!</p>",
        "id": 244937039,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625492431
    },
    {
        "content": "<p>Especially the <code>CompHaus</code> part seems doable.  I am not sure about the categorical notion of projectivity, since I never used categories in Lean.</p>",
        "id": 244937090,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625492466
    },
    {
        "content": "<p>In fact, here is the first issue that I come across.  </p>\n<p>I changed the definition of <code>compact_t2.projective</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">compact_t2.projective</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">CompHaus</span><span class=\"o\">},</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g_sur</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"n\">h</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Lean now does not like <code>  let h : stone_cech X → Y := stone_cech_extend ht</code> since </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">stone_cech_extend</span> <span class=\"n\">ht</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">ht</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">continuous</span> <span class=\"n\">t</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">continuous</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">damiano</span><span class=\"bp\">/</span><span class=\"n\">Matematica</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_poly</span><span class=\"bp\">-</span><span class=\"n\">reverse</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">extremally_disconnected.lean</span><span class=\"o\">:</span><span class=\"mi\">85</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"n\">stone_cech_extend</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"n\">stone_cech</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"n\">stone_cech</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I believe that this has to do with some weird \"coercion to sort\" business that is going on.  Is there an easy fix for this, or should I consider proving a version of <code>stone_cech_extend</code> that would apply with the current context?</p>",
        "id": 244938009,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625493000
    },
    {
        "content": "<p>Use <code>CompHaus.{u}</code>. I think the issue is that you've got stuff in different universes.</p>",
        "id": 244938119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625493046
    },
    {
        "content": "<p>Thanks Johan!  This fixed the first issue!</p>\n<p>I had noticed that <code>Y Z</code> were assumed in the same universe the first time around, but disregarded it with the change...</p>\n<p>(Btw, this solves completely the first broken proof.)</p>",
        "id": 244938230,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625493117
    },
    {
        "content": "<p>The second issue, in the second and last broken proof, appears similar, then:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"n\">continuous_id</span> <span class=\"n\">f_cont</span> <span class=\"n\">f_sur</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">g_sec</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>gives error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">h</span> <span class=\"n\">continuous_id</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">continuous_id</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">continuous</span> <span class=\"n\">id</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">continuous</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n</code></pre></div>",
        "id": 244938336,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625493167
    },
    {
        "content": "<p>Hmm, what is the context here?</p>",
        "id": 244938772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625493372
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">CompHaus</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">compact_t2.projective</span> <span class=\"bp\">↥</span><span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">↥</span><span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">Z₁</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">U</span><span class=\"bp\">ᶜ.</span><span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"n\">Z₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"n\">ff</span><span class=\"o\">},</span>\n<span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Z₁</span> <span class=\"bp\">∪</span> <span class=\"n\">Z₂</span><span class=\"o\">,</span>\n<span class=\"n\">hZ₁</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">Z₁</span><span class=\"o\">,</span>\n<span class=\"n\">hZ₂</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">Z₂</span><span class=\"o\">,</span>\n<span class=\"n\">hZ</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n<span class=\"n\">h_compl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">subtype.val</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">Z₂</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">=</span> <span class=\"n\">subtype.val</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">Z₁</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"bp\">↥</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">prod.fst</span> <span class=\"bp\">∘</span> <span class=\"n\">subtype.val</span><span class=\"o\">,</span>\n<span class=\"n\">f_cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">f_sur</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"n\">compact_space</span> <span class=\"bp\">↥</span><span class=\"n\">Z</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 244938943,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625493454
    },
    {
        "content": "<p>Maybe <code>Z</code> should be made into a <code>CompHaus</code>?</p>",
        "id": 244938980,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625493478
    },
    {
        "content": "<p>Hmm, maybe life becomes easier if you switch to <code>CompHaus</code> (the category) and the categorical version of <code>projective</code> at the same time.</p>",
        "id": 244939326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625493635
    },
    {
        "content": "<p>Because now you have objects in the category, but you are not using the morphisms.</p>",
        "id": 244939353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625493647
    },
    {
        "content": "<p>Ok, makes sense.  I will try to make the change, but any pointer would be appreciated!</p>",
        "id": 244939433,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625493682
    },
    {
        "content": "<p>Otoh, it's not clear to me that we want this statement in <code>CompHaus</code> instead of <code>Profinite</code>. And if we bundle... then we need to choose (or do both)</p>",
        "id": 244939452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625493692
    },
    {
        "content": "<p>The unbundled version didn't care.</p>",
        "id": 244939474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625493702
    },
    {
        "content": "<p>For this approach, would that not also require <code>X</code> to be in <code>CompHaus</code>, somewhat defeating the purpose?  I may be not understanding the Lean-categorical side of the story, though...</p>",
        "id": 244939604,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625493749
    },
    {
        "content": "<p>Ok, maybe I am being silly: you would require the map between <code>Y</code> and <code>Z</code> to be in the <code>CompHaus</code> category and the others outside?</p>",
        "id": 244939734,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625493814
    },
    {
        "content": "<p>The problem is: if <code>X : CompHaus</code>, then you cannot have <code>X : Profinite</code>.</p>",
        "id": 244939955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625493950
    },
    {
        "content": "<p>Whereas with <code>(X : Type) [compact_space X] [t2_space X]</code> you could always add <code>[totally_disconnected_space X]</code> whenever you need it.</p>",
        "id": 244940049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625493983
    },
    {
        "content": "<p>I am starting to think that, at this level, it might make sense to keep the assumptions split around.  Maybe bundling can come later, once all the preparatory stuff is done?</p>",
        "id": 244940061,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625493988
    },
    {
        "content": "<p>I agree. But I only have intuition to back that up.</p>",
        "id": 244940194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625494068
    },
    {
        "content": "<p>In general mathlib seems to follow the pattern \"treat unbundled first\", and then \"bundle it up\"</p>",
        "id": 244940262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625494090
    },
    {
        "content": "<p>(And when we don't, it looks like we regret it later. See e.g., the bundled hom refactor. We're kinda thinking that maybe we want to resurrect the unbundled stuff [although not as typeclasses, but ordinary predicates] and have both approaches here as well.)</p>",
        "id": 244940365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625494154
    },
    {
        "content": "<p>This can all be handled with the fact that the forgetful functor from Profinite to CompHaus reflects epimorphisms.</p>",
        "id": 244942741,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625495390
    },
    {
        "content": "<p>Sure, but you don't want to do that every time you use it, right?</p>",
        "id": 244942833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625495418
    },
    {
        "content": "<p>What do you mean? Just add an instance</p>",
        "id": 244942875,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625495441
    },
    {
        "content": "<p>hmm, maybe I'm confused about what you want to do...</p>",
        "id": 244943003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625495516
    },
    {
        "content": "<p>Are you talking about restating everything for <code>Profinite</code> with 1-line proofs that reduce it to <code>CompHaus</code>?</p>",
        "id": 244943193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625495592
    },
    {
        "content": "<p>Okay, now I'm confused. What's the endgame for this?</p>",
        "id": 244944584,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625496308
    },
    {
        "content": "<p>At some point we want to show that <code>Cond(Ab)</code> has enough projectives. And this will be an ingredient.</p>",
        "id": 244944961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625496541
    },
    {
        "content": "<p>I haven't thought hard about how to get to <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> in Lean.</p>",
        "id": 244944979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625496556
    },
    {
        "content": "<p>If I recall correctly, the consensus is to define <code>Cond(Type)</code> as sheaves on <code>Profinite</code>?</p>",
        "id": 244945117,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625496607
    },
    {
        "content": "<p>(as opposed to, say, sheaves on <code>CompHaus</code>)</p>",
        "id": 244945136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625496625
    },
    {
        "content": "<p>Yes, I think sheaves on Profinite seems to be the best approach.</p>",
        "id": 244945217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625496694
    },
    {
        "content": "<p>Balancing in the middle between <code>ExtrDisc</code> and <code>CompHaus</code>.</p>",
        "id": 244945246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625496712
    },
    {
        "content": "<p>So, if I am following the discussion, we will want to bundle <code>Profinite</code> more than <code>ExtrDisc</code> and <code>CompHaus</code>, right?  If so, does this mean that the PR above does not need change?</p>",
        "id": 244945527,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625496868
    },
    {
        "content": "<p>We already have <code>Profinite</code> and <code>CompHaus</code> as categories in mathlib. <code>ExtrDisc</code> would be a follow-up PR.</p>",
        "id": 244945747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625496993
    },
    {
        "content": "<p>It's not clear to me what the best Lean definition of \"projective space\" is. The categorical predicate only works for bundled objects. My intuition says we might want to go unbundled before going bundled.</p>",
        "id": 244945821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625497059
    },
    {
        "content": "<p>If all we care about is existence, then we don't really need all this stuff. By some adjunctions you would know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[T]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span> is projective when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> is a projective object of <code>Profinite</code>, and now you  just have to prove that there are enough such  projective objects, which you can get as a consequence of the <code>StoneCech</code> adjunction</p>",
        "id": 244946008,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625497176
    },
    {
        "content": "<p>The only thing that has me slightly concerned is the argument using Zorn's lemma at the bottom of page 12 of <code>Condensed.pdf</code>. I feel like this will create a universe bump.</p>",
        "id": 244946385,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625497365
    },
    {
        "content": "<p>I think Zorn's lemma is overkill there, don't worry about this.</p>",
        "id": 244949117,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625498934
    },
    {
        "content": "<p>Well, I think my worry about the universe bump is unrelated to Zorn.</p>",
        "id": 244949353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625499053
    },
    {
        "content": "<p>Hmm, I guess one question is what your definition of \"a class of objects generates\" is. What is your definition?</p>",
        "id": 244949588,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625499200
    },
    {
        "content": "<p>I don't think we have such a definition yet in mathlib</p>",
        "id": 244949654,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625499239
    },
    {
        "content": "<p>But even if we define the notion of a generating class as saying something like \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(X_i,-)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Ho</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">i \\in I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> are jointly faithful\", won't we have to take a large colimit to obtain a projective presentation of a given condensed abelian group?</p>",
        "id": 244950372,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625499619
    },
    {
        "content": "<p>I don't think it's large. I think the index category is the category of pairs of a compact projective <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">X_i\\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. This is still small.</p>",
        "id": 244950447,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625499680
    },
    {
        "content": "<p>Well, it's small in this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>-small setting</p>",
        "id": 244950648,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625499794
    },
    {
        "content": "<p>But aren't you kind of following that? Where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span> is some universe cutoff?</p>",
        "id": 244950688,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625499826
    },
    {
        "content": "<p>Hmm... in lean, unless we're very careful, this would involve quantifying as something like: Forall <code>X : Cond(Ab.{u})</code>, <code>[compact_projective X]</code>, blah, which will force us into universe level <code>u + 1</code>.</p>",
        "id": 244950832,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625499910
    },
    {
        "content": "<p>Hmm. OK, I think I'd have to learn much more about how Lean handles universes to comment on this</p>",
        "id": 244951044,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625500046
    },
    {
        "content": "<p>A minimized bit of code is probably something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">X</span>\n<span class=\"c1\">-- Σ (X : Type u), X : Type (u+1)</span>\n</code></pre></div>",
        "id": 244951194,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625500141
    },
    {
        "content": "<p>Hmm I think you should somewhere ensure that your extremally disconnected sets are in a smaller universe than your abelian groups</p>",
        "id": 244951268,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625500203
    },
    {
        "content": "<p>Did you already account for that?</p>",
        "id": 244951298,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625500209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/extremally.20disconnected.20sets/near/244951298\">said</a>:</p>\n<blockquote>\n<p>Did you already account for that?</p>\n</blockquote>\n<p>I don't think so.</p>",
        "id": 244951322,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625500238
    },
    {
        "content": "<p>And the only way to do that is to start everything off with <code>Cond(Ab.{u+1})</code>.</p>",
        "id": 244951407,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625500310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> what do you think?</p>",
        "id": 244951488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625500342
    },
    {
        "content": "<p>My instinct would be to use the <code>small</code> predicate rather than adjust the universe levels, but I'll need to think about this a little</p>",
        "id": 244951738,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625500543
    },
    {
        "content": "<p>My primary concern is whether the universe solution is good enough - I'd like to verify that Prop 1.7 works and we don't hit the issue mentioned in Warning 2.14; if that is an issue then my existing definition of <code>Cond</code> won't be good enough</p>",
        "id": 244952013,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625500740
    },
    {
        "content": "<p>But with our pyknotic setup, I don't think Warning 2.14 will be a problem, right? Or are you saying that the problem is still there, but now on a universe level? I guess so...</p>",
        "id": 244952626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625501147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/extremally.20disconnected.20sets/near/244952626\">said</a>:</p>\n<blockquote>\n<p>But with our pyknotic setup, I don't think Warning 2.14 will be a problem, right? Or are you saying that the problem is still there, but now on a universe level? I guess so...</p>\n</blockquote>\n<p>I'm saying that I'm not (yet) convinced the problem is gone in our setup</p>",
        "id": 244952936,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625501374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> What is the plan with <a href=\"https://github.com/leanprover-community/mathlib/issues/8196\">#8196</a> ? Would it be better to keep the code in the LTE repo for now? Then it can evolve a bit, and once it is mature and the api is complete, then we PR it to mathlib?</p>",
        "id": 248810266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628490309
    },
    {
        "content": "<p>That is ok for me.</p>\n<p>Besides, I have not found much time to devote to Lean this summer and probably the situation will not change for the month of August, so slowing down is a bit of a necessity for me!</p>",
        "id": 248810497,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1628490578
    },
    {
        "content": "<p>I'm still not sure whether we actually need this definition in LTE. I'm under the impression that all we care about is that these things are projective objects in, say, <code>Profinite</code>. Do we ever actually need the following characterization?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">extremally_disconnected</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">open_closure</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 248849534,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628517500
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 248849888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628517622
    },
    {
        "content": "<p>So my suggestion is to just use <code>[is_projective X]</code> for <code>X : Profinite</code> when we need it.</p>",
        "id": 248849962,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628517650
    },
    {
        "content": "<p>I think that what we need is: extr.disc = projective in <code>Profinite</code> and also that stone-cech is extr.disc.<br>\nTogether, that gives us enough projectives.</p>",
        "id": 248850006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628517669
    },
    {
        "content": "<p>I guess we should prove that the stone cech compactification of a discrete set is projective in Profinite, but that should be easy</p>",
        "id": 248850038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628517681
    },
    {
        "content": "<p>We'll also need <code>ExtrDisc</code> as a category. Do you just want to define it as the subtype</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span> <span class=\"bp\">//</span> <span class=\"n\">is_projective</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 248850189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628517729
    },
    {
        "content": "<p>Why do we need it as a category?</p>",
        "id": 248850223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628517743
    },
    {
        "content": "<p>To show that <code>Cond(Foo)</code> is the same as certain presheaves on <code>ExtrDisc</code></p>",
        "id": 248850286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628517771
    },
    {
        "content": "<p>That way we can get <code>[enough_projectives Cond(Ab)]</code></p>",
        "id": 248850333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628517787
    },
    {
        "content": "<p>If I understand things correctly...</p>",
        "id": 248850389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628517804
    },
    {
        "content": "<p>Right, but for this we just take a presheaf on <code>Profinite</code> and ask for some condition in terms of <code>[is_projective X]</code>, etc., which we prove is equivalent to the sheaf condition.</p>",
        "id": 248850458,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628517832
    },
    {
        "content": "<p>Also, proving that <code>Cond(Ab)</code> is an abelian category might be easier if we work with sheaves on <code>ExtrDisc</code>.</p>",
        "id": 248850460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628517833
    },
    {
        "content": "<p>Ok... do you think you can stub that out?</p>",
        "id": 248850561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628517864
    },
    {
        "content": "<p>Sure.</p>",
        "id": 248850576,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628517871
    },
    {
        "content": "<p>Feel free to use as many <code>sorry</code>s as you want.</p>",
        "id": 248850589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628517875
    },
    {
        "content": "<p>I guess if sheafifying is easier over <code>ExtrDisc</code> then that's one good reason to have this.</p>",
        "id": 248850632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628517892
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.preadditive.projective</span>\n<span class=\"kn\">import</span> <span class=\"n\">condensed.condensed</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Profinite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"c1\">-- TODO: generalize</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">projective</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span><span class=\"n\">_</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">factors</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">E</span> <span class=\"n\">X</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">limits.initial.to</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_initial</span> <span class=\"o\">(</span><span class=\"n\">as_small</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as_small.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- I assume we want this to be a prop, but `is_terminal` and `preserves_limits_of_shape`</span>\n<span class=\"c1\">-- both contain data.</span>\n<span class=\"kd\">structure</span> <span class=\"n\">extr_sheaf_cond</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_terminal</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">is_terminal</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)))))</span>\n<span class=\"o\">(</span><span class=\"n\">preserves</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">as_small.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">projective</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">projective</span> <span class=\"n\">Y</span><span class=\"o\">],</span>\n  <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">preserves_limit</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proetale_topology'</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"o\">(</span><span class=\"n\">as_small.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">extr_sheaf_iff</span> <span class=\"o\">:</span> <span class=\"n\">extr_sheaf_cond</span> <span class=\"n\">F</span> <span class=\"bp\">↔</span> <span class=\"n\">presheaf.is_sheaf</span> <span class=\"n\">proetale_topology'</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Profinite</span>\n</code></pre></div>\n<p>This is more-or-less what I had in mind.</p>",
        "id": 248855897,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628519997
    },
    {
        "content": "<p>Unfortunately, we will have to deal with this <code>as_small</code> nonsense <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 248856052,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628520057
    },
    {
        "content": "<p>(pushed to <code>condensed/proj_cond.lean</code> on master)</p>",
        "id": 248856741,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628520366
    },
    {
        "content": "<p>merci!</p>",
        "id": 248860220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628521716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> If we ever define analytic rings <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">A</mi><mo separator=\"true\">,</mo><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\mathcal A, \\mathcal M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathcal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mclose\">)</span></span></span></span> in lean, then we'll probably want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\">M</span></span></span></span> to be a mathlib functor from <code>ExtrDisc</code> to condensed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\">A</span></span></span></span>-modules.<br>\n(This definition is somewhere on my mental todo-list/roadmap.)</p>",
        "id": 248875517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628528142
    },
    {
        "content": "<p>The alternative would be to make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\">M</span></span></span></span> a hands-on functorial pi-type defined for <code>(X : Profinite) [is_projective X]</code></p>",
        "id": 248875615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628528190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> that's one option. Another is to have some general construction which builds a <code>Cond foo</code> from such a pi-type satisfying something like <code>extr_sheaf_cond</code>.</p>",
        "id": 248886865,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628533282
    },
    {
        "content": "<p>On paper, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\">M</span></span></span></span> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>extr.disc.</mtext><mo>→</mo><msubsup><mtext>Mod</mtext><mi mathvariant=\"script\">A</mi><mtext>cond</mtext></msubsup></mrow><annotation encoding=\"application/x-tex\">\\text{extr.disc.} \\to \\text{Mod}^{\\text{cond}}_{\\mathcal A}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">extr.disc.</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1804479999999997em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Mod</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9334479999999998em;\"><span style=\"top:-2.4530000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathcal mtight\">A</span></span></span></span><span style=\"top:-3.1473400000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">cond</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 248891666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628535451
    },
    {
        "content": "<p>I thought this can be extended to <code>Profinite</code> in a formal way, for example by expressing <code>X : Profinite</code> as a quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><msup><mi>X</mi><mi>δ</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\beta X^\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.043548em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>δ</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span></span></span></span></span></span></span></span> is the underlying set with the discrete topology.</p>",
        "id": 248893259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628536171
    },
    {
        "content": "<p>I.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a colimit of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mo stretchy=\"false\">(</mo><mi>β</mi><msup><mi>X</mi><mi>δ</mi></msup><msub><mo>×</mo><mi>X</mi></msub><mi>β</mi><msup><mi>X</mi><mi>δ</mi></msup><mo stretchy=\"false\">)</mo><mo>⇉</mo><mi>β</mi><msup><mi>X</mi><mi>δ</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\beta (\\beta X^\\delta \\times_X \\beta X^\\delta) \\rightrightarrows \\beta X^\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">×</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⇉</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.043548em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 248893395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628536231
    },
    {
        "content": "<p>The correct values of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\">M</span></span></span></span> on general profinite sets will be \"derived\", in the sense that they land in the derived category but not necessarily in the heart. Only for extr.disc do you get honest modules.</p>",
        "id": 248893885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628536457
    },
    {
        "content": "<p>Ah ok.</p>",
        "id": 248894030,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628536520
    },
    {
        "content": "<p>Wait, so how does the left adjoint from Proposition 7.5 of condensed.pdf reconcile with your comment <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 248895174,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628537056
    },
    {
        "content": "<p>Ha, I might have misunderstood things... <span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> would you mind correcting/explaining?</p>",
        "id": 248895798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628537344
    },
    {
        "content": "<p>Ooh wait. That left adjoint is colimit preserving. So it preserves colimits of modules. But that doesn't mean that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mi mathvariant=\"script\">A</mi><mo stretchy=\"true\">‾</mo></munder><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\underline{\\mathcal A}[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68333em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20000000000000007em;\"><span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> is the colimit of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mi mathvariant=\"script\">A</mi><mo stretchy=\"true\">‾</mo></munder><mo stretchy=\"false\">[</mo><msub><mi>T</mi><mi>j</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\underline{\\mathcal A}[T_j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68333em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20000000000000007em;\"><span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>,<br>\nwhere <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is profinite, and a colimit of some extr.disc <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> as Adam sketched above.</p>",
        "id": 248896530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628537690
    },
    {
        "content": "<p>The functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi>o</mi><msub><mi>d</mi><munder accentunder=\"true\"><mi mathvariant=\"script\">A</mi><mo stretchy=\"true\">‾</mo></munder></msub><mo>→</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Mod_{\\underline{\\mathcal{A}}} \\to Cond(Set)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.01594em;vertical-align:-0.32150000000000006em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283309999999999em;\"><span style=\"top:-2.85em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord underline mtight\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6833299999999999em;\"><span style=\"top:-2.804em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line mtight\" style=\"border-bottom-width:0.049em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mtight\"><span class=\"mord mathcal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2450000000000001em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32150000000000006em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> has a left adjoint <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>↦</mo><munder accentunder=\"true\"><mi mathvariant=\"script\">A</mi><mo stretchy=\"true\">‾</mo></munder><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">S \\mapsto \\underline{\\mathcal{A}}[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.68333em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20000000000000007em;\"><span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span>, right?</p>",
        "id": 248896815,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628537833
    },
    {
        "content": "<p>yeah, I just realized that... so what I'm saying is nonsense</p>",
        "id": 248896848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628537857
    },
    {
        "content": "<p>which means that I'm still confused</p>",
        "id": 248896887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628537875
    },
    {
        "content": "<p>(latex + zulip = hard)</p>",
        "id": 248896948,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628537892
    },
    {
        "content": "<p>The question is whether you want the left adjoint on the abelian level, or on the derived level. On the abelian level, what Adam said is correct. But in general, to compute the correct functor on the derived level, you have to use hypercovers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mo>∙</mo></msub><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S_\\bullet\\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16111499999999998em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> by extremally disconnecteds and then write down the whole complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">[</mo><msub><mi>S</mi><mo>∙</mo></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M[S_\\bullet]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16111499999999998em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>. Very often, it turns out that this lives in degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> when it does on extremally disconnecteds -- I think in all cases I've ever considered -- but there's no reason this is always the case.</p>",
        "id": 248904804,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1628541482
    },
    {
        "content": "<p>(See also the related Warning 7.6)</p>",
        "id": 248905488,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1628541784
    },
    {
        "content": "<p>For the record: I'm working on showing that <code>stone_cech</code> is projective.</p>",
        "id": 248944974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628577265
    },
    {
        "content": "<p>Sounds good. Some of the proofs from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Compactum/src\">src#Compactum</a> should be similar</p>",
        "id": 248972658,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628599103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> does lean already know that an <code>epi</code> in <code>Profinite</code> is surjective?</p>",
        "id": 248974525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628600103
    },
    {
        "content": "<p>More or less, but not in those terms. I have somewhere in LTE that surjective implies a topological quotient map in Profinite</p>",
        "id": 248974727,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628600229
    },
    {
        "content": "<p>I have an epi, and I need to show that it is surjective. I hope this follows out of the discrete_quotient stuff somehow?</p>",
        "id": 248974804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628600276
    },
    {
        "content": "<p>Maybe... But I think there is more to it... I can help more in about an hour (on mobile right now)</p>",
        "id": 248976274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628600947
    },
    {
        "content": "<p>Will we need that extremally disconnected implies projective in CompHaus? It looks like knowing we enough projectives will be... enough.</p>",
        "id": 249082587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628671593
    },
    {
        "content": "<p>Otherwise this is clearly something I could do.</p>",
        "id": 249082604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628671607
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/issues/8613\">#8613</a> is all we need for now</p>",
        "id": 249082975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628671861
    },
    {
        "content": "<p>You mean you don't even need  <a href=\"https://github.com/leanprover-community/mathlib/issues/8196\">#8196</a>?</p>",
        "id": 249087269,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628675202
    },
    {
        "content": "<p>Adam convinced me that we probably won't need it.</p>",
        "id": 249087325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628675257
    },
    {
        "content": "<p>It's currently in a somewhat weird state of being half done.</p>",
        "id": 249087428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628675318
    },
    {
        "content": "<p>And half-way between a natural concrete statement and something nicely packaged in category theory.</p>",
        "id": 249087465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628675356
    },
    {
        "content": "<p>I agree. So I don't think that PR should go into mathlib as is.</p>",
        "id": 249087616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628675466
    },
    {
        "content": "<p>Let me tag it as WIP</p>",
        "id": 249087626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628675476
    },
    {
        "content": "<p>Ooh, I see now that you reviewed it yesterday.</p>",
        "id": 249087725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628675536
    },
    {
        "content": "<p>I didn't really review it, I flagged small local optimizations.</p>",
        "id": 249088025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628675770
    },
    {
        "content": "<p>But I didn't comment on the overall structure and statements.</p>",
        "id": 249088042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628675784
    }
]