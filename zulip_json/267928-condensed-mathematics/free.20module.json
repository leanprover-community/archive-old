[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.free\">docs#module.free</a> is in mathlib, so we can update the definition of polyhedral lattice in LTE.</p>",
        "id": 243381510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624282071
    },
    {
        "content": "<p>I can do that tomorrow, if nobody does it today (-;</p>",
        "id": 243381598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624282095
    },
    {
        "content": "<p>(I've finally battled through most of my todo list of tasks that I had neglected in the last two months.)</p>",
        "id": 243381646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624282121
    },
    {
        "content": "<p>I think we need to know that <code>finite R M</code> <code>free R M</code> implies the existence of a finite basis (is this always true? even for noncommutative rings?)</p>",
        "id": 243383940,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624283127
    },
    {
        "content": "<p>Why don't you ask Lean? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 243384189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624283238
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.fin_basis\">docs#finite_dimensional.fin_basis</a> but it is only for fields (and uses <code>finite_dimensional</code>, that means <code>is_noetherian</code>)</p>",
        "id": 243386653,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624284231
    },
    {
        "content": "<p>I guess we can do this in steps. First refactor LTE to use <code>module.free</code>, and generalise some stuff to the noncomm. case in a later step.</p>",
        "id": 243387050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624284373
    },
    {
        "content": "<p>I've pushed a start to the <code>poly-fin-free</code> branch</p>",
        "id": 243495787,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624357055
    },
    {
        "content": "<p>I've already introduced 3 <code>sorry</code>s <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 243495805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624357067
    },
    {
        "content": "<p>I pushed. There is 1 sorry left:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">module.finite</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module.free</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">module.free.choose_basis_index</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 243506738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624364178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Does this easily follow from some of the stuff that you've recently been doing?</p>",
        "id": 243506808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624364247
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Over any nontrivial ring, the existence of a finite spanning set implies that any basis is finite.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">basis_fintype_of_finite_spans</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(from <a href=\"https://github.com/leanprover-community/mathlib/tree/ibn4\">branch#ibn4</a>) give what you need?</p>",
        "id": 243507549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1624364682
    },
    {
        "content": "<p>(Unfortunately I'm barely here for the next two days, and then entirely offline for two weeks, so this branch is not coming to mathlib in a hurry.)</p>",
        "id": 243507593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1624364709
    },
    {
        "content": "<p>Yeah, that looks like exactly what I need</p>",
        "id": 243507679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624364756
    },
    {
        "content": "<p>Thanks for the link. Maybe I'll just copy-pasta some of that, to get LTE working again</p>",
        "id": 243507762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624364780
    },
    {
        "content": "<p>I've already down to the \"find correct homes for lemmas\" stage, so you may need to hunt around for a few prerequisites about cardinals, I don't quite remember what that proof uses.</p>",
        "id": 243507830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1624364818
    }
]