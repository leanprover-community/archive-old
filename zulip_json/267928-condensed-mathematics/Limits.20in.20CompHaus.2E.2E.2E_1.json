[
    {
        "content": "<p>I made some progress toward showing that <code>CompHausFilt..._1</code> has limits. So far, I've defined essentially all of the  <code>comphaus_filt_pseudo_normed_group</code> structure on what should be the limit of a diagram. There are three sorry's (all about continuity) left for this here: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/8b5d6a422d7815f23aafa2da8ea99f04632c0297/src/pseudo_normed_group/category.lean#L451\">https://github.com/leanprover-community/lean-liquid/blob/8b5d6a422d7815f23aafa2da8ea99f04632c0297/src/pseudo_normed_group/category.lean#L451</a></p>\n<p>There is also a lot of room for cleanup + deduplication in this file. If anyone has time and wants to take a crack at these sorry's and/or do some cleanup, that would be very helpful! I'm done for today and have a full day of teaching tomorrow, so I won't be able to come back to this until later this week (hopefully).</p>",
        "id": 252376879,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631051497
    },
    {
        "content": "<p>I haven't done any research level Lean for a long time now (I've just spent two months helping UGs to do Lean, and this finished a few days ago) so I might well have a look at these tomorrow (afternoon UK) (but if someone else wants to have a go at these before then, feel free!)</p>",
        "id": 252381745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631054647
    },
    {
        "content": "<p>After sleeping on this, I wonder whether <code>cone_point_type</code> here <br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/00980af145fe97427c31ce919b11633dd2c4800c/src/pseudo_normed_group/category.lean#L113\">https://github.com/leanprover-community/lean-liquid/blob/00980af145fe97427c31ce919b11633dd2c4800c/src/pseudo_normed_group/category.lean#L113</a><br>\nshould be defined <em>explicitly</em> (i.e. as a quotient of a sigma type whose terms are subtypes of a pi type, mimicking the explicit description of colimits/limits in <code>Type</code>). This would probably help to make things true by definition as opposed to using, e.g., the stuff from <br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/concrete.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/concrete.lean</a></p>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what do you think?</p>",
        "id": 252463860,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631109416
    },
    {
        "content": "<p>Although </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ef</span> <span class=\"n\">cone_point_type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">colimit</span> <span class=\"o\">(</span><span class=\"n\">cone_point_diagram</span> <span class=\"n\">G</span> <span class=\"bp\">⋙</span> <span class=\"n\">lim</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is a nice definition, I think.</p>",
        "id": 252464116,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631109491
    },
    {
        "content": "<p>I'll take a look. Although I think that <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has much better feeling for how to setup these things.</p>",
        "id": 252464275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631109549
    },
    {
        "content": "<p>If all we care about at the end of the day is the fact that some category has limits, then it shouldn't really matter. But if we need to actually say something explicit about the <em>elements</em> of these limits, then we should probably set up the theory as explicitly as possible.</p>",
        "id": 252464889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631109728
    },
    {
        "content": "<p>Right, mathlib does have such explicit constructions for other concrete categories as well. So it might make sense to do the same thing here.</p>",
        "id": 252466211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631110230
    },
    {
        "content": "<p>I've just been reading this stuff in an attempt to get back into the loop. It's not just that the category we're interested in is concrete, it's that the actual category itself is defined using <code>bundled</code>. Do we have some sort of way of going from an explicit unbundled construction of limits in, say, groups (stated as a definition plus a theorem claiming a universal property expressed in the language of <code>monoid_hom</code>s between <code>group</code>s) to a construction of limits in <code>Group := bundled group</code>?</p>",
        "id": 252472212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631112178
    },
    {
        "content": "<p>It's not quite bundled in this case.</p>",
        "id": 252472291,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631112205
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/00980af145fe97427c31ce919b11633dd2c4800c/src/pseudo_normed_group/category.lean#L50\">https://github.com/leanprover-community/lean-liquid/blob/00980af145fe97427c31ce919b11633dd2c4800c/src/pseudo_normed_group/category.lean#L50</a></p>",
        "id": 252472387,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631112237
    },
    {
        "content": "<p>Then is it in our interests to make both objects and morphisms bundled?</p>",
        "id": 252472466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631112249
    },
    {
        "content": "<p>We added the exhaustive condition on the filtration, which is not required from the typeclass.</p>",
        "id": 252472472,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631112251
    },
    {
        "content": "<p>The goal of this stuff is to be able to take a functor from <code>Fintype</code> to <code>CompHausFiltPseuNormGroup_1</code> and extend it to a functor from <code>Profinite</code> by taking limits in the category <code>CompHausFiltPseuNormGroup_1</code>. We will then compose with the functor to <code>CompHausFiltPseuNormGroup</code> (without the <code>_1</code>), and eventually a functor from <code>CompHausFiltPseuNormGroup</code> to <code>Cond Ab</code>.</p>",
        "id": 252472984,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631112409
    },
    {
        "content": "<p>As far as I know, mathlib doesn't have a construction of limits outside of category theory, except for very special things like products, so I'm not really sure what you mean <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> about taking limits of groups in an unbundled context.</p>",
        "id": 252473336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631112507
    },
    {
        "content": "<p>I mean proving \"limits exist in the category of groups\" without ever mentioning categories and just formalising it using <code>group</code>, and then a magic function turns this into existence of limits in the category</p>",
        "id": 252474200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631112728
    },
    {
        "content": "<p>How would you specify a diagram for which you want to take a limit without using a functor?</p>",
        "id": 252474438,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631112799
    },
    {
        "content": "<p>The closest thing we have to this is what Johan was saying above, that in certain explicit concrete categories we have an explicit description of (co)limits, e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Group.limit_group\">docs#Group.limit_group</a></p>",
        "id": 252475150,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631113001
    },
    {
        "content": "<p>Meh, I was just thinking of using a poset but of course a general limit will be more general :-/ It would work for products but not limits.</p>",
        "id": 252475883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631113206
    },
    {
        "content": "<p>Anyway, I think I'm convinced that it's worth trying for an explicit construction. I'll try to change this soon</p>",
        "id": 252476082,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631113266
    },
    {
        "content": "<p>I made some more progress here, and I remade the definitions much more explicit (hopefully this will be helpful in the future. At least for now, we can prove more things by <code>refl</code>). </p>\n<p>The last few sorry's should be doable, in case anyone wants to give it a shot.<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/7b651c4e6d56756d472aa68009606cb4146c3fe3/src/pseudo_normed_group/category.lean#L598\">https://github.com/leanprover-community/lean-liquid/blob/7b651c4e6d56756d472aa68009606cb4146c3fe3/src/pseudo_normed_group/category.lean#L598</a></p>\n<p>(This is in the branch <code>explicit-comphaus...</code>)</p>",
        "id": 252546062,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631141522
    },
    {
        "content": "<p>Okay, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_limit</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">has_limit.mk</span> <span class=\"o\">⟨</span><span class=\"n\">limit_cone</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">limit_cone_is_limit</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span> <span class=\"n\">CompHausFiltPseuNormGrp₁</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">has_limit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}⟩</span>\n</code></pre></div>\n<p>are sorry-free.</p>\n<p>Next up we should construct the functor from <code>CompHausFiltPseuNormGroup</code> to <code>Cond Ab</code>.</p>",
        "id": 252565776,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631157759
    }
]