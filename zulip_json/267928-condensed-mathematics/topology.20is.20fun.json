[
    {
        "content": "<p>Still having a look at what I could clean up a bit before PRing to mathlib, I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- is there a short proof using filters? jmc couldn't find it</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_compact</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">inducing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_compact</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">compact_of_finite_subcover</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">Œπ</span> <span class=\"n\">U</span> <span class=\"n\">hU</span> <span class=\"n\">hsU</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">V</span> <span class=\"bp\">‚àß</span> <span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hf.exists_open</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">choose</span> <span class=\"n\">V</span> <span class=\"n\">hV‚ÇÅ</span> <span class=\"n\">hV‚ÇÇ</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">),</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.image_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set.preimage_Union</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">set.subset.trans</span> <span class=\"n\">hsU</span> <span class=\"o\">(</span><span class=\"n\">set.Union_subset_Union</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hV‚ÇÇ</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hs.elim_finite_subcover</span> <span class=\"n\">V</span> <span class=\"n\">hV‚ÇÅ</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.image_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set.preimage_Union</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">set.subset.trans</span> <span class=\"n\">ht</span> <span class=\"o\">(</span><span class=\"n\">set.Union_subset_Union</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">set.Union_subset_Union</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">-</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hV‚ÇÇ</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230189498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615670375
    },
    {
        "content": "<p>I say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_compact</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">inducing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_compact</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">introsI</span> <span class=\"n\">F</span> <span class=\"n\">F_ne_bot</span> <span class=\"n\">F_le</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_in</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">cluster_pt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)‚ü©</span> <span class=\"o\">:=</span>\n    <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"bp\">‚â§</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìü</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map_mono</span> <span class=\"n\">F_le</span>\n                 <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">ùìü</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map_principal</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_in</span><span class=\"o\">],</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cluster_pt</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hf.nhds_eq_comap</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">filter.map_ne_bot_iff</span><span class=\"o\">,</span> <span class=\"n\">filter.push_pull'</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230189507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615670394
    },
    {
        "content": "<p>That comment was just sitting there, waiting for you to come along (-;</p>",
        "id": 230189703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615670586
    },
    {
        "content": "<p>Let's make it a bit more readable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_compact</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">inducing</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_compact</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">introsI</span> <span class=\"n\">F</span> <span class=\"n\">F_ne_bot</span> <span class=\"n\">F_le</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_in</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">cluster_pt</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)‚ü©</span> <span class=\"o\">:=</span>\n    <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"bp\">‚â§</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìü</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map_mono</span> <span class=\"n\">F_le</span>\n                 <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">ùìü</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map_principal</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x_in</span><span class=\"o\">],</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"bp\">‚äì</span> <span class=\"n\">F</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">filter.map_ne_bot_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">rwa</span> <span class=\"k\">calc</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"bp\">‚äì</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"bp\">ùìù</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚äì</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hf.nhds_eq_comap</span>\n                        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚äì</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"o\">:</span>  <span class=\"n\">filter.push_pull'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230190032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615671006
    },
    {
        "content": "<p>You have a double <code> </code> before <code>filter.push_pull'</code> on the final line</p>",
        "id": 230190089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615671080
    },
    {
        "content": "<p>Note how the crucial thing you were missing is the push-pull formula for filters (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.push_pull'\">docs#filter.push_pull'</a>), which is indeed pretty subtle. Fortunately we needed it for perfectoid spaces, so it's there.</p>",
        "id": 230190213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615671235
    },
    {
        "content": "<p>By the way, is there any reason this compactness lemma was not stated as an iff? The other direction is trivial since <code>f</code> is continuous.</p>",
        "id": 230191057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615672183
    },
    {
        "content": "<p>Is it used only in <code>compact_space (filtration (Œõ ‚Üí+ M) c)</code>?</p>",
        "id": 230191158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615672277
    },
    {
        "content": "<p>I also see in that file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">t2_space</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">embedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">t2_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hUV</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">t2_separation</span> <span class=\"o\">(</span><span class=\"n\">hf.inj.ne</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚Åª¬π'</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n      <span class=\"n\">hf.continuous.is_open_preimage</span> <span class=\"n\">_</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n      <span class=\"n\">hf.continuous.is_open_preimage</span> <span class=\"n\">_</span> <span class=\"n\">hV</span><span class=\"o\">,</span>\n      <span class=\"n\">set.mem_preimage.mpr</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">set.mem_preimage.mpr</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">set.disjoint_iff_inter_eq_empty</span> <span class=\"n\">at</span> <span class=\"n\">hUV</span> <span class=\"bp\">‚ä¢</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hUV.preimage</span> <span class=\"n\">_</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230193151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615673375
    },
    {
        "content": "<p>I shouldn't enjoy it so much, but I can't resist PRing it as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">t2_space</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">embedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">t2_iff_nhds.mpr</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hf.inj</span> <span class=\"bp\">$</span> <span class=\"n\">eq_of_nhds_ne_bot</span>\n<span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hf.to_inducing.nhds_eq_comap</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">comap_inf</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">not_ne_bot.mpr</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 230193176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615673388
    },
    {
        "content": "<p>Here the key trick from mathlib is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">t2_iff_nhds</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">},</span> <span class=\"n\">ne_bot</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"bp\">‚äì</span> <span class=\"bp\">ùìù</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 230193340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615673449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/topology.20is.20fun/near/230191158\">said</a>:</p>\n<blockquote>\n<p>Is it used only in <code>compact_space (filtration (Œõ ‚Üí+ M) c)</code>?</p>\n</blockquote>\n<p>I think so, yes</p>",
        "id": 230193343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615673450
    },
    {
        "content": "<p>If you want to make it iffy, go ahead (-;</p>",
        "id": 230193393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615673474
    },
    {
        "content": "<p>The push pull statement is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo>‚à©</mo><msup><mi>f</mi><mrow><mo>‚àí</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>‚à©</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">f(S\\cap f^{-1}(T))=f(S)\\cap T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">‚à©</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚àí</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">‚à©</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> for generalised sets.</p>",
        "id": 230194201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615674377
    },
    {
        "content": "<p>If S' is the largest subfilter of S such that <code>tendsto S' T</code> then the filter in question is the smallest subfilter T' of T such that <code>tendsto S' T'</code>.</p>",
        "id": 230194387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615674637
    }
]