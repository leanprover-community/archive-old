[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/banach.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/banach.lean</a> contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"bp\">‚â§</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">normed_space'</span> <span class=\"bp\">ùïú</span> <span class=\"n\">p</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">normed_space'</span> <span class=\"bp\">ùïú</span> <span class=\"n\">p'</span> <span class=\"o\">(</span><span class=\"n\">as_normed_space'</span> <span class=\"n\">p'</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">c</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p'</span>   <span class=\"o\">:=</span> <span class=\"n\">fact.out</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp</span>  <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span>    <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hp'</span> <span class=\"o\">(</span><span class=\"n\">fact.out</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_def</span><span class=\"o\">,</span> <span class=\"n\">norm_def</span><span class=\"o\">,</span> <span class=\"n\">down_smul</span><span class=\"o\">,</span> <span class=\"n\">normed_space'.norm_smul</span><span class=\"o\">,</span> <span class=\"n\">real.mul_rpow</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">real.rpow_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"n\">hp.ne'</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">norm_nonneg</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">real.rpow_nonneg_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">norm_nonneg</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>In other words: for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup><mo>‚â§</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p&#x27; \\le p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-Banach space is also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup></mrow><annotation encoding=\"application/x-tex\">p&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span></span></span></span>-Banach.</p>",
        "id": 249072733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628663329
    },
    {
        "content": "<p>Nice! What needs to be done in order to state the challenge in its Ext form?</p>",
        "id": 249072817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628663421
    },
    {
        "content": "<p>We need the functor <code>TopAbGrp =&gt; Cond(Ab)</code>, and a definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mrow><mo>&lt;</mo><mi>p</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_{&lt;p}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737000000000002em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> as condensed abelian group.</p>",
        "id": 249072859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628663502
    },
    {
        "content": "<p>Ooh, and we need to fill in the sorry that <code>Cond(Ab)</code> has enough projectives.</p>",
        "id": 249072867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628663519
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> and <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> were working on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\">M</span></span></span></span> spaces, but maybe on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Z((T))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">))</span></span></span></span>-versions, not on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-versions.</p>",
        "id": 249072918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628663564
    },
    {
        "content": "<p>Indeed, the fact that it is a pfng-valued functor is almost done, but mainly working with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}((T))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">))</span></span></span></span>-version.</p>",
        "id": 249083485,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628672253
    },
    {
        "content": "<p>Great!</p>",
        "id": 249083511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628672278
    },
    {
        "content": "<p>We'll need that version as an intermediate step in the proof.</p>",
        "id": 249083564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628672294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> Do we even need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mrow><mo>&gt;</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_{&gt;r})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and/or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mrow><mo>&lt;</mo><mi>p</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_{&lt; p}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737000000000002em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> for Thm 1.1 of the challenge? I think we only need the \"convergent\" versions right? The overconvergent versions only matter if we want to go all the way to analytic rings.</p>",
        "id": 249083858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628672510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/p-Banach.20spaces/near/249083858\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> Do we even need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mrow><mo>&gt;</mo><mi>r</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_{&gt;r})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and/or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mrow><mo>&lt;</mo><mi>p</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_{&lt; p}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.22737000000000002em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> for Thm 1.1 of the challenge? I think we only need the \"convergent\" versions right? The overconvergent versions only matter if we want to go all the way to analytic rings.</p>\n</blockquote>\n<p>You don't need the \"overconvergent\" versions for the challenge (but of course you do for the analytic ring structures later).</p>",
        "id": 249092828,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1628679648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> pointed out that our definition of <code>p</code>-Banach spaces isn't really correct. We bundle a <code>p</code>-norm. But there shouldn't be a norm, just the assertion that the topology is induced by a <code>p</code>-norm.</p>\n<p>Recording this here, so that we fix it at some point.</p>",
        "id": 272170662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645041718
    },
    {
        "content": "<p>I had to do something like that for Polish spaces. You can have a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/759be3a933834b3822992b15d7ec112105d8b6db/src/topology/metric_space/polish.lean#L58\">https://github.com/leanprover-community/mathlib/blob/759be3a933834b3822992b15d7ec112105d8b6db/src/topology/metric_space/polish.lean#L58</a> , the design seems to work pretty well.</p>",
        "id": 272172951,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1645042833
    },
    {
        "content": "<p>‚Ä¢ More seriously, we might also be missing completeness <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 272175252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645044079
    },
    {
        "content": "<p>I had proposed something along the lines of <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/banach.lean#L141\">https://github.com/leanprover-community/lean-liquid/blob/master/src/banach.lean#L141</a> but the definition does not currently make sense: it does not connect to the topology, it was just meant to be a first trial, by defining what a <code>p-norm</code> was and how to state that a <code>p</code>-Banach is a space admitting one.</p>",
        "id": 272181589,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1645046923
    },
    {
        "content": "<p>As this does not seem to be needed soon, I was planning to come back and improve this later on, and thanks <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  for the pointer at your solution for Polish spaces.</p>",
        "id": 272181663,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1645046967
    },
    {
        "content": "<p>I'm curious to know how Lean records things like a \"p-normable\" tvs. In HoTT, for instance, one would have a type whereby the p-norm giving rise to the topology \"merely\" exists as part of the data. One could of course use some theorem characterising the topology, but then this might make a bad API.</p>",
        "id": 272201886,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1645059965
    },
    {
        "content": "<p>I'm not sure what you mean by \"\"merely\" exists as part of the data\", but if I were to make a guess, that would be similar to how we define <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric_space\">docs#metric_space</a> . We could of course do something similar in this case.</p>",
        "id": 272204669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645062617
    },
    {
        "content": "<p>The point is that both the metric and topology are part of the data, along with props ensuring their compatibility.</p>",
        "id": 272204787,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645062724
    },
    {
        "content": "<p>(in this case the topology is a couple of layers down, under the pseudo metric space, then under the uniform space structure, so you will have some links to click if you look through the docs)</p>",
        "id": 272204843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645062784
    },
    {
        "content": "<p>I mean in the technical sense: a piece of data of type T \"merely\" exists, if the proposition ||T|| is true, where ||-|| is the (-1)-truncation construction.</p>",
        "id": 272205650,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1645063637
    },
    {
        "content": "<p>Ah ok. So in that case we could say \"there exists a metric (or p-norm) which induces the given topology\". I suppose that's how we might formalize this in lean.</p>",
        "id": 272205770,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645063770
    },
    {
        "content": "<p>\"merely\" existing could be done using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/trunc\">docs#trunc</a></p>",
        "id": 272210604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645069331
    },
    {
        "content": "<p>But since we are fully using classical logic anyways, we might just as well use <code>‚àÉ</code>.</p>",
        "id": 272210631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645069374
    },
    {
        "content": "<p>Oh, that would do it. I guess my brain is automatically set to constructive mode when dealing with type theory <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 272226267,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1645086087
    },
    {
        "content": "<p>I pushed a fix. So <code>p</code>-Banach spaces are now complete TVS's whose topology is induced by a <code>p</code>-norm.<br>\n(As opposed to coming equipped with a distinguished <code>p</code>-norm.)</p>",
        "id": 272836738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645550520
    }
]