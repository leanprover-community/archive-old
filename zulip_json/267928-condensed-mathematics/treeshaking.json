[
    {
        "content": "<p>I think it would be useful to have a list of all declarations in LTE that are currently not in the dependency tree of <code>thm95</code>.<br>\nI've done a fair amount of refactoring, and I think there's quite a lot of old code that can now be removed. Of course we can prune the system manually, but if someone wants to automate generating this list, that would be cool.<br>\n(We should probably still manually do the actual deletion, because some things on the list might actually be useful in the future.)</p>",
        "id": 236457577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619591903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> added a tactic to mathlib for doing precisely this.<br>\nIf you <code>import tactic.unused_decls</code> and add <code>@[main_declaration]</code> to the theorem you want and then call <code>#list_unused_decls []</code> below it finds all the unused decls in the current file. Assuming you want all of them you can add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">list_unused_decls</span> <span class=\"o\">[</span><span class=\"s2\">\"src/breen_deligne/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/eg.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/functorial_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/suitable.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/universal_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/combinatorial_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/additive_functor.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/add_monoid_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/arrow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/big_operators_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/curry.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/dfinsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/equalizers.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/extend_from_nat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/filter_at_top_bot.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Fintype/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/free_abelian_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Gordan.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_examples.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_monoid_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/int_grading_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/kronecker.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/linear_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_bound_by.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_equalizer.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_quotient.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/order_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pi_nat_apply.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/preadditive_category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/functorial_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/locally_constant.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/nhds.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pseudo_metric.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/quotient_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/real_Inf.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/augmented.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/specific_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Top/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/tsum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/uniform_space_cauchy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/by_exactI_hack.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/type_pow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/lem97.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/liquid.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/analysis.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/Vhat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/bounded.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/Mbar_le.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/controlled_exactness.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/normed_with_aut.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_snake.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_spectral.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/partition.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cech.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cosimplicial.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/direct_sum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/Hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/topology.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/prop_92.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/breen_deligne.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/homotopy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/profinitely_filtered.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/system_of_complexes.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/with_Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/polyhedral_lattice.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/simplicial/alternating_face_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/double.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/rescale.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/truncate.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/double_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/modify_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/polyhedral_iso.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/row_iso.lean\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>the output i got tagging <code>thm95</code> as the main declaration is at:<br>\n<a href=\"https://gist.github.com/alexjbest/57d5fead003dddd6931e8c0edcccc364\">https://gist.github.com/alexjbest/57d5fead003dddd6931e8c0edcccc364</a></p>",
        "id": 236594545,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619651621
    },
    {
        "content": "<p>I don't know how sensible the output is tbh, there looks like a huge amount of stuff at present</p>",
        "id": 236594999,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619651890
    },
    {
        "content": "<p>Thanks. I'm actually not surprised that the list is long (-;</p>",
        "id": 236612107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619665485
    },
    {
        "content": "<p>I'll sort the list, and then start working on the cleanup (-;</p>",
        "id": 236612118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619665504
    },
    {
        "content": "<p>There are also lots of entries generated by <code>@[simps]</code>. Of course it would be cool if those can be filtered out. But I don't think it's too important.<br>\nThe sorted output looks pretty useful to me. I'll report back how many of the 840 lines remain after a first go at cleaning up (-;</p>",
        "id": 236612874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619666191
    },
    {
        "content": "<p>Oooh, one reason why the output is so long is because <code>thm95/default.lean</code> currently doesn't import and use the main result of <code>thm95/row_iso.lean</code>. But when I try to do that import, I get timeouts )-;</p>",
        "id": 236614536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619667826
    },
    {
        "content": "<p>One reason I want to do the treeshaking now, is to make the entire project faster to compile again. Hopefully that will help in debugging what is wrong with that import between two of the high-level files in the project.</p>",
        "id": 236614602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619667882
    },
    {
        "content": "<p>Wow, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.find_unused</span>\n<span class=\"kn\">import</span> <span class=\"n\">thm95.default</span>\n<span class=\"kn\">import</span> <span class=\"n\">thm95.row_iso</span>\n<span class=\"bp\">#</span><span class=\"n\">list_unused_decls</span> <span class=\"o\">[</span><span class=\"s2\">\"src/breen_deligne/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/eg.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/functorial_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/suitable.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/universal_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/combinatorial_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/additive_functor.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/add_monoid_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/arrow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/big_operators_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/curry.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/dfinsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/equalizers.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/extend_from_nat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/filter_at_top_bot.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Fintype/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/free_abelian_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Gordan.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_examples.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_monoid_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/int_grading_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/kronecker.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/linear_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_bound_by.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_equalizer.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_quotient.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/order_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pi_nat_apply.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/preadditive_category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/functorial_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/locally_constant.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/nhds.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pseudo_metric.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/quotient_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/real_Inf.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/augmented.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/specific_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Top/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/tsum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/uniform_space_cauchy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/by_exactI_hack.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/type_pow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/lem97.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/liquid.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/analysis.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/Vhat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/bounded.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/Mbar_le.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/controlled_exactness.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/normed_with_aut.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_snake.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_spectral.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/partition.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cech.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cosimplicial.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/direct_sum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/Hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/topology.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/prop_92.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/breen_deligne.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/homotopy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/profinitely_filtered.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/system_of_complexes.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/with_Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/polyhedral_lattice.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/simplicial/alternating_face_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/double.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/rescale.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/truncate.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/double_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/modify_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/polyhedral_iso.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/row_iso.lean\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>at the top of my file (and <code>thm95</code> and <code>thm95.row_map_eq_sum_comp</code> marked as <code>main_declaration</code>) I get ~1800 lines of output <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 236617151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619670300
    },
    {
        "content": "<p>Ooh, I used it wrong. I added the attribute in the files directly. But there they are unknown (-;</p>",
        "id": 236617274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619670415
    },
    {
        "content": "<p>So this is what you need:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.find_unused</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">breen_deligne.eg</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorial_lemma</span>\n<span class=\"kn\">import</span> <span class=\"n\">thm95.row_iso</span>\n<span class=\"kn\">import</span> <span class=\"n\">liquid</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">main_declaration</span><span class=\"o\">]</span> <span class=\"n\">thm95</span> <span class=\"n\">thm95.row_map_eq_sum_comp</span> <span class=\"n\">first_target</span> <span class=\"n\">lem98</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">main_declaration</span><span class=\"o\">]</span> <span class=\"n\">breen_deligne.eg.adept</span> <span class=\"n\">breen_deligne.eg.very_suitable</span>\n\n<span class=\"bp\">#</span><span class=\"n\">list_unused_decls</span> <span class=\"o\">[</span><span class=\"s2\">\"src/breen_deligne/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/eg.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/functorial_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/suitable.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/universal_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/combinatorial_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/additive_functor.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/add_monoid_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/arrow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/big_operators_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/curry.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/dfinsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/equalizers.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/extend_from_nat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/filter_at_top_bot.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Fintype/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/free_abelian_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Gordan.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_examples.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_monoid_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/int_grading_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/kronecker.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/linear_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_bound_by.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_equalizer.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_quotient.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/order_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pi_nat_apply.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/preadditive_category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/functorial_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/locally_constant.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/nhds.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pseudo_metric.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/quotient_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/real_Inf.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/augmented.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/specific_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Top/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/tsum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/uniform_space_cauchy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/by_exactI_hack.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/type_pow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/lem97.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/liquid.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/analysis.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/Vhat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/bounded.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/Mbar_le.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/controlled_exactness.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/normed_with_aut.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_snake.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_spectral.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/partition.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cech.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cosimplicial.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/direct_sum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/Hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/topology.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/prop_92.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/breen_deligne.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/homotopy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/profinitely_filtered.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/system_of_complexes.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/with_Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/polyhedral_lattice.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/simplicial/alternating_face_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/double.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/rescale.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/truncate.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/double_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/modify_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/polyhedral_iso.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/row_iso.lean\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 236617307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619670469
    },
    {
        "content": "<p>And then</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cat unused-liquid-presort.lean <span class=\"p\">|</span> cut -f2 -d<span class=\"s1\">' '</span> &gt; unused-liquid-col2\ngit grep -ohf unused-liquid-col2.lean <span class=\"p\">|</span> sort <span class=\"p\">|</span> uniq &gt; unused-liquid.sorted\n</code></pre></div>\n<p>which gives a file with ~150 lines</p>",
        "id": 236618602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619671635
    },
    {
        "content": "<p>Hmm, that's of course dangerous, because some of the lines might not have matched due to open namespaces...</p>",
        "id": 236618808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619671820
    },
    {
        "content": "<p>So it's not a very good way of filtering out the auto-generated stuff</p>",
        "id": 236618825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619671834
    },
    {
        "content": "<p>I think it would be really useful if Lean could also filter this list so that it only prints <code>def</code>s</p>",
        "id": 236620451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619673249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> do you know if you can check whether a decl is def or lemma via metaprogramming?</p>",
        "id": 236620467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619673271
    },
    {
        "content": "<p>That would also get rid of all the autogenerated stuff, because I don't think there are autogenerated defs.</p>",
        "id": 236620572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619673374
    },
    {
        "content": "<p>Yes you can check with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/declaration.is_definition\">docs#declaration.is_definition</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/declaration.is_theorem\">docs#declaration.is_theorem</a> (this matches lemmas too)</p>",
        "id": 236620629,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619673456
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/declaration.is_auto_generated\">docs#declaration.is_auto_generated</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/declaration.is_auto_or_internal\">docs#declaration.is_auto_or_internal</a> which may be useful?</p>",
        "id": 236620715,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619673547
    },
    {
        "content": "<p>aah, thanks...</p>",
        "id": 236620867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619673663
    },
    {
        "content": "<p>Is there a way to get a list out of <code>unused_decls</code>? instead of manually copy-pasting the output message with all the <code>#print</code> bla?</p>",
        "id": 236620896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619673706
    },
    {
        "content": "<p>Aside: it looks like we never use the category <code>ProFiltPseuNormGrp</code>, only <code>ProFiltPseuNormGrpWithTinv</code>. This list is pretty useful.</p>",
        "id": 236620950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619673749
    },
    {
        "content": "<p>I've already removed &gt; 600 lines from the project.</p>",
        "id": 236620954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619673760
    },
    {
        "content": "<p>I just pushed</p>",
        "id": 236621065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619673891
    },
    {
        "content": "<p>does something like this do what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.find_unused</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"o\">(</span>\n<span class=\"k\">do</span> <span class=\"n\">ds</span> <span class=\"bp\">←</span> <span class=\"n\">all_unused</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"s2\">\"src/breen_deligne/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/eg.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/functorial_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/suitable.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/universal_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/combinatorial_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/additive_functor.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/add_monoid_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/arrow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/big_operators_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/curry.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/dfinsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/equalizers.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/extend_from_nat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/filter_at_top_bot.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Fintype/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/free_abelian_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Gordan.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_examples.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_monoid_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/int_grading_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/kronecker.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/linear_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_bound_by.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_equalizer.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_quotient.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/order_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pi_nat_apply.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/preadditive_category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/functorial_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/locally_constant.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/nhds.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pseudo_metric.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/quotient_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/real_Inf.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/augmented.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/specific_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Top/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/tsum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/uniform_space_cauchy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/by_exactI_hack.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/type_pow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/lem97.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/liquid.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/analysis.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/Vhat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/bounded.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/Mbar_le.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/controlled_exactness.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/normed_with_aut.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_snake.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_spectral.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/partition.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cech.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cosimplicial.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/direct_sum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/Hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/topology.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/prop_92.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/breen_deligne.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/homotopy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/profinitely_filtered.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/system_of_complexes.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/with_Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/polyhedral_lattice.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/simplicial/alternating_face_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/double.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/rescale.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/truncate.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/double_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/modify_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/polyhedral_iso.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/row_iso.lean\"</span><span class=\"o\">],</span>\n<span class=\"k\">let</span> <span class=\"n\">ds</span> <span class=\"o\">:=</span> <span class=\"n\">ds.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">declaration.is_theorem</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n<span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">ds.to_list.map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 236621749,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619674507
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/all_unused\">docs#all_unused</a> already filters by <code>is_auto_or_internal</code> it seems</p>",
        "id": 236621784,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619674539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Let me try it out! Are simp-lemmas generated by <code>@[simps]</code> tagged as <code>is_auto</code>?</p>",
        "id": 236624288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619676760
    },
    {
        "content": "<p>I don't think they are, I believe auto-generated in this context just means the rec_on and no_confusion sort of auto-generated things. Not things added by mathlib tactics like simps.</p>",
        "id": 236624424,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619676915
    },
    {
        "content": "<p>Hmm, you were filtering for theorems, I changed that to defs. The result looks useful.</p>",
        "id": 236624576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619677068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> can you make the trace output print one decl per line, without the <code>[.., ..]</code> list brackets and commas?</p>",
        "id": 236624872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619677304
    },
    {
        "content": "<p>My attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">file_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"s2\">\"src/breen_deligne/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/eg.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/functorial_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/suitable.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/breen_deligne/universal_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/combinatorial_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/facts/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/additive_functor.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/add_monoid_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/arrow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/big_operators_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/curry.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/dfinsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/equalizers.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/extend_from_nat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/filter_at_top_bot.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Fintype/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/free_abelian_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Gordan.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_examples.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/grading_monoid_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/int_grading_lemma.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/kronecker.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/linear_algebra.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/nnreal.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_bound_by.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_hom_equalizer.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/normed_group_quotient.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/order_basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pi_nat_apply.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/preadditive_category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/functorial_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/locally_constant.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite/nhds.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Profinite.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/pseudo_metric.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/quotient_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/real_Inf.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/augmented.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/simplicial/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/specific_limit.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/Top/limits.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/tsum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/for_mathlib/uniform_space_cauchy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/by_exactI_hack.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/hacks_and_tricks/type_pow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/lem97.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/liquid.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/analysis.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/locally_constant/Vhat.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/bounded.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/Mbar_le.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/Mbar/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/controlled_exactness.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/NormedGroup.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/normed_with_aut.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_group/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_snake.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/normed_spectral.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/partition.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cech.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/cosimplicial.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/direct_sum.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/finsupp.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/Hom.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/int.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/polyhedral_lattice/topology.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/prop_92.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/breen_deligne.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/category.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/homotopy.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/profinitely_filtered.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/system_of_complexes.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/pseudo_normed_group/with_Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/CLC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/FiltrationPow.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/LC.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/polyhedral_lattice.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/pseudo_normed_group.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/rescale/Tinv.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/simplicial/alternating_face_map.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/basic.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/completion.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/double.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/rescale.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/system_of_complexes/truncate.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/constants.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/default.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/double_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/modify_complex.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/polyhedral_iso.lean\"</span><span class=\"o\">,</span><span class=\"s2\">\"src/thm95/row_iso.lean\"</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">unused_defs</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">string</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">ds</span> <span class=\"bp\">←</span> <span class=\"n\">all_unused</span> <span class=\"n\">fs</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">ds</span> <span class=\"o\">:=</span> <span class=\"n\">ds.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">declaration.is_definition</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n<span class=\"k\">let</span> <span class=\"n\">ds'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ds.to_list.map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">n.to_string</span><span class=\"o\">),</span>\n<span class=\"k\">let</span> <span class=\"n\">ds''</span> <span class=\"o\">:=</span> <span class=\"n\">string.intercalate</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"n\">ds'</span><span class=\"o\">,</span>\n<span class=\"n\">tactic.trace</span> <span class=\"n\">ds''</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">unused_defs</span> <span class=\"n\">file_list</span>\n</code></pre></div>",
        "id": 236625154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619677528
    },
    {
        "content": "<p>Seems to work. 172 definitions aren't being used <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 236625299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619677667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/treeshaking/near/236624576\">said</a>:</p>\n<blockquote>\n<p>Hmm, you were filtering for theorems, I changed that to defs. The result looks useful.</p>\n</blockquote>\n<p>Oops I misread what you wrote earlier yes.<br>\nAnd yes that looks good to me! I guess the reason <code>none</code> was in the original file list was that none represented the current file, but seeing as the list includes thm95/default.lean anyway it was actually duplicated.</p>",
        "id": 236628434,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619679915
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> I found the timeout issue between <code>row_iso.lean</code> and <code>default.lean</code></p>",
        "id": 236631283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619681627
    },
    {
        "content": "<p>I had to mark some things as <code>irreducible</code> because I made them <code>reducible</code> but forgot the <code>local</code> prefix.</p>",
        "id": 236631372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619681667
    },
    {
        "content": "<p>Oh that's great news!</p>",
        "id": 236660270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619697314
    },
    {
        "content": "<p>Just bumping this thread to remind me that we should try to do some treeshaking again.</p>",
        "id": 289967977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658152391
    },
    {
        "content": "<p>I'm running the treeshake on the mathlib bump thread atm.</p>",
        "id": 290199504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658299659
    },
    {
        "content": "<p>Here's the output <a href=\"https://gist.github.com/jcommelin/90b42c047ec1959abe8a359ae5fd0d57\">https://gist.github.com/jcommelin/90b42c047ec1959abe8a359ae5fd0d57</a></p>",
        "id": 290200238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658300361
    },
    {
        "content": "<p>Note that this only lists unused <em>definitions</em>!</p>",
        "id": 290200253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658300383
    },
    {
        "content": "<p>Some surprising entries!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ExtrDisc.topological_space</span>\n</code></pre></div>",
        "id": 290200403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658300512
    },
    {
        "content": "<p>Here is the Lean file I used: based on <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>'s code upstairs<br>\n<a href=\"https://gist.github.com/jcommelin/54a31030dba0511cb2efaf66082f7694\">https://gist.github.com/jcommelin/54a31030dba0511cb2efaf66082f7694</a></p>",
        "id": 290200749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658300797
    },
    {
        "content": "<p>Another surprise:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">thm95.universal_constants.K₀</span>\n</code></pre></div>\n<p>Looks like we are making life more complicated than necessary, when computing those constants.</p>",
        "id": 290202089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658301974
    },
    {
        "content": "<p>Here is a way to get the file list automatically, by asking lean to call <code>find</code> rather than copypasta</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">.</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">tree_args</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io.process.spawn_args</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"find\"</span><span class=\"o\">,</span>\n  <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">src</span> <span class=\"o\">::</span> <span class=\"o\">[</span><span class=\"s2\">\"-type\"</span><span class=\"o\">,</span> <span class=\"s2\">\"f\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-name\"</span><span class=\"o\">,</span> <span class=\"s2\">\"*.lean\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-print\"</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">unsafe_run_io</span> <span class=\"bp\">$</span> <span class=\"n\">io.cmd</span> <span class=\"bp\">$</span> <span class=\"n\">tree_args</span> <span class=\"s2\">\"src\"</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">fs</span> <span class=\"o\">:=</span> <span class=\"n\">s.split_on</span> <span class=\"sc\">'\\n'</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">fs</span>\n</code></pre></div>",
        "id": 290210333,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658308089
    },
    {
        "content": "<p>Nice! That's a lot cleaner.</p>",
        "id": 290213841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658310775
    },
    {
        "content": "<p>Can you emit file and line numbers too so that you can link to github for each def?</p>",
        "id": 290218521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658313978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Do you know how to grab that info using meta-programming?</p>",
        "id": 290219144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658314451
    },
    {
        "content": "<p>Yes, I do it here: <a href=\"https://github.com/eric-wieser/lean-graded-rings/blob/9812eb5ec02962fa1e3ce22a9418eb9439b8d2b7/export.lean#L25\">https://github.com/eric-wieser/lean-graded-rings/blob/9812eb5ec02962fa1e3ce22a9418eb9439b8d2b7/export.lean#L25</a></p>",
        "id": 290219195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658314498
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.decl_pos\">docs#environment.decl_pos</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.decl_olean\">docs#environment.decl_olean</a></p>",
        "id": 290219238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658314539
    },
    {
        "content": "<p>Once the mathlib bump is merged, I'll add <code>scripts/treeshake.lean</code> using both suggestions.</p>",
        "id": 290220005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658315106
    }
]