[
    {
        "content": "<p>We need a naturality statement of the following form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">Œπ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">ùìï‚ÇÅ</span> <span class=\"bp\">ùìï‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚•§</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"bp\">ùìï‚ÇÅ</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">ùìï‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚•§</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">‚•§</span> <span class=\"n\">homological_complex</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚•§</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">homology_functor_iso_natural</span> <span class=\"o\">:</span>\n  <span class=\"o\">(((</span><span class=\"n\">category_theory.evaluation</span> <span class=\"n\">X</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">homology_functor_iso</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv.app</span> <span class=\"o\">(</span><span class=\"n\">G.obj</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span>\n    <span class=\"o\">((</span><span class=\"n\">homology_functor</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚•§</span> <span class=\"n\">Ab</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">G.map</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">S</span> <span class=\"bp\">=</span>\n    <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288939294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657286592
    },
    {
        "content": "<p>I pushed this to <code>Qprime_isoms2.lean</code>. I now need to go offline for a while. If someone can fill in the right hand side + a proof, that would be cool.</p>",
        "id": 288939370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657286633
    },
    {
        "content": "<p>Please ignore what I wrote. This doesn't typecheck at all.</p>",
        "id": 288942640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657288258
    },
    {
        "content": "<p>I will be offline for the rest of the day, but I'll try to figure out what I want in the mean time.</p>",
        "id": 288942693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657288277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Jo√´l Riou</span> I noticed you recent comment -- take a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.whiskering_right\">docs#category_theory.whiskering_right</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.whiskering_left\">docs#category_theory.whiskering_left</a></p>",
        "id": 288967692,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657300019
    },
    {
        "content": "<p>Yes, in between, I had found the right names!</p>",
        "id": 288971223,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1657302042
    },
    {
        "content": "<p>I minimized the remaining sorry in this file</p>",
        "id": 288999478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657318541
    },
    {
        "content": "<p>It's now purely a statement about <code>homology_functor_iso</code>. <span class=\"user-mention\" data-user-id=\"459699\">@Jo√´l Riou</span> would you want to give it a go?</p>",
        "id": 289002866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657321164
    },
    {
        "content": "<p>Yes, this sorry was easy :-)</p>",
        "id": 289015098,
        "sender_full_name": "Jo√´l Riou",
        "timestamp": 1657336757
    },
    {
        "content": "<p>Nice! I guess the \"hole in one\" emoji is quite appropriate here?</p>",
        "id": 289025335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657349655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Jo√´l Riou</span> somewhere in LTE (I don't remember exactly where) we have the isomorphism showing that homology of presheaves is the presheaf of homologies. I think that would help in your <code>eval_freeFunc_homology_zero</code></p>",
        "id": 289040655,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657372090
    },
    {
        "content": "<p>Oh nevermind I see you already have that iso!</p>",
        "id": 289040928,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657372493
    }
]