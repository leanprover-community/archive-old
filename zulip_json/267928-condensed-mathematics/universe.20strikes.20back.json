[
    {
        "content": "<p>It turns out that we want to apply <code>thm95.profinite</code> to</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda = \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> (which lives in <code>Type 0</code></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mover accent=\"true\"><mi mathvariant=\"script\">L</mi><mo>ˉ</mo></mover><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\bar{\\mathcal{L}}_{r&#x27;}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0701em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathcal\">L</span></span><span style=\"top:-3.2523em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2222em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828em;\"><span style=\"top:-2.786em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is a profinite set in <code>Type 1</code> (or <code>Type u</code>)</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-Banach in <code>Type 2</code> (or <code>Type u+1</code>).</li>\n</ul>\n<p>So we really need maximal universe polymorphism <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 282925105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652965300
    },
    {
        "content": "<p>Where does <code>S : Profinite.{1}</code> come from? That seems suspicious</p>",
        "id": 282925257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652965366
    },
    {
        "content": "<p>See <code>challenge.lean</code>. My VScode is frozen.</p>",
        "id": 282925312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652965394
    },
    {
        "content": "<p>I'm trying to look... but I'm waiting on lean to build... as usual...</p>",
        "id": 282927420,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652966436
    },
    {
        "content": "<p>looks like <code>laurent_measures/ext</code> has a build error..</p>",
        "id": 282927460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652966463
    },
    {
        "content": "<p>Yes, it's related. I'm working on a fix.</p>",
        "id": 282927669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652966574
    },
    {
        "content": "<p>Might be easier to <code>git checkout @^5</code> and fetch oleans there.</p>",
        "id": 282927702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652966596
    },
    {
        "content": "<p>Okay. I'm playing with the universes now.</p>",
        "id": 282927713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652966601
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">liquid_tensor_experiment</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">pBanach.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">ℳ_</span><span class=\"o\">{</span><span class=\"n\">p'</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"bp\">≅</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 282927899,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652966674
    },
    {
        "content": "<p>Lean seems to be happy with that. Shall I push?</p>",
        "id": 282927935,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652966691
    },
    {
        "content": "<p>Does the whole project build?</p>",
        "id": 282927964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652966708
    },
    {
        "content": "<p>I'll try.</p>",
        "id": 282927995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652966721
    },
    {
        "content": "<p>yes, it builds, except forr the error I mentioned above.</p>",
        "id": 282928054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652966760
    },
    {
        "content": "<p>Can you fix those by changing some <code>u</code> to <code>0</code>?</p>",
        "id": 282928157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652966801
    },
    {
        "content": "<p>1 moment</p>",
        "id": 282928527,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652967008
    },
    {
        "content": "<p>the file is fixed, but I'll try to build the whole project again</p>",
        "id": 282928558,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652967030
    },
    {
        "content": "<p>okay it all builds</p>",
        "id": 282928570,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652967041
    },
    {
        "content": "<p>cool!</p>",
        "id": 282928577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652967045
    },
    {
        "content": "<p>I don't know where that <code>1</code> came from...</p>",
        "id": 282928589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652967053
    },
    {
        "content": "<p>Is <code>0</code> required here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Thm 9.4bis of [Analytic]. More precisely: the first observation in the proof 9.4 =&gt; 9.1. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">is_iso_Tinv2</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">normed_with_aut.T.inv</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_iso</span> <span class=\"o\">(((</span><span class=\"n\">Ext'</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"n\">condensify_Tinv2</span> <span class=\"o\">(</span><span class=\"n\">Fintype_Lbar.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">r'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n    <span class=\"o\">(</span><span class=\"n\">Condensed.of_top_ab</span> <span class=\"bp\">↥</span><span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 282928598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652967060
    },
    {
        "content": "<p>Maybe from a long time ago, when we still got some universes wrong in <code>Condensed</code>?</p>",
        "id": 282928625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652967075
    },
    {
        "content": "<p>We only prove <code>first_target</code> in universe <code>0</code>.</p>",
        "id": 282928682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652967105
    },
    {
        "content": "<p><code>laurent_measures/ext</code> could have been univeerse polymorphic if it wasn't for those <code>0</code>s</p>",
        "id": 282928688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652967108
    },
    {
        "content": "<p>Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda = \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> lives in universe <code>0</code> and it must be the same as the universe of <code>S</code>. Unless we do a huge refactor.</p>",
        "id": 282928783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652967139
    },
    {
        "content": "<p>Or we take <code>ulift \\Z</code> and show it is a polyhedral lattice with <code>Hom(Lambda, M) = M</code>.</p>",
        "id": 282928819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652967167
    },
    {
        "content": "<p>But I'm happy with the <code>0</code>s. Certainly for now.</p>",
        "id": 282928857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652967192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> did you push your fixes?</p>",
        "id": 282928919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652967234
    },
    {
        "content": "<p>pushed now</p>",
        "id": 282928991,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652967250
    }
]