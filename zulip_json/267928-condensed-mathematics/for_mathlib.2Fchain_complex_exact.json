[
    {
        "content": "<p>I'm working on the sorries in this file <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ; the claim on line 16 is that the whole file is self-contained which is probably an ideal place for me to learn more about this part of the repo.</p>",
        "id": 284613814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654091460
    },
    {
        "content": "<p>I think that claim is still true <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 284615678,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654092185
    },
    {
        "content": "<p>I've pushed some progress. Let me just ignore the fact that I'm taking a train to Switzerland tomorrow morning and press on.</p>",
        "id": 284643068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654104258
    },
    {
        "content": "<p>Do we have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.exact</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_zero.exact</span> <span class=\"o\">{</span><span class=\"bp\">ùíû</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">ùíû</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"bp\">ùíû</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ùíû</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_zero</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abelian.exact_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_zero.eq_zero_of_tgt</span> <span class=\"n\">hB</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">zero_comp</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_zero.eq_zero_of_tgt</span> <span class=\"n\">hB</span> <span class=\"o\">(</span><span class=\"n\">kernel.Œπ</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"n\">zero_comp</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>?</p>",
        "id": 284646682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654106027
    },
    {
        "content": "<p>see <code>for_mathlib/homology_exact</code></p>",
        "id": 284647087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654106184
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/0718954bd33fb9455b97d3f9e8c2eb39d85d0849/src/for_mathlib/homology_exact.lean#L46\">https://github.com/leanprover-community/lean-liquid/blob/0718954bd33fb9455b97d3f9e8c2eb39d85d0849/src/for_mathlib/homology_exact.lean#L46</a></p>",
        "id": 284647234,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654106258
    },
    {
        "content": "<p>Do we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exact_of_epi</span> <span class=\"o\">{</span><span class=\"bp\">ùíû</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">ùíû</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"bp\">ùíû</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ùíû</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?</p>",
        "id": 284647929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654106547
    },
    {
        "content": "<p>yeah it should be somewhere</p>",
        "id": 284648030,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654106602
    },
    {
        "content": "<p>maybe in <code>for_mathlib/abelian_category</code>?</p>",
        "id": 284648083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654106627
    },
    {
        "content": "<p>Oh wait, that's false.</p>",
        "id": 284648281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654106719
    },
    {
        "content": "<p>Oh wait, no it's not.</p>",
        "id": 284648416,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654106763
    },
    {
        "content": "<p>Oh is it? Rotten luck :-/ I have got it as far as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"n\">f</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">is_zero</span> <span class=\"o\">(</span><span class=\"n\">cokernel</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is that false too?</p>",
        "id": 284648422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654106764
    },
    {
        "content": "<p>No they should both be true</p>",
        "id": 284648756,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654106931
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exact_of_epi</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">epi</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abelian.exact_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">comp_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_zero.eq_of_tgt</span><span class=\"o\">,</span>\n  <span class=\"n\">library_search</span> <span class=\"c1\">-- exact is_zero_cokernel_of_epi f,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284648998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654107058
    },
    {
        "content": "<p>We might be missing <code>exact_of_epi</code></p>",
        "id": 284649209,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654107154
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exact_of_epi</span> <span class=\"o\">{</span><span class=\"bp\">ùíû</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">ùíû</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"bp\">ùíû</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ùíû</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abelian.exact_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">hfg</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">abelian.epi_iff_cokernel_œÄ_eq_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">comp_zero</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284649213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654107156
    },
    {
        "content": "<p><code>epi</code> is a class</p>",
        "id": 284649308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654107203
    },
    {
        "content": "<p>I've been avoiding the <code>convert</code> technique recently, it can get really slow; I think it's a bad habit :-)</p>",
        "id": 284649312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654107206
    },
    {
        "content": "<p>yeah, I use it sparingly.</p>",
        "id": 284649335,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1654107217
    },
    {
        "content": "<p>OK I just pushed one more sorry. I doubt I'll have any more time today. I can finish these off tomorrow hopefully.</p>",
        "id": 284651394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654108156
    },
    {
        "content": "<p>OK I did one more :-) The last one will have to wait -- anyway it's of a slightly different nature to the rest, so I will need new tricks. I'm done for the day :-)</p>",
        "id": 284658594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654111746
    },
    {
        "content": "<p>Working on the final sorry in this file.</p>",
        "id": 284737592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654173594
    },
    {
        "content": "<p>OK so it's now sorry-free. I'm not sure if I missed any tricks. Checking that an additive equivalence of categories preserves and reflects exactness was surprisingly long.</p>",
        "id": 284758589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654182468
    }
]