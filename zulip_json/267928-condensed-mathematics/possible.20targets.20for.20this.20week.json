[
    {
        "content": "<p>It seems that I finally have an empty calendar after the semester finished in Feb. This week I want to bash on 9.6 and 9.8. I think we can finish them this week. That would leave us with 9.7 and the monster proof of 9.5.</p>\n<ul>\n<li>For 9.8, there are some <code>sorry</code>s left in <code>combinatorial_lemma.lean</code>. They shouldn't be hard conceptually. A bit of wrestling with <code>tsum</code>.</li>\n<li>For 9.6, we've made very good progress last week, I think. We need to unsorry <code>soft_truncation.lean</code>. We also need the obvious lemmas about how <code>bounded_exact</code> interacts with shifting complexes left and right.<ul>\n<li>After that, the induction step of 9.6 should be easy</li>\n<li>The base case of the induction is half done. It shouldn't be hard to finish it.</li>\n</ul>\n</li>\n</ul>",
        "id": 229263688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615192229
    },
    {
        "content": "<ul>\n<li>There is also the unfinished implication <code>9.5 ==&gt; 9.4</code>. This amounts to constructing an isomorphism between <code>Hom(Z, M)</code> and <code>M</code>. Shouldn't be hard either. (An isom of profinitely filtered pseudo normed groups with action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>. But it still shouldn't be hard.)</li>\n</ul>",
        "id": 229263792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615192291
    },
    {
        "content": "<p>As I said before, I'm excited about the progress you're making! Regarding possible targets, just a reminder that the proof of 9.5 also needs some amount of simplicial stuff and Dold-Kan, and specifically 8.19.</p>",
        "id": 229267025,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615194084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> From 8.19, do we need the first sentence? I think the part about hypercovers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mo>∙</mo></msub><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S_\\bullet \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16111499999999998em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and exactness of the complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><mover accent=\"true\"><mi>M</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mover accent=\"true\"><mi>M</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>→</mo><mover accent=\"true\"><mi>M</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>→</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">0 \\to \\hat M(S) \\to \\hat M(S_0) \\to \\hat M(S_1) \\to \\dots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.19677em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.19677em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.19677em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> is the part we need, right? I guess it's also the more difficult part (-;</p>",
        "id": 229274794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615198276
    },
    {
        "content": "<p>Yes, that's right, we only need that hypercovers of profinite sets by profinite sets induce exact complexes.</p>",
        "id": 229275209,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615198466
    },
    {
        "content": "<p>Ok, I'll add hypercovers to my mental todo list.</p>",
        "id": 229275320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615198546
    },
    {
        "content": "<p>Btw, the simplicial stuff was a bit quiet on this stream, but Scott created a bunch of PRs to mathlib up to the Moore complex.</p>",
        "id": 229275406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615198580
    },
    {
        "content": "<p>Great! What's the Moore complex? :-D</p>",
        "id": 229275652,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615198729
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/Moore+complex\">https://ncatlab.org/nlab/show/Moore+complex</a></p>",
        "id": 229275716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615198783
    },
    {
        "content": "<p>Ah, that's Dold-Kan. OK, great!</p>",
        "id": 229275728,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615198790
    },
    {
        "content": "<p>seems to be the name of one half of Dold-Kan</p>",
        "id": 229275735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615198793
    },
    {
        "content": "<p>And it's the only direction we need here</p>",
        "id": 229275795,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615198808
    },
    {
        "content": "<p>ooh, ok, so we don't need to go back?</p>",
        "id": 229275822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615198822
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 229275837,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615198828
    },
    {
        "content": "<p>you shouldn't have told us... now we won't do Dold-Kan <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 229275853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615198839
    },
    {
        "content": "<p>You need some good functoriality for the Moore complex to build the double complex in the proof of 9.5 (from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{V}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span> you build this system of complexes for 9.5, and you need that a simplicial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Λ</mi><mo>∙</mo></msub></mrow><annotation encoding=\"application/x-tex\">\\Lambda_\\bullet</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16111499999999998em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> gives a system of double complexes)</p>",
        "id": 229276100,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615198953
    },
    {
        "content": "<p>Probably that's not too hard</p>",
        "id": 229276124,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615198971
    },
    {
        "content": "<p>Actually, I'm not really using the Moore complex, I'm just using what's called the \"alternating face map complex\" in the nLab</p>",
        "id": 229276317,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615199075
    },
    {
        "content": "<p>This is surely even easier than the Moore complex</p>",
        "id": 229276336,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615199095
    },
    {
        "content": "<p>Ok, I'll take note of that.</p>",
        "id": 229276440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615199148
    },
    {
        "content": "<p>I wanted to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">abs_add_eq_add_abs_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>that should be easy, but if I start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">abs_add_eq_add_abs_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"n\">using</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean becomes immediatly very slow. Is this normal or I am missing something?</p>",
        "id": 229343382,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615225692
    },
    {
        "content": "<p>Note that I'm not even sure we need that lemma. Depending on which version of 9.7 we prove.</p>",
        "id": 229344407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615226132
    },
    {
        "content": "<p>I only needed <code>9.7'</code> for the proof of 9.8</p>",
        "id": 229344438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615226146
    },
    {
        "content": "<p>OK, I will wait. I thought it was trivial, but there are more cases than I expected</p>",
        "id": 229344616,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615226211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Ha, I agree, it's one of those things that should be <code>by auto</code>, but that are just tedious and annoying</p>",
        "id": 229345796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615226662
    },
    {
        "content": "<p>I did it anyway... but still it seems very slow to me. If someone want to play with it's here<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/riccardobrasca/src/combinatorial_lemma.lean\">https://github.com/leanprover-community/lean-liquid/blob/riccardobrasca/src/combinatorial_lemma.lean</a></p>\n<p>I guess that some generalization (for <code>linear_ordered_add_comm_group</code> maybe?) could be interesting for mathlib.</p>",
        "id": 229351902,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615228952
    },
    {
        "content": "<p>thanks</p>",
        "id": 229352236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615229078
    },
    {
        "content": "<p>some form of this should indeed go to mathlib</p>",
        "id": 229352252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615229085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Since you removed the sorry, I merged your branch into master.</p>",
        "id": 229431710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615273653
    },
    {
        "content": "<p>We can speed it up later</p>",
        "id": 229431712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615273659
    },
    {
        "content": "<p>A proof is better than no proof <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 229431718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615273671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/possible.20targets.20for.20this.20week/near/229263792\">said</a>:</p>\n<blockquote>\n<ul>\n<li>There is also the unfinished implication <code>9.5 ==&gt; 9.4</code>. This amounts to constructing an isomorphism between <code>Hom(Z, M)</code> and <code>M</code>. Shouldn't be hard either. (An isom of profinitely filtered pseudo normed groups with action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>. But it still shouldn't be hard.)</li>\n</ul>\n</blockquote>\n<p>I filled in all the data for the isomorphism. So now we only need to fill in some proofs.</p>",
        "id": 229435889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615276728
    },
    {
        "content": "<p>Is this version of Riccardo's lemma faster?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">abs_add_eq_add_abs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a0</span><span class=\"o\">,</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span><span class=\"o\">,</span> <span class=\"n\">add_nonneg</span> <span class=\"n\">a0</span> <span class=\"n\">b0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a0.trans_lt</span> <span class=\"o\">(</span><span class=\"n\">hle.trans_lt</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">b0</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">a0</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a0</span><span class=\"o\">,</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">abs_of_neg</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">F.le</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">ba</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">abs_of_nonpos</span> <span class=\"n\">ba</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_of_neg_eq</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">ba</span><span class=\"o\">),</span> <span class=\"n\">add_left_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">eq_zero_of_neg_eq</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm</span> <span class=\"n\">h</span> <span class=\"n\">b0</span><span class=\"o\">,</span> <span class=\"n\">abs_of_neg</span> <span class=\"n\">F</span><span class=\"o\">],</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">a0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">b0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonpos</span><span class=\"o\">,</span> <span class=\"n\">add_nonpos</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">abs_add_eq_add_abs_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">abs_add_eq_add_abs</span> <span class=\"n\">ab</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">abs_add_eq_add_abs</span> <span class=\"o\">((</span><span class=\"n\">not_le.mp</span> <span class=\"n\">ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">),</span> <span class=\"n\">and.comm</span><span class=\"o\">,</span>\n    <span class=\"bp\">@</span><span class=\"n\">and.comm</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229440159,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615278912
    },
    {
        "content": "<p>If you think it's faster, please push it</p>",
        "id": 229440360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615279024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/possible.20targets.20for.20this.20week/near/229435889\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/possible.20targets.20for.20this.20week/near/229263792\">said</a>:</p>\n<blockquote>\n<ul>\n<li>There is also the unfinished implication <code>9.5 ==&gt; 9.4</code>. This amounts to constructing an isomorphism between <code>Hom(Z, M)</code> and <code>M</code>. Shouldn't be hard either. (An isom of profinitely filtered pseudo normed groups with action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>. But it still shouldn't be hard.)</li>\n</ul>\n</blockquote>\n<p>I filled in all the data for the isomorphism. So now we only need to fill in some proofs.</p>\n</blockquote>\n<p>I have not been following this thread for ten days or so, trying to (lose my) battle with Laurent series. I would be happy in trying to fill some, although others will probably be faster than me.</p>",
        "id": 229441210,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615279450
    },
    {
        "content": "<p>Ooh, there are &gt; 30 sorrys at the moment. If you claim one, I'm sure others can work on other stuff.</p>",
        "id": 229441263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615279491
    },
    {
        "content": "<p>Ok, I'll give it a try. I am having some issue with the .toml, though. I run <code>leanproject up</code>, yet if I try <code>git pull</code> I get a merging issue. Is it normal?</p>",
        "id": 229441468,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615279587
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Auto</span><span class=\"bp\">-</span><span class=\"n\">merging</span> <span class=\"n\">leanpkg.toml</span>\n<span class=\"n\">CONFLICT</span> <span class=\"o\">(</span><span class=\"n\">content</span><span class=\"o\">):</span> <span class=\"n\">Merge</span> <span class=\"n\">conflict</span> <span class=\"k\">in</span> <span class=\"n\">leanpkg.toml</span>\n<span class=\"n\">Automatic</span> <span class=\"n\">merge</span> <span class=\"n\">failed</span><span class=\"bp\">;</span> <span class=\"n\">fix</span> <span class=\"n\">conflicts</span> <span class=\"n\">and</span> <span class=\"k\">then</span> <span class=\"n\">commit</span> <span class=\"n\">the</span> <span class=\"n\">result.</span>\n</code></pre></div>",
        "id": 229441662,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615279668
    },
    {
        "content": "<p>hhm, sounds like you had uncommited or unpushed changes locally</p>",
        "id": 229441789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615279728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> what does your <code>git log</code> and <code>git status</code> look like?</p>",
        "id": 229441821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615279746
    },
    {
        "content": "<p>right, I have something in my <code>git log</code> to fix. I'll try on my own and come back if I need help--&gt;done. <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 229441961,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615279814
    },
    {
        "content": "<p>I made the PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6593\">#6593</a>, with a slightly more general version of <code>abs_add_eq_add_abs_iff</code>. <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> If you have a better proof, can you comment there? Thank you!</p>",
        "id": 229447132,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615282249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> are you working on <code>HomZ_iso</code>? I just proved (and pushed to master) <code>strict'</code>.</p>",
        "id": 229471708,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615294609
    },
    {
        "content": "<p>Yes, I am going to work on this a bit today and tomorrow. Thanks for telling me this is done! As soon as I will find something I can work on, I'll claim it here.</p>",
        "id": 229474692,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1615296032
    },
    {
        "content": "<p>In <code>HomZ_iso</code> the only sorrys left are the two <code>continuous'</code>, they seem not completely trivial to me (even mathematically), but maybe I am missing something.</p>",
        "id": 229498260,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615305212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Great! Thanks a lot for your efforts.</p>",
        "id": 229498380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615305248
    },
    {
        "content": "<p>I guess those continuity arguments will have to use that the norm on <code>Z</code> is completely boring.</p>",
        "id": 229498423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615305268
    },
    {
        "content": "<p>Note that there is also a sorry left in the proof of <code>first_target</code>, which should hopefully follow from a general lemma saying that <code>(BD.System _ _ _).map f</code> is always strict.</p>",
        "id": 229498985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615305485
    },
    {
        "content": "<p>(Because <code>f</code> is strict by assumption.)</p>",
        "id": 229499028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615305500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I just realised that <code>homZ_iso</code> shouldn't just work for <code>Mbar r' S</code> but any <code>M</code></p>",
        "id": 229501399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615306003
    },
    {
        "content": "<p>That might simplify the reasoning</p>",
        "id": 229501437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615306009
    },
    {
        "content": "<p>I was wondering the same thing!</p>",
        "id": 229501473,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615306017
    },
    {
        "content": "<p>All is written at the moment works in general</p>",
        "id": 229501563,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615306034
    },
    {
        "content": "<p>yes, please refactor. I was just sleepy when I wrote the sketch this morning</p>",
        "id": 229501742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615306080
    },
    {
        "content": "<p>I will do it in a couple of hours</p>",
        "id": 229502579,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615306254
    },
    {
        "content": "<p>Some thoughts:</p>\n<ul>\n<li>a new constructor can assume continuity in only one direction, because the spaces are compact Hausdorff</li>\n<li>the topology on <code>Hom(Lambda, M)</code> is the subspace topology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mrow><mi>λ</mi><mo>∈</mo><mi mathvariant=\"normal\">Λ</mi></mrow></msub><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">\\prod_{\\lambda \\in \\Lambda} M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\">Λ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, hence restricting to the factor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> should give continuity in one direction.</li>\n</ul>",
        "id": 229508783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615308138
    },
    {
        "content": "<p>Now I need to go. Back in a couple of hrs</p>",
        "id": 229508834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615308152
    },
    {
        "content": "<p>I'm back. Let me know if you get stuck somewhere with the topology</p>",
        "id": 229525983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615313769
    },
    {
        "content": "<p>Is there a reason  to state the lemma for <code>profinitely_filtered_pseudo_normed_group_with_Tinv</code> and not for <code>profinitely_filtered_pseudo_normed_group</code>?</p>",
        "id": 229527395,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615314263
    },
    {
        "content": "<p>I see that the morphisms are a little different (bounded in one case and strict in the other), but it should be true</p>",
        "id": 229527464,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615314289
    },
    {
        "content": "<p>We can maybe do it in two steps, yes</p>",
        "id": 229529093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615314888
    },
    {
        "content": "<p>But we need the <code>Tinv</code> compatibility for the 9.5 =&gt; 9.4 proof.</p>",
        "id": 229529160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615314913
    },
    {
        "content": "<p>I've pushed here <a href=\"https://github.com/leanprover-community/lean-liquid/blob/riccardobrasca/src/thm95.lean\">https://github.com/leanprover-community/lean-liquid/blob/riccardobrasca/src/thm95.lean</a> the easy generalization to any <code>M</code>.</p>",
        "id": 229544437,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615320506
    },
    {
        "content": "<p>As Johan said, the proof of the second <code>continuous'</code> should be easy,  but I am a bit lost because of elements of subsets, rewriting under <code>λ</code> and similar stuff <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 229544673,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615320592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> is it ok if I merge <code>master</code> into your branch?</p>",
        "id": 229545413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615320844
    },
    {
        "content": "<p>Sure, the difference is very small</p>",
        "id": 229545466,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615320856
    },
    {
        "content": "<p>no longer, I just merged another branch into master</p>",
        "id": 229545590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615320911
    },
    {
        "content": "<p>pushed</p>",
        "id": 229545851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615321013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I fixed that continuity sorry</p>",
        "id": 229548274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615321942
    },
    {
        "content": "<p>There was a very useful trick that I wrote for another part of the project</p>",
        "id": 229548316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615321961
    },
    {
        "content": "<p>I pushed it to your branch</p>",
        "id": 229548350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615321976
    },
    {
        "content": "<p>For the final sorry, I suggest that we build the alternative constructor for isoms of <code>profinitely_filtered_pseudo_normed_group_with_Tinv</code>s</p>",
        "id": 229548436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615322006
    },
    {
        "content": "<p>Ahah, I see that you already wrote <code>section pfpng_ctu</code> exactly to deal with this kind if problems!</p>",
        "id": 229549011,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615322199
    },
    {
        "content": "<p>yes, it is a somewhat ugly hack</p>",
        "id": 229549590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615322421
    },
    {
        "content": "<p>I guess this is the price we pay for working with <code>topological_space</code>s instead of actual profinite sets (-;</p>",
        "id": 229549657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615322445
    },
    {
        "content": "<p>Maybe we should also move <code>Hom</code> and <code>HomZ_iso</code> to a different file, at some point</p>",
        "id": 229550047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615322576
    },
    {
        "content": "<p>I will stop for today. If someone wants to play with my branch no problem</p>",
        "id": 229554952,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615324367
    },
    {
        "content": "<p>And I agree we should move <code>Hom</code> and <code>HomZ_iso</code> somewhere else</p>",
        "id": 229555021,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615324391
    },
    {
        "content": "<p>You know that <span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> has a ton of stuff for profinite sets formalised?</p>",
        "id": 229568649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615329333
    },
    {
        "content": "<p>This will be extremely useful when we start building the category of condensed sets, and gluing our <code>first_target</code> into the condensed setting</p>",
        "id": 229598913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615348335
    },
    {
        "content": "<p>If there are any PRs that I should review, <span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> please just ping me. I sometimes loose track of PRs because the queue is now moving so fast.</p>",
        "id": 229598955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615348378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/possible.20targets.20for.20this.20week/near/229555021\">said</a>:</p>\n<blockquote>\n<p>And I agree we should move <code>Hom</code> and <code>HomZ_iso</code> somewhere else</p>\n</blockquote>\n<p>I moved it to <code>polyhedral_lattice/Hom.lean</code></p>",
        "id": 229612350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615359913
    },
    {
        "content": "<p>From the targets listed at the top of this thread, the status is now:</p>\n<p><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> 9.8 done<br>\n<span aria-label=\"white large square\" class=\"emoji emoji-2b1c\" role=\"img\" title=\"white large square\">:white_large_square:</span> 9.6 making good progress with usable complexes, but both the base case and the induction step are still open<br>\n<span aria-label=\"white large square\" class=\"emoji emoji-2b1c\" role=\"img\" title=\"white large square\">:white_large_square:</span> 9.5 =&gt; 9.4, Riccardo made some nice progress yesterday</p>",
        "id": 229627028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615368554
    },
    {
        "content": "<p>I have some time now to end the proof <code>HomZ_iso</code>, defining a new constructor</p>",
        "id": 229651920,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615380962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/possible.20targets.20for.20this.20week/near/229598955\">said</a>:</p>\n<blockquote>\n<p>If there are any PRs that I should review, <span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> please just ping me. I sometimes loose track of PRs because the queue is now moving so fast.</p>\n</blockquote>\n<p>I realised that there was a missing piece for me to PR  the rest of \"profinite sets are limit of finite discrete sets\" to mathlib. It relies on some old implementation of Profinite having limits and I have not yet had the time to resolve that. So for now there are no PRs of mine that needs reviewing</p>",
        "id": 229655434,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1615382262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/possible.20targets.20for.20this.20week/near/229568649\">said</a>:</p>\n<blockquote>\n<p>You know that <span class=\"user-mention silent\" data-user-id=\"132603\">Calle Sönne</span> has a ton of stuff for profinite sets formalised?</p>\n</blockquote>\n<p>I think most of my work has been doing a bunch of lemmas for topological spaces. The only stuff for profinite sets I have actually proven are that they are reflective in CompHaus and that they are limits of finite discrete sets (this one is not yet in mathlib though)</p>",
        "id": 229655628,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1615382330
    },
    {
        "content": "<p>Is there anything specific that is missing?</p>",
        "id": 229655708,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1615382352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> For the first part of the project, we don't yet need much about profinite sets. It will become useful in the second stage.</p>",
        "id": 229655766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615382391
    },
    {
        "content": "<p>So currently we don't have any pressing needs.</p>",
        "id": 229655777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615382398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/possible.20targets.20for.20this.20week/near/229651920\">said</a>:</p>\n<blockquote>\n<p>I have some time now to end the proof <code>HomZ_iso</code>, defining a new constructor</p>\n</blockquote>\n<p>How are things going? I fixed the other <code>sorry</code> in <code>liquid.lean</code>. So once we have this new constructor, the proof 9.5 =&gt; 9.4 is complete.</p>",
        "id": 229679016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615389651
    },
    {
        "content": "<p>I'm quite happy that <code>liquid.lean</code> and <code>combinatorial_lemma.lean</code> no longer show up in the list of files that contain <code>sorry</code>.<br>\nWe are making progress!</p>",
        "id": 229680268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615389968
    },
    {
        "content": "<p>I've pushed to <a href=\"https://github.com/leanprover-community/lean-liquid/blob/riccardobrasca/src/polyhedral_lattice/Hom.lean\">https://github.com/leanprover-community/lean-liquid/blob/riccardobrasca/src/polyhedral_lattice/Hom.lean</a> the sorry free proof of <code>HomZ_iso</code></p>",
        "id": 229726084,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615404010
    },
    {
        "content": "<p>Some remarks: in <a href=\"https://github.com/leanprover-community/lean-liquid/blob/riccardobrasca/src/pseudo_normed_group/with_Tinv.lean\">https://github.com/leanprover-community/lean-liquid/blob/riccardobrasca/src/pseudo_normed_group/with_Tinv.lean</a> I proved that a bijective <code>profinitely_filtered_pseudo_normed_group_with_Tinv_hom</code> with strict inverse is an isomorphism</p>",
        "id": 229726281,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615404082
    },
    {
        "content": "<p>The proof of <code> continuous'</code> in  <code>inv_of_bijective</code> can probably be golfed quite a lot.</p>",
        "id": 229726385,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615404124
    },
    {
        "content": "<p>Also <code>Hom.lean</code> is probably a little mess, I am not that familiar with the category theory part of the library, so it's very possible that I wrote something in not the optimal way</p>",
        "id": 229726661,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615404228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> great!! thanks so much for doing this</p>",
        "id": 229726781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615404263
    },
    {
        "content": "<p>I'll wait for someone to have a look at it before merging to master :)</p>",
        "id": 229731872,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615406144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I'll now take a look at this. Is it ok if I merge <code>master</code> into your branch again?</p>",
        "id": 229747533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615411512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I need to go to bed now. But I pushed some wip to <code>jmc-Hom</code></p>",
        "id": 229752712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615413535
    },
    {
        "content": "<p>it doesn't compile, but you might get the idea of where I was going</p>",
        "id": 229752757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615413550
    },
    {
        "content": "<p>I will have a look, good night!</p>",
        "id": 229752791,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615413565
    },
    {
        "content": "<p>I merged your work in my branch and it now compiles. I also made some variables implicit (for example <code>r</code>): this seems more reasonable to me, but maybe it's a bad idea for the rest of the work.</p>",
        "id": 229768460,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1615420319
    },
    {
        "content": "<p>Great! I will pull your branch again.</p>",
        "id": 229791400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615436429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> thanks again! I merged your branch into master.</p>",
        "id": 229793306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615438043
    },
    {
        "content": "<p>The proof of 9.5 =&gt; 9.4 is now sorry-free. Kudos to Riccardo. <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 229793321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615438070
    }
]