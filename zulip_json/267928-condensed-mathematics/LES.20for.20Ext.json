[
    {
        "content": "<p>We'll also need LES for Ext groups (in the first variable). Does that sound like something you want to work on?</p>",
        "id": 254036122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632138343
    },
    {
        "content": "<p>Sure! I can really work on anything we need. To be honest I don't understand very well how difficult it is, for example this is something we will surely want in mathlib at some point, but maybe proving it in general for derived functors is much more difficult?</p>",
        "id": 254036694,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632138681
    },
    {
        "content": "<p>I think it will not make much of a difference.</p>",
        "id": 254037043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632138846
    },
    {
        "content": "<p>But mathlib still doesn't have the snake lemma. I think that's a bigger problem for getting the LES.</p>",
        "id": 254037072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632138870
    },
    {
        "content": "<p>I don't think I've ever seen a real proof of the snake lemma (I mean a proof that does not go through Mitchell's embedding theorem), but <a href=\"https://www.math.ksu.edu/~dbski/preprints/snake_final.pdf\">this one</a> seems quite short. It works if the category has enough projectives, but maybe this is enough for our applications.</p>",
        "id": 254038622,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632139669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> What's the status of snake in lean?</p>",
        "id": 254038703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632139697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Sure, for now assuming enough projectives is fine.</p>",
        "id": 254038753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632139729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> maybe we should start by defining δ-functors, somewhere in <code>for_mathlib</code>.</p>",
        "id": 254042756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632141725
    },
    {
        "content": "<p>Then we claim that <code>Ext</code> is an example of a δ-functor. And that splits the problem into two pieces: (i) develop an API for δ-functors, and (ii) fill in the sorry that <code>Ext</code> is indeed an example.</p>",
        "id": 254042836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632141781
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.pseudoelement\">docs#category_theory.abelian.pseudoelement</a> might be helpful</p>",
        "id": 254045366,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1632142880
    },
    {
        "content": "<p>Regarding the snake lemma: there is a proof that works in all abelian categories in Borceux Vol 2 and also in PTJs category theory notes (which I am afraid are not public). Getting one of them in Lean is basically just a matter of sitting down and doing it, but it will be long and not particularly pretty. Part of that is simply due to the fact that the statement of the snake lemma is very long. I have a version of Borceux' proof at <a href=\"http://github.com/twofx/lean-homological-algebra\">github.com/twofx/lean-homological-algebra</a>, but it uses custom tactics which are far from mathlib-ready, so it is almost certainly faster to start from scratch with one of the two proofs. It is very unlikely that I will have time to tackle this anytime soon. Borceux' proof uses pseudoelements while Johnstone's proof is arrow-theoretic. We habe pseudoelements, but Johnstone's proof is shorter, so it might be the way to go, but it's hard to tell without trying both ways.</p>",
        "id": 254045642,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1632142976
    },
    {
        "content": "<p>Yes, that's the right thing to do. In any case we need the LES to check that derived functors are δ-functors</p>",
        "id": 254045688,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632142994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> is your repo building with recent mathlib?</p>",
        "id": 254045785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632143031
    },
    {
        "content": "<p>Almost certainly not</p>",
        "id": 254045890,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1632143066
    },
    {
        "content": "<p>If so, maybe we could dump the proof terms that your tactics spit out, and plug those into LTE.</p>",
        "id": 254045891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632143067
    },
    {
        "content": "<p>I just carefully checked the proof of the snake lemma I linked above, and I am pretty confident it's doable in one or two weeks (depending on how complete is the library for abelian categories). It works if the category has enough projectives (or enough injectives).</p>",
        "id": 254045966,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632143101
    },
    {
        "content": "<p>In our case, we do have enough projectives. So maybe that's the best approach for LTE.</p>",
        "id": 254046063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632143133
    },
    {
        "content": "<p>Ah, I didn't think about naturality of the morphism. I don't remember if this is more or less automatic or not</p>",
        "id": 254046274,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632143209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> How one <em>construct</em> the connecting morphism using pseudoelements? I've always thought one can use them to check that a given morphism is zero or similar stuff, but not not produce one. And the main difficulty of the snake lemma is usually to construct <code>δ</code> rather then the exacteness.</p>",
        "id": 254047219,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632143541
    },
    {
        "content": "<p>I couldn't find the cone complex in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homotopy_category\">docs#homotopy_category</a>. Is that in mathlib?</p>",
        "id": 254047272,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1632143570
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 254047300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632143586
    },
    {
        "content": "<p>Relevant link: <a href=\"https://pp.ipd.kit.edu/uploads/publikationen/himmel20bachelorarbeit.pdf\">https://pp.ipd.kit.edu/uploads/publikationen/himmel20bachelorarbeit.pdf</a> is Markus's BSc thesis on diagram chasing in Lean</p>",
        "id": 254047462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632143643
    },
    {
        "content": "<p>I am not sure about the feasibility at the moment (but it works for my graduate class in a day) is to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>K</mi><mo>−</mo></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K^-(\\mathcal A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathcal\">A</span><span class=\"mclose\">)</span></span></span></span> satisfies TR1 - TR3 for a triangulated category (which need to be stated). The fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}(A,-)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}(-,A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> takes triangles to LESs is very quick from that.</p>",
        "id": 254047733,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1632143762
    },
    {
        "content": "<p>There are categories of triangles already <a href=\"https://leanprover-community.github.io/mathlib_docs/find/triangulated\">docs#triangulated</a> but not any axioms.</p>",
        "id": 254047959,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1632143852
    },
    {
        "content": "<p>A triangle in the homotopy category is anything isomorphic to a triangle of the form </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mo><mover><mo><mo>→</mo></mo><mi>ϕ</mi></mover></mo><mi>B</mi><mo>→</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>ϕ</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> A \\overset{\\phi}{\\to} B \\to C(\\phi) \\to A[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.200086em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.200086em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">→</span></span></span><span style=\"top:-3.613978em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ϕ</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ϕ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></span></p>",
        "id": 254048099,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1632143888
    },
    {
        "content": "<p>Almost certainly the most work would got into checking that \"rotation axiom\" TR2.</p>",
        "id": 254048502,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1632144062
    },
    {
        "content": "<p>This way the natural maps in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span>-functor come from the maps in the triangle + naturality of Hom.</p>",
        "id": 254048816,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1632144155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> the connecting homomorphism is constructed via universal properties. IIRC, in the two proofs I cited above this is actually the easier half of the argument.</p>",
        "id": 254050540,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1632144829
    },
    {
        "content": "<p>I think we need the LES for Ext in 3 or 4 places in LTE. So we should probably prioritize getting the <em>statement</em> formalized.</p>",
        "id": 254050605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632144848
    },
    {
        "content": "<p>Maybe we should push for this LES now that snake is finished. The file <code>horseshoe.lean</code> contains a half-hearted attempt at the horseshoe construction.</p>",
        "id": 255035017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632743806
    },
    {
        "content": "<p>I finished the horseshoe construction, although the columns aren't yet tied to <code>ProjectiveResolution</code>.</p>",
        "id": 255184459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632819902
    },
    {
        "content": "<p>But I feel like we are now zoning in fast on the LES for derived functors.</p>",
        "id": 255184495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632819918
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">six_term_exact_seq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">short_exact_sequence</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact_seq</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span>\n    <span class=\"o\">((</span><span class=\"bp\">«</span><span class=\"n\">Ext</span><span class=\"bp\">»</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.g.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">«</span><span class=\"n\">Ext</span><span class=\"bp\">»</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.f.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">δ</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">((</span><span class=\"bp\">«</span><span class=\"n\">Ext</span><span class=\"bp\">»</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.g.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">«</span><span class=\"n\">Ext</span><span class=\"bp\">»</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.f.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">B</span>\n    <span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exact_seq.of_op</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">functor.left_derived.six_term_exact_seq</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 256060595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633354846
    },
    {
        "content": "<p>This still depends on some sorries. Most notably <code>exact f g → exact g.op f.op</code>.</p>",
        "id": 256060652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633354870
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">g.op</span> <span class=\"n\">f.op</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abelian.exact_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">op_comp</span><span class=\"o\">],</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">quiver.hom.unop</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">quiver.hom.unop_inj</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 256162498,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633398082
    },
    {
        "content": "<p>(after adding the correct simp lemmas, of course ;) )</p>",
        "id": 256162516,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633398095
    },
    {
        "content": "<p>Oh great, I was planning to work a little bit on this <code>of_op</code> but it seems it has been unsorried. I am sorry for not being very active this week, I'm at a conference.</p>",
        "id": 256325143,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633470808
    },
    {
        "content": "<p>At any rate I will rather work on the SES with real measures.</p>",
        "id": 256325190,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1633470836
    },
    {
        "content": "<p>So is there any <code>sorry</code> left for LES or you guys are really too fast? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 256384657,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633513822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> There are still 3 of them in <code>horseshoe.lean</code></p>",
        "id": 256388419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633515840
    },
    {
        "content": "<p>I haven't looked at them in the last few days. But I hope they are math-easy.</p>",
        "id": 256388482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633515864
    },
    {
        "content": "<p>I will have a look</p>",
        "id": 256398892,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633521763
    },
    {
        "content": "<p>First <code>sorry</code> killed</p>",
        "id": 256418514,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633529778
    },
    {
        "content": "<p>I've done one and half of the last two <code>sorry</code> in <code>horseshoe_is_projective_resolution₁</code>. The last one is probably the more annoying, but it is just a matter of sitting down and unfolding all the definition I think. I will do it tomorrow if nobody wants to work on it.</p>",
        "id": 256594151,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633619440
    },
    {
        "content": "<p>Thanks so much. I will probably not have time to work on this tomorrow. Did you hit any pain points?</p>",
        "id": 256595643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633619948
    },
    {
        "content": "<p>Not yet, but for the last <code>sorry</code> I will probably need <code>eq_to_hom</code>, so it's probably necessary to be a little careful</p>",
        "id": 256597841,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633620701
    },
    {
        "content": "<p>I bet you never realised that diagram chases were so difficult Riccardo ;-) Are these things in other systems? I remember looking at unimath once and just seeing a ton of category theory</p>",
        "id": 256694307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633674172
    },
    {
        "content": "<p>OK, maybe this last lemma <em>is</em> a little painful... and I got the scary \"motive is not type correct\". I guess I really have to use <code>eq_to_hom</code> everywhere.</p>",
        "id": 256720412,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633689883
    },
    {
        "content": "<p>Hmm, this horseshoe construction is quite annoying.</p>",
        "id": 256726282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633693068
    },
    {
        "content": "<p>I wonder if it was a good idea to do a hands-on definition of SES.</p>",
        "id": 256726658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633693266
    },
    {
        "content": "<p>It would probably have been better to consider functors <code>fin 3 ==&gt; A</code> (together with exactness conditions)</p>",
        "id": 256726684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633693289
    },
    {
        "content": "<p>Because the sorry that is left, is only proving that the first column in the horseshoe construction is a proj resolution. And we'll have to repeat it for row 2 and 3. We can't quantify over <code>fin 3</code>. With the other definition, that would be possible.</p>",
        "id": 256726849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633693372
    },
    {
        "content": "<p>Anyway, copy-paste isn't that hard either... so maybe it's not a very big problem.</p>",
        "id": 256726919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633693410
    },
    {
        "content": "<p>Let me try a little bit. Maybe using pseudoelements was not a good idea</p>",
        "id": 256727856,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633693881
    },
    {
        "content": "<p>Well, this shouldn't really impact the horseshoe sorry.</p>",
        "id": 256728232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633694085
    },
    {
        "content": "<p>And it will be a refactor that takes some time</p>",
        "id": 256728250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633694098
    },
    {
        "content": "<p>Somehow this <code>sorry</code> should boil down to: <code>exact f  g</code> following from: <code>f</code> factors through an epi onto the kernel of <code>g</code>.</p>",
        "id": 256728399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633694175
    },
    {
        "content": "<p>Because that's basically how the <code>f</code> and <code>g</code> in this case are defined.</p>",
        "id": 256728426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633694191
    },
    {
        "content": "<p>But since several constructions are pasted on top of this, it might not be so easy to apply that observation.</p>",
        "id": 256728463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633694214
    },
    {
        "content": "<p>There must be something I don't understand about <code>eq_to_hom</code> (or something else). For example, do you why the following doesn't work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">horseshoe_to_single₁</span><span class=\"o\">],</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">chain_complex.of_d</span><span class=\"o\">,</span> <span class=\"n\">chain_complex.of_d</span><span class=\"o\">],</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">horseshoe_d</span><span class=\"o\">,</span> <span class=\"n\">horseshoe_step</span><span class=\"o\">],</span>\n\n    <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">horseshoe_base_π</span> <span class=\"o\">(</span><span class=\"n\">horseshoe_step</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">horseshoe_step</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">--now the goal is</span>\n    <span class=\"c1\">--exact (horseshoe_base_π (horseshoe_ker f) ≫ eq_to_hom _ ≫ horseshoe_ker_ι f).fst</span>\n    <span class=\"c1\">--(f ≫ eq_to_hom _ ≫ g).fst</span>\n\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">short_exact_sequence.comp_fst</span><span class=\"o\">],</span> <span class=\"c1\">--this doesn't work</span>\n\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>where</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comp_fst</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f.1</span> <span class=\"bp\">≫</span> <span class=\"n\">g.1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 256731562,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633695920
    },
    {
        "content": "<p>Very strange.</p>",
        "id": 256733496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633696967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">kernel</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">kernel</span> <span class=\"n\">g</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">kernel.ι</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">horseshoe_exact₁</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">short_exact_sequence</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(((</span><span class=\"n\">homological_complex.Fst</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">horseshoe</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(((</span><span class=\"n\">homological_complex.Fst</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">horseshoe</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">horseshoe_to_single₁</span><span class=\"o\">],</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">chain_complex.of_d</span><span class=\"o\">,</span> <span class=\"n\">chain_complex.of_d</span><span class=\"o\">],</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">horseshoe_d</span><span class=\"o\">,</span> <span class=\"n\">horseshoe_step</span><span class=\"o\">],</span>\n\n  <span class=\"n\">set</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">horseshoe_base_π</span> <span class=\"o\">(</span><span class=\"n\">horseshoe_step</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">horseshoe_step</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">convert</span> <span class=\"n\">aux</span> <span class=\"n\">f.1</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">horseshoe_base_π</span> <span class=\"o\">(</span><span class=\"n\">horseshoe_ker</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 256734454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633697454
    },
    {
        "content": "<p>Also, I think the <code>cases n</code> is crucial.</p>",
        "id": 256734485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633697470
    },
    {
        "content": "<p>It might work as a first step in the original problem as well.</p>",
        "id": 256734512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633697485
    },
    {
        "content": "<p>Ah yes, doing <code>cases n</code> makes <code>rw short_exact_sequence.comp_fst</code> working! I don't really understand why, but I am happy with your solution.</p>",
        "id": 256734893,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633697645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> probably because</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">horseshoe_to_single₁</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">chain_complex.to_single₀_equiv</span>\n</code></pre></div>\n<p>is using a <code>match</code> on a natural number, under the hood</p>",
        "id": 256735017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633697708
    },
    {
        "content": "<p><code>for_mathlib/horseshoe</code> is <code>sorry</code> free.</p>",
        "id": 256743557,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633701516
    },
    {
        "content": "<p>Wow, that's awesome!</p>",
        "id": 256743906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633701640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> would you mind copy-pasting the final bit to show that <code>Snd</code> and <code>Trd</code> also give projective resolutions?</p>",
        "id": 256743964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633701664
    },
    {
        "content": "<p>I think that should really be copy-pastable</p>",
        "id": 256743994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633701673
    },
    {
        "content": "<p>Sure! But let me have a coffee first.</p>",
        "id": 256744325,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633701803
    },
    {
        "content": "<p>No problem for <code>Trd</code>, but <code>Snd</code> is different. I am maybe tired, but I don't see how to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">epi_horseshoe_base_π_2</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"o\">(</span><span class=\"n\">horseshoe_base_π</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 256750409,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633704225
    },
    {
        "content": "<p>hmm, I need to run, but I will think about it.</p>",
        "id": 256750528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633704266
    },
    {
        "content": "<p>I mean, even with pen and paper it doesn't seem obvious. It's probably OK with elements, but I have to try</p>",
        "id": 256750699,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633704338
    },
    {
        "content": "<p>Ah, of course it is because of the snake lemma!</p>",
        "id": 256755287,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633706177
    },
    {
        "content": "<p>Yeah, I realised it just when I stepped in the car.</p>",
        "id": 256756206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633706513
    },
    {
        "content": "<p>Now it will be interesting to see how easy it is to deduce this from the snake lemma in Lean.</p>",
        "id": 256756284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633706533
    },
    {
        "content": "<p>Note that you can construct a <code>snake_input</code> from <code>hom</code> of SES.</p>",
        "id": 256756318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633706550
    },
    {
        "content": "<p><code>mk_of_short_exact_sequence_hom</code></p>",
        "id": 256756387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633706579
    },
    {
        "content": "<p>Yes, it's a good test for our API. We will need <code>cokernel_sequence</code> (currently we only have <code>kernel_sequence</code>), and things like <code>epi f</code> iff <code>is_zero (cokernel f)</code></p>",
        "id": 256758011,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633707249
    },
    {
        "content": "<p>But I'm done for today :)</p>",
        "id": 256758067,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633707278
    },
    {
        "content": "<p>I think we could use <code>six_term_exact_sequence</code> and <code>exact_seq.extract</code> to get the relevant bit.</p>",
        "id": 256759318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633707795
    },
    {
        "content": "<p>Can't you just use <code>row_exact₃</code>?</p>",
        "id": 256764736,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633709983
    },
    {
        "content": "<p>(with <code>mk_of_short_exact_sequence_hom</code>)</p>",
        "id": 256764842,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633710012
    },
    {
        "content": "<p>I just realized we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.epi_of_epi_of_epi_of_mono\">docs#category_theory.abelian.epi_of_epi_of_epi_of_mono</a></p>",
        "id": 256779786,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633715937
    },
    {
        "content": "<p>tada!</p>",
        "id": 256783021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633717243
    },
    {
        "content": "<p>It worked like a charm!</p>",
        "id": 256784027,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633717662
    },
    {
        "content": "<p>We now have the three projective resolutions.</p>",
        "id": 256784164,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633717716
    },
    {
        "content": "<p>Cool. Seems like we are very close to a sorry-free LES then!</p>",
        "id": 256792458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633721101
    },
    {
        "content": "<p>I am trying to prove <code>snake_diagram_is_snake_input</code> in <code>src/for_mathlib/homological_complex.lean</code>, but I am getting again the \"motive is not type correct\" error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">snake_diagram_is_snake_input</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">chain_complex</span> <span class=\"o\">(</span><span class=\"n\">short_exact_sequence</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_snake_input</span> <span class=\"o\">(</span><span class=\"n\">snake_diagram</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">row_exact₁</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">snake_diagram</span><span class=\"o\">,</span> <span class=\"n\">snake_diagram.mk_functor''</span><span class=\"o\">,</span> <span class=\"n\">snake_diagram.mk_functor'</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">--Now the goal is:</span>\n    <span class=\"c1\">--exact ((![homology_functor C (complex_shape.down ℕ) (n + 1), mod_boundaries_functor (n + 1),</span>\n    <span class=\"c1\">--cycles_functor C (complex_shape.down ℕ) n, homology_functor C (complex_shape.down ℕ) n] 1).map</span>\n    <span class=\"c1\">--(--(Fst_Snd C).app A)) ((![homology_functor C (complex_shape.down ℕ) (n + 1),</span>\n    <span class=\"c1\">--mod_boundaries_functor (n + 1), cycles_functor C (complex_shape.down ℕ) n,</span>\n    <span class=\"c1\">--homology_functor C (complex_shape.down ℕ) n] 1).map ((Snd_Trd C).app A))</span>\n\n    <span class=\"c1\">-- Note the ![homology_functor C (complex_shape.down ℕ) (n + 1), mod_boundaries_functor (n + 1),</span>\n    <span class=\"c1\">--cycles_functor C (complex_shape.down ℕ) n, homology_functor C (complex_shape.down ℕ) n] 1</span>\n    <span class=\"c1\">--that is not simplified</span>\n\n\n\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">homology_functor</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.down</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">mod_boundaries_functor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n        <span class=\"n\">cycles_functor</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.down</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">homology_functor</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.down</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span>\n        <span class=\"n\">mod_boundaries_functor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"c1\">--this fails with motive is not type correct</span>\n   <span class=\"kd\">end</span><span class=\"o\">,</span>\n   <span class=\"n\">row_exact₂</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n   <span class=\"n\">col_exact₁</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n   <span class=\"n\">col_exact₂</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n   <span class=\"n\">col_mono</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n   <span class=\"n\">col_epi</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n   <span class=\"n\">row_mono</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n   <span class=\"n\">row_epi</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I didn't tried very hard to solve this, but it is maybe an indication that we did something wrong ? (I've tried <code>cases n</code>, just because it solved the problem in another lemma, but it doesn't work.)</p>",
        "id": 257181461,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634034946
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">snake_diagram</span><span class=\"o\">,</span> <span class=\"n\">snake_diagram.mk_functor''</span><span class=\"o\">,</span> <span class=\"n\">snake_diagram.mk_functor'</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">snake_diagram.mk_functor_map_g1</span><span class=\"o\">,</span> <span class=\"n\">snake_diagram.mk_functor_map_f1</span><span class=\"o\">],</span>\n    <span class=\"k\">show</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">mod_boundaries_functor</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">mod_boundaries_functor</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>works to get a reasonable goal state.</p>",
        "id": 257183244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634036047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Maybe we should wait with these sorries.</p>",
        "id": 257184458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634036757
    },
    {
        "content": "<p>The point is: for the BD lemma we'll need triangles like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>H</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\tau_{\\ge i+1}C \\to \\tau_{\\ge i} C \\to H_i(C)[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, and we will also need long exact sequences for those.</p>",
        "id": 257184574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634036821
    },
    {
        "content": "<p>So I think we should tell Lean what the distinguished triangles in the homotopy category are, and get a LES for those.</p>",
        "id": 257184647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634036864
    },
    {
        "content": "<p>Maybe that will boil down to this same lemma, but I'm not sure if it will be defeq the same lemma.</p>",
        "id": 257184735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634036897
    },
    {
        "content": "<p>The relevant sections of the stacks project seem to be <a href=\"https://stacks.math.columbia.edu/tag/014D\">https://stacks.math.columbia.edu/tag/014D</a> and <a href=\"https://stacks.math.columbia.edu/tag/014P\">https://stacks.math.columbia.edu/tag/014P</a></p>",
        "id": 257189127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634039280
    },
    {
        "content": "<p>Ah OK, if we need it in greater generality I agree it's better to wait.</p>",
        "id": 257197703,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634043406
    },
    {
        "content": "<p>I have a construction of the mapping cone. But not yet the map that completes the triangle, because we don't yet have an instance of <code>has_shift (homological_complex A c)</code></p>",
        "id": 257198133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634043585
    },
    {
        "content": "<p>Pushed</p>",
        "id": 257198671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634043780
    },
    {
        "content": "<p>About this shift: there seem to be several conventions. Is there an orthodox convention that unifies chain complexes and cochain complexes?</p>",
        "id": 257198758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634043828
    },
    {
        "content": "<p><a href=\"https://doc.sagemath.org/html/en/reference/homology/sage/homology/chain_complex.html#sage.homology.chain_complex.ChainComplex_class.shift\">https://doc.sagemath.org/html/en/reference/homology/sage/homology/chain_complex.html#sage.homology.chain_complex.ChainComplex_class.shift</a> says that the shift always goes in the opposite direction as the differential</p>",
        "id": 257198846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634043856
    },
    {
        "content": "<p>But I have no idea if this is an accepted standard. I think that <a href=\"https://stacks.math.columbia.edu/tag/0119\">https://stacks.math.columbia.edu/tag/0119</a> does something else</p>",
        "id": 257198973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634043918
    },
    {
        "content": "<p>I am always confused by this, but usually at the end I expect that, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>i</mi></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">[</mo><mo>−</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>H</mi><mn>0</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">F</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^i(\\mathcal{F}[-i]) = H^0(\\mathcal{F})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0746639999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">])</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 257200972,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634044777
    },
    {
        "content": "<p>I guess that follows the Stacks convention. But the Sage convention only agrees for one of the two: chain or cochain complexes. (I didn't yet check which one, because I'm also confused.)</p>",
        "id": 257201318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634044908
    },
    {
        "content": "<p>But if we want a triangle</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>A</mi><mover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mi>f</mi></mpadded></mover><mi>B</mi><mo>→</mo><mtext>Cone</mtext><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A \\xrightarrow{f} B → \\text{Cone}(f) → A[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1191079999999998em;vertical-align:-0.010999999999999899em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.010999999999999899em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Cone</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></span></p>\n<p>for both chain and cochain complexes, then I guess this forces what the shift should be, right?</p>",
        "id": 257201771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045056
    },
    {
        "content": "<p>And we probably want the homotopy category of both versions to be a triangulated category in the end.</p>",
        "id": 257201860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634045100
    },
    {
        "content": "<p>Stack project <a href=\"https://stacks.math.columbia.edu/tag/05RN\">says</a> that the homotopy category is built using cochain complexes. I have no idea if there is some convention that works only in this case.</p>",
        "id": 257203396,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634045716
    },
    {
        "content": "<p>In my opinion following them is a good idea: they are aware of these annoyances and we can be reasonably sure what they say is really correct, and not only correct up to sign or something</p>",
        "id": 257204136,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634045965
    },
    {
        "content": "<p>There is also <a href=\"https://stacks.math.columbia.edu/tag/0FNG\">this</a> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 257207993,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634047449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Great! That's a useful link!</p>",
        "id": 257208771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634047725
    },
    {
        "content": "<p>What a nice read when you have difficulties finding sleep...</p>",
        "id": 257209370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634047943
    },
    {
        "content": "<p>I think you can reproduce all these sign rules if you:</p>\n<ol>\n<li>write [1]A instead of A[1] for grading shifts</li>\n<li>insert a sign every time a \"graded symbol\" (a differential, an element, or a shift functor) moves past another graded symbol (in the purely syntactic sense of formulas written on the page).</li>\n</ol>",
        "id": 257264728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634069510
    },
    {
        "content": "<p>It's a bit terrifying that \"random\" sign choices are being deemed \"canonical\"</p>",
        "id": 257271204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634072343
    },
    {
        "content": "<p>I know 2 as the Koszul sign rule, not sure who gave it its name, but in the literature I'm reading it is the standard choice for the \"random\" sign conventions.</p>",
        "id": 257272974,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1634073133
    },
    {
        "content": "<p>I really don't think they are random. If you draw the relevant string diagram in the monoidal category SVect (or super-whatever), and remember that the braiding there is <em>not</em> the braiding in Z/2Z graded Vect, then the number of minus signs is always the number of times you use the nontrivial part of the braiding. In normal langauge, this just compiles down the the usual Koszul sign rule --- read the literal order of symbols appearing on either side of an equation, calculate the permutation that has been applied, and put in a minus sign every time you transposed two odd symbols.</p>",
        "id": 257281902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634077847
    },
    {
        "content": "<p>As I said above, this only reproduces the rules in Stacks if you write grading shifts \"on the left\", i.e. as [1]A instead of A[1].</p>",
        "id": 257281944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634077878
    },
    {
        "content": "<p>(One could even imagine a type-checker for the Koszul sign rule, given that it is purely syntactic...)</p>",
        "id": 257282095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634077954
    },
    {
        "content": "<p>While you're at it, you could also use a less confusing notation for the shift like ΣA... oops maybe not a great idea in Lean</p>",
        "id": 257283225,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634078722
    },
    {
        "content": "<p>There are lots of unicode variants: <code>𝛴A</code>, <code>⅀A</code>, <code>⨊A</code>,  ...</p>",
        "id": 257283570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634078952
    },
    {
        "content": "<p>The italic sigma is actually pretty nice.</p>",
        "id": 257283600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634078972
    },
    {
        "content": "<p>Hmm, I like the idea of refactoring <code>has_shift</code> to use a sigma-like notation</p>",
        "id": 257310577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634100701
    },
    {
        "content": "<p>Wait, do you actually think that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mord mathnormal\">A</span></span></span></span> is a good notation for the shift? (Well, maybe my dislike for the topologists' <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> notation stems more from disliking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">Σ</mi><mo>+</mo><mi mathvariant=\"normal\">∞</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\Sigma^\\infty_+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.988661em;vertical-align:-0.305331em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.305331em;\"><span></span></span></span></span></span></span></span></span></span> as a way to denote what is essentially a free abelian group. But it also has an unfortunate clash with \"sum\".)</p>",
        "id": 257323801,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1634110906
    },
    {
        "content": "<p>The notation for quadratic residues has an unfortunate clash with fractions in brackets, but we don't seem to get confused.</p>",
        "id": 257324272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634111173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/LES.20for.20Ext/near/257323801\">said</a>:</p>\n<blockquote>\n<p>Wait, do you actually think that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mord mathnormal\">A</span></span></span></span> is a good notation for the shift?</p>\n</blockquote>\n<p>No, I think it's a good notation for the suspension <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <br>\nI can never remember which direction is \"the shift\", or which direction is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>. But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mord mathnormal\">A</span></span></span></span> has to be the thing in the cofiber sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>→</mo><mi mathvariant=\"normal\">Σ</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B \\to C \\to \\Sigma A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span><span class=\"mord mathnormal\">A</span></span></span></span>, and so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Σ</mi><mi>A</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>π</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi_{n+1}(\\Sigma A) = \\pi_n(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">Σ</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>.<br>\nFrom my perspective the Stacks project is doing something strange, writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>→</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A \\to B \\to C \\to A[-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> for a cofiber sequence of chain complexes, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>→</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A \\to B \\to C \\to A[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> for a cofiber sequence of cochain complexes. I would rather think of both chain complexes and cochain complexes as sitting inside unbounded complexes, with the cochain complexes in negative degree. So, those conventions don't really work for me. Luckily, it doesn't affect the sign conventions because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">-i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">i</span></span></span></span> have the same parity.</p>",
        "id": 257338943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634118759
    },
    {
        "content": "<p>Another standard one is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mi>n</mi></msup><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">S^nA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span></span></span></span></p>",
        "id": 257343188,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634121070
    },
    {
        "content": "<p><a href=\"https://unicode-table.com/en/search/?q=shift\">https://unicode-table.com/en/search/?q=shift</a> lists some unicode symbols related to \"shift\". All of them will be considered unorthodox <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 257358887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634129285
    },
    {
        "content": "<p>Does anyone know how to get the LES for the distinguished triangle <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>H</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">[</mo><mo>−</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">τ_{≥ i+1} C → τ_{≥ i} C → H_i(C)[-i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> in a hands-on manner? Currently, the only way I see is to show that the homotopy category of complexes is a pre-triangulated category and setup the general machinery. Are there viable shortcuts?</p>",
        "id": 257359653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634129622
    },
    {
        "content": "<p><span aria-label=\"point left\" class=\"emoji emoji-1f448\" role=\"img\" title=\"point left\">:point_left:</span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mi>n</mi></msup><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">{}^nA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">A</span></span></span></span> has my vote</p>",
        "id": 257359690,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634129639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/LES.20for.20Ext/near/257359653\">said</a>:</p>\n<blockquote>\n<p>Does anyone know how to get the LES for the distinguished triangle <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>H</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">[</mo><mo>−</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">τ_{≥ i+1} C → τ_{≥ i} C → H_i(C)[-i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> in a hands-on manner? Currently, the only way I see is to show that the homotopy category of complexes is a pre-triangulated category and setup the general machinery. Are there viable shortcuts?</p>\n</blockquote>\n<p>Does this arise from a SES of complexes? I always get my truncations confused</p>",
        "id": 257360334,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634129897
    },
    {
        "content": "<p>I guess you can see it as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi></mrow></msub><mi>C</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>τ</mi><mrow><mo>≤</mo><mi>i</mi></mrow></msub><mo stretchy=\"false\">(</mo><msub><mi>τ</mi><mrow><mo>≥</mo><mi>i</mi></mrow></msub><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">τ_{≥ i+1} (τ_{≥ i} C) → τ_{≥ i} C → τ_{≤ i} (τ_{≥ i} C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.928509em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 257360938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634130131
    },
    {
        "content": "<p>Not sure if that helps.</p>",
        "id": 257360966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634130144
    },
    {
        "content": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.2500em\" columnalign=\"center center center center center center center\" columnspacing=\"0.5em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>ker</mi><mo>⁡</mo><msup><mi>d</mi><mi>i</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mo lspace=\"0em\" rspace=\"0em\">=</mo></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>ker</mi><mo>⁡</mo><msup><mi>d</mi><mi>i</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mo lspace=\"0em\" rspace=\"0em\">=</mo></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>ker</mi><mo>⁡</mo><msup><mi>d</mi><mi>i</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>C</mi><mi>i</mi></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><msup><mi>d</mi><mi>i</mi></msup></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><msup><mi>d</mi><mi>i</mi></msup></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mo lspace=\"0em\" rspace=\"0em\">=</mo></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>ker</mi><mo>⁡</mo><msup><mi>d</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>H</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd></mtr><mtr></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{CD}\n@. \\ker d^i @&gt;=&gt;&gt; \\ker d^i @. \\\\\n@. @V=VV @VVV @. \\\\\n0 @&gt;&gt;&gt; \\ker d^i @&gt;&gt;&gt; C^i @&gt;d^i&gt;&gt; C^{i+1} \\\\\n@. @VVV @Vd^iVV @V=VV \\\\\n@. 0 @&gt;&gt;&gt; \\ker d^{i+1} @&gt;&gt;&gt; C^{i+1} \\\\\n@. @. @VVV @. \\\\\n@. @. H^{i+1}(C) @.\n\\end{CD}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:13.02342em;vertical-align:-5.465210000000001em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.558209999999999em;\"><span style=\"top:-9.906569999999999em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:-8.067665em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span><span style=\"top:-5.864189999999998em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\">0</span></span><span style=\"top:-4.025284999999997em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span><span style=\"top:-2.1701699999999975em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:-0.3312649999999987em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span><span style=\"top:1.5238500000000008em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.465210000000001em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.558209999999999em;\"><span style=\"top:-9.906569999999999em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span><span style=\"top:-8.067665em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:-5.864189999999998em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4000000000000004em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-4.025284999999997em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:-2.1701699999999975em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span><span style=\"top:-0.3312649999999987em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:1.5238500000000008em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.465210000000001em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.558209999999999em;\"><span style=\"top:-9.906569999999999em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mop\">ker</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span style=\"top:-8.067665em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"><span class=\"mrel mtight\">=</span></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-5.864189999999998em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mop\">ker</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span style=\"top:-4.025284999999997em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-2.1701699999999975em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\">0</span></span><span style=\"top:-0.3312649999999987em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span><span style=\"top:1.5238500000000008em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.465210000000001em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.558209999999999em;\"><span style=\"top:-9.906569999999999em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.878809em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"><span class=\"mrel mtight\">=</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.5780000000000003em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-8.067665em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:-5.864189999999998em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4000000000000004em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-4.025284999999997em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:-2.1701699999999975em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4000000000000004em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-0.3312649999999987em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:1.5238500000000008em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.465210000000001em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.558209999999999em;\"><span style=\"top:-9.906569999999999em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mop\">ker</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span style=\"top:-8.067665em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-5.864189999999998em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span style=\"top:-4.025284999999997em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9020857142857143em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-2.1701699999999975em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mop\">ker</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.3312649999999987em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:1.5238500000000008em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.465210000000001em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.558209999999999em;\"><span style=\"top:-9.906569999999999em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span><span style=\"top:-8.067665em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:-5.864189999999998em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.25346em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9020857142857143em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.5780000000000003em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.12199999999999989em;\"><span></span></span></span></span></span></span><span style=\"top:-4.025284999999997em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:-2.1701699999999975em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4000000000000004em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-0.3312649999999987em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:1.5238500000000008em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.465210000000001em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.558209999999999em;\"><span style=\"top:-9.906569999999999em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span><span style=\"top:-8.067665em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span><span style=\"top:-5.864189999999998em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.025284999999997em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"><span class=\"mrel mtight\">=</span></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-2.1701699999999975em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:-0.3312649999999987em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span><span class=\"mord\"> </span></span><span style=\"top:1.5238500000000008em;\"><span class=\"pstrut\" style=\"height:3.25346em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.465210000000001em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>This?</p>",
        "id": 257364541,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634131622
    },
    {
        "content": "<p>Your CD skills are impressive! I didn't know Zulip could do this!</p>",
        "id": 257364938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634131770
    },
    {
        "content": "<p>It is only the commutative diagram package handled by KaTeX. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 257365096,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634131814
    },
    {
        "content": "<p>You will have to help me a bit with understanding how this helps us with getting the LES for <code>Ext(_, V)</code> applied to that triangle.</p>",
        "id": 257365122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634131828
    },
    {
        "content": "<p>If I pretend the top row is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then I have a short exact sequence of complexes</p>",
        "id": 257365189,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634131857
    },
    {
        "content": "<p>But it isn't termwise split, so we would still need to work, right?</p>",
        "id": 257365404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634131926
    },
    {
        "content": "<p>Good point. I was thinking of just homology in my head</p>",
        "id": 257365635,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634132010
    },
    {
        "content": "<p>Do you have injectives?</p>",
        "id": 257365824,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634132079
    },
    {
        "content": "<p>This CD code brings back very old memories...</p>",
        "id": 257365839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634132083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> Mathlib only knows about projectives and projective resolutions atm</p>",
        "id": 257366114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634132181
    },
    {
        "content": "<p>It doesn't yet know how to apply a derived functor to a complex, but we will certainly need to teach it that.</p>",
        "id": 257366162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634132205
    },
    {
        "content": "<p>I guess assume that each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> is projective then.</p>",
        "id": 257366172,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634132208
    },
    {
        "content": "<p>I don't think we can do that. So we'll have to replace the complexes with quasi-isomorphic complexes consisting of projectives.</p>",
        "id": 257366249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634132241
    },
    {
        "content": "<p>There are a lot of equalities in the diagram. The only issue is whether the middle column can be kept exact.</p>",
        "id": 257366383,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634132284
    },
    {
        "content": "<p>But how does a SES of complexes help, if it's not termwise split?</p>",
        "id": 257366770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634132424
    },
    {
        "content": "<p>After applying <code>Hom(_, V)</code> you end up with a SneS of complexes, and then what do you do?</p>",
        "id": 257366829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634132452
    },
    {
        "content": "<p>SES of complexes =&gt; LES of homology requires some assumptions on the complex?</p>",
        "id": 257366963,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634132514
    },
    {
        "content": "<p>I dunno. Whatever we do, it will need to be explained to Lean.</p>",
        "id": 257367909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634132888
    },
    {
        "content": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.2500em\" columnalign=\"center center center\" columnspacing=\"0.5em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>C</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>C</mi><mi>i</mi></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mi>w</mi></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>D</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mi>v</mi></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>D</mi><mi>i</mi></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mi>u</mi></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mi>y</mi></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>E</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mi>x</mi></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msup><mi>E</mi><mi>i</mi></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi mathvariant=\"normal\"> </mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mn>0</mn></mstyle></mtd></mtr><mtr></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{CD}\n0 @. 0 \\\\\n@VVV @VVV \\\\\nC^{i-1} @&gt;&gt;&gt; C^i \\\\\n@VVV @VwVV \\\\\nD^{i-1} @&gt;v&gt;&gt; D^i \\\\\n@VuVV @VyVV \\\\\nE^{i-1} @&gt;x&gt;&gt; E^i \\\\\n@VVV @VVV \\\\\n0 @. 0\n\\end{CD}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:16.405663999999998em;vertical-align:-7.156332em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:9.249331999999999em;\"><span style=\"top:-11.495237em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\">0</span></span><span style=\"top:-9.656331999999999em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-7.8012169999999985em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:-5.962311999999999em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-4.088904999999999em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">u</span></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-0.3765930000000002em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span><span style=\"top:1.4623120000000007em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:3.3174269999999995em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\">0</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.156332em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:9.249331999999999em;\"><span style=\"top:-11.495237em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\"> </span></span><span style=\"top:-9.656331999999999em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span></span><span style=\"top:-7.8012169999999985em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4000000000000004em;\"><span class=\"pstrut\" style=\"height:2.5220000000000002em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-5.962311999999999em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span></span><span style=\"top:-4.088904999999999em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.923392em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.5780000000000003em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span></span><span style=\"top:-0.3765930000000002em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.923392em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.5780000000000003em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:1.4623120000000007em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span></span><span style=\"top:3.3174269999999995em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\"> </span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.156332em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:9.249331999999999em;\"><span style=\"top:-11.495237em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\">0</span></span><span style=\"top:-9.656331999999999em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-7.8012169999999985em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span style=\"top:-5.962311999999999em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-4.088904999999999em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.663892em;\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-0.3765930000000002em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span style=\"top:1.4623120000000007em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151005em;\"><span style=\"top:-1.9660050000000004em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558005em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span style=\"height:0.61601em;width:0.667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.667em' height='0.61601em' style='width:0.667em' viewBox='0 0 667 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.1660150000000002em;\"><span class=\"pstrut\" style=\"height:2.61601em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6500149999999999em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:3.3174269999999995em;\"><span class=\"pstrut\" style=\"height:3.151005em;\"></span><span class=\"mord\">0</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:7.156332em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>∈</mo><msup><mi>E</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e \\in E^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x(e) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, pick some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>∈</mo><msup><mi>D</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">d \\in D^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">u(d) = e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mi>v</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">yv(d) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> so there is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>∈</mo><msup><mi>C</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">c \\in C^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo stretchy=\"false\">(</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>v</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">w(c) = v(d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span>. This should induce the map</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>H</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi>H</mi><mi>i</mi></msup><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^{i-1}(E) \\to H^i(C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.124664em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1246639999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span></span></p>",
        "id": 257368936,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634133251
    },
    {
        "content": "<p>Aah, sure. So a SES of complexes gives you a LES of homology. We almost have this in Lean.</p>",
        "id": 257369266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634133375
    },
    {
        "content": "<p>I thought so.</p>",
        "id": 257369304,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634133389
    },
    {
        "content": "<p>But if you have that triangle of truncations, you first need to apply <code>Hom(_, V)</code>. And that will destroy all SESiness, unless you have split SES's.</p>",
        "id": 257369351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634133409
    },
    {
        "content": "<p>I store this in the same part of my brain with <span aria-label=\"five\" class=\"emoji emoji-0035-20e3\" role=\"img\" title=\"five\">:five:</span></p>",
        "id": 257369354,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634133409
    },
    {
        "content": "<p>Since everyone other column is an identity map, you only need to worry about exactness of </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>0</mn><mo>←</mo><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>ker</mi><mo>⁡</mo><msup><mi>d</mi><mi>i</mi></msup><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>←</mo><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msup><mi>C</mi><mi>i</mi></msup><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>←</mo><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>ker</mi><mo>⁡</mo><msup><mi>d</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>←</mo><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msup><mi>H</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>V</mi><mo stretchy=\"false\">)</mo><mo>←</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0 \\leftarrow \\operatorname{Hom}(\\ker d^i, V) \\leftarrow \\operatorname{Hom}(C^i,V) \\leftarrow \\operatorname{Hom}(\\ker d^{i+1},V) \\leftarrow \\operatorname{Hom}(H^{i+1}(C),V) \\leftarrow 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1246639999999999em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mop\">ker</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1246639999999999em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.124664em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mop\">ker</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.124664em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">←</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>But in general, this is probably not exact without some conditions on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>.</p>",
        "id": 257370207,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634133695
    },
    {
        "content": "<p>Perhaps you can say that</p>",
        "id": 257371230,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634134016
    },
    {
        "content": "<p>Yup, exactly</p>",
        "id": 257373024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634134686
    },
    {
        "content": "<p>But to do that, we might need to develop quite some machinery</p>",
        "id": 257373109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634134726
    },
    {
        "content": "<p>Note that it's not clear to me that <code>C</code> consists of projective objects in our application. So even that <span class=\"tex-error\">$$\\text{Cone}(_ → _)$$</span> will require some extra help, when we want to take <code>Ext(_, V)</code></p>",
        "id": 257373404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634134817
    },
    {
        "content": "<p>It would be very nice if some version of <a href=\"https://core.ac.uk/download/pdf/81936182.pdf\">Lemma 1.2</a> is true in this setting.</p>",
        "id": 257373611,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634134898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/LES.20for.20Ext/near/257338943\">said</a>:</p>\n<blockquote>\n<p>From my perspective the Stacks project is doing something strange, writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>→</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A \\to B \\to C \\to A[-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> for a cofiber sequence of chain complexes, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>→</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A \\to B \\to C \\to A[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> for a cofiber sequence of cochain complexes.</p>\n</blockquote>\n<p>Wait, this is what the Stacks Project does? That's awkward indeed. I always thought that shifts are normalized so that there are triangles</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>→</mo><mi>A</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> A\\to B\\to C\\to A[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></p>\n<p>no matter what your other conventions are. This means that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">M[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> puts an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> into homological degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> (=cohomological degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">-n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">n</span></span></span></span>), so this gives a slight bias to homological conventions, which I'm fine with. [Drinfeld recently wrote a paper about DG algebras in cohomological degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>...]</p>\n<p>(Aaah, the Stacks project is even weirder: It adapts its shift according to whether things are homological or cohomological, but it uses the <em>unintuitive</em> normalization in both cases! <em>runs away screaming</em> <span aria-label=\"running\" class=\"emoji emoji-1f3c3\" role=\"img\" title=\"running\">:running:</span> <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> )</p>",
        "id": 257375813,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1634135630
    },
    {
        "content": "<p>Right, the axioms of a triangulated category basically force these conventions on you (which might not even be the best reason out there).</p>",
        "id": 257376280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634135776
    },
    {
        "content": "<p>I am working on the LES for derived functor. Specifically on the following lemma.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">six_term_exact_seq</span> <span class=\"o\">[</span><span class=\"n\">F.additive</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">short_exact_sequence</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact_seq</span> <span class=\"n\">D</span> <span class=\"o\">[</span>\n    <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.g</span><span class=\"o\">,</span>\n    <span class=\"n\">δ</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.g</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 271851362,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644856164
    },
    {
        "content": "<p>There is one more thing that has been lingering in the background.... It's hard to compute <code>Ext</code>.</p>\n<p>Here is the current definition of <code>Ext</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`Ext R C n` is defined by deriving in the frst argument of `(X, Y) ↦ Module.of R (unop X ⟶ Y)`</span>\n<span class=\"sd\">(which is the second argument of `linear_yoneda`).</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ext</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">functor.flip</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">(((</span><span class=\"n\">linear_yoneda</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_op.left_derived</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_op</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">nat_trans.left_derived</span> <span class=\"o\">((</span><span class=\"n\">linear_yoneda</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right_op</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_op</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"o\">}</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>So, essentially, you take an opposite, compute a <em>left derived functor,</em> and take another opposite.</p>\n<p>As far as I know, we still don't really have a good way of identifying <code>Ext</code> with the homology of <code>Hom(P,B)</code> where <code>P</code> is a projective resolution, because of this really annoying issue of going between <code>homology f.op g.op</code> and <code>op (homology g f)</code>..</p>",
        "id": 271875821,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644866727
    },
    {
        "content": "<p>In <code>for_mathlib/derived_functor</code> there is now a completely sorry-free proof of LES for left derived functors, except for the degree 0 part.</p>",
        "id": 272139088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645028735
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">six_term_exact_seq</span> <span class=\"o\">[</span><span class=\"n\">F.additive</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">short_exact_sequence</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact_seq</span> <span class=\"n\">D</span> <span class=\"o\">[</span>\n    <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.g</span><span class=\"o\">,</span>\n    <span class=\"n\">δ</span> <span class=\"n\">F</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">A.g</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exact_seq.cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exact_of_short_exact</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exact_seq.cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exact_of_short_exact.δ_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exact_seq.cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exact_of_short_exact.δ_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exact_seq.cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exact_of_short_exact</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exact_seq.single</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272139197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645028773
    },
    {
        "content": "<p>For the degree <code>0</code> part, we will actually need to tell Lean what a right exact functor is <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 272139268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645028805
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.preserves_finite_colimits\">docs#category_theory.limits.preserves_finite_colimits</a> ?</p>",
        "id": 272140749,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645029391
    },
    {
        "content": "<p>What we need is that it sends a short exact sequence to a short(er) exact sequence, but this should follows from that definition without too much trouble I hope.</p>",
        "id": 272141039,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645029505
    },
    {
        "content": "<p>Well, what I mean is that preserving finite colimits is a more general way to phrase right exactness.</p>",
        "id": 272141145,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645029557
    },
    {
        "content": "<p>Yeah, we should just use that.</p>",
        "id": 272141707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645029818
    },
    {
        "content": "<p>Do we already know that between abelian cats, such a functor preserves <code>epi</code>s?</p>",
        "id": 272141758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645029843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/LES.20for.20Ext/near/272141758\">said</a>:</p>\n<blockquote>\n<p>Do we already know that between abelian cats, such a functor preserves <code>epi</code>s?</p>\n</blockquote>\n<p>I'm not sure...</p>",
        "id": 272141796,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645029855
    },
    {
        "content": "<p>The tail of the LES should now be really easy.</p>",
        "id": 272141821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645029866
    },
    {
        "content": "<p>I think we know that pushout-preserving functors preserve epis. But there might be universe issues?</p>",
        "id": 272142124,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645029993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> do you remember what the lemma is called?</p>",
        "id": 272142258,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645030068
    },
    {
        "content": "<blockquote>\n<p>But there might be universe issues?</p>\n</blockquote>\n<p>I hope not!</p>",
        "id": 272142327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645030094
    },
    {
        "content": "<p>I mean, we can always use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.epi_of_is_colimit_parallel_pair\">docs#category_theory.limits.epi_of_is_colimit_parallel_pair</a></p>",
        "id": 272142480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645030176
    },
    {
        "content": "<p>Oh we don't. But this should be an easy dualization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.preserves_mono\">docs#category_theory.preserves_mono</a>.<br>\nLooking at the code I think I might have solved the universe issue some weeks ago.</p>",
        "id": 272142507,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645030188
    },
    {
        "content": "<p>Express your epi as a coequalizer, and use the fact that coequalizers are preserved, etc..</p>",
        "id": 272142527,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645030201
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/pull/12084\">#12084</a>.</p>",
        "id": 272144993,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645031162
    },
    {
        "content": "<p>Maybe someone wants to help to prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A \\to B \\to C \\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is exact then also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">F(A) \\to F(B) \\to F(C) \\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is exact? The fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> preserves epi takes care of the last exactness, but I am a little bit lost in the API to prove exactness at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 272263648,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645106800
    },
    {
        "content": "<p>Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">B \\to C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a cokernel of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> preserves finite colimits (in particular, cokernels), you should get that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(B) \\to F(C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> is the cokernel of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(A) \\to F(B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 272264132,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645107017
    },
    {
        "content": "<p>Which file are you working on? I can write down this proof.</p>",
        "id": 272264184,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645107052
    },
    {
        "content": "<p>Yes, this is the math proof I have. It's probably my fault, but I am getting a little bit crazy about stating this in mathlib.</p>",
        "id": 272264244,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645107082
    },
    {
        "content": "<p>Yes please, it's probably more helpful for me to read your proof later.</p>",
        "id": 272264281,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645107104
    },
    {
        "content": "<p>Is this in <code>for_mathlib/exact_seq.lean</code>?</p>",
        "id": 272264432,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645107163
    },
    {
        "content": "<p>Yes, I am pushing what I've written, but it is essentially a random mess.</p>",
        "id": 272264487,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645107202
    },
    {
        "content": "<p>Okay. I'll get some coffee first <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span></p>",
        "id": 272264531,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645107226
    },
    {
        "content": "<p>It's at the end of the file</p>",
        "id": 272264610,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645107248
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 272264628,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645107254
    },
    {
        "content": "<p>The lemma we want is <code>preserves_exact_seq</code>, I am not sure the one before is true/needed.</p>",
        "id": 272264719,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645107296
    },
    {
        "content": "<p>Okay, there is one sorry left for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cokernel_comparison</span> <span class=\"o\">:</span> <span class=\"n\">cokernel</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">A₃</span> <span class=\"o\">:=</span>\n  <span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">$</span> <span class=\"n\">comp_eq_zero</span> <span class=\"n\">ex</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">cokernel_comparison</span> <span class=\"n\">ex</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I.e. if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A \\to B \\to C \\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is exact, then the canonical map from the cokernel of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is an isomorphism.<br>\nThis can be proved (in a somewhat clunky way) using pseudoelements. </p>\n<p>My class has a midterm in an hour or so, so I can't finish this off right now, but it should be doable.</p>",
        "id": 272273050,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645110599
    },
    {
        "content": "<p>I am having a look, thanks a lot!</p>",
        "id": 272273455,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645110740
    },
    {
        "content": "<p>It would be nice to build some more api around <code>exact_seq [f, g, 0]</code>, which should essentially encapsulate the fact that <code>A_3</code> is the cokernel of <code>f</code> (e..g. have a <code>exact_seq.desc</code>, etc.)</p>",
        "id": 272273883,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645110924
    },
    {
        "content": "<p>The proof is probably not the best one, but it is done.</p>",
        "id": 272280876,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645113667
    },
    {
        "content": "<p>Awesome! Does that mean that the degree <code>0</code> part is completely done? Or do you still need some glue?</p>",
        "id": 272284985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645115444
    },
    {
        "content": "<p>Ah no, you are overestimating me! Now <code>F</code> sends the final part of the projective resolution to an exact sequence. I <em>think</em> this easily implies that <code>left_derived F 0 A ≅ A</code>,  so we have a square. We need to prove it commutes.</p>",
        "id": 272286991,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645116321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/LES.20for.20Ext/near/272142124\">said</a>:</p>\n<blockquote>\n<p>But there might be universe issues?</p>\n</blockquote>\n<p>I am not sure you were talking about this, but to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.preserves_finite_colimits\">docs#category_theory.limits.preserves_finite_colimits</a> I had to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Note the <code>w</code> that is there twice.</p>",
        "id": 272370236,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645170347
    },
    {
        "content": "<p>Oh I did not know that this is not yet generalized. Does this cause any problem?</p>",
        "id": 272376162,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1645174813
    },
    {
        "content": "<p>I don't know what it will happen at the end. At the moment I am using <code>w</code> twice, but sooner or later we will want to apply the general machinery to a concrete situation.</p>",
        "id": 272376789,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645175251
    },
    {
        "content": "<p>Does anyone see a quick way of closing the goal here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.exact</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.preadditive.additive_functor</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.preadditive.projective</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">w</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.functor</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">additive</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">limits.preserves_finite_colimits</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cokernel_homology</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cokernel</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">homology</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">cokernel.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">limits.factor_thru_kernel_subobject</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">homology.π</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Or another way of constructing the morphism). I need an iso, but I already have the morphism in the other direction.</p>",
        "id": 272418863,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645199802
    },
    {
        "content": "<p>Ugh... this should be easy if we defined <code>homology</code> without subobjects.</p>",
        "id": 272418949,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645199851
    },
    {
        "content": "<p>Yes, I HATE this <code>image_to_kernel</code> stuff...</p>",
        "id": 272419098,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645199915
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homology_iso_cokernel_lift\">docs#homology_iso_cokernel_lift</a></p>",
        "id": 272419100,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645199915
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-salamander/blob/master/src/homology.lean\">https://github.com/leanprover-community/lean-salamander/blob/master/src/homology.lean</a></p>",
        "id": 272419165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645199947
    },
    {
        "content": "<p>I think <code>homology</code> should be <em>defined</em> as <code>cokernel (kernel.lift g f w)</code>..</p>",
        "id": 272419292,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645200003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/LES.20for.20Ext/near/272419165\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean-salamander/blob/master/src/homology.lean\">https://github.com/leanprover-community/lean-salamander/blob/master/src/homology.lean</a></p>\n</blockquote>\n<p>I can't click this link...</p>",
        "id": 272419349,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1645200018
    },
    {
        "content": "<p>It works for me, it must be some permission.</p>",
        "id": 272419412,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645200043
    },
    {
        "content": "<p>Ooops... here is the content:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.pseudoelements</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory.abelian</span>\n\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology_c</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"n\">cokernel</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology_k</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"n\">kernel</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology_c_to_k</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">homology_c</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">⟶</span> <span class=\"n\">homology_k</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"n\">cokernel.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">limits.equalizer.hom_ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">pseudoelement.hom_to_fun</span> <span class=\"n\">pseudoelement.has_zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">homology_c_to_k</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pseudoelement.mono_of_zero_of_map_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">homology_c</span><span class=\"o\">,</span> <span class=\"n\">homology_c_to_k</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">pseudoelement.pseudo_surjective_of_epi</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pseudoelement.comp_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pseudoelement.comp_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">exact_cokernel</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pseudoelement.pseudo_exact_of_exact.2</span> <span class=\"n\">_</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pseudoelement.comp_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">kernel.ι</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">pseudoelement.pseudo_injective_of_mono</span> <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pseudoelement.comp_apply</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"o\">(</span><span class=\"n\">homology_c_to_k</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pseudoelement.epi_of_pseudo_surjective</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">homology_k</span><span class=\"o\">,</span> <span class=\"n\">homology_c</span><span class=\"o\">,</span> <span class=\"n\">homology_c_to_k</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">kernel.ι</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">exact_cokernel</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">pseudoelement.pseudo_surjective_of_epi</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span> <span class=\"n\">pseudoelement.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pseudoelement.comp_apply</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">hd</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">kernel.ι</span> <span class=\"n\">g</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">pseudoelement.pseudo_exact_of_exact.2</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exact_kernel_ι</span> <span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"n\">cokernel.π</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">kernel.ι</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">),</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">pseudoelement.pseudo_injective_of_mono</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pseudoelement.comp_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pseudoelement.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">homology_c_to_k</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_iso_of_mono_of_epi</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">homology</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">homology_c</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology.π</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">kernel</span> <span class=\"n\">g</span> <span class=\"bp\">⟶</span> <span class=\"n\">homology</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology.desc</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">kernel</span> <span class=\"n\">g</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"bp\">≫</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">homology</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">cokernel.desc</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"n\">he</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">homology.desc_π</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">kernel</span> <span class=\"n\">g</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"bp\">≫</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">homology.π</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">≫</span> <span class=\"n\">homology.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"n\">e</span> <span class=\"n\">he</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"n\">cokernel.π_desc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">homology.condition_π</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">kernel.lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"bp\">≫</span> <span class=\"n\">homology.π</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">cokernel.condition</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology.ι</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">homology</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">⟶</span> <span class=\"n\">cokernel</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">homology_c_to_k</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">≫</span> <span class=\"n\">kernel.ι</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology.lift</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">cokernel</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">homology</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"n\">kernel.lift</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"n\">he</span> <span class=\"bp\">≫</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">homology_c_to_k</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">homology.ι_lift</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">cokernel</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">homology.lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"n\">e</span> <span class=\"n\">he</span> <span class=\"bp\">≫</span> <span class=\"n\">homology.ι</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">homology.lift</span><span class=\"o\">,</span> <span class=\"n\">homology.ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">homology.ι_condition</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">homology.ι</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">homology.ι</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">homology.hom_from_ext</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">homology</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">homology.π</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">≫</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">homology.π</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">≫</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">coequalizer.hom_ext</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">homology.hom_to_ext</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">homology</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≫</span> <span class=\"n\">homology.ι</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">≫</span> <span class=\"n\">homology.ι</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">homology.ι</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span> <span class=\"n\">category.assoc</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">equalizer.hom_ext</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">homology_c_to_k</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)))</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">homology</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">w_op</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g.op</span> <span class=\"bp\">≫</span> <span class=\"n\">f.op</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">op_comp</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">kernel_op</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span> <span class=\"n\">f.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">≅</span> <span class=\"n\">cokernel</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">op_comp</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">≫</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">opposite.unop_op</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">cokernel.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">opposite.unop_op</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">f.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">)</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category.id_comp</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom_refl</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">f.unop_op</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">unop_comp</span><span class=\"o\">,</span> <span class=\"n\">f.op.op_unop</span><span class=\"o\">,</span> <span class=\"n\">kernel.condition</span><span class=\"o\">],</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category.id_comp</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom_refl</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">unop_id</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">unop_comp</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">f.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop_op</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">unop_comp</span><span class=\"o\">],</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">limits.equalizer.hom_ext</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">op_comp</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">limits.coequalizer.hom_ext</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">unop_comp</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cokernel_op</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">cokernel</span> <span class=\"n\">f.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">≅</span> <span class=\"n\">kernel</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">kernel.lift</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">cokernel.π</span> <span class=\"n\">f.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">≫</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">opposite.unop_op</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_to_hom_refl</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">f.unop_op</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">unop_comp</span><span class=\"o\">,</span> <span class=\"n\">f.op.op_unop</span><span class=\"o\">,</span> <span class=\"n\">cokernel.condition</span><span class=\"o\">],</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">opposite.unop_op</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">cokernel.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">op_comp</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category.id_comp</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom_refl</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">unop_id</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">unop_comp</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">kernel.lift</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">f.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop_op</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">unop_comp</span><span class=\"o\">],</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">limits.coequalizer.hom_ext</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">op_comp</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">limits.equalizer.hom_ext</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">unop_comp</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory.abelian</span>\n</code></pre></div>\n</div></div>",
        "id": 272419447,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645200059
    },
    {
        "content": "<p>In any case thanks a lot! I have to stop now, but I will have a close look later.</p>",
        "id": 272419478,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645200074
    },
    {
        "content": "<p>You redefined homology but you didn't prove it's the same as in mathlib, right? In any case I hope using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homology_iso_cokernel_lift\">docs#homology_iso_cokernel_lift</a> will help.</p>",
        "id": 272420304,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645200458
    },
    {
        "content": "<p>Right, I'm not suggesting to use that other file. In this case you can get by with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homology_iso_cokernel_lift\">docs#homology_iso_cokernel_lift</a> together with <code>cokernel.desc</code> and/or <code>cokernel.map</code>.</p>",
        "id": 272420431,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645200501
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">functor.left_derived.zero_iso</span> <span class=\"o\">[</span><span class=\"n\">enough_projectives</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F.left_derived</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">≅</span> <span class=\"n\">F.obj</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>is sorry free, but it is quite slow and it is defined in tactic mode, that it's bad. I am done for today, if someone wants to have a look it is <code>derived_functor.lean</code>, at the end.</p>",
        "id": 272451275,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645214955
    },
    {
        "content": "<p>Of course what we really want is an iso of functors, but this is a start.</p>",
        "id": 272451460,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645215073
    },
    {
        "content": "<p>It's even possible that defining the natural transformation and showing that its component are iso will be less cumbersome.</p>",
        "id": 272451854,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645215346
    },
    {
        "content": "<p>Thanks a lot for hacking on this!</p>",
        "id": 272493777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645246976
    }
]