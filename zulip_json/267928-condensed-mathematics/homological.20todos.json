[
    {
        "content": "<p>Here are the remaining bits of homological API that need to be done, afaict.</p>\n<ul>\n<li>Given a short exact sequence of objects, we get a triangle in the bounded homotopy category</li>\n<li>Given an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> (ie complex) in the bounded homotopy category, we get a triangle <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>τ</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mi>C</mi><mo>→</mo><msub><mi>τ</mi><mi>i</mi></msub><mi>C</mi><mo>→</mo><msub><mi>H</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">τ_{i+1}C → τ_i C → H_i(C)[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8917em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1132em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span></li>\n<li>Given a triangle, we get a LES of homology groups, in terms of <code>exact_seq</code>.</li>\n<li>If <code>f : C ⟶ C'</code> is componentwise an epi, then the componentwise kernel complex <code>K</code> fits in a triangle <code>K ⟶ C ⟶ C'</code>.</li>\n</ul>",
        "id": 276187401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647955445
    },
    {
        "content": "<p>The third is basically done, just needs some Lean packaging. I guess 2 and 4 are the most work.</p>",
        "id": 276187694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647955577
    },
    {
        "content": "<p>Ooh, here's another one that's nontrivial:</p>\n<p>• If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a bounded complex consisting of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Ext</mtext><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">_</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{Ext}(\\_, B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord text\"><span class=\"mord\">Ext</span></span><span class=\"mopen\">(</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span>-acyclic objects, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Ext</mtext><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{Ext}(C,B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">Ext</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> can just be computed by applying <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>Hom</mtext><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">_</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{Hom}(\\_,B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord text\"><span class=\"mord\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> and taking homology. In other words, we don't need to take a projective replacement.</p>",
        "id": 276289831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648012714
    },
    {
        "content": "<p>What is an Ext(_,B)-acyclic object?</p>",
        "id": 276294886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648019008
    },
    {
        "content": "<p>An object such that all higher ext groups vanish</p>",
        "id": 276296139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648020353
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Acyclic_object\">https://en.wikipedia.org/wiki/Acyclic_object</a></p>",
        "id": 276296202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648020390
    },
    {
        "content": "<p>Oh so it's what I'd call a Hom(_,B)-acyclic object?</p>",
        "id": 276296580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648020783
    },
    {
        "content": "<p>Yeah, sorry. That's what I should have written. Let me fix it.</p>",
        "id": 276296722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648020931
    },
    {
        "content": "<p>Snap! •₁ is false: <a href=\"https://math.stackexchange.com/a/2710380\">https://math.stackexchange.com/a/2710380</a>. It doesn't work in the homotopy category <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 276298161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648022191
    },
    {
        "content": "<p>Same problem for the distinguished triangles involving the truncation functors</p>",
        "id": 276304045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648026116
    },
    {
        "content": "<p>So we might need to explicitly track some quasi-isos.</p>",
        "id": 276304105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648026130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/homological.20todos/near/276304105\">said</a>:</p>\n<blockquote>\n<p>So we might need to explicitly track some quasi-isos.</p>\n</blockquote>\n<p>If you replace everything by a K-projective, then you don't need to track quasi isos</p>",
        "id": 276334810,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648043048
    },
    {
        "content": "<p>But then you can't compute, right?</p>",
        "id": 276334962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648043102
    },
    {
        "content": "<p>Atm, I don't see an easy way to get the LES for a short exact sequence.</p>",
        "id": 276335051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648043148
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 276335146,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648043180
    },
    {
        "content": "<p>If you have a SES <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><mi>A</mi><mo>→</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0 \\to A \\to B \\to C \\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> then you get a map from the cone <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>→</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(A \\to B)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> which is a quasi-iso.</p>",
        "id": 276335907,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648043528
    },
    {
        "content": "<p>Right... and we will have to fool around with it</p>",
        "id": 276336004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648043579
    },
    {
        "content": "<p>And by the general nonsense (i.e. taking K-projective replacements) it should be possible to show that the induced map of functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo><mo>→</mo><mi>E</mi><mi>x</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo>→</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>−</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Ext(C,-) \\to Ext(C(A \\to B),-)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mclose\">)</span></span></span></span> is an iso</p>",
        "id": 276336077,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648043615
    },
    {
        "content": "<p>So we can get a LES... but we need it to be functorial in SES's. It's just a bunch of work. If we had triangles it would be \"trivial\".</p>",
        "id": 276336251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648043693
    },
    {
        "content": "<p>Yeah of course.</p>",
        "id": 276336333,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648043729
    },
    {
        "content": "<p>But we can define the bounded above derived cat very quickly now. Maybe we should go ahead and do that so we can get actual triangles?</p>",
        "id": 276336453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648043775
    },
    {
        "content": "<p>Hmm, you think so?</p>",
        "id": 276336926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648043999
    },
    {
        "content": "<p>I don't know.</p>",
        "id": 276336999,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648044010
    },
    {
        "content": "<p>I guess we can define it quickly. But we also need the API</p>",
        "id": 276337029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648044019
    },
    {
        "content": "<p>It might still be the path of least resistance/effort</p>",
        "id": 276337105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648044036
    },
    {
        "content": "<p>What would the definition be?</p>",
        "id": 276337124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648044046
    },
    {
        "content": "<p>the full subcat of the homotopy cat generated by K-projectives.</p>",
        "id": 276337188,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648044070
    },
    {
        "content": "<p>And what does \"generated\" mean?</p>",
        "id": 276337242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648044100
    },
    {
        "content": "<p>Oh, just the set of K-projectives</p>",
        "id": 276337268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648044116
    },
    {
        "content": "<p>I'll write it down.</p>",
        "id": 276337406,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648044160
    },
    {
        "content": "<p>Okay, I started a new file <code>for_mathlib/derived/derived_cat</code> with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">localization_functor</span> <span class=\"o\">:</span>\n  <span class=\"n\">bounded_homotopy_category</span> <span class=\"n\">A</span> <span class=\"bp\">⥤</span> <span class=\"n\">bounded_derived_category</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and not much more (yet...)</p>",
        "id": 276340336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648045473
    },
    {
        "content": "<p>Also this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_iso_localization_functor_map_of_is_quasi_iso</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">bounded_homotopy_category</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">is_quasi_iso</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"o\">((</span><span class=\"n\">localization_functor</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 276344204,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648046920
    },
    {
        "content": "<p>I've added a stub for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pretriangulated</span> <span class=\"o\">:</span> <span class=\"n\">triangulated.pretriangulated</span> <span class=\"o\">(</span><span class=\"n\">bounded_derived_category</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">distinguished_triangles</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">T</span> <span class=\"bp\">|</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">triangle</span> <span class=\"o\">(</span><span class=\"n\">bounded_homotopy_category</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">∈</span> <span class=\"n\">dist_triang</span> <span class=\"o\">(</span><span class=\"n\">bounded_homotopy_category</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">⟶</span> <span class=\"n\">replace_triangle</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">is_iso</span> <span class=\"n\">f</span> <span class=\"o\">},</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>in <code>for_mathlib/derived/derived_cat</code> with many MANY small sorrys that should be relatively simple. I have a bunch of meetings today, so I won't be able to work on this much more today. Any help filling in these sorry's would be much appreciated!</p>",
        "id": 276352117,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648049929
    },
    {
        "content": "<p>Has <code>exists_K_projective_replacement</code> been promoted to <code>𝒦 ⥤ 𝒦</code> somewhere?</p>",
        "id": 276355287,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648051108
    },
    {
        "content": "<p>Not that I know</p>",
        "id": 276356217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648051364
    },
    {
        "content": "<p>That is the localization functor exhibiting the full subcategory of K-projectives as a model for the derived category. One needs to tell Lean it takes SES to triangles. Then functoriality is intermediated by application of the replacement functor.</p>",
        "id": 276358040,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648051888
    },
    {
        "content": "<p>You won't quite prove you have a model of the derived category but you could tack that on for fun at some point.</p>",
        "id": 276358344,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648051995
    },
    {
        "content": "<p>The functor you want <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> is the composition of localization with forgetting.</p>",
        "id": 276361618,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648053065
    },
    {
        "content": "<p>Sure, I was being a little careless about the codomain of the functor.</p>",
        "id": 276361907,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648053150
    },
    {
        "content": "<p>(Also I forgot the notation for the K-Proj as a category)</p>",
        "id": 276362047,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648053207
    },
    {
        "content": "<p>But this \"forgetting\" functor doesn't really exist in real life, right?</p>",
        "id": 276362544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648053385
    },
    {
        "content": "<p>Abstractly, no.</p>",
        "id": 276362628,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648053420
    },
    {
        "content": "<p>In practice, it underpins any localization where there is (at least) an underlying model structure.</p>",
        "id": 276362901,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1648053509
    },
    {
        "content": "<p>Is the <code>C</code> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⋅</mo><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\cdot_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5945em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mbin\">⋅</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> a chain complex or a cochain complex?<br>\nMost of the stuff LTE has now are for cochain complexes though. Will we need to duplicate them?</p>",
        "id": 276476488,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1648129194
    },
    {
        "content": "<p>In the end, it should  be a functor on <code>bounded_homotopy_category</code>... so whichever version is used for that.</p>",
        "id": 276477539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648129666
    },
    {
        "content": "<p>I always forget which direction (co)chain complexes are...</p>",
        "id": 276477596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648129685
    },
    {
        "content": "<p>I have fixed about half of the sorries in the file that Adam pushed. There are still 15 sorries left.</p>",
        "id": 276858984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648467101
    }
]