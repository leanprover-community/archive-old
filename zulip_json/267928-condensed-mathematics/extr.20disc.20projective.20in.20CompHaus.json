[
    {
        "content": "<p>Do we already have a proof that extremally disconnected spaces are projective in CompHaus?<br>\nBy definition (in Lean) they are projective in <code>Profinite</code>.</p>",
        "id": 272256344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645103472
    },
    {
        "content": "<p>do you have a math proof?</p>",
        "id": 272256593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645103601
    },
    {
        "content": "<p>Not yet.</p>",
        "id": 272256620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645103625
    },
    {
        "content": "<p>The definition in Analytic.pdf is that every surjection from a comp-haus splits. So then it would be easy.</p>",
        "id": 272256699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645103661
    },
    {
        "content": "<p>And <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\beta(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> would still be extr.disc in that sense.</p>",
        "id": 272256733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645103684
    },
    {
        "content": "<p>So maybe we should just refactor the definition.</p>",
        "id": 272256745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645103693
    },
    {
        "content": "<p>You could also define it as a retract of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> of something, or as compact Hausdorff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> s.t. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mi>X</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\beta X \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">βX</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> splits</p>",
        "id": 272257286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645103996
    },
    {
        "content": "<p>I think the math proof of your original question would be something like--if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is projective in Profinite then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> lifts against <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mi>X</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\beta X \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">βX</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a retract of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\beta X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">βX</span></span></span></span>, now check that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">\\beta S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">βS</span></span></span></span> is projective in CompHaus and so a retract is too</p>",
        "id": 272257641,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645104171
    },
    {
        "content": "<p>which does suggest you might start from another definition though it doesn't really matter</p>",
        "id": 272257665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645104184
    },
    {
        "content": "<p>Yeah, I just drew that diagram (-;</p>",
        "id": 272257686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645104196
    },
    {
        "content": "<p>I still like this idea that it's preferable to avoid quantifying over <code>Type</code> in definitions</p>",
        "id": 272257961,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645104324
    },
    {
        "content": "<p>(Because then the definition is \"obviously\" universe-independent.)</p>",
        "id": 272261110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645105774
    },
    {
        "content": "<p>Here's a fun example I just thought of. Let's call a group <code>G : Type u</code> \"lonely\" if <code>Type u</code> doesn't contain an inaccessible cardinal. That's some property of the form <code>forall X : Type u, [moderately long statement involving functions between subsets of X and so on]</code>. We can't prove that if <code>G</code> is lonely, then <code>ulift G</code> is lonely.</p>",
        "id": 272261310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645105854
    },
    {
        "content": "<p>And it's not really obvious why being projective isn't a property like this, if you define it by a lifting condition.</p>",
        "id": 272261372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645105893
    },
    {
        "content": "<p>Refactoring the defn was too annoying for now. So I just proved the lifting lemma.</p>",
        "id": 272277927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645112543
    },
    {
        "content": "<p>I hope most of the stuff available in <code>condensed/extr</code> should \"just work\" if you have the right <code>lift</code> and <code>lift_lifts</code> lemmas... so I hope (eventually) refactoring shouldn't be too much of an issue.</p>",
        "id": 272278286,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645112657
    },
    {
        "content": "<p>We will need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exact_iff_ExtrDisc</span>  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ExtrDisc</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">f.1.app</span> <span class=\"bp\">$</span> <span class=\"n\">ExtrDisc_to_Profinite.op.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">g.1.app</span> <span class=\"bp\">$</span> <span class=\"n\">ExtrDisc_to_Profinite.op.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But besides that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exact_of_exact_with_constant</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">CompHausFiltPseuNormGrp₁.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cf</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hCf</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">Cf</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">exact_with_constant</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">Cf</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">to_Condensed.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_Condensed.map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is now done.</p>",
        "id": 272279365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645113103
    },
    {
        "content": "<p>Yeah, that should go through the equivalence with <code>ExtrSheafProd</code> (or whatever I called it...).</p>",
        "id": 272279485,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645113154
    },
    {
        "content": "<p>I can have a go at it later.</p>",
        "id": 272279499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645113161
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 272279530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645113173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exact_iff_ExtrDisc</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ExtrDisc</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">f.1.app</span> <span class=\"bp\">$</span> <span class=\"n\">ExtrDisc_to_Profinite.op.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">g.1.app</span> <span class=\"bp\">$</span> <span class=\"n\">ExtrDisc_to_Profinite.op.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is sorry-free</p>",
        "id": 272319145,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1645130181
    }
]