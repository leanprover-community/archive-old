[
    {
        "content": "<ul>\n<li>[ ] Give all major decls and all defs proper docstrings</li>\n<li>[ ] Give all files proper module docstrings</li>\n<li>[ ] Setup CI to lint for docstrings</li>\n<li>[ ] Mark major decls in blueprint and lean code</li>\n<li>[ ] Give all decls proper names</li>\n<li>[ ] Document some of the longer proofs (thm98, thm96)</li>\n<li>[ ] Speed up slower proofs (thm98, row_iso, col_exact)</li>\n<li>[ ] Update the blueprint to have a proper proof of col_exact</li>\n<li>[ ] Update the blueprint with final choice of constants</li>\n<li>[ ] Switch BD stuff from free_abelian_group to finsupp</li>\n<li>[ ] Write a tale overview version of the proof (claimed by jmc)</li>\n</ul>",
        "id": 241740018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623051850
    },
    {
        "content": "<p>First thing I'll do now is bumping mathlib. Hasn't happened in 8 days.</p>",
        "id": 241740078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623051914
    },
    {
        "content": "<p>Concerning free abelian group we will soon (hopefully) have in mathlib <code>module.free</code>, when <a href=\"https://github.com/leanprover-community/mathlib/issues/7801\">#7801</a> gets merged.</p>",
        "id": 241744677,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623055091
    },
    {
        "content": "<p>Free abelian groups are exactly (even in Lean) free Z-modules, right?</p>",
        "id": 241744723,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623055126
    },
    {
        "content": "<p>I should probably explain what I mean with<br>\n<code>Switch BD stuff from free_abelian_group to finsupp</code></p>\n<p>Scott has been working on generalizing the category <code>FreeMat</code> of universal maps (in LTE) to <code>Free _</code> and <code>Mat _</code> in mathlib. But <code>Free _</code> will give the free <code>R</code>-linear category for some ring <code>R</code> (using finsupp).<br>\n<code>universal_map</code> is implemented using <code>free_abelian_group</code> which is specific to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>.</p>",
        "id": 241744876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623055214
    },
    {
        "content": "<p>In the end, it will be best to move everything over to <code>Free (Mat _)</code>, and a first step would be to migrate from <code>free_abelian_group</code> to <code>finsupp</code>.</p>",
        "id": 241744918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623055253
    },
    {
        "content": "<p>A lot of <code>for_mathlib/free_abelian_group</code> was doing exactly the opposite thing <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 241744952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623055278
    },
    {
        "content": "<p>Here are two other projects:</p>\n<ol>\n<li>Refactor LTE: instead of <code>normed_group_hom.bound_by</code>, use the operator norm everywhere.</li>\n<li>Add a class <code>has_nnnorm</code> to mathlib, define an instance for <code>semi_normed_group</code>s. Add notation for it (such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>x</mi><msub><mi mathvariant=\"normal\">∥</mi><mo>+</mo></msub></mrow><annotation encoding=\"application/x-tex\">\\|x\\|_+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord\">∥</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>). Refactor mathlib to use this notation. Refactor LTE to use this notation. Add an instance for <code>Mbar</code>, which has the wrong topology to be a <code>semi_normed_group</code>, but nevertheless has a norm.</li>\n</ol>",
        "id": 241759907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623064312
    },
    {
        "content": "<p>I wanted to ask where this <code>bound_by</code>came from.</p>",
        "id": 241760000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623064367
    },
    {
        "content": "<p>From ignorant me</p>",
        "id": 241760050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623064401
    },
    {
        "content": "<p>I can work on this refactor</p>",
        "id": 241760255,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623064505
    },
    {
        "content": "<p>Which one?</p>",
        "id": 241760267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623064513
    },
    {
        "content": "<p>Let me start with the one about <code>normed_group_hom.bound_by</code></p>",
        "id": 241760368,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623064567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> It looks like the definition of <code>bound_by</code> already ended up in mathlib. So probably the best thing to do is to get rid of all uses of <code>bound_by</code> in LTE, and then remove the def from mathlib again</p>",
        "id": 241762648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623065866
    },
    {
        "content": "<p>Hmm, yes, I also noticed that. I think that the best thing to do is first of all adding some lemmas to mathlib, for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_group_hom.mk_normed_group_hom'_bound_by\">docs#normed_group_hom.mk_normed_group_hom'_bound_by</a> is used in LTE, and we need the analogue lemma for the operator norm before removing <code>bound_by</code> from LTE.</p>",
        "id": 241764666,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623067100
    },
    {
        "content": "<p>Ah, it's already there <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_group_hom.mk_normed_group_hom_norm_le\">docs#normed_group_hom.mk_normed_group_hom_norm_le</a></p>",
        "id": 241764764,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623067160
    }
]