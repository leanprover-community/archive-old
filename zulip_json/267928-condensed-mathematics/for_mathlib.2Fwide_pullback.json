[
    {
        "content": "<p>Is there a reasonable generalization of <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/wide_pullback.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/wide_pullback.lean</a> ?</p>",
        "id": 244298079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624979675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> had a WIP PR in this direction a while ago, which is why I've been holding off on PRing this file</p>",
        "id": 244298225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624979730
    },
    {
        "content": "<p>I guess for now we can just use the fact that the forgetful functor to types preserves limits.</p>",
        "id": 244298454,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624979816
    },
    {
        "content": "<p>So we could prove something for any concrete category where the forgetful functor preserves limits</p>",
        "id": 244299181,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624980094
    },
    {
        "content": "<p>Yup, this is what my PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7436\">#7436</a> should do, it covers concrete categories where the forgetful functor is representable (this is a stronger condition than preserving limits, but it covers Profinite as well as most of the concrete categories in mathlib) - I've already cut up and PR'd parts of it since it was getting too large</p>",
        "id": 244313983,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624986226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> How would you like to proceed here? It might be worthwhile to add something about concrete categories where <code>forget</code> preserves limits, because it's a priori more general. I could try to cook up a PR this afternoon if it helps.</p>",
        "id": 244331319,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624993613
    },
    {
        "content": "<p>I don't have a strong opinion. I guess both approaches are useful in the end. So let's just have both.</p>",
        "id": 244331431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624993662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/for_mathlib.2Fwide_pullback/near/244331319\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> How would you like to proceed here? It might be worthwhile to add something about concrete categories where <code>forget</code> preserves limits, because it's a priori more general. I could try to cook up a PR this afternoon if it helps.</p>\n</blockquote>\n<p>Do you know any examples of concrete categories where <code>forget</code> preserves limits but isn't representable?</p>",
        "id": 244337853,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624996517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/for_mathlib.2Fwide_pullback/near/244331431\">said</a>:</p>\n<blockquote>\n<p>I don't have a strong opinion. I guess both approaches are useful in the end. So let's just have both.</p>\n</blockquote>\n<p>I think the breakdown is like this: if the forgetful functor <em>creates</em> limits, it should be easy to show a particular cone is a limit; if the forgetful functor is representable, it should be easy to construct elements of limits; if the forgetful functor <em>preserves</em> limits, it should be easy to show elements of the limit are equal. The original code does the latter (and I presume this is what Adam plans to do) and my PR does the middle, I think all are worth having</p>",
        "id": 244340516,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624997532
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8130\">#8130</a></p>",
        "id": 244356554,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625005701
    },
    {
        "content": "<p>I assume that we already have the fact that the forgetful functor from <code>Profinte</code> to <code>Type*</code>preserves limits, but I'll double check this later today and add it if it's missing</p>",
        "id": 244356697,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625005810
    },
    {
        "content": "<p>Turns out I had to add that <code>forget Profinite</code> preserves limits (which is now done in the same PR)</p>",
        "id": 244363826,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625011290
    },
    {
        "content": "<p>I just bumped and used the new <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.concrete.wide_pullback_ext'\">docs#category_theory.limits.concrete.wide_pullback_ext'</a> in one of the lemmas about the Cech nerve, and it seems pretty reasonably usable. I might have a go at cleaning up <code>for_mathlib/wide_pullback.lean</code>if I find some time later.</p>",
        "id": 244597176,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625158874
    },
    {
        "content": "<p>Alright, <code>for_mathlib/wide_pullback</code> is gone!</p>",
        "id": 244606953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625163526
    },
    {
        "content": "<p>great! thanks a lot!</p>",
        "id": 244607486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625163817
    }
]