[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> I'm confused about the induction step in 9.6</p>",
        "id": 230041632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615560944
    },
    {
        "content": "<p>OK...</p>",
        "id": 230041678,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615560960
    },
    {
        "content": "<p>We have defined a functor <code>truncate</code> that takes a cochain complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> of normed groups (indexed by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>) and does the following:</p>\n<ul>\n<li>in degree <code>0</code> it places <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">c</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">k</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><msub><mi>C</mi><mn>0</mn></msub><mo>→</mo><msub><mi>C</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{coker}(d \\colon C_0 \\to C_1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">c</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">k</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">r</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>in degree <code>i</code> for <code>i &gt; 0</code> it places <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">C_{i+1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span></li>\n</ul>",
        "id": 230042055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561091
    },
    {
        "content": "<p>Now I thought that you wanted to use that <code>C</code> is bounded exact in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\le m+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> if and only if <code>truncate C</code> is bounded exact in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\le m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>.</p>",
        "id": 230042211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561150
    },
    {
        "content": "<p>But that seems fishy.</p>",
        "id": 230042225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561155
    },
    {
        "content": "<p>So you must be doing something smarter in the induction.</p>",
        "id": 230042249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561164
    },
    {
        "content": "<p>Hmm, why is that fishy :-)?</p>",
        "id": 230042402,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615561211
    },
    {
        "content": "<p>(Assuming you already know bounded exactness in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\leq m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>)</p>",
        "id": 230042475,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615561234
    },
    {
        "content": "<p>Could you expand on that last parenthesis? \"bounded exactness in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\le m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>\" of what?</p>",
        "id": 230042719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615561313
    },
    {
        "content": "<p>Of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></p>",
        "id": 230042801,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615561332
    },
    {
        "content": "<p>I claim that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is bounded exact in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\leq m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>, then bounded exactness in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\leq m+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is equivalent to bounded exactness in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\leq m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> of its truncation</p>",
        "id": 230042870,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615561365
    },
    {
        "content": "<p>(I guess one could make a better statement about bounded exactness in an individual degree, but this formulation should do.)</p>",
        "id": 230042994,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615561398
    },
    {
        "content": "<p>Is there an issue with that statement? I may well be overlooking something...</p>",
        "id": 230043055,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615561418
    },
    {
        "content": "<p>This sounds fine. The issue with Johan's formulation is deducing information about the degree zero part of C from information about <code>truncate C</code>.</p>",
        "id": 230043186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615561449
    },
    {
        "content": "<p>But isn't bounded exactness in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\leq m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> part of the hypothesis of the result?</p>",
        "id": 230043259,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615561478
    },
    {
        "content": "<p>So I guess the question is why we don't need the fishy part.</p>",
        "id": 230043260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615561478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/truncation/near/230043259\">said</a>:</p>\n<blockquote>\n<p>But isn't bounded exactness in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\leq m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> part of the hypothesis of the result?</p>\n</blockquote>\n<p>Not in Johan's version.</p>",
        "id": 230043308,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615561499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/truncation/near/230043259\">said</a>:</p>\n<blockquote>\n<p>But isn't bounded exactness in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\leq m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> part of the hypothesis of the result?</p>\n</blockquote>\n<p>I guess we should add this to the lemma that we are formalizing.</p>",
        "id": 230043309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561499
    },
    {
        "content": "<p>I made the induction step too crude</p>",
        "id": 230043360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561515
    },
    {
        "content": "<p>Let's add that assumption to the lemma, and then I'll refactor the rest of the induction step so that it provides that assumption</p>",
        "id": 230043628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561584
    },
    {
        "content": "<p>Hmm, I just checked in Analytic.pdf, and there it is an assumption</p>",
        "id": 230043692,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615561610
    },
    {
        "content": "<p>It is in the big list of conditions, I agree. But since the argument is now scattered over 4 lean files, this one got lost in the process somewhere</p>",
        "id": 230043823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561651
    },
    {
        "content": "<p>So the assumption is in the statement of <code>analytic_9_6</code> but not in the sublemma that I wrote in another file.</p>",
        "id": 230043893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561679
    },
    {
        "content": "<p>My apologies to Patrick for creating this confusion</p>",
        "id": 230043960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615561691
    },
    {
        "content": "<p>No problem</p>",
        "id": 230044002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615561705
    },
    {
        "content": "<p>@4 lean files: What's the current ratio of lines of code vs lines in the paper? ;-)</p>",
        "id": 230044339,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615561818
    },
    {
        "content": "<p>(One question about how this project works internally: I am a bit surprised that no expanded \"paper version\" of the proof seems to be produced as an intermediate stage to the formalization. The closest thing seems to be the blueprint, but that actually seems to come <em>after</em> the formalization in order to document it, if I see it right. Is this impression correct?)</p>",
        "id": 230045115,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615562113
    },
    {
        "content": "<p>The blueprint contains many unfinished theorems currently, so I wouldn't say it's <em>after</em> the formalization</p>",
        "id": 230045894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615562376
    },
    {
        "content": "<p>I think we should be doing a lot more blueprinting than we currently do, it's a really good way to get formalizers with less mathematical experience involved</p>",
        "id": 230046151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615562458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> there are currently ~12000 lines in the repo... this includes everything, empty lines, config files, etc...</p>",
        "id": 230046451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615562556
    },
    {
        "content": "<p><code>476616</code> characters</p>",
        "id": 230046529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615562587
    },
    {
        "content": "<p>When we wrote the perfectoid project, Patrick was always saying that we should have a proper blueprint, but I was very happy just to work from Wedhorn's notes, which I thought were very thorough. I think that for the cap set project they wrote down a proper 25 page version of the (much shorter) paper.</p>",
        "id": 230046567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615562602
    },
    {
        "content": "<p>Hmm, I think the parts of the blueprint that are not formalized are the parts that are essentially copied verbatim from Analytic.pdf</p>",
        "id": 230046578,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615562607
    },
    {
        "content": "<p>vs <code>339056 Analytic.tex</code> as character count for the TeX</p>",
        "id": 230046606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615562620
    },
    {
        "content": "<p>which of course contains a lot more than just section 9</p>",
        "id": 230046630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615562631
    },
    {
        "content": "<p>right!</p>",
        "id": 230046644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615562636
    },
    {
        "content": "<p>So maybe factor ~10?</p>",
        "id": 230046729,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615562654
    },
    {
        "content": "<p>On the other hand our formalisation contains a lot more than just section 9 as well because we've had to make a bunch of infrastructure which is assumed in the paper</p>",
        "id": 230046770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615562666
    },
    {
        "content": "<p>True.</p>",
        "id": 230046808,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615562684
    },
    {
        "content": "<p>I keep saying we should write the detailed blueprint before formalization, but I can't get anyone else on board with that idea...</p>",
        "id": 230046832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615562697
    },
    {
        "content": "<p>Not too bad in any case</p>",
        "id": 230046873,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615562709
    },
    {
        "content": "<p>The thing is, there are very few people who can write the blueprint, and most of them are going straight to formalization ATM</p>",
        "id": 230046938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615562739
    },
    {
        "content": "<p>Well, I consistently catch a lot of small mistakes when I write things in Lean, whereas with a blueprint I would seriously mess up.</p>",
        "id": 230047095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615562797
    },
    {
        "content": "<p>That's why it is a lot easier to expand the blueprint after the fact</p>",
        "id": 230047119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615562811
    },
    {
        "content": "<p>And since we split the constant <code>k</code> into two parts, some of the proofs have to change... and I don't find it very easy to predict how</p>",
        "id": 230047266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615562871
    },
    {
        "content": "<p>I think it's already good enough to just \"go over\" the proof and reproduce it with a bit more \"type inference\"</p>",
        "id": 230047361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615562888
    },
    {
        "content": "<p>You will of course catch errors at every level, but try to make sure that the big ones are caught before formalization, because the blueprint is a lot easier to modify</p>",
        "id": 230047489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615562941
    },
    {
        "content": "<p>Also, and this is my personal opinion which is a bit the opposite of Patrick's: my dream is that at some point a system like Lean is usable without a detailed blueprint</p>",
        "id": 230047500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615562946
    },
    {
        "content": "<p>Lean is certainly usable without a detailed blueprint, that's not the problem</p>",
        "id": 230047574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615562974
    },
    {
        "content": "<p>the problem is that you need to be a really good mathematician <em>and</em> a really good lean user to formalize this proof</p>",
        "id": 230047617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615562993
    },
    {
        "content": "<p>the point of a blueprint is to allow users who are one or the other but not both to contribute to the project</p>",
        "id": 230047736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615563024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  The way you work certainly makes it look like this to me -- you just seem to target one lemma after the next, formalizing it on-the-fly</p>",
        "id": 230047739,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615563025
    },
    {
        "content": "<p>Yes, it's going really well, I'm quite happy</p>",
        "id": 230047832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563061
    },
    {
        "content": "<p>In some sense, I think <code>Analytic.pdf</code> is already a very good blueprint</p>",
        "id": 230047894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563079
    },
    {
        "content": "<p>sometimes there are some inequalities I get stuck on, but then Peter is quick to get me unstuck</p>",
        "id": 230047943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563101
    },
    {
        "content": "<p>I find this genuinely surprising, as I thought it was really flexing even for human readers</p>",
        "id": 230047967,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615563108
    },
    {
        "content": "<p>I think Johan is working pretty hard...</p>",
        "id": 230048057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1615563128
    },
    {
        "content": "<p>(and sometimes I forget to plug <code>-y</code> into a stupid formula, and I make myself look completely stupid <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> )</p>",
        "id": 230048075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563134
    },
    {
        "content": "<p>I know :-)</p>",
        "id": 230048094,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615563138
    },
    {
        "content": "<p>I want to point out that <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> are really good mathematicians so I don't trust their judgment here :)</p>",
        "id": 230048113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615563146
    },
    {
        "content": "<p>Well, I wouldn't put myself on the same level as Kevin...</p>",
        "id": 230048172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563170
    },
    {
        "content": "<p>I don't see a lot of undergrads in the project, unlike mathlib</p>",
        "id": 230048210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615563187
    },
    {
        "content": "<p>That's true... but that is maybe to be expected.</p>",
        "id": 230048284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I certainly think that you can contribute here, because you are a <em>good</em> mathematician</p>",
        "id": 230048669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563333
    },
    {
        "content": "<p>But writing a blueprint that is easy enough to follow for people that don't know any of the maths will take a lot of time. It's not clear to me that this is worth it.</p>",
        "id": 230048823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563371
    },
    {
        "content": "<p>Also, I must admit that I don't get dopamine kicks out of writing a blueprint, whereas killing <code>sorry</code>s is extremely rewarding.</p>",
        "id": 230048877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563396
    },
    {
        "content": "<p>I mostly don't contribute that much because I don't have the time to dedicate to this project this close to the end of the PhD</p>",
        "id": 230049080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615563478
    },
    {
        "content": "<p>Yes, I completely understand that.</p>",
        "id": 230049349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563580
    },
    {
        "content": "<p>So the way I see it you are getting dangerously close to attacking the proof of 9.5, right? I'd be really surprised if that one can still be done on-the-fly</p>",
        "id": 230049674,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1615563698
    },
    {
        "content": "<p>If I grind down to a halt, I'll start writing a blueprint (-;</p>",
        "id": 230049815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615563742
    },
    {
        "content": "<p>OK so I cannot see any reason why we personally want to have this minus sign in our truncation any more. Whether the signs are there or not is just a convention, and we can choose our conventions; I choose no signs because they're silly <em>in this context</em>. Everything is nat-indexed and we're moving from C0 -&gt; C1 -&gt; C2 -&gt; ... to (C1/im(C0))-&gt;C2-&gt;C3-&gt;... . Maybe in the category theory library there are arguments for randomly inserting minuses, but right now we're only using this truncation construction in the proof of <code>normed_spectral</code> a far as I can see, and the minus signs literally give no advantage and just mean that a whole bunch of <code>refl</code>s have to be changed to <code>simp [map_neg, neg_neg]</code> etc etc. In the branch <code>truncate_sign_refactor</code> I remove these minus signs; now the <code>sorry</code>s in <code>normed_spectral</code> are much easier to fill in. Note that we are not using the category theory shift any more and I am not proposing changing conventions in category theory, just in our repo for this auxiliary construction and where the signs are just awful and pointless in this context.</p>",
        "id": 230255107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615741873
    },
    {
        "content": "<p>OK I've been working on the <code>sorry</code>s in <code>normed_spectral</code>. With the sign change removed the generic case sorry in <code>cond3b_truncate</code> is a one-liner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">q'</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"n\">hq</span> <span class=\"o\">:=</span> <span class=\"n\">condM.cond3b</span> <span class=\"o\">(</span><span class=\"n\">q'</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q'</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q'</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span> <span class=\"bp\">$</span> <span class=\"n\">nat.succ_le_succ</span> <span class=\"n\">hq</span>\n</code></pre></div>\n<p>With the sign change it's horrible, involving <code>convert nearly_this using 7</code> :D and then doing some sign rewriting.</p>",
        "id": 230256596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615743556
    }
]