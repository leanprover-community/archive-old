[
    {
        "content": "<p>I'm playing with the <code>rescale_iso</code> refactor and we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Tinv₀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">r'</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"n\">M</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filtration</span> <span class=\"n\">M</span> <span class=\"n\">c₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">Tinv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">filtration_mono</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">h.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Tinv_mem_filtration</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x.2</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>in <code>with_Tinv</code> that is supposed to be a generalization of the original <code>Tinv₀</code> that fixes <code>c₂ = r'⁻¹ * c</code>. But this requires <code>c ≤ r' * (r'⁻¹ * c)</code>, and I don't see an assumption that <code>r'</code> is not zero?</p>",
        "id": 232001761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616778959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You can add that assumption wherever you need it</p>",
        "id": 232002655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616779311
    },
    {
        "content": "<p>It's just that the linter occasionally points out that we aren't using that <code>r'</code> is nonzero. But in then end both <code>r</code> and <code>r'</code> will be nonzero</p>",
        "id": 232002767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616779345
    }
]