[
    {
        "content": "<p>In <code>for_mathlib/SemiNormedGroup</code> we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">coker.map</span> <span class=\"o\">{</span><span class=\"n\">fab</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fbd</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fcd</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fab</span> <span class=\"bp\">≫</span> <span class=\"n\">fbd</span> <span class=\"bp\">=</span> <span class=\"n\">fac</span> <span class=\"bp\">≫</span> <span class=\"n\">fcd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">explicit_cokernel</span> <span class=\"n\">fab</span> <span class=\"bp\">⟶</span> <span class=\"n\">explicit_cokernel</span> <span class=\"n\">fcd</span> <span class=\"o\">:=</span>\n<span class=\"n\">explicit_cokernel_desc</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">fab</span> <span class=\"bp\">≫</span> <span class=\"n\">fbd</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">explicit_cokernel_π</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">category_theory.category.assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">category_theory.category.assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">comp_explicit_cokernel_π</span><span class=\"o\">,</span> <span class=\"n\">limits.comp_zero</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>This is morally a special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.cokernel.map\">docs#category_theory.limits.cokernel.map</a>, but not literally, since with normed group we work with <code>explicit_cokernel</code> (that in any case is a cokernel). Does someone see how to prove <code>cokernel.map</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.cokernel.map\">docs#category_theory.limits.cokernel.map</a>? Or should we have both results?</p>",
        "id": 257539907,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634220053
    },
    {
        "content": "<p>you mean to construct this map using the function from the category theory library?</p>",
        "id": 257540181,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634220152
    },
    {
        "content": "<p>Yes</p>",
        "id": 257540193,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634220157
    },
    {
        "content": "<p>Is there some lemma saying that <code>explicit_cokernel</code> is a colimit for the cokernel diagram?</p>",
        "id": 257540272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634220187
    },
    {
        "content": "<p>yes, one way to do this is to make an explicit cofork using <code>explicit_cokernel</code>, prove that it's a colimit (as Johan said), and use <code>is_colimit.map</code> or something like that.</p>",
        "id": 257540338,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634220213
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/SemiNormedGroup.explicit_cokernel_iso\">docs#SemiNormedGroup.explicit_cokernel_iso</a></p>",
        "id": 257540573,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634220282
    },
    {
        "content": "<p>So it's probably enough to use it</p>",
        "id": 257540615,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634220298
    },
    {
        "content": "<p>Looking at the code for that, we can use <code>is_colimit_cokernel_cocone</code>.</p>",
        "id": 257540674,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634220320
    },
    {
        "content": "<p>actually, lines 89-118 of that file are essentially what I was describing above :)</p>",
        "id": 257540843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634220364
    },
    {
        "content": "<p>And the <code>is_colimit.map</code> I mentioned above is actually <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.is_colimit.map\">docs#category_theory.limits.is_colimit.map</a></p>",
        "id": 257541384,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634220579
    },
    {
        "content": "<p>(or you could just use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.is_colimit.desc\">docs#category_theory.limits.is_colimit.desc</a> )</p>",
        "id": 257541504,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634220620
    },
    {
        "content": "<p>If you use the explicit cokernel iso you mentioned above and compose with <code>cokernel.map</code>, then I think that will introduce some compositions with identity morphisms under the hood which may (or may not) be annoying if we want to rely on some morphisms being defeq.</p>",
        "id": 257542089,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634220837
    },
    {
        "content": "<p>That's true... in any case my question is very practical: I want to throw away <code>for_mathlib/SemiNormedGroup</code>, so if there is a one line proof of <code>cokernel.map</code> I will just use it, but otherwise I am happy with the current proof, that is very short anyway, and I will PR it.</p>",
        "id": 257542628,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634221040
    },
    {
        "content": "<p>Let me see... one sec.</p>",
        "id": 257543202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634221251
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">coker.map</span> <span class=\"o\">{</span><span class=\"n\">fab</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fbd</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fac</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fcd</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">D</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fab</span> <span class=\"bp\">≫</span> <span class=\"n\">fbd</span> <span class=\"bp\">=</span> <span class=\"n\">fac</span> <span class=\"bp\">≫</span> <span class=\"n\">fcd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">explicit_cokernel</span> <span class=\"n\">fab</span> <span class=\"bp\">⟶</span> <span class=\"n\">explicit_cokernel</span> <span class=\"n\">fcd</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">explicit_cokernel_desc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">fab</span> <span class=\"o\">(</span><span class=\"n\">fbd</span> <span class=\"bp\">≫</span> <span class=\"n\">explicit_cokernel_π</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">reassoc_of</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>That's one line ;)</p>\n<p>It looks like we need to make explicit some of the variables in <code>explicit_cokernel_desc</code></p>",
        "id": 257545655,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634222096
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 257545801,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634222149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Explicit.20cokernel/near/257545655\">said</a>:</p>\n<blockquote>\n<p>It looks like we need to make explicit some of the variables in <code>explicit_cokernel_desc</code></p>\n</blockquote>\n<p><code>explicit_cokernel_desc</code> should have variables similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.cokernel.desc\">docs#category_theory.limits.cokernel.desc</a> -- If I have time later today, I will try to make a mathlib PR with a fix.</p>",
        "id": 257546940,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634222543
    },
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib/issues/9712\">#9712</a> to have <code>explicit_cokernel.map</code> and <code>explicit_coker.map_desc</code>. Even with your one line proof they seem useful to have.</p>",
        "id": 257547788,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634222867
    }
]