[
    {
        "content": "<p>I just pushed a file <code>challenge.lean</code>. Here's a little snapshot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space'</span> <span class=\"n\">ℝ</span> <span class=\"n\">p</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"c1\">-- `V` is a `p`-Banach</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">real_measures.condensed</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span> <span class=\"bp\">⥤</span> <span class=\"n\">Condensed</span> <span class=\"n\">Ab</span> <span class=\"o\">:=</span>\n<span class=\"n\">Profinite.extend</span> <span class=\"o\">(</span><span class=\"n\">real_measures.functor</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"bp\">⋙</span> <span class=\"n\">CompHausFiltPseuNormGrp₁.to_Condensed</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℳ</span><span class=\"bp\">`</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span> <span class=\"n\">real_measures.condensed</span> <span class=\"n\">p'</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Ext</span><span class=\"bp\">`</span> <span class=\"n\">i</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Condensed</span> <span class=\"n\">Ab</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_challenge</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">p'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span> <span class=\"o\">,</span> <span class=\"n\">Condensed.of_top_ab</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 254016650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632128066
    },
    {
        "content": "<p>Feel free to beautify!</p>",
        "id": 254016667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632128078
    },
    {
        "content": "<p>Also, this <em>statement</em> still depends on a lot of <code>sorry</code>s. For example, that <code>Condensed Ab</code> is an abelian category with enough projectives.</p>",
        "id": 254016735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632128126
    },
    {
        "content": "<p>Do you think proving it has enough projectives is a reasonable \"not too difficult\" project? I have some time in the next weeks, and I would be very happy to start working with the category theory part of the library!</p>",
        "id": 254035022,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632137751
    },
    {
        "content": "<p><del>The main statement is nonsense! I completely forgot to formalize <code>= 0</code> in the main statement.</del> Fixed</p>",
        "id": 254035987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632138252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> There is a lot of code that Bhavik wrote for the \"basic condensed API\", but I don't know where that code is.</p>",
        "id": 254036033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632138289
    },
    {
        "content": "<p>It would be helpful if <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> could push his code somewhere where others can build on top of it.</p>",
        "id": 254036087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632138316
    },
    {
        "content": "<p>The key thing we need to prove that <code>Cond Ab</code> has enough projectives is the sheafification in <code>Cond Ab</code>. This lets you construct the left adjoint to the forgetful functor, and applying that to the condensed set of a projective object of CompHaus (which mathlib knows there are enough of) gives you projectives in <code>Cond Ab</code>. I think constructing the sheafification will be a nontrivial task here.</p>",
        "id": 254047995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632143863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I guess we can assert the existence of sheafification and the fact that it is adjoin to the inclusion into presheaves. That way we can continue building other stuff on top of that.</p>",
        "id": 254051368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632145198
    },
    {
        "content": "<p>I added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_right_adjoint</span> <span class=\"o\">(</span><span class=\"n\">Sheaf_to_presheaf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Condensed</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">forget_to_CondensedType</span> <span class=\"o\">:</span> <span class=\"n\">Condensed</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">CondensedSet</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">F.val</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">F</span> <span class=\"k\">with</span> <span class=\"n\">F</span> <span class=\"n\">hF</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">presheaf.is_sheaf_iff_is_sheaf_forget</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">Ab</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">hF</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">is_sheaf_iff_is_sheaf_of_type</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_instance</span>\n  <span class=\"kd\">end</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">whisker_right</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_right_adjoint</span> <span class=\"n\">forget_to_CondensedType</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 254053603,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632146216
    },
    {
        "content": "<p>The second sorry should follow from the first</p>",
        "id": 254053641,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632146232
    },
    {
        "content": "<p>Thanks, I pulled.</p>",
        "id": 254056454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632147331
    },
    {
        "content": "<p>Somewhat related to this, we currently define <code>CondensedSet</code> using <code>SheafOfTypes</code> as opposed to <code>Condensed Type*</code> (the two are equivalent but not defeq). Do we want to change this?</p>",
        "id": 254057460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632147720
    },
    {
        "content": "<p>I don't have a strong feeling about that.</p>",
        "id": 254057531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632147736
    },
    {
        "content": "<p>So far we haven't used condensed sets yet. Only condensed abelian groups.</p>",
        "id": 254057576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632147758
    },
    {
        "content": "<p>It would save one of the <code>rw</code> lines in the proof above if we do, but it's not a huge deal.</p>",
        "id": 254057581,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632147760
    },
    {
        "content": "<p>I guess the sticking point is sheafification. And that will be hard no matter which definition (-;</p>",
        "id": 254057638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632147785
    },
    {
        "content": "<p>Checking the sheaf condition is easier in <code>SheaOfTypes</code> which could be useful later on.</p>",
        "id": 254057646,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632147788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Don't you think we should provide the sheafification functors explicitly?</p>",
        "id": 254063052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632149740
    },
    {
        "content": "<p>Regarding projectives, let me point out that besides their existence, we also need to (later) know quite explicitly their structure, as in Proposition 2.1 of Analytic.pdf. That proposition might be another good intermediate target.</p>",
        "id": 254063650,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1632149981
    },
    {
        "content": "<p>So this file <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/challenge.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/challenge.lean</a> has the statement of the main challenge. Are there ways to make those Ext groups look better? I want to show this off in a talk two weeks from now.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℳ</span><span class=\"bp\">`</span> <span class=\"n\">p'</span> <span class=\"o\">:=</span> <span class=\"n\">real_measures.condensed</span> <span class=\"n\">p'</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Ext</span><span class=\"bp\">`</span> <span class=\"n\">i</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Condensed</span> <span class=\"n\">Ab</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_challenge</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_zero</span> <span class=\"o\">(</span><span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">p'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span> <span class=\"o\">,</span> <span class=\"n\">Condensed.of_top_ab</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 256183008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633414041
    },
    {
        "content": "<p>Those <code>,</code>s are a very ugly hack.</p>",
        "id": 256183022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633414068
    },
    {
        "content": "<p>And without notation, you have all those <code>.obj</code> and <code>op</code> floating around.</p>",
        "id": 256183085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633414094
    },
    {
        "content": "<p>Why not just leave out the <code>,</code>s? You could just define <code>𝓔𝓧𝓣</code> or something?</p>",
        "id": 256188237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633417836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> you mean as an <code>abbreviation</code>?</p>",
        "id": 256188807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633418173
    },
    {
        "content": "<p>Also, that looks very much like an internal Ext object, with all those curly letters.</p>",
        "id": 256188859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633418215
    },
    {
        "content": "<p>True. It would be better to just write <code>Ext</code>.</p>",
        "id": 256188878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633418229
    },
    {
        "content": "<p>Ordinary <code>notation</code> cannot deal with multiple variables in a row, right? So <code>notation</code> would need some form of delimiters.</p>",
        "id": 256188925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633418264
    },
    {
        "content": "<p>Why not just a <code>def</code>? You might even work out how to keep the usual <code>Ext</code> out of scope.</p>",
        "id": 256189024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633418321
    },
    {
        "content": "<p>I was going to have a look, but haven't compiled liquid oleans in some time. :-)</p>",
        "id": 256189046,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633418336
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">Ext</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AB</span> <span class=\"o\">:</span> <span class=\"n\">Condensed</span> <span class=\"n\">Ab</span> <span class=\"bp\">×</span> <span class=\"n\">Condensed</span> <span class=\"n\">Ab</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Condensed</span> <span class=\"n\">Ab</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">AB.1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">AB.2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_challenge</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_zero</span> <span class=\"o\">(</span><span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">ℳ</span> <span class=\"n\">p'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Condensed.of_top_ab</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 256189346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633418486
    },
    {
        "content": "<p>I think that is certainly an improvement (notationwise).</p>",
        "id": 256189386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633418515
    },
    {
        "content": "<p>I pushed this to master</p>",
        "id": 256190197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633418976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/main.20statement/near/256189046\">said</a>:</p>\n<blockquote>\n<p>I was going to have a look, but haven't compiled liquid oleans in some time. :-)</p>\n</blockquote>\n<p><code>./scripts/get-cache.sh</code></p>",
        "id": 256190225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633419000
    },
    {
        "content": "<p>Ah, I was running <code>leanproject get-cache</code>, with no success.</p>",
        "id": 256190289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633419016
    },
    {
        "content": "<p>Why did you make your <code>abbreviation</code> take a pair? Just to make it look slightly more like normal notation? That seems to be overdoing it. :-)</p>",
        "id": 256190575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633419177
    },
    {
        "content": "<p>Next you're going to be introducing notation <code> = 0</code> for <code>is_zero</code>. :-)</p>",
        "id": 256190644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633419213
    },
    {
        "content": "<p>I guess it's not insane. Use some strange canadian syllabics unicode equality.</p>",
        "id": 256190676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633419232
    },
    {
        "content": "<p>Yeah, maybe it is overdoing it</p>",
        "id": 256191665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633419805
    },
    {
        "content": "<p>Probably, getting rid of the <code>Condensed.of_top_ab</code> is more important.</p>",
        "id": 256191740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633419845
    },
    {
        "content": "<p>Actually, why <em>do</em> you use <code>is_zero</code>? What's wrong with <code> ≅ 0</code>?</p>",
        "id": 256194461,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633421349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> That contains data, right? So you need to write a <code>nonempty</code>.</p>",
        "id": 256199458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633424132
    },
    {
        "content": "<p>What would be wrong with data here?</p>",
        "id": 256199564,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633424172
    },
    {
        "content": "<p>Also, with all those exact sequences, you want a smooth API for showing that objects are trivial. I'm not sure if <code>≅ 0</code> is \"agile\" enough for that.</p>",
        "id": 256199585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633424184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/main.20statement/near/256199564\">said</a>:</p>\n<blockquote>\n<p>What would be wrong with data here?</p>\n</blockquote>\n<p>It's a theorem. But maybe we can ignore that, and define data anyway. The linter will complain (-;</p>",
        "id": 256199629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633424211
    },
    {
        "content": "<p>Sure -- in the proofs. But for now you're just trying to write a readable statement.</p>",
        "id": 256199644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633424218
    },
    {
        "content": "<p>I think the <code>for_twitter/</code> files are allowed to make the linter unhappy.</p>",
        "id": 256199683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633424236
    },
    {
        "content": "<p>So, <code>def</code> or <code>@[nolint] theorem</code>?</p>",
        "id": 256199690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633424241
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">Ext</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Condensed</span> <span class=\"n\">Ab</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">Ext</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">Condensed</span> <span class=\"n\">Ab</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">A</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space'</span> <span class=\"n\">ℝ</span> <span class=\"n\">p</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"c1\">-- `V` is a `p`-Banach</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_challenge</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">ℳ</span> <span class=\"n\">p'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Condensed.of_top_ab</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 256199827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633424299
    },
    {
        "content": "<p>I guess we could try to get <code>(V : Condensed_Banach' p)</code>?</p>",
        "id": 256199989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633424392
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">pBanach</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">normed_group</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">normed_space'</span> <span class=\"o\">:</span> <span class=\"n\">normed_space'</span> <span class=\"n\">ℝ</span> <span class=\"n\">p</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">pBanach</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X.V</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">pBanach</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X.normed_group</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">pBanach</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X.module</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">pBanach</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normed_space'</span> <span class=\"n\">ℝ</span> <span class=\"n\">p</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">X.normed_space'</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">pBanach</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Condensed</span> <span class=\"n\">Ab</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">Condensed.of_top_ab</span> <span class=\"n\">V</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">pBanach</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_challenge</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">ℳ</span> <span class=\"n\">p'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"bp\">≅</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 256200963,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633424855
    },
    {
        "content": "<p>Please push that (-;</p>",
        "id": 256201171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633424959
    },
    {
        "content": "<p>I guess we can get rid of the final <code>.obj</code> as well, by making <code>ℳ</code> an abbreviation?</p>",
        "id": 256201205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633424986
    },
    {
        "content": "<p>Okay, I pushed. <code>pBanach</code> should go in a different file, however.</p>",
        "id": 256202322,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633425633
    },
    {
        "content": "<p><code>ℳ</code> isn't a valid identifier.</p>",
        "id": 256202350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633425651
    },
    {
        "content": "<p>You could however write <code>Ext i (ℳ_{p'} S) V ≅ 0</code> using notations</p>",
        "id": 256202541,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633425752
    },
    {
        "content": "<p>That looks good!</p>",
        "id": 256203271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633426151
    },
    {
        "content": "<p>I suggest that we go for that!</p>",
        "id": 256203309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633426171
    },
    {
        "content": "<p>Pushed.</p>",
        "id": 256203388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633426203
    },
    {
        "content": "<p>Pulled.</p>",
        "id": 256204196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633426595
    },
    {
        "content": "<p>I did another commit that tidies things up by adding a <code>challenge_notations.lean</code> file.</p>",
        "id": 256204555,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633426753
    },
    {
        "content": "<p>Only really useful for making <code>challenge.lean</code> audience friendly. Feel free to revert.</p>",
        "id": 256204605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633426773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/main.20statement/near/256204555\">said</a>:</p>\n<blockquote>\n<p>I did another commit that tidies things up by adding a <code>challenge_notations.lean</code> file.</p>\n</blockquote>\n<p>Forgot to <code>git add</code></p>",
        "id": 256204715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633426811
    },
    {
        "content": "<p>Got it.</p>",
        "id": 256204766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633426838
    },
    {
        "content": "<p>I am congenitally incapable of using <code>git add</code>.</p>",
        "id": 256204784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633426848
    },
    {
        "content": "<p>For those of you who aren't pulling every 5 minutes. The non-commenty part of the file now looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">liquid_tensor_experiment</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">liquid_tensor_experiment</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">pBanach</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">main_challenge</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">ℳ_</span><span class=\"o\">{</span><span class=\"n\">p'</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"bp\">≅</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">liquid_tensor_experiment</span>\n</code></pre></div>",
        "id": 256205903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633427420
    },
    {
        "content": "<p>I propose 1 more tweak:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">liquid_tensor_experiment</span>\n<span class=\"kn\">open</span> <span class=\"n\">liquid_tensor_experiment</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">pBanach</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">liquid_tensor_experiment</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">ℳ_</span><span class=\"o\">{</span><span class=\"n\">p'</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"bp\">≅</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 256206007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633427492
    },
    {
        "content": "<p>Actually, you can make the <code>open_locale</code> do the <code>open</code>, as well.</p>",
        "id": 256207344,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633428073
    },
    {
        "content": "<p>Saves another line!</p>",
        "id": 256207351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633428078
    },
    {
        "content": "<p>And I guess if you want to break the <code>fact</code> rule you could make an instance for <code>[fact (p' ≤ 1)]</code>, deriving it from the others.</p>",
        "id": 256208863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633428792
    },
    {
        "content": "<p>Is there a reason why your statement is not universe polymorphic?</p>",
        "id": 256209143,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633428914
    },
    {
        "content": "<p>The universes are a mess.</p>",
        "id": 256209883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633429257
    },
    {
        "content": "<p>And this might actually Lean-bite us <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 256209910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633429267
    },
    {
        "content": "<p>After all, we want to reduce the main challenge to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">first_target</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">SemiNormedGroup.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">],</span>\n    <span class=\"bp\">​</span><span class=\"o\">((</span><span class=\"n\">BD.data.system</span> <span class=\"n\">κ</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">of</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">Mbar</span> <span class=\"n\">r'</span> <span class=\"n\">S</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 256209952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633429289
    },
    {
        "content": "<p>which lives in <code>Type = Type 0</code>.</p>",
        "id": 256209972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633429299
    },
    {
        "content": "<p>And the main challenge is stated in terms of stuff in <code>Type 1</code></p>",
        "id": 256209999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633429312
    },
    {
        "content": "<p>Both \"for technical reasons\".</p>",
        "id": 256210067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633429331
    },
    {
        "content": "<p>I'm going to have lunch first.</p>",
        "id": 256210079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633429337
    },
    {
        "content": "<p>The problem is that <code>first_target</code> specializes to the polyhedral lattice <code>ℤ : Type</code>. And all the universe variables in the statement of <code>thm95</code> have to be the same.</p>",
        "id": 256221982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633432589
    },
    {
        "content": "<p>So I guess we want to make <code>ulift ℤ</code> into a polyhedral lattice.</p>",
        "id": 256222140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633432625
    },
    {
        "content": "<p>But <code>S</code> and <code>V</code> will still need to live in the same universe.</p>",
        "id": 256222255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633432648
    },
    {
        "content": "<p>Decoupling those can be done, but will be an interesting journey.</p>",
        "id": 256222360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633432667
    },
    {
        "content": "<p>Starting with <code>Type 0</code> first looks reasonable.</p>",
        "id": 256227378,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633433680
    },
    {
        "content": "<p>So the main statement lives in universe <code>u+1</code> because of technical complications with making <code>Profinite</code> a small category. Getting rid of this, probably means that we have to inject all the <code>κ</code>-bounds from the first part of Condensed.pdf into lean.</p>",
        "id": 256230708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633434334
    },
    {
        "content": "<p>(Where <code>κ</code> is some uncountable strong limit cardinal.)</p>",
        "id": 256231073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633434405
    },
    {
        "content": "<p>I might be confused (as usual) about universes... why is <code>S : Profinite.{1}</code> and not <code>S : Profinite.{0}</code>?</p>",
        "id": 256258098,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633445099
    },
    {
        "content": "<p>Je ne sais pas <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> universes never fail to give me headaches.</p>",
        "id": 256258204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633445129
    },
    {
        "content": "<p>I mean, we should be worrking in <code>Condensed Ab.{1}</code>, which are sheaves on <code>as_small.{1} Profinite.{0}</code>, right?</p>",
        "id": 256258348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633445164
    },
    {
        "content": "<p>I guess so...</p>",
        "id": 256259206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633445427
    },
    {
        "content": "<p>Is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">liquid_tensor_experiment</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">pBanach</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ext</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">ℳ_</span><span class=\"o\">{</span><span class=\"n\">p'</span><span class=\"o\">}</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"bp\">≅</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>supposed to work? I'm getting an error at <code>Ext</code>.</p>",
        "id": 256265148,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633447258
    },
    {
        "content": "<p>I think you need to provide the universe variable for <code>S</code>, right?</p>",
        "id": 256268897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633448493
    },
    {
        "content": "<p>Hmm, you are right, it's not working properly</p>",
        "id": 256269182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633448586
    },
    {
        "content": "<p>I think there is a universe issue with <code>real_measures.functorr</code></p>",
        "id": 256269455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633448699
    },
    {
        "content": "<p>Hmmz, is it easily fixable?</p>",
        "id": 256275437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633450886
    },
    {
        "content": "<p>I have something that typechecks...</p>",
        "id": 256279854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633452618
    },
    {
        "content": "<p>no clue whether it makes universe-sense though.</p>",
        "id": 256279878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633452627
    },
    {
        "content": "<p>I pushed it. It's <code>(S : Profinite.{1}) (V : pBanach.{1} p)</code></p>",
        "id": 256279909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633452648
    },
    {
        "content": "<p>I'm a little concerned....</p>",
        "id": 256287297,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633455594
    },
    {
        "content": "<p>Me too, actually. You definitely want the profinite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to live in the site defining condensed sets. A priori you might defined condensed sets using some universe of profinite sets, and then define the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><msup><mi>p</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_{p&#x27;}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32798em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> on some larger class of profinite sets, but then the theorem wouldn't be true for those larger profinite sets.</p>",
        "id": 256315572,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1633466455
    },
    {
        "content": "<p>(Otherwise, the theorem statement looks very nice now :-)!)</p>",
        "id": 256315877,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1633466597
    },
    {
        "content": "<p>Even worse, I think you will have to arrange that the profinite sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub><msub><mo stretchy=\"false\">)</mo><mrow><mo>≤</mo><mi>c</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}(S,\\mathbb Z((T))_r)_{\\leq c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.295179em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> live in the site defining condensed sets. So be careful with your universes!</p>",
        "id": 256316144,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1633466716
    },
    {
        "content": "<p>(Well, I can't really believe that when you try to glue stuff together you will get unresolvable universe issues. But it may not be a completely trivial task. And it is likely that the current version of the theorem is not true.)</p>",
        "id": 256316555,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1633466914
    },
    {
        "content": "<p>I think the key thing that needs to be changed is <br>\n<code>to_Condensed : CompHausFiltPseuNormGrp₁.{u+1} ⥤ Condensed.{u} Ab.{u+1}</code> should instead be <code>to_Condensed : CompHausFiltPseuNormGrp₁.{u} ⥤ Condensed.{u} Ab.{u+1}</code></p>",
        "id": 256324420,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633470396
    },
    {
        "content": "<p>Well, and we will need to have a functor <code>pBanach.{0} p</code> to <code>Condensed Ab.{1}</code>.</p>",
        "id": 256324483,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633470436
    },
    {
        "content": "<p>Do we have a ulift-like functor from <code>Ab.{u}</code> to <code>Ab.{max u v}</code>?</p>",
        "id": 256324834,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633470623
    },
    {
        "content": "<p>Nope, I don't think such a ulift-like functor exists.</p>",
        "id": 256357428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633496131
    }
]