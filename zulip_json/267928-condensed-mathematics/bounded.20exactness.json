[
    {
        "content": "<p>In a long list of remarks on the blueprint (sent in a PM, I've fixed almost all of them), Kevin raised the following question. In the definition of (weak) bounded exactness, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">k &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>≥</mo><msubsup><mi>c</mi><mn>0</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">c \\ge c'_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span></span></span></span>. After that, the text refers to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msubsup><mi>C</mi><mrow><mi>k</mi><mi>c</mi></mrow><mi>i</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">x \\in C_{kc}^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1077719999999998em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span>. Do we want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mi>c</mi><mo>≥</mo><msubsup><mi>c</mi><mn>0</mn><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">kc \\ge c'_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span></span></span></span>?</p>\n<p>For the normed snake lemma, the definition as is, certainly worked fine.</p>",
        "id": 224569494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611988899
    },
    {
        "content": "<p>We need restriction from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">kc</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">c</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>, don't we? So I have the impression that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k \\geq 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is necessary</p>",
        "id": 224575777,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1611998987
    },
    {
        "content": "<p>Ooh, you are right. We actually have that in the Lean repo.</p>",
        "id": 224578441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612002310
    },
    {
        "content": "<p><a href=\"https://github.com/PeterScholze/Analytic/pull/2\">https://github.com/PeterScholze/Analytic/pull/2</a></p>",
        "id": 224578630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612002557
    },
    {
        "content": "<p>Johan, aren't you forgetting <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.succ_le_of_lt\">docs#nat.succ_le_of_lt</a>?</p>",
        "id": 224579108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612003425
    },
    {
        "content": "<p>Or maybe k isn't a natural number.</p>",
        "id": 224579157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612003497
    },
    {
        "content": "<p>Oh, yes k is a norm constraint, not a graduation one, forget about that. I should have read the context instead of relying only on notations...</p>",
        "id": 224579168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612003541
    },
    {
        "content": "<p>Yes sorry, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k\\geq 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> always. One sometimes forgets to mention this when in fact <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>≫</mo><mn>100000</mn></mrow><annotation encoding=\"application/x-tex\">k\\gg 100000</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≫</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> is implicit in your head ;-)</p>",
        "id": 224585537,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612013893
    },
    {
        "content": "<p>I've thought a bit about the weak exactness lemmas yesterday night. I'm pretty confident the <a href=\"https://leanprover-community.github.io/liquid/index.html#completion_is_weakexact\">first lemma</a> will be not so bad, there are clear sublemmas to extract there. However, before pressing on,  I feel like we should discuss whether we really want to keep a single <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> in the definition of weak exactness. Currently <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is used both a the restriction depth factor and the norm bound. This is a bit confusing to me. When I first read that definition I only remembered that it was a definition about a subtle relation between restriction depth and norm bounds. Now I feel this is completely artificial. And if we are interested in explicit bounds on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> then probably we should track both uses of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> independently.</p>",
        "id": 224695943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612167380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> You are absolutely right, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> plays two roles that have nothing to do with each other. I was just too lazy and didn't want to have yet another variable.</p>",
        "id": 224705139,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612173585
    },
    {
        "content": "<p>It definitely makes sense to turn it into two variables, it will also improve estimates</p>",
        "id": 224705190,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612173606
    },
    {
        "content": "<p>I'll have time this afternoon to tackle these lemmas relating weak exactness and exactness for complexes of <em>complete</em> normed groups. Is this still relevant or were there changes that made them obsolete?</p>",
        "id": 225286106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612523660
    },
    {
        "content": "<p>I think that's still relevant!</p>",
        "id": 225286485,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612523986
    },
    {
        "content": "<p>I didn't have time for Lean code in the end, but I did went through the LaTeX code. Riccardo, could you have a look at the beginning of the newly created Section 4 of <a href=\"/user_uploads/3121/7Z46k-pICMuxWWvM7I3ukBJQ/blueprint.pdf\">blueprint.pdf</a> up to the bottom of Page 7?</p>",
        "id": 225355943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612558814
    },
    {
        "content": "<p>I am looking at it</p>",
        "id": 225356185,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612558937
    },
    {
        "content": "<p>Recent changes to the blueprint:</p>\n<ul>\n<li>Gather all normed homological algebra in a dedicated Section 4 instead of splitting it between the main text and an appendix (which was simply following the structure of the lecture notes where it made sense to hide technical stuff).</li>\n<li>Split off the two uses of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> in the definition of (weak)-exactness</li>\n<li>State two extra small technical lemmas split off the proof of our previous pair of technical lemma (I can see some fractal appearing there)</li>\n<li>Simplify notations in the normed homological algebra stuff.</li>\n<li>Slightly rephrase the first two technical proofs so that we don't choose magic sequences of positive real numbers upfront.</li>\n</ul>",
        "id": 225356356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612559026
    },
    {
        "content": "<p>Is \"closed element\" standard terminology?</p>",
        "id": 225356573,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612559113
    },
    {
        "content": "<p>I'm only pretending to know complexes that are not the de Rham complex maybe?</p>",
        "id": 225357491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612559164
    },
    {
        "content": "<p>Closed differential form is certainly a standard terminology.</p>",
        "id": 225357579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612559183
    },
    {
        "content": "<p>Ah, sure</p>",
        "id": 225357710,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612559220
    },
    {
        "content": "<p>Anyway, the fact that you asked means we should avoid this terminology. There are enough unusual things going on here.</p>",
        "id": 225357805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612559279
    },
    {
        "content": "<p>Looks good to me</p>",
        "id": 225358514,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612559674
    },
    {
        "content": "<p>Would \"cocycle\" and \"coboundary\" be better?</p>",
        "id": 225358709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612559775
    },
    {
        "content": "<p>Probably</p>",
        "id": 225358761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612559804
    },
    {
        "content": "<p>I still find it weird that you are happy to use \"exact\" but not \"closed\".</p>",
        "id": 225359171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612560033
    },
    {
        "content": "<p>Anyway, I'll try to Lean that soon. Hopefully those little reformulation will make it slightly easier (at least it's less frightening).</p>",
        "id": 225359315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612560122
    },
    {
        "content": "<p>Probably because exact is less used, so my mind only find one \"instance\". Closed relates to closed subspaces (that were relevant for the story of weak exactness) and complete... but this is just how my brain works</p>",
        "id": 225359369,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612560151
    },
    {
        "content": "<p>I pushed the Zeeman effect refactor. It splits the role of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> in the bounded exactness definitions into a depth factor and norm bound. The <a href=\"https://github.com/leanprover-community/lean-liquid/blob/5381dbb4fd42bddef5f72ad91f46c166a9696266/src/system_of_complexes.lean#L184-L195\">new definitions</a> are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">c₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"bp\">∥</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_weak_bdd_exact_for_bdd_degree_above_idx</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">c₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span>\n</code></pre></div>\n<p>Along the way, note also how new coercions to functions and smarter implicit arguments allow to write things like <code>x : C (k * c) (i+1)</code> or <code>∥res x - d y∥ ≤ K * ∥d x∥</code> (Peter, this is part of what Lean's elaborator can do, no need for decorations here).</p>",
        "id": 225420594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612630958
    },
    {
        "content": "<p>The normed snake lemma (weak bounded exactness version) <a href=\"https://github.com/leanprover-community/lean-liquid/blob/5381dbb4fd42bddef5f72ad91f46c166a9696266/src/normed_snake.lean#L13-L24\">becomes</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">weak_normed_snake</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"n\">k''</span> <span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"n\">K''</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hk'</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hk''</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k''</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_weak_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_weak_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k'</span> <span class=\"n\">K'</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'_adm</span> <span class=\"o\">:</span> <span class=\"n\">M'.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_strict</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">M'</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">Hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">k''</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">K''</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g.apply</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">N</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"n\">f.apply.range</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgquot</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes.is_quotient</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.is_weak_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"o\">(</span><span class=\"n\">k''</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K'</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">K''</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span>\n</code></pre></div>",
        "id": 225420680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612631063
    },
    {
        "content": "<p>Note that I also took the opportunity to stop assuming the restriction depth factor for both systems of complexes and <code>f</code>, and same for the norm bounds.</p>",
        "id": 225420715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612631122
    },
    {
        "content": "<p>It doesn't cost anything anyway since separating both uses of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> means that we don't have to align constants anymore.</p>",
        "id": 225420765,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612631193
    },
    {
        "content": "<p>Technical note: the coercion that allows to write <code>x : C c i</code> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msubsup><mi>C</mi><mi>c</mi><mi>i</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">x \\in C^i_c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.071664em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span> is completely smooth. The coercion from morphisms of system of complexes to functions is less efficient. It works great when applying a morphism to an element. But the elaborator doesn't understand <code>(f : M c i ⟶ M' c i)</code>. That's why <code>f.apply</code> still appears in the statement above, and this causing some pain in the proof.</p>",
        "id": 225420966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612631441
    },
    {
        "content": "<p>One could argue that writing <code>f.apply</code> everywhere is less painful. This would be easy to revert (although I wasn't careful enough to have a commit containing only that move...).</p>",
        "id": 225420983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612631498
    },
    {
        "content": "<p>Important note: the statement of Proposition 9.6 now has a random constant. It hasn't been updated.</p>",
        "id": 225421100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612631646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> thanks a lot for this refactor!</p>",
        "id": 225422047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612632896
    },
    {
        "content": "<p>(Today I learned about the Zeeman effect <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>)</p>",
        "id": 225422073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612632954
    },
    {
        "content": "<p>Is someone (and I mean <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ) working on lemmas like <code>system_of_complexes.controlled_y</code>? If not I think I can prove it during the week.</p>",
        "id": 225554481,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612795974
    },
    {
        "content": "<p>Yes, Patrick has been looking at this. But he also hit some DTT troubles. We need a principled solution to the following issue: if <code>x : C c i</code> and you want to say that <code>x</code> is in the image of <code>d</code>, then you get some <code>y : C c (i - 1)</code> such that <code>d y = x</code>. Except that this doesn't typecheck, because <code>d y : C c (i - 1 + 1)</code>.<br>\nAnd <code>i - 1 + 1</code> is not defeq to <code>i</code>. This is of course a very annoying stupidity. But we'll need to find a smooth solution, or otherwise we'll have a lot of very painful hours ahead of us, and the resulting code will be awful to read.</p>",
        "id": 225555472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612796342
    },
    {
        "content": "<p>Does the eq_to_hom sort of idea work here? Specifically, does it work to make a morphism C c i -&gt; C c j given i = j, and insert it in the equality? I think this idea has been successful in abstract categories, perhaps it's appropriate here as well</p>",
        "id": 225556109,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1612796578
    },
    {
        "content": "<p>We already have <code>system_of_complexes.congr</code> that does that. It has been written by Johan, so I guess he sees some troubles in using it a lot</p>",
        "id": 225556456,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612796716
    },
    {
        "content": "<p>Just thinking out loud here: What if we redefine complexes so that the <code>d</code> is defined on the whole complex at once, not on the individual graded components? This is the usual thing we do on paper, where <code>d</code>is defined on the direct sum of the graded components.</p>",
        "id": 225556921,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612796887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> it doesn't make the code pleasant to look at. Once you start chasing elements through diagrams, you don't want to constantly tell Lean that <code>eq_to_hom</code> commutes with foo, bar, and quux.</p>",
        "id": 225556969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612796901
    },
    {
        "content": "<p>I know that these complexes were defined elsewhere (in mathlib), so this would be a significant change.</p>",
        "id": 225556986,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612796909
    },
    {
        "content": "<p>Why not just take the direct sum of all the objects?</p>",
        "id": 225557094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612796953
    },
    {
        "content": "<p>And endow it with the sup norm? Maybe it works... we'll have to experiment</p>",
        "id": 225557703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612797177
    },
    {
        "content": "<p>The fix which Mario sometimes advertises is the sigma type,i.e. the disjoint union of the objects. But because these things are groups, the direct sum seems more natural.</p>",
        "id": 225557860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612797239
    },
    {
        "content": "<p>Or you can have the best of both worlds: Define a new thing, called <code>D</code> or something, on the sigma type (or direct sum, whatever), and add an axiom that it agrees with <code>d</code> on the graded components.</p>",
        "id": 225558083,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612797316
    },
    {
        "content": "<p>Then just restate things in terms of <code>D</code>.</p>",
        "id": 225558108,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612797327
    },
    {
        "content": "<p>Currently, my idea was to have <code>d</code> take to arguments <code>i j</code> and mover from <code>C c i</code> to <code>C c j</code>. It should automatically infer a proof that <code>j = i + 1</code>. However, auto_params don't play well with bundled functions, I just discovered. See the question in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a></p>",
        "id": 225558358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612797411
    },
    {
        "content": "<p>We can maybe have two version, one like the current one and one like the one you want, but where we write the proof that <code>j = i + 1</code> by hand, so most of the time we use the normal one, and when needed we use the other one.</p>",
        "id": 225561719,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612798751
    },
    {
        "content": "<p>I think the direct-sum idea is also interesting, but I would like to see some code to know what it would really look like</p>",
        "id": 225562050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612798878
    },
    {
        "content": "<p>Mmm, I see that then we will have to chose which one to use in the definition of <code>exact</code>, that is probably not a good thing</p>",
        "id": 225562086,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1612798899
    },
    {
        "content": "<p>Would something like <code>d {i} {j} (h : j = i + 1 . my_tactic) (x : C i) : C j := ...</code> be fine, where <code>my_tactic</code> would try <code>refl</code> and <code>j = j - 1 + 1</code> and so on (where the \"and so on\" would not need to be able to treat everything, only what comes up in practice)? Or is it the problem you mention in the other thread that prevents this from working?</p>",
        "id": 225565090,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1612800134
    },
    {
        "content": "<p>Right, but then we no longer have a bundled morphism...</p>",
        "id": 225565301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612800217
    },
    {
        "content": "<p>I apologize for the secret work shared only in private messages with Johan. This is a bad habit inherited from the perfectoid project when we were only three contributors. Indeed I started to work on those lemmas and hit issues with dependent types. The following is a piece of not quite working code for people who want to play with those issues:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mock_complex</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">differential</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">obj</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">obj</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">restriction</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span> <span class=\"bp\">→</span> <span class=\"n\">obj</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">obj</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">restriction_func</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">c''</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"bp\">≤</span> <span class=\"n\">c''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"n\">c''</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">restriction</span> <span class=\"n\">c''</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"n\">h'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">restriction</span> <span class=\"n\">c''</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h.trans</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commute</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">differential</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">differential</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">mock_complex</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">C.obj</span> <span class=\"o\">⟩</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">c''</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"bp\">≤</span> <span class=\"n\">c''</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c''</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nnreal.coe_le_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stupid_one</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">c</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_le_mul_right'</span> <span class=\"n\">h</span> <span class=\"n\">c</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stupid_two</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">stupid_one</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">c</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">nnreal.zero_le_coe</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stupid_three</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">stupid_one</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">magic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">assumption</span> <span class=\"bp\">&lt;|&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nnreal.coe_le_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">])</span> <span class=\"bp\">&lt;|&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">stupid_one</span><span class=\"o\">,</span> <span class=\"n\">stupid_two</span><span class=\"o\">,</span> <span class=\"n\">stupid_three</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]]</span> <span class=\"bp\">&lt;|&gt;</span>\n   <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">res</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span> <span class=\"bp\">.</span> <span class=\"n\">magic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">C.restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">hc</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">C.differential</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">d_res</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">C.commute</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">res_res</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">c''</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c''</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"bp\">≤</span> <span class=\"n\">c''</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">res</span>  <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">C.restriction_func</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">res_res_mul</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">stupid_one</span><span class=\"o\">,</span> <span class=\"n\">stupid_two</span><span class=\"o\">,</span> <span class=\"n\">stupid_three</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">C.restriction_func</span>\n</code></pre></div>",
        "id": 225568126,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612801325
    },
    {
        "content": "<p>If we're playing with these auto param tricks, why not just play the <code>[fact (j = i + 1)]</code> game again?</p>",
        "id": 225572578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612802961
    },
    {
        "content": "<p>We tried this game already. It doesn't seem to be powerful enough.</p>",
        "id": 225573527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612803317
    },
    {
        "content": "<p>Ah okay.</p>",
        "id": 225573560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612803333
    },
    {
        "content": "<p>We need a more powerful proof search.</p>",
        "id": 225573572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612803338
    },
    {
        "content": "<p>In principle the auto parameter trick is allowed to run any tactic you want. I write \"in principle\" because there are issues. Part of the issue is with implicit vs explicit but the main one is elaboration order: at which stage of the elaboration does the tactic kicks in?</p>",
        "id": 225573818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612803409
    },
    {
        "content": "<p>In the case that doesn't work at the very end of the above snippet, the tactic gets <code>c \\le ?m_1</code> as its goal, and obviously this is not very promising.</p>",
        "id": 225573903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612803443
    },
    {
        "content": "<p>So adding an instance like the following is not enough?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 225573947,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612803459
    },
    {
        "content": "<p>I'm getting no errors with the code snippet above. Am I supposed to?</p>",
        "id": 225574313,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612803596
    },
    {
        "content": "<p>You'll get an error if you replace the last statement by something readable.</p>",
        "id": 225574485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612803644
    },
    {
        "content": "<p>Oh :)</p>",
        "id": 225574533,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612803662
    },
    {
        "content": "<p>This is slightly more readable, IMO:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">mock_complex</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">differential</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">obj</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">obj</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">restriction</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span> <span class=\"bp\">→</span> <span class=\"n\">obj</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">obj</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">restriction_func</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">c''</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"bp\">≤</span> <span class=\"n\">c''</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"n\">c''</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">restriction</span> <span class=\"n\">c''</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"n\">h'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">restriction</span> <span class=\"n\">c''</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h.trans</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commute</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">differential</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">differential</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">mock_complex</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">C.obj</span> <span class=\"o\">⟩</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">c''</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"bp\">≤</span> <span class=\"n\">c''</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c''</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nnreal.coe_le_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stupid_one</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">c</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_le_mul_right'</span> <span class=\"n\">h</span> <span class=\"n\">c</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stupid_two</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">stupid_one</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">c</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">nnreal.zero_le_coe</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stupid_three</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">stupid_one</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">magic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">assumption</span> <span class=\"bp\">&lt;|&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nnreal.coe_le_coe</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">])</span> <span class=\"bp\">&lt;|&gt;</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">stupid_one</span><span class=\"o\">,</span> <span class=\"n\">stupid_two</span><span class=\"o\">,</span> <span class=\"n\">stupid_three</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]]</span> <span class=\"bp\">&lt;|&gt;</span>\n   <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">res</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span> <span class=\"bp\">.</span> <span class=\"n\">magic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">C.restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">hc</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">res'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span> <span class=\"bp\">.</span> <span class=\"n\">magic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">C.restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">hc</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">res''</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span> <span class=\"bp\">.</span> <span class=\"n\">magic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">C.restriction</span> <span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">hc</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">C.differential</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">d_res</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">C.commute</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">res_res</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"n\">c''</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c''</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"bp\">≤</span> <span class=\"n\">c''</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">res</span>  <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">C.restriction_func</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">res_res_mul</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">mock_complex</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">res''</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">C.restriction_func</span>\n</code></pre></div>",
        "id": 225579884,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612805798
    },
    {
        "content": "<p>But of course the user should know that <code>res'</code> and <code>res''</code> are just <code>res</code> with more variables being made explicit.</p>",
        "id": 225579942,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612805825
    },
    {
        "content": "<p>I tried using <code>res'</code> for the last lemma as well, but I (obviously...) ran into the same metavariable issue that <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> mentioned.</p>",
        "id": 225580023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612805858
    },
    {
        "content": "<p>Yes, this issue is independent of what variables are made explicit. On paper Peter explicits both c and c'. In Lean it would be fair to explicit the one that cannot be inferred by looking at the type of x. But we could also put type annotations when needed. This is orthogonal to the issue at hand.</p>",
        "id": 225580333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612805989
    },
    {
        "content": "<p>Is it possible to explain (to a layperson like me) why <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i-1+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> causes such problems? Would <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i+1+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> vs. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">i+2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> also cause such issues?</p>",
        "id": 225599366,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612814474
    },
    {
        "content": "<p>The issue is that we're working with dependent types <code>C i</code> which depend on <code>i</code>. We then have some term <code>x : C i</code>, and we want to view it as a term of type <code>C (i-1+1)</code>. But <code>i-1+1</code> is not definitionally equal to <code>i</code>, so <code>C i</code> and <code>C (i-1+1)</code> are not \"the same\" by definition. You can do what essentially amounts to rewriting along the equality <code>i - 1 + 1 = i</code>, but then you have to carry around the fact that you did this rewriting and it gets messy and annoying very quickly.</p>",
        "id": 225600715,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612815130
    },
    {
        "content": "<p>At least for nat, <code>i+1+1</code> is defeq to <code>i+2</code> so you are okay there</p>",
        "id": 225600756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815165
    },
    {
        "content": "<p>That's not the case for integers, is it?</p>",
        "id": 225600769,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612815172
    },
    {
        "content": "<p>(It's true for nat)</p>",
        "id": 225600774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612815178
    },
    {
        "content": "<p>I think the associativity part might cause a problem over int</p>",
        "id": 225600812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815198
    },
    {
        "content": "<p>But I guess <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">1+i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i+1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> are not \"defeq\", even in nat?</p>",
        "id": 225600849,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612815221
    },
    {
        "content": "<p>Right:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 225600857,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612815224
    },
    {
        "content": "<p>no, defeq doesn't have most equalities you would want</p>",
        "id": 225600933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815262
    },
    {
        "content": "<p>so it's best practice to structure things such that you don't need to rely on what is and isn't defeq</p>",
        "id": 225600985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815296
    },
    {
        "content": "<p>but this certainly sounds like the kind of thing that ought to be automatable (is that a word?). What is the problem with writing a tactic taking care of such issues?</p>",
        "id": 225601188,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612815404
    },
    {
        "content": "<p>That's more-or-less what <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> were trying to do in the code above.</p>",
        "id": 225601226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1612815428
    },
    {
        "content": "<p>For me the problem is that I'm still not good enough at writing robust tactics <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 225601254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815439
    },
    {
        "content": "<p>OK, but it should be standard practice to have a dependent type over integers, and this issue should always come up then, it seems? So I would have expected that's the kind of thing somebody has already written a tactic for</p>",
        "id": 225601346,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612815482
    },
    {
        "content": "<p>But once we (Patrick, Adam, me) can write down a precise description of what the tactic should do, then there are enough people around here that can help us out</p>",
        "id": 225601386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815486
    },
    {
        "content": "<p>Unfortunately it isn't there yet. We regularly consider things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\R^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, where in principle the same problem occurs. But usually there are \"easy\" solutions.</p>",
        "id": 225601502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815543
    },
    {
        "content": "<p>I think homological algebra is the first place where this bites you hard.</p>",
        "id": 225601528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815556
    },
    {
        "content": "<p>Aha, I see!</p>",
        "id": 225601558,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612815566
    },
    {
        "content": "<p>And we've done a little bit of homological algebra before. But nothing as serious as chasing elements through complexes of normed groups.</p>",
        "id": 225601601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815593
    },
    {
        "content": "<p>Part of the issue is that even with the best tactics you can't hide this from the user, once you have a dependent type over integers the issues already become apparent, and a tactic can't actually make things defeq in order to make the desired statements typecheck</p>",
        "id": 225601712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815622
    },
    {
        "content": "<p>I know, that's serious business! <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 225601729,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612815630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is that really true? I think there must be ways to make it almost transparent.</p>",
        "id": 225601800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815665
    },
    {
        "content": "<p>What we need is a sort of <code>renormalize</code> tactic, that will put all the indices in some normal form.</p>",
        "id": 225601865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815700
    },
    {
        "content": "<p>You have to insert a cast to apply a non-definitional equality, and the user has to see and manipulate this</p>",
        "id": 225601890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815713
    },
    {
        "content": "<p>So <code>x : C (k * c) (i - 1 + 1)</code> gets replaced with <code>x : C (k * c) i</code></p>",
        "id": 225601994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815739
    },
    {
        "content": "<p>maybe if the tactic pulled everything back into a nondependent type this could be made more ergonomic</p>",
        "id": 225602008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/bounded.20exactness/near/225601890\">said</a>:</p>\n<blockquote>\n<p>You have to insert a cast to apply a non-definitional equality, and the user has to see and manipulate this</p>\n</blockquote>\n<p>No, I claim that we can hide this behind an api.</p>",
        "id": 225602021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815753
    },
    {
        "content": "<p>aka \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> = <span aria-label=\"rainbow\" class=\"emoji emoji-1f308\" role=\"img\" title=\"rainbow\">:rainbow:</span> \"</p>",
        "id": 225602029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815757
    },
    {
        "content": "<p>I'm still not there yet on what exactly the automation task is that a hypothetical <code>renormalize</code> tactic would do</p>",
        "id": 225602169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815830
    },
    {
        "content": "<p>Here's a final part of a goal (I've turned on all implicit arguments):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hy</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">congr</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">-</span>\n        <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">d</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span>\n    <span class=\"bp\">↑</span><span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">d</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">∥</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∥⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">d</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span>\n    <span class=\"bp\">↑</span><span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">d</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">∥</span>\n</code></pre></div>",
        "id": 225602186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815841
    },
    {
        "content": "<p>what are the types of <code>res</code>, <code>d</code> and <code>congr</code></p>",
        "id": 225602328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612815893
    },
    {
        "content": "<p>But until that point, everything is taken care of by an api.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">congr</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c'</span> <span class=\"bp\">.</span> <span class=\"n\">magic</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i'</span> <span class=\"bp\">.</span> <span class=\"n\">magic'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">c'</span> <span class=\"n\">i'</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_hom</span> <span class=\"n\">_</span> <span class=\"n\">hc</span> <span class=\"n\">hi</span> <span class=\"n\">x</span>\n\n<span class=\"sd\">/-- `C.d` is the differential `C c i ⟶ C c (i+1)` for a system of complexes `C`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C.obj</span> <span class=\"bp\">$</span> <span class=\"n\">op</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"n\">congr_hom</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">hj.symm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">res</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c'</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">c'</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">c'</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">C.map</span> <span class=\"o\">(</span><span class=\"n\">hom_of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 225602450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612815951
    },
    {
        "content": "<p>This means that in statements like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">c₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">∥</span>\n</code></pre></div>\n<p>The <code>res x</code> and <code>d y</code> help each other to figure out the indices.</p>",
        "id": 225602584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816001
    },
    {
        "content": "<p>Probably, with the Lean4 elaborator, we could make things even better. But Lean4 doesn't have mathlib <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  So we can't transition to that before summer.</p>",
        "id": 225602701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816047
    },
    {
        "content": "<p>Okay, these look good; but then why is <code>i-1+1+1</code> an index in your goal?</p>",
        "id": 225602762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816078
    },
    {
        "content": "<p>you mean in <code>hy</code>?</p>",
        "id": 225602878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816111
    },
    {
        "content": "<p>yeah</p>",
        "id": 225602883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816115
    },
    {
        "content": "<p>I would keep all indices in the <code>C c i</code> to natural things like <code>i+1</code>, <code>i</code>, <code>i-1</code> etc</p>",
        "id": 225602958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816143
    },
    {
        "content": "<p><code>cases H c hc (i-1) (by linarith) (congr x rfl) with y hy,</code><br>\ngives me<br>\n<code>y : ↥(⇑C c (i - 1 + 1)),</code></p>",
        "id": 225602992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816167
    },
    {
        "content": "<p>don't use <code>rfl</code></p>",
        "id": 225603012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816178
    },
    {
        "content": "<p><code>congr x (_ : i-1+1+1=i+1)</code> or so</p>",
        "id": 225603057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816198
    },
    {
        "content": "<p>nope, that <code>rfl</code> is taking care of <code>k * c = k * c</code>.</p>",
        "id": 225603132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816217
    },
    {
        "content": "<p>I don't know why the auto_param doesn't kick in. The elaboration order isn't optimal there.</p>",
        "id": 225603178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816240
    },
    {
        "content": "<p>But I guess your point is that we should help lean with the second auto_param anyway.</p>",
        "id": 225603217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816262
    },
    {
        "content": "<p>There is a type ascription you could put on something, but not knowing the types of things it's hard to say exactly what</p>",
        "id": 225603233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816274
    },
    {
        "content": "<p>Well... here is <code>H</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">H</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">c₀</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n      <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))),</span>\n        <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))),</span>\n          <span class=\"bp\">∥⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">res</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">d</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span>\n            <span class=\"bp\">↑</span><span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">d</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 225603307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816314
    },
    {
        "content": "<p>And as you can see, it talks about <code>i + 1</code> in the type of <code>y</code>, but then we feed it <code>i - 1</code> as argument to <code>H</code></p>",
        "id": 225603410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816341
    },
    {
        "content": "<p>So you are bound to get a <code>y : C _ (i - 1 + 1)</code></p>",
        "id": 225603432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816355
    },
    {
        "content": "<p>Does the auto_param try to reduce <code>i+1+1</code> to <code>i+2</code> (without being told the term<code>i+2</code>)?</p>",
        "id": 225603434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816356
    },
    {
        "content": "<p>That auto_param only tries <code>refl, assumption, ring</code> because I don't know how to do better</p>",
        "id": 225603479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816382
    },
    {
        "content": "<p><code>simp</code> with lemmas like <code>i + a + b = i + (a + b)</code> and then norm_num might work</p>",
        "id": 225603584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816426
    },
    {
        "content": "<p>at <code>y</code>?</p>",
        "id": 225603613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816442
    },
    {
        "content": "<p>at everything</p>",
        "id": 225603667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816464
    },
    {
        "content": "<p>I mean I guess it's fine to have these terms around for a little while but they should be cleaned up, either by a cleanup tactic that you call when things are getting out of hand or in the <code>magic</code> auto_params</p>",
        "id": 225603782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816529
    },
    {
        "content": "<p>yes, so I think we need that cleanup tactic.</p>",
        "id": 225603841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816557
    },
    {
        "content": "<p>Is this the kind of thing that you write in your lunch break?</p>",
        "id": 225603973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816611
    },
    {
        "content": "<p>It is my lunch break <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 225603999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816626
    },
    {
        "content": "<p>I pushed these experiments to <code>wip_dtt_d_magic</code> of the LTE repo</p>",
        "id": 225604031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/bounded.20exactness/near/225603999\">said</a>:</p>\n<blockquote>\n<p>It is my lunch break <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</blockquote>\n<p>I know, hence my question <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 225604043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816652
    },
    {
        "content": "<p>I think that it's possible for a carefully crafted <code>rw</code> to simplify away all instances of <code>i+1+1</code> to <code>i+2</code> in <code>H</code></p>",
        "id": 225604084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816671
    },
    {
        "content": "<p>But that's not the issue, right? Those are defeq anyway.</p>",
        "id": 225604165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816690
    },
    {
        "content": "<p>no, this is <code>int</code></p>",
        "id": 225604191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816702
    },
    {
        "content": "<p>We need a cleanup tactic that replaces <code>y : C _ (i - 1 + 1)</code> by <code>y : C _ i</code></p>",
        "id": 225604234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816719
    },
    {
        "content": "<p>but that doesn't particularly matter, I can say the same about other int expressions</p>",
        "id": 225604240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816723
    },
    {
        "content": "<p>but I'm talking specifically about <code>H</code>, where everything is still bound. Once you put it in your context with <code>cases</code> it gets harder</p>",
        "id": 225604314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816757
    },
    {
        "content": "<p>Aha, I see. Well, I don't care about having all expressions be of the form <code>i-1-1-1</code> or <code>i +1+1+1+1+1</code></p>",
        "id": 225604361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816776
    },
    {
        "content": "<p>As long as they are all in <em>some</em> normal form</p>",
        "id": 225604392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816790
    },
    {
        "content": "<p>I was thinking more like <code>i+2</code>, <code>i+1</code>, <code>i</code>, <code>i-1</code></p>",
        "id": 225604416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816797
    },
    {
        "content": "<p>sure, if that is easier (-;</p>",
        "id": 225604478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816807
    },
    {
        "content": "<p>But what can you do in <code>H</code>, if it talks about <code>i + 1</code>, and then you feed it <code>i := i' - 1</code>.</p>",
        "id": 225604537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816834
    },
    {
        "content": "<p>then you call the cleanup tactic on the result</p>",
        "id": 225604561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816849
    },
    {
        "content": "<p>I think we need to work more on my baby version before getting Mario's help</p>",
        "id": 225604576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612816856
    },
    {
        "content": "<p>Aah, you mean I first specialize to <code>H (i' - 1)</code>, then clean up, then do <code>cases</code>?</p>",
        "id": 225604592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816861
    },
    {
        "content": "<p>yes</p>",
        "id": 225604600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816865
    },
    {
        "content": "<p>In particular that version doesn't depend on anything from the project (or even from the category theory part of mathlib).</p>",
        "id": 225604636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612816882
    },
    {
        "content": "<p>actually H is <em>too</em> bound atm, it is best if <code>i</code> is free but <code>x</code> and <code>y</code> are not</p>",
        "id": 225604666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816898
    },
    {
        "content": "<p>We need a normalization for expressions which are elements the ring of integer polynomials in <code>i</code>, <code>i'</code>, <code>j</code>, etc, modulo a certain number of polynomial identities.</p>",
        "id": 225604694,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1612816910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> But we need to upgrade it slightly to use bundled functions.</p>",
        "id": 225604702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612816913
    },
    {
        "content": "<p>because rw \"doesn't work under binders\"</p>",
        "id": 225604707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816915
    },
    {
        "content": "<p>Yes, we need to upgrade it, that's why I wrote: we need to work more before asking for specific help.</p>",
        "id": 225604873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612816982
    },
    {
        "content": "<p>but like <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> says, I'm very close to suggesting that you make a standalone version of this problem that I can hack on</p>",
        "id": 225604906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612816995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you are a genius!</p>",
        "id": 225605836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612817361
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx_of_shift</span>  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"n\">c₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n   <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">res</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">C.is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_add_cancel</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225605844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612817367
    },
    {
        "content": "<p>Works like a charm <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 225605874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612817377
    },
    {
        "content": "<p>It's been great fun reading along, thanks for the explanations!</p>",
        "id": 225606689,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1612817702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/bounded.20exactness/near/225606689\">said</a>:</p>\n<blockquote>\n<p>It's been great fun reading along, thanks for the explanations!</p>\n</blockquote>\n<p>As you can see, we're not yet at a stage where such a software can be used while ignoring ugly implementations details that have no mathematical content at all. But we'll get there eventually.</p>",
        "id": 225607915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612818189
    },
    {
        "content": "<p>It's nice that this lemma works but I'm a bit worried that we get tempted to use it to push back the moment where the issue will have to be solved for real (and then we'll have to redo thousands of lines of code).</p>",
        "id": 225608122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612818262
    },
    {
        "content": "<p>I don't think we know what the solution looks like yet though. We need a decent amount of test code before we can see what works</p>",
        "id": 225608267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612818350
    },
    {
        "content": "<p>What do people think of renaming <code>is_bdd_exact_for_bdd_degree_above_idx</code> to <code>is_bounded_exact</code> (and similarly for weak exactness). I think it helps with readability, and it should be clear that the other conditions are implied.</p>",
        "id": 225951967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613023551
    },
    {
        "content": "<p>Done</p>",
        "id": 226012966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613059203
    },
    {
        "content": "<p>I stopped working on this for a while because I was hoping that DTT issues with complexes would improve. But this doesn't seem to be coming soon, so I pushed in our broken setup and proved complete weakly bounded exact complexes are bounded exact: <a href=\"https://github.com/leanprover-community/lean-liquid/commit/fefeb5e9cb7ea2edb55371882e944f4a1e774586\">https://github.com/leanprover-community/lean-liquid/commit/fefeb5e9cb7ea2edb55371882e944f4a1e774586</a></p>",
        "id": 227474982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614103258
    },
    {
        "content": "<p>I'd very interested in seeing a tactic, or at least a user guide, simplifying the endless stream of stupid inequalities. Clearly we don't have a usable tool there yet.</p>",
        "id": 227475115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614103320
    },
    {
        "content": "<p>The proof is 110 lines long and <em>most</em> of it should be completely automatic.</p>",
        "id": 227475515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614103448
    },
    {
        "content": "<p>Also for the record: the blueprint proof is not correct because we don't ask that $K$ is positive (actually we don't even ask that it's nonnegative, whereas it could well be negative if all the normed groups involved are trivial). So I had to replace some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> by <code>if K &gt; 0 then K else 1</code>. And the formal statement that I wrote a couple of weeks ago missed the completeness assumption...</p>",
        "id": 227476244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614103699
    },
    {
        "content": "<p>Oh, and I almost forgot: the blueprint was also missing an argument invoking <a href=\"https://github.com/leanprover-community/lean-liquid/blob/fefeb5e9cb7ea2edb55371882e944f4a1e774586/src/system_of_complexes/basic.lean#L211-L213\">https://github.com/leanprover-community/lean-liquid/blob/fefeb5e9cb7ea2edb55371882e944f4a1e774586/src/system_of_complexes/basic.lean#L211-L213</a></p>",
        "id": 227476528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614103805
    },
    {
        "content": "<p>For those who did not follow: this proof is not in the lecture notes, it was sketched by Peter as a little tactical change in the main proofs and details were (almost) filled in by Riccardo and myself.</p>",
        "id": 227477254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614104090
    },
    {
        "content": "<p>I didn't follow the discussion on complexes closely, but I was pretty convinced by a suggestion by Johan, if I remember correctly. Which was: define a group morphism <code>d' i j</code> for all <code>i j</code>, which is equal to <code>0</code> if <code>j</code> is not <code>i + 1</code>, and to the usual <code>d</code> followed by a cast if <code>j = i+1</code>. Possibly with variations in which the <code>i</code> could be implicit when you apply it to <code>x : C i</code>. Did it turn out to be not so practical?</p>",
        "id": 227479800,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614105013
    },
    {
        "content": "<p>If I recall correctly this approach didn't really improve anything.</p>",
        "id": 227481772,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614105675
    },
    {
        "content": "<p>Same goes for the approach where you define it as a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> (with the poset structure) to abelian groups satisfying some condition.</p>",
        "id": 227482006,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614105770
    },
    {
        "content": "<p>It seems the moral of this story is that one should think of complexes as functors from some indexing category, and equality in this index category just like any other isomorphism, and hope that automation will eventually save the day.</p>",
        "id": 227482922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614106114
    },
    {
        "content": "<p>I think the proposal that Sebastian is talking about hasn't really been tried yet.</p>",
        "id": 227483380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614106289
    },
    {
        "content": "<p>At least I haven't properly tested it... but I have been to distracted by other things lately <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 227483462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614106322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm glad this implication worked out! Now I'm eagerly waiting for the next trouble ya'll find :-)</p>",
        "id": 227490140,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1614108920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/bounded.20exactness/near/227479800\">said</a>:</p>\n<blockquote>\n<p>I didn't follow the discussion on complexes closely, but I was pretty convinced by a suggestion by Johan, if I remember correctly. Which was: define a group morphism <code>d' i j</code> for all <code>i j</code>, which is equal to <code>0</code> if <code>j</code> is not <code>i + 1</code>, and to the usual <code>d</code> followed by a cast if <code>j = i+1</code>. Possibly with variations in which the <code>i</code> could be implicit when you apply it to <code>x : C i</code>. Did it turn out to be not so practical?</p>\n</blockquote>\n<p>There's something I like with this proposition: in degree <code>i</code>, you can define the closed guys as <code>(d' i (i+1)).ker</code>, and the exact guys as <code>(d' (i-1) i).range</code>, and then the cohomology as their quotient, without having ever to check that <code>(i-1) + 1 = i</code>. And in fact it also works in degree <code>i = 0</code>, where this equality fails because of <code>nat</code> subtraction (but still <code>(d' (0-1) 0).range</code> is the zero submodule, so everything is fine). This means that for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>-indexed complexes you don't need to define things in a specific way at <code>i = 0</code>.</p>",
        "id": 227496066,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614111241
    },
    {
        "content": "<p>Is there something subtle in the definition of completion of a system of complexes I am missing? It  is a <code>sorry</code>  at the moment, but we have completion of normed groups, so  it seems easy to write</p>",
        "id": 227497044,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614111655
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/fd2e905e64fad39a0650f3cea374f55357842a45/src/system_of_complexes/completion.lean#L17\">https://github.com/leanprover-community/lean-liquid/blob/fd2e905e64fad39a0650f3cea374f55357842a45/src/system_of_complexes/completion.lean#L17</a></p>",
        "id": 227497620,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614111872
    },
    {
        "content": "<p>I have a mathlib PR open with additive functors. I'll merge this branch of LTE into master once that gets into mathlib.</p>",
        "id": 227497669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614111893
    },
    {
        "content": "<p>Ah we want it as an additive functor!</p>",
        "id": 227497992,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1614112018
    },
    {
        "content": "<p>Yeah, the completion is an additive functor. And you can pushforward a complex with respect to an additive functor.</p>",
        "id": 227498054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614112045
    },
    {
        "content": "<p>Indeed we already know how to complete a normed group, but it's nicer if we can say directly the completion of a complex is a complex.</p>",
        "id": 227500591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614113253
    },
    {
        "content": "<p>By the way, I would be interested to try to restructure one of the proofs in this area to see if I can spot some tricks to make working with complexes easier. It will be easiest for this if the theorem is already formalized, so that it's really a refactoring job and I don't have to learn too much of the prerequisites. Let me know if you have a good theorem or collection of theorems to try this on.</p>",
        "id": 227505821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614115466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/bounded.20exactness/near/227496066\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/bounded.20exactness/near/227479800\">said</a>:</p>\n<blockquote>\n<p>I didn't follow the discussion on complexes closely, but I was pretty convinced by a suggestion by Johan, if I remember correctly. Which was: define a group morphism <code>d' i j</code> for all <code>i j</code>, which is equal to <code>0</code> if <code>j</code> is not <code>i + 1</code>, and to the usual <code>d</code> followed by a cast if <code>j = i+1</code>. Possibly with variations in which the <code>i</code> could be implicit when you apply it to <code>x : C i</code>. Did it turn out to be not so practical?</p>\n</blockquote>\n<p>There's something I like with this proposition: in degree <code>i</code>, you can define the closed guys as <code>(d' i (i+1)).ker</code>, and the exact guys as <code>(d' (i-1) i).range</code>, and then the cohomology as their quotient, without having ever to check that <code>(i-1) + 1 = i</code>. And in fact it also works in degree <code>i = 0</code>, where this equality fails because of <code>nat</code> subtraction (but still <code>(d' (0-1) 0).range</code> is the zero submodule, so everything is fine). This means that for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>-indexed complexes you don't need to define things in a specific way at <code>i = 0</code>.</p>\n</blockquote>\n<p>I like these observations.</p>",
        "id": 227506292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614115664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks! I'm sure we have several complete proofs scattered around on some branches. We can put those together in one file for you to play with.</p>",
        "id": 227506395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614115703
    },
    {
        "content": "<p>Another small mathlib PR with the pushforward of a complex w.r.t. an additive functor. This should get rid of the <code>additive_functor.lean</code> file in the <code>additive</code> branch of <code>lean-liquid</code>. <a href=\"https://github.com/leanprover-community/mathlib/issues/6403\">#6403</a></p>",
        "id": 227614529,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614180111
    }
]