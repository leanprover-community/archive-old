[
    {
        "content": "<p>We will eventually need a characteristic predicate asserting that a certain (augmented) simplicial object is a cech nerve. I want to get people's thoughts on the best way to approach this.</p>\n<p>I just added some definitions to the <code>cech_stuff</code> branch of LTE in the following file:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/cech.lean\">https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/cech.lean</a></p>\n<p>One possible definition is to say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">cech_unit</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(see line 65 of the above file.)</p>\n<p>The point is that the cech functor is right adjoint to the forgetful functor sending an augmented simplicial object to the augmentation itself (considered as an arrow). Does anyone have any thoughts about this potential definition? I'm concerned that it would be difficult to prove that anything that's not obviously of the form <code>cech.obj foo</code> actually satisfies this.</p>",
        "id": 235264091,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618874152
    },
    {
        "content": "<p>I think the most important property that we need from this predicate is that if <code>F</code> is a functor (satisfying some assumptions), then pushing a Cech cover through <code>F</code> will give back a Cech cover.</p>",
        "id": 235291380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618898268
    },
    {
        "content": "<p>In fact, let me be a bit more precise:</p>\n<ol>\n<li><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> does your Cech machinery so far also handle the cosimplicial case?</li>\n<li>We start with an (augmented) cosimplicial object in <code>PolyhedralLattice</code></li>\n<li>We push this through <code>Hom(_, M)</code> to end up with an (augmented) simplicial object in <code>ProFiltPseuNrmGrp r'</code></li>\n<li>We modify the augmentation map a little bit, to get into a situation where 9.8 applies.</li>\n<li>The resulting gadget should satisfy the <code>is_Cech_nerve</code> predicate.</li>\n<li>We push this through the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">_</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hat V(\\_)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.25677em;vertical-align:-0.31em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mclose\">)</span></span></span></span> functor to end up with something (very close) to the columns in the double complex.</li>\n<li>By 8.19 and friends, we derive the desired exactness conditions.</li>\n</ol>",
        "id": 235291804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618898599
    },
    {
        "content": "<p>I don't have anything Cech related in the cosimplicial case, but it should be easy to add analogous definitions using <code>Lan</code> instead of <code>Ran</code>. I guess we need the equiv between arrows and functors from <code>with_initial (discrete punit)</code> as well.</p>",
        "id": 235334146,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618921578
    },
    {
        "content": "<p>Pushing through Hom should be fine, since Hom sends colimits in the first variable to limits, and <code>Lan</code> is constructed as a bunch of colimits</p>",
        "id": 235334249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618921623
    },
    {
        "content": "<p>I mean, whatever we end up doing, it should be able to either handle cosimplicial things, or be able to connect to ad-hoc cosimplicial constructions (which we have now).</p>",
        "id": 235334767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618921828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> could you take a look at the <code>augmented_refactor</code> branch and see if you're happy to merge it to master? It doesn't actually refactor anything, but the constructions there will be helpful in the <code>cech_stuff</code> branch, so it would simplify some things if it gets merged</p>",
        "id": 235336649,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618922641
    },
    {
        "content": "<p>Ok, let me finish what I'm doing atm, and then I'll look.</p>",
        "id": 235336752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618922666
    },
    {
        "content": "<p>Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 235336838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618922706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Just to be sure</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ gdms\n src/for_mathlib/preadditive_category.lean <span class=\"p\">|</span>  <span class=\"m\">20</span> ++++++++++++\n src/for_mathlib/simplicial/augmented.lean <span class=\"p\">|</span>  <span class=\"m\">81</span> +++++++++++++++++++++++++++++++++++++++++++++++++\n src/for_mathlib/simplicial/complex.lean   <span class=\"p\">|</span> <span class=\"m\">157</span> +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n <span class=\"m\">3</span> files changed, <span class=\"m\">258</span> insertions<span class=\"o\">(</span>+<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 235337732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618923034
    },
    {
        "content": "<p>That's the sort of diff I should be looking at, right?</p>",
        "id": 235337756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618923045
    },
    {
        "content": "<p>Sounds right!</p>",
        "id": 235337889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618923100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> What I can see so far looks fine!</p>",
        "id": 235338328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618923266
    },
    {
        "content": "<p>The proof of the pudding will be in the eating.</p>",
        "id": 235338345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618923273
    },
    {
        "content": "<p>Alright, I'll merge it to master when I get to my computer this afternoon.</p>",
        "id": 235341950,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618924791
    },
    {
        "content": "<p>Alright then! I merged <code>augmented_refactor</code> into master:;<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/compare/6768307..e023f5f\">https://github.com/leanprover-community/lean-liquid/compare/6768307..e023f5f</a><br>\nCI should go through with no issues (supposedly...)</p>",
        "id": 235433537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618962488
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 235458399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618983559
    }
]