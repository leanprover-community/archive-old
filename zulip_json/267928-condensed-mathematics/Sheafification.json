[
    {
        "content": "<p>I started working toward sheafification in a general context (i.e. for sheaves on a site <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> taking values in a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{D}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{D}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> has enough (co)limits).</p>\n<p>the code I have so far is in the mathlib branch <a href=\"https://github.com/leanprover-community/mathlib/tree/sites-sheafification\">branch#sites-sheafification</a></p>\n<p>so far, I have the construction of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"script\">F</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span> following the discussion here <a href=\"https://stacks.math.columbia.edu/tag/00W1\">stacks#00W1</a></p>\n<p>The proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"script\">F</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span> is functorial is much to painful right now. If anyone wants to have a go at simplifying and breaking up some of the proofs into smaller pieces, that would be very helpful!</p>",
        "id": 258781054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634940204
    },
    {
        "content": "<p>There is one point where this diverges from the page on the stacks project -- I don't assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> has pullbacks, so instead of using the pullback to obtain the relations among the local sections, I instead mimic the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.presieve.family_of_elements.compatible\">docs#category_theory.presieve.family_of_elements.compatible</a></p>",
        "id": 258781561,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634940499
    },
    {
        "content": "<p>Hi, I'm quite interested in this (or at least in the results of this that I could use elsewhere).<br>\nIs there any updates on this? / Is there anything I could help?</p>",
        "id": 259121626,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1635265110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> one point to note here is that (contrary to what I wrote above) having enough (co)limits in the target category (even all limits and colimits) is not enough. There is an additional condition that's required saying that certain products commute with certain colimits. The nlab calls this the \"IPC property\" see the bottom of <a href=\"https://ncatlab.org/nlab/show/sheafification\">nlab#sheafification</a> </p>\n<p>So for now, I think it would be better to just work with <code>Type*</code> valued presheaves to get things moving along.</p>",
        "id": 259123206,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635265772
    },
    {
        "content": "<p>Which part of the proof would break?</p>",
        "id": 259123949,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1635266081
    },
    {
        "content": "<p>Does it still work for concrete categories with a forgetful functor that preserves limits and filtered colimits? (which is what I was looking for)</p>",
        "id": 259124052,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1635266134
    },
    {
        "content": "<p>Maybe one needs the forgetful functor to reflect isomorphisms as well?</p>",
        "id": 259125137,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635266547
    },
    {
        "content": "<p>I think that's a reasonable setting: A concrete category where the forgetful functor preserves limits, filtered colimits, and reflects isos. This will take care of the algebraic categories for example</p>",
        "id": 259125326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635266616
    },
    {
        "content": "<p>There may be some additional conditions required on the site itself so that the colimit diagrams are actually filtered.</p>",
        "id": 259125581,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635266707
    },
    {
        "content": "<p>If I'm not mistaken, the colimit seems to be filtered as intersections of two covering sieves is still covering.</p>",
        "id": 259125761,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1635266774
    },
    {
        "content": "<p>Oh yes of course.</p>",
        "id": 259125918,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635266836
    },
    {
        "content": "<p>In fact I've already played with some of your code over at <a href=\"https://github.com/leanprover-community/mathlib/tree/erd1/sites-sheafification\">branch#erd1/sites-sheafification</a>, and in particularly showed that such forgetful functors preserve the constructed <code>plus</code>. I suppose it would be useful when we want to show that <code>plus plus</code> is a sheaf for such concrete categories.</p>",
        "id": 259126234,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1635266952
    },
    {
        "content": "<p>Great!</p>",
        "id": 259126393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635267005
    },
    {
        "content": "<p>Maybe for generality you should allow a whole family of jointly conservative functors which preserve [...], to include locally finitely presentable categories. (For general locally presentable categories the sheafification will also exist but I guess it might not be computed by the same formula.)</p>",
        "id": 259126495,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635267056
    },
    {
        "content": "<p>I guess it probably also works if you have a conservative functor (preserving limits + filtered colimits) to a topos, even one that's not lfp?</p>",
        "id": 259127586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635267551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Does your example include the family \"<code>S : ExtrDisc</code> â†¦ (evaluate condensed sets at <code>S</code>)\"?</p>",
        "id": 259129795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635268464
    },
    {
        "content": "<p>It that the kind of thing you have in mind?</p>",
        "id": 259129824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635268475
    },
    {
        "content": "<p>Yes. Or even evaluation at all profinite sets or all compact Hausdorff spaces if you like. Those all preserve filtered colimits because the topology is generated by finite covering families</p>",
        "id": 259155806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635279768
    },
    {
        "content": "<p>The other thing I had in mind was just something like simplicial sets</p>",
        "id": 259155821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635279779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Hi, are you still working on it / planning to work on it?<br>\nIf not, I can adopt this project since I'll probably need the results when working on the AG library in the near future.</p>",
        "id": 260233018,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1636006365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> Yes, I am still working on it (but a lot slower than usual since the two classes I'm teaching both have midterms this week). I decided to switch up the definition a bit by defining the notion of a \"multiequalizer\" which essentially computes the equalizer of the map between the products as a single limit. The API is much smoother with this.</p>",
        "id": 260262732,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636029182
    },
    {
        "content": "<p>That's great! Probably the gluing of stuff should also use such an API as it is also an equalizer between products.</p>",
        "id": 260262970,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1636029321
    },
    {
        "content": "<p>for now I have the code for this new approach in a branch of LTE<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/compare/sheafification_stuff\">https://github.com/leanprover-community/lean-liquid/compare/sheafification_stuff</a></p>\n<p>Since you say this will be useful for you in the near future, I will start opening mathlib PRs sooner rather than later.</p>",
        "id": 260262978,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636029325
    },
    {
        "content": "<p>Here is the first one: <a href=\"https://github.com/leanprover-community/mathlib/issues/10169\">#10169</a></p>",
        "id": 260311700,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636049447
    },
    {
        "content": "<p>The following is now sorry free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">adjunction</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">presheaf_to_Sheaf</span> <span class=\"n\">D</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">âŠ£</span> <span class=\"o\">(</span><span class=\"n\">Sheaf_to_presheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>In the following general context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">grothendieck_topology</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_limits</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_colimits</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">concrete_category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">preserves_limits</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">D</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"bp\">âˆ€</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">preserves_colimits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">J.cover</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">áµ’áµ–</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">D</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">reflects_isomorphisms</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">D</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>(The categories <code>J.cover X</code> are all cofiltered, so their opposites are filtered, hence the preserving colimits assumption holds true for all of the usual algebraic categories)</p>",
        "id": 261058648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636580351
    },
    {
        "content": "<p>I'll push to LTE's master, but it will require some serious cleanup work to get this into mathlib.</p>",
        "id": 261058712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636580386
    },
    {
        "content": "<p>(Oh, and the <code>[has_colimits D]</code> can also be relaxed... I was just lazy ;))</p>",
        "id": 261059603,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636580907
    },
    {
        "content": "<p>Oh, and you can now add the following to the mix too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">reflective</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">adjunction</span> <span class=\"n\">D</span> <span class=\"n\">J</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">counit</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat_iso.is_iso_of_is_iso_app</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 261063216,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636582664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> I'm still planning to make mathlib PRs for this, but the next one I was working on got stuck because of the following silly issue:<br>\n<a href=\"#narrow/stream/113488-general/topic/iso.20to.20is_iso.20for.20types/near/261068565\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/iso.20to.20is_iso.20for.20types/near/261068565</a></p>",
        "id": 261071254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636586878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Wow, thanks a lot! We can tick of another speedbump!</p>",
        "id": 261097725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636611523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , thanks for reviewing my last couple of PRs. The next one is not so easy :) <a href=\"https://github.com/leanprover-community/mathlib/issues/10284\">#10284</a></p>",
        "id": 261189995,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636668782
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/10294\">#10294</a></p>",
        "id": 261277286,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636734808
    },
    {
        "content": "<p>And another ;) <a href=\"https://github.com/leanprover-community/mathlib/issues/10297\">#10297</a></p>",
        "id": 261286817,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636739199
    },
    {
        "content": "<p>And the final one... <a href=\"https://github.com/leanprover-community/mathlib/issues/10303\">#10303</a></p>",
        "id": 261319568,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636756078
    },
    {
        "content": "<p>Here's the next one for colimits of sheaves: <a href=\"https://github.com/leanprover-community/mathlib/issues/10334\">#10334</a></p>",
        "id": 261514400,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636990806
    },
    {
        "content": "<p>That's going really smooth. Which is very nice to see</p>",
        "id": 261517363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636991924
    }
]