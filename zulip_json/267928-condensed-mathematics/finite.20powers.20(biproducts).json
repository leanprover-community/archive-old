[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Is there a good way to write down <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">M^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> in some category with finite biproducts?</p>",
        "id": 259490430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635492070
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is giving me universe issues <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 259490460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635492101
    },
    {
        "content": "<p>ulift the fin?</p>",
        "id": 259490509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635492124
    },
    {
        "content": "<p>I don't think I've done this.</p>",
        "id": 259490516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635492128
    },
    {
        "content": "<p>Aha.. so we need to setup some API. Because we don't want to mention those ulifts all the time.</p>",
        "id": 259490542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635492157
    },
    {
        "content": "<p>Yeah, it would be nice to have some inequalities in the limits library, so you can take limits over even smaller categories.</p>",
        "id": 259490568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635492185
    },
    {
        "content": "<p>Have to go!</p>",
        "id": 259490573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635492189
    },
    {
        "content": "<p>Should we add an extra universe variable to the limit API? So that you can talk about limits of arbitrary size?<br>\nAnd then instances that say if you have all limits of shape <code>D</code> in universe <code>v</code>, then you also have all limits of shape <code>D</code> in universe <code>0</code>.<br>\nIdem for going from <code>v+1</code> to <code>v</code>.</p>",
        "id": 259490758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635492372
    },
    {
        "content": "<p>And from <code>max v₁ v₂</code> to <code>v₁</code>.</p>",
        "id": 259490775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635492389
    },
    {
        "content": "<p>Just use <code>Type</code> and stop pandering to the computer scientists</p>",
        "id": 259495096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635495694
    },
    {
        "content": "<p>There is a big disconnect between this multi-universe philosophy and the kind of concrete terms which we're defining such as <code>int</code> and <code>fin n</code></p>",
        "id": 259495254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635495803
    },
    {
        "content": "<p>If we're really supposed to be multi-universe then we should refactor nat and int and real and p-adic etc and make them all universe polymorphic</p>",
        "id": 259495345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635495872
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">-- if you truly believe in universe polymorphism then you should be doing this</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">correct_nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">correct_nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">correct_nat</span> <span class=\"bp\">→</span> <span class=\"n\">correct_nat</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">correct_fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">correct_nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"c1\">-- failed to synthesize &lt; on correct_nat</span>\n</code></pre></div>\n<p>It will be a lot of work! But if they're telling us to be polymorphic then why aren't they making the correct objects themselves?</p>",
        "id": 259495669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635496130
    },
    {
        "content": "<p>So just use <code>Type</code> for now, open an issue about how the definition of nat is wrong, and when someone fixes it we can go back to the silly multi-universe approach</p>",
        "id": 259495721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635496198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That is not really an option.</p>",
        "id": 259496997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635496993
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">universes_are_necessary</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def foo : category.{1 1} (Condensed.{0 0 1} Type) :=</span>\n<span class=\"cm\">Condensed.category.{0 0 1} Type</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">discrete.functor</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"c1\">-- fails:</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">expected type:</span>\n<span class=\"cm\">f: fin 5 → Condensed.{0 0 1} Type</span>\n<span class=\"cm\">⊢ discrete.{1} ⁇ ⥤ Condensed.{0 0 1} Type</span>\n<span class=\"cm\">Messages (2)</span>\n<span class=\"cm\">projective_replacement.lean:18:73</span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  discrete.functor.{1 1 1} f</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  f</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  fin 5 → Condensed.{0 0 1} Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ?m_1 → Condensed.{0 0 1} Type</span>\n<span class=\"cm\">projective_replacement.lean:18:73</span>\n<span class=\"cm\">don't know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">f : fin 5 → Condensed.{0 0 1} Type</span>\n<span class=\"cm\">⊢ Type 1</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Condensed.category</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">universes_are_necessary</span>\n</code></pre></div>",
        "id": 259497000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635496995
    },
    {
        "content": "<p>The other option is to do all the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">κ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>-stuff that happens in Condensed.pdf</p>",
        "id": 259497072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635497043
    },
    {
        "content": "<p>gaargh</p>",
        "id": 259497384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635497250
    },
    {
        "content": "<p>That's a beautiful way of putting my feelings into words <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 259497428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635497281
    },
    {
        "content": "<p>OK so either we ulift or we make a polymorphic fin? Which would be less painful do you think? Or do they boil down to the same thing?</p>",
        "id": 259497546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635497366
    },
    {
        "content": "<p>Given the current state of things: ulift</p>",
        "id": 259497877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635497592
    },
    {
        "content": "<p><code>Condensed.{0} Type</code> is not the useful category, it should be <code>Condensed.{0} (Type 1)</code>, but I don't think that will help</p>",
        "id": 259512417,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635507852
    },
    {
        "content": "<p>Another way out is to add an inaccessible cardinal to <code>Type</code> with an axiom, but I'm not sure that is making things better overall</p>",
        "id": 259512501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635507906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Yep, I agree that you need to use <code>Type 1</code>. But as you say, that only makes the problem worse <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 259512752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635508095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/finite.20powers.20.28biproducts.29/near/259495254\">said</a>:</p>\n<blockquote>\n<p>There is a big disconnect between this multi-universe philosophy and the kind of concrete terms which we're defining such as <code>int</code> and <code>fin n</code></p>\n</blockquote>\n<p>The reason that <code>int</code> and <code>fin n</code> and so on live in <code>Type</code> is because the other type formers like <code>prod</code> (and Pi, Sigma, ...) are \"multi-universe\" (e.g. <code>prod : Type u -&gt; Type v -&gt; Type (max u v)</code>). So if you use <code>prod int int : Type 1</code>, say, Lean would have no way to figure out which universe the <code>int</code>s each live in.</p>",
        "id": 259512898,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635508212
    },
    {
        "content": "<p>There's another world you could imagine where every construction mentions exactly one universe, so <code>int : Type u</code> and <code>prod : Type u -&gt; Type u -&gt; Type u</code>. You would probably need some universe defaulting mechanism for examples like <code>0 = 1 : Prop</code> (which <code>int.{u}</code> are we talking about?).</p>",
        "id": 259513795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635508690
    },
    {
        "content": "<p>(I don't mean literally every construction, but all the ones that aren't specifically \"universe-aware\")</p>",
        "id": 259513880,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635508740
    },
    {
        "content": "<p>I think a universe polymorphic <code>fin</code> would be particularly helpful in a lot of contexts such as simplicial objects.</p>",
        "id": 259517023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635510543
    },
    {
        "content": "<p>Another option is to use <code>S : Fintype.{u}</code> and prove some induction principle for fintypes (I assume you want to use fin because you want to use induction somehow?). Not too long ago I made the skeleton of Fintype universe polymorphic, so in principle you could use that skeleton equivalence and usual Nat induction to prove such an induction principle.</p>",
        "id": 259518006,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635511132
    },
    {
        "content": "<p>Yes, I mentioned this issue to Oliver today at our weekly meeting and he suggested that maybe just using finite types would be easier than <code>fin n</code>, depending on what you were doing. Of course I am in general anti Fintype because it's constructive -- I'd prefer <code>exists p : fintype X</code> ;-)</p>",
        "id": 259525629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635514989
    },
    {
        "content": "<p>What's the correct way to say that a functor preserves (binary) biproducts?</p>",
        "id": 260697240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636395396
    },
    {
        "content": "<p>Should this reuse something about preserving products? Or should there be a new class?</p>",
        "id": 260697327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636395430
    },
    {
        "content": "<p><code>[preserves_limits_of_shape walking_pair F]</code> is one option</p>",
        "id": 260699931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636396654
    }
]