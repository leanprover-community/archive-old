[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>commit 0c0ee212ce0044a198dbb5691a049d4f52ce5bfe (HEAD -&gt; master)\nAuthor: Johan Commelin &lt;johan@commelin.net&gt;\nDate:   Mon Sep 20 19:31:05 2021 +0000\n\n    add category of short exact sequences, add delta functors\n\n src/for_mathlib/abelian_category.lean |  24 +++++++++++++++++++++--\n src/for_mathlib/delta_functor.lean    | 104 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n 2 files changed, 126 insertions(+), 2 deletions(-)\n</code></pre></div>",
        "id": 254104920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632166318
    },
    {
        "content": "<p>I added the category structure for delta functors and the definition of a universal delta functor in the branch <code>delta_functor</code> here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/a96e297e08595aa18a81a11876714785c77b5230/src/for_mathlib/delta_functor.lean#L143\">https://github.com/leanprover-community/lean-liquid/blob/a96e297e08595aa18a81a11876714785c77b5230/src/for_mathlib/delta_functor.lean#L143</a><br>\n(Note that this branch bundled delta functors so that we can consider the category of delta functors, whereas Johan's code defines delta functors as a class.)</p>",
        "id": 254123436,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632174316
    },
    {
        "content": "<p>Do you expect to need that for LTE? Or is this \"planning ahead\" for mathlib?</p>",
        "id": 254152980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632197354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/delta.20functors/near/254152980\">said</a>:</p>\n<blockquote>\n<p>Do you expect to need that for LTE? Or is this \"planning ahead\" for mathlib?</p>\n</blockquote>\n<p>Do we not need the fact that derived functors are universal? Or even functoriality of long exact sequences (which presumably would use a category structure on delta functors)</p>",
        "id": 254205827,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632230626
    },
    {
        "content": "<p>No, I don't think we need functoriality of the LES</p>",
        "id": 254206537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632230916
    },
    {
        "content": "<p>We'll just apply it to some explicit SES:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>0</mn><mo>→</mo><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">)</mo><mover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mtext>⬝</mtext><msub><mi>f</mi><mi>x</mi></msub></mrow></mpadded></mover><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">)</mo><mo>→</mo><msub><mi mathvariant=\"script\">M</mi><msup><mi>p</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0 → ℳ(S, ℤ((T))_{r&#x27;}) \\xrightarrow{⬝ f_x} ℳ(S, ℤ((T))_{r&#x27;}) → ℳ_{p&#x27;}(S) → 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3581079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.15981em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord amsrm\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mtight\">⬝</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.010999999999999899em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathscr\" style=\"margin-right:0.15981em;\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord amsrm\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathscr\" style=\"margin-right:0.15981em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32798em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.15981em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>and some others.</p>",
        "id": 254206719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632231001
    },
    {
        "content": "<p>I'm not sure anymore that we should show that <code>Ext</code> is a delta functor. It should be done at some point, of course. But I don't think LTE needs it. It requires a crazy amount of naturality, and I don't want to think about that for now.</p>\n<p>All we need is the LES for single short exact sequences. We don't need naturality in the SES.</p>",
        "id": 254363252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632315884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> In particular, this means that we only need the \"ordinary\" snake lemma. Not the functorial version.</p>",
        "id": 254396834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632328355
    },
    {
        "content": "<p>So you don't need to provide an instance for <code>has_snake_lemma</code>.</p>",
        "id": 254396876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632328378
    },
    {
        "content": "<p>Because I can imagine that it might be painful as well.</p>",
        "id": 254396910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632328391
    },
    {
        "content": "<p>Yeah... quoting Paolo Aluffi's Algebra book \"proving the Snake Lemma is something that should not be done in public\".</p>",
        "id": 254397441,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632328605
    },
    {
        "content": "<p>we could do it in a separate github repo that we make private (-;</p>",
        "id": 254397852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632328763
    }
]