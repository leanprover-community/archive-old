[
    {
        "content": "<p>As Kevin suggested, I may give some help in the LTE. I just browsed into the repository to find some <code>sorry</code> that I could remove. I am able to finish the proof of <code>preserves_finite_colimits_of_exact</code> in <code>for_mathlib/exact_functor.lean</code>. What remained was that an exact functor between abelian categories preserves coequalizers, and as the work had already been done for cokernels, the proof was purely nonsensical (expressing a coequalizer as the cokernel of a difference of the two maps). I do not know what is the procedure to contribute to the LTE repository: how should I proceed?</p>",
        "id": 287462663,
        "sender_full_name": "Joël Riou",
        "timestamp": 1656202814
    },
    {
        "content": "<p>Fantastic! Thanks a lot for helping. Here's an invite: <a href=\"https://github.com/leanprover-community/lean-liquid/invitations\">https://github.com/leanprover-community/lean-liquid/invitations</a><br>\nFeel free to push to master directly. We follow a very loose policy, compared to mathlib.<br>\nThe only rule is that master should compile without errors. This rule is broken approximately once a month. But it's usually fixed in a couple of hours, and then that's fine.</p>",
        "id": 287468385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1656212224
    },
    {
        "content": "<p>Thanks! I have pushed this. I shall try to continue fixing some other sorries.</p>",
        "id": 287486639,
        "sender_full_name": "Joël Riou",
        "timestamp": 1656240293
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> ! That same file has several (smaller) sorries around homology that should be relatively easy.</p>",
        "id": 287487209,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656241146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Indeed, I already removed two other small sorries for <code>homology_iso</code>. For <code>homology_functor_iso</code>, I would be tempted to change the definition and make this a quite straightforward application of <code>homology_iso</code> as something starting like :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">homology_functor_iso</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">homology_functor</span> <span class=\"n\">A</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">⋙</span> <span class=\"n\">F</span> <span class=\"bp\">≅</span>\n  <span class=\"n\">F.map_homological_complex</span> <span class=\"n\">_</span> <span class=\"bp\">⋙</span> <span class=\"n\">homology_functor</span> <span class=\"n\">B</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat_iso.of_components</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">homology_iso</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">X.d_to</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X.d_from</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X.d_to_comp_d_from</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">F.map_comp</span><span class=\"o\">])</span>\n    <span class=\"bp\">≪≫</span> <span class=\"n\">homology.map_iso</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>It seems the only place where the definition of <code>homology_functor_iso</code> is used is in the unfinished proof of <code>homology_functor_preserves_filtered_colimit</code> in <code>ab5.lean</code>, so that changing the def would not seriously break anything. The <code>sorry</code> in that unfinished proof seems uneasy (it is an intricate equality of morphisms). A more basic approach for this would be to prove that the <code>nat_trans.kernel_functor</code> (resp. <code>cokernel_functor</code>) of a natural transformation between filtering colimit preserving functors also preserve filtering colimits. Then, expressing the homology as a combination of kernel and cokernel, the lemma would basically reduce to the fact that the evaluation functors <code>homological_complex A c ⥤ A</code> preserve filtered colimits, which you did already. It might be quite long, but each step would be small. However, it seems there are suboptimal universe assumptions in the definition of <code>nat_trans.kernel_functor</code> in mathlib. Then, the right thing would be to fix this in mathlib, which may imply syncing with the current version of mathlib. <span aria-label=\"skull and crossbones\" class=\"emoji emoji-2620\" role=\"img\" title=\"skull and crossbones\">:skull_and_crossbones:</span></p>",
        "id": 287501441,
        "sender_full_name": "Joël Riou",
        "timestamp": 1656260648
    },
    {
        "content": "<p>From past experience, it seems that homology is easier to work with if maps to/from are defined using <code>homology.lift</code>and <code>homology.desc'</code> (note the <code>'</code>), so I would prefer to keep the defs as they are. With you suggestion, the map would be a composition of two such morphisms, so it would still be reasonable to work with.</p>",
        "id": 287501616,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656260944
    },
    {
        "content": "<p>Oh actually using <code>homology.map_iso</code> would probably introduce some stuff that's not very pleasant...</p>",
        "id": 287501672,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1656261008
    }
]