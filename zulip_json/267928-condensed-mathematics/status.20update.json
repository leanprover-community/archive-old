[
    {
        "content": "<p>Hi everyone, today I'm stuck in our maths department that is currently being remodeled (-; I won't have much time for serious lean. Starting from Wednesday, there will be school holidays for ~10 days. There are rumours that schools might remain closed after that due to a new lockdown. We'll have to see.<br>\nAnother update is that I think a full year of working from home is starting to take some toll of my body. I had some lower back pains for a while, but hoped that by changing my working position frequently they would go away. In the last two weeks it's been progressively getting a bit worse, with flaming pains rising higher up my back, and also down into my legs. It seems that the pains are also causing some form of dizziness. At the same time, I can still go for my 3km run and I don't have pain then.<br>\nConclusion: in the next two weeks I'll probably avoid the coding marathons that I did in the last 3 months. I want to spend extra time with my family, and extra time exercising.</p>\n<p>On the Lean side of things: Mario made a huge effort in refactoring the definition of the system of complexes attached to Breen-Deligne data and a profinitely filtered pseudo normed group with action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>. The refactor is almost done, on the <code>rescale_iso</code> branch. I think I can finish it today or tomorrow. After that, it should be easier to use functoriality properties of this construction.<br>\nMy hope is that this will bring the check of condition (3) in the proof of 9.5 \"within arm's reach\".</p>",
        "id": 232240080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617010105
    },
    {
        "content": "<p>Take care of the back! I also had some lockdown induced back problems...</p>",
        "id": 232240606,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617010380
    },
    {
        "content": "<p>Johan, if you want to take a role more on the sidelines for the next month or so then please feel free to \"hand over\" the current state of the project, giving some overview of where we are, what needs doing next, what to read etc. Right now is a very good time for me to become more involved -- we are now on a month of summer break and next term my teaching load is very light. I have been catching up on my administrative duties over the last couple of weeks since my course finished and have a lot of time and enthusiasm for Lean right now.</p>",
        "id": 232241120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617010617
    },
    {
        "content": "<p>Let's do a video call! I'll probably have time either tonight, or any time tomorrow.</p>",
        "id": 232241267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617010685
    },
    {
        "content": "<p>I think I can still help with the overall strategy. But I shouldn't do 10-12 hours of Lean coding per day for the next two weeks.</p>",
        "id": 232241318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617010719
    },
    {
        "content": "<p>But I should still be online on Zulip to help brainstorm with the strategy.</p>",
        "id": 232241342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617010740
    },
    {
        "content": "<p>You can tell I am in a good place because my number of unread work emails is back down to three digits.</p>",
        "id": 232241526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617010820
    },
    {
        "content": "<p>Thank you for all the time you spent teaching us how to do things, and take care!</p>",
        "id": 232241687,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617010895
    },
    {
        "content": "<p>Johan, please take care of yourself and your family. I'd be interested in the video call too.</p>",
        "id": 232249400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617015414
    },
    {
        "content": "<p>I will try to give a (very informal!) lecture on this proof tomorrow. I propose that we start <time datetime=\"2021-03-30T07:30:00Z\">2021-03-30T09:30:00+02:00</time> .<br>\nAnyone is welcome to attend, but it will certainly be very helpful if you have engaged with the project (Lean/PDF/blueprint) in some form. My goal is to give an overview of what has been done so far (thanks to the help of many people!) and what remains to be done.</p>",
        "id": 232255238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617018695
    },
    {
        "content": "<p>I understand that this time is not ideal for <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, but I would like to reserve about 2hrs, and in the afternoon I have another appointment.</p>",
        "id": 232256046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617019160
    },
    {
        "content": "<p>Will you video it?</p>",
        "id": 232257545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617019878
    },
    {
        "content": "<p>If someone wants to record it, that's fine with me. Can someone host a zoom meeting?</p>",
        "id": 232257701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617019953
    },
    {
        "content": "<p>I have a pro account</p>",
        "id": 232260570,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617021441
    },
    {
        "content": "<p>Would it be helpful if I'm present? I currently got two exams scheduled for tomorrow morning, but might also shift them</p>",
        "id": 232262601,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1617022432
    },
    {
        "content": "<p>It might make more sense to shift my appointment, because it isn't very official</p>",
        "id": 232262777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617022497
    },
    {
        "content": "<p>And yes, I think it would be very helpful if you want/can be present</p>",
        "id": 232262799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617022509
    },
    {
        "content": "<p>Well, I'm mostly free this week, e.g. tomorrow from 11:00 (+epsilon)</p>",
        "id": 232262990,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1617022600
    },
    {
        "content": "<p>If you aren't married to lunch at 12:00 (like some of my colleagues here in Freiburg) then that could certainly work.</p>",
        "id": 232263064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617022641
    },
    {
        "content": "<p>Well, I have lunch at 12:30 usually, but it's fine if I go a bit later once ;-)</p>",
        "id": 232263173,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1617022683
    },
    {
        "content": "<p>Ok, se we reschedule to <time datetime=\"2021-03-30T09:05:00Z\">2021-03-30T11:05:00+02:00</time> ? Is that ok with <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ?</p>",
        "id": 232263346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617022776
    },
    {
        "content": "<p>OK for me</p>",
        "id": 232263372,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617022796
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> and whoever else I'm forgetting right now</p>",
        "id": 232263375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617022797
    },
    {
        "content": "<p>Sounds good to me!</p>",
        "id": 232263376,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1617022798
    },
    {
        "content": "<p><del>I have an appointment at 11, but should be easy to reschedule!</del><br>\nMy appointment became an exam later in the week, so I do not even need to reschedule!</p>",
        "id": 232263468,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617022817
    },
    {
        "content": "<p>That's 3:05 am for me, so I won't be there live, but pretend I'm there and I'll watch the recording later <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 232263553,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617022849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is 3:05 am a problem for you <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> ?</p>",
        "id": 232263671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617022912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  That's good for me: do you mean 11:05 AM CET?</p>",
        "id": 232263800,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617022965
    },
    {
        "content": "<p>Zulip shows times enytered with <code>&lt;time</code> in your local timezone</p>",
        "id": 232264169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617023111
    },
    {
        "content": "<p>Actually I'm in a conference this week, so I probably won't be able to make that time unless the talks are boring :P</p>",
        "id": 232264199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617023121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I have just read the whole conversation, and I am sorry to read about your back pains. Do take care, and thank you so much for the work done, and the help given, so far.</p>",
        "id": 232264646,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617023298
    },
    {
        "content": "<p>I zoom is OK for everybody here is the link</p>\n<p>Riccardo Brasca is inviting you to a scheduled Zoom meeting.</p>\n<p>Topic: LTE<br>\nTime: Mar 30, 2021 10:45 AM Paris</p>\n<p>Join Zoom Meeting<br>\n<a href=\"https://u-paris.zoom.us/j/81444456365?pwd=VkJGb3RUeElkenU4dlUyQ1hzWmFtdz09\">https://u-paris.zoom.us/j/81444456365?pwd=VkJGb3RUeElkenU4dlUyQ1hzWmFtdz09</a></p>\n<p>Meeting ID: 814 4445 6365<br>\nPasscode: 235711</p>",
        "id": 232267280,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617024464
    },
    {
        "content": "<p><time datetime=\"2021-03-30T08:45:00Z\">2021-03-30T10:45:00+02:00</time></p>",
        "id": 232276476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617027955
    },
    {
        "content": "<p>The \"official\" starting time is <time datetime=\"2021-03-30T09:05:00Z\">2021-03-30T11:05:00+02:00</time> , I will open the zoom meting a little in advance just to be sure that everything works</p>",
        "id": 232277027,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617028142
    },
    {
        "content": "<p>I finished my preparations <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 232392497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617093921
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3D_dPEqBU1o8Mc_HkFB4tkOB/2021_03_lte_overview.pdf\">2021_03_lte_overview.pdf</a></p>",
        "id": 232406452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617101810
    },
    {
        "content": "<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> slides for the lecture</p>",
        "id": 232406461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617101820
    },
    {
        "content": "<p>I'm curious that the construction <code>Kom (Free (Mat C))</code> also appears in the construction of Khovanov homology (an old love of mine!), but for a somewhat more complicated category <code>C</code> than <code>int</code>. I'd love to have a better sense of \"why\". :-)</p>",
        "id": 232406480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617101829
    },
    {
        "content": "<p>Where can I find <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s formalised statement about <code>Free (Mat int)</code>? I'd be happy to know the general statement replacing <code>int</code> with <code>C</code>. We'll have both <code>Mat</code> and <code>Free</code> separately in mathlib shortly (<a href=\"https://github.com/leanprover-community/mathlib/issues/6845\">#6845</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/6906\">#6906</a>, plus one more), and it would be nice to check that their API supports whatever this statement is. :-)</p>",
        "id": 232407633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617102501
    },
    {
        "content": "<p><code>breen_deligne/functorial_map.lean</code></p>",
        "id": 232407765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617102589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> did the lecture end up being recorded?</p>",
        "id": 232425287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617111062
    },
    {
        "content": "<p>Yes! zoom is \" Processing Recording...\" at the moment. I will put the link here if it's OK for <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 232425715,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617111218
    },
    {
        "content": "<p>yes, fine with me</p>",
        "id": 232427693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617112025
    },
    {
        "content": "<p>we can even upload it to the leanprover youtube account, if that is somehow useful</p>",
        "id": 232427733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617112042
    },
    {
        "content": "<p>Not sure if it needs to be on youtube?</p>",
        "id": 232428055,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1617112168
    },
    {
        "content": "<p>It doesn't really have to, I agree.</p>",
        "id": 232428517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617112342
    },
    {
        "content": "<p>It's just that recordings are typically quite large</p>",
        "id": 232428537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617112351
    },
    {
        "content": "<p>Also doesn't zoom delete recordings stored on their servers after a little while?</p>",
        "id": 232429275,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617112621
    },
    {
        "content": "<p>aren't the recordings saved locally?</p>",
        "id": 232429569,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1617112730
    },
    {
        "content": "<p>(That was true when I recorded my lectures, I had the files on my computer...)</p>",
        "id": 232429628,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1617112754
    },
    {
        "content": "<p>It depends on how it was recorded -- with zoom you can choose to record directly to their cloud, or to record locally</p>",
        "id": 232429668,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617112769
    },
    {
        "content": "<p>I see</p>",
        "id": 232429807,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1617112811
    },
    {
        "content": "<p>And considering that Riccardo mentioned that zoom is processing something, I suspect it was recorded to the cloud.</p>",
        "id": 232430160,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617112937
    },
    {
        "content": "<p>Yes it's on the Cloud, but I can and will, download it</p>",
        "id": 232430723,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617113162
    },
    {
        "content": "<p>It could be an unlisted YouTube video, so only people with the direct link can see it (and that could be  shared on proviso of no posting on the public internet).</p>",
        "id": 232431966,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1617113619
    },
    {
        "content": "<p>How does one define \"public internet\"? <a href=\"https://leanprover-community.github.io/archive/\">https://leanprover-community.github.io/archive/</a></p>",
        "id": 232432259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617113733
    },
    {
        "content": "<p>Yeah, I mean if the link is going to be shared here, then I'm genuinely curious as to what the objection is for hosting on a stable platform like YouTube. But I mean not Twitter or Reddit or whatever.</p>",
        "id": 232432488,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1617113814
    },
    {
        "content": "<p>There is also the informal discussion at the end, that definitely doesn't deserve to be made public, but we can of course just cut it</p>",
        "id": 232433437,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617114156
    },
    {
        "content": "<p>Ok, I can just host the entire thing, including discussion on my server, behind a password.</p>",
        "id": 232434237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617114450
    },
    {
        "content": "<p>But I don't guarantee fast download times (-;</p>",
        "id": 232434259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617114461
    },
    {
        "content": "<p>Zoom is still processing and I think I will go for a walk enjoying the sunny day <span aria-label=\"sunny\" class=\"emoji emoji-2600\" role=\"img\" title=\"sunny\">:sunny:</span> before the curfew. I will post the link later this evening</p>",
        "id": 232434980,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617114672
    },
    {
        "content": "<p>I am happy for the recording to be private or public.  Honestly, even if it did go public, I do not think that it would be the next Gangnam style, nor that, if it did, it would be bad!  Quite the opposite, actually! <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 232435399,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617114799
    },
    {
        "content": "<p>I'm happy with whatever decision you come up with.</p>",
        "id": 232435811,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617114939
    },
    {
        "content": "<p>OK, I don't know, do as you please; it just felt like more of an internal group meeting to me (so it makes sense to make it public here), so I found it a bit strange to host it on youtube</p>",
        "id": 232437254,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1617115419
    },
    {
        "content": "<p>Yes -- why not just circulate it to interested parties?</p>",
        "id": 232438021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617115656
    },
    {
        "content": "<p>I agree, I think it should be behind a password in some way. In my experience, the zoom cloud recordings have a password associated with them (although this might depend on Riccardo's setup in this case). Johan's basement server would work too :)</p>",
        "id": 232438708,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617115882
    },
    {
        "content": "<p>It's also possible to make it unlisted on youtube, so people can't find it without the link but it's still easily accessible to those who do have the link</p>",
        "id": 232439487,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617116111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/232438708\">said</a>:</p>\n<blockquote>\n<p>I agree, I think it should be behind a password in some way. In my experience, the zoom cloud recordings have a password associated with them (although this might depend on Riccardo's setup in this case). Johan's basement server would work too <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Yes, I agree.</p>",
        "id": 232442965,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617117269
    },
    {
        "content": "<p>Here is the link<br>\n<a href=\"https://u-paris.zoom.us/rec/share/d_B1sRU_v8Xr001jgKU1CmruILdG8Shm2YI8czPndzWjux9VPJOM4eBhGWIQrNgm.99xJgMg4Fe9s9bB8\">https://u-paris.zoom.us/rec/share/d_B1sRU_v8Xr001jgKU1CmruILdG8Shm2YI8czPndzWjux9VPJOM4eBhGWIQrNgm.99xJgMg4Fe9s9bB8</a></p>",
        "id": 232464643,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617125212
    },
    {
        "content": "<p>let me know if it doesn't work</p>",
        "id": 232464710,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617125237
    },
    {
        "content": "<p>How long does Zoom host it?</p>",
        "id": 232464765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617125271
    },
    {
        "content": "<p>Otherwise I suggest that everyone who wants a copy, just downloads it. And if someone shows up 3 months from now, and needs a copy, then one of us can send it.</p>",
        "id": 232464859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617125304
    },
    {
        "content": "<p>one year I think, but I am downloading it</p>",
        "id": 232464881,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617125318
    },
    {
        "content": "<p>Ooh, I don't actually see how to download it</p>",
        "id": 232464960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617125349
    },
    {
        "content": "<p>no problem, let me download it (it is not that fast) and upload it to my (university) server</p>",
        "id": 232465106,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617125408
    },
    {
        "content": "<p><a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/LTE.mp4\">https://webusers.imj-prg.fr/~riccardo.brasca/files/LTE.mp4</a><br>\nThis should work for everybody</p>",
        "id": 232468080,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1617126604
    },
    {
        "content": "<p>Works like a charm for me.</p>",
        "id": 232468508,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1617126778
    },
    {
        "content": "<p>It's only half a GB. Compression these days... <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 232541851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617171445
    },
    {
        "content": "<p>Bhavik just told us that Gordan is completely sorry-free! I took the liberty of pushing it a column to the right in <a href=\"https://github.com/leanprover-community/lean-liquid/projects/1\">https://github.com/leanprover-community/lean-liquid/projects/1</a></p>",
        "id": 238764498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620998165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Do you think that <code>#16</code> is also ready to move to <code>Done</code>?</p>",
        "id": 238764574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620998195
    },
    {
        "content": "<p>And maybe <a href=\"https://github.com/leanprover-community/lean-liquid/issues/17\">https://github.com/leanprover-community/lean-liquid/issues/17</a> (aka 8.19) should now move towards <code>In progress</code>?</p>",
        "id": 238764667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620998243
    },
    {
        "content": "<p>There is nothing about arbitrary hypercovers, but I was under the impression that Cech nerves suffice for what we need? If so, maybe change the wording and mark 16 as done? And yes 8.19 is \"in progress\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 238764810,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620998305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> sounds good to me</p>",
        "id": 238765441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620998590
    },
    {
        "content": "<p>I think the next step for 8.19 involves some additional work involving complexes, so I've been hesitant to start on this before we incorporate the new complexes from mathlib.</p>",
        "id": 238765882,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620998779
    },
    {
        "content": "<p>Yup, understood</p>",
        "id": 238767103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620999250
    },
    {
        "content": "<p>I think the homotopy PR is getting close though, isn't it?</p>",
        "id": 238767164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620999276
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7478\">#7478</a> is ready to be merged as far as I'm concerned, but I saw you added some comments...</p>",
        "id": 238767677,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620999474
    },
    {
        "content": "<p>And looks like that's the last dependency for the homotopy PR</p>",
        "id": 238767754,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620999497
    },
    {
        "content": "<p>I think we can convert my comment into a TODO. But it will have to be fixed if we want the <code>R</code>-linear version (which is probably soonish)</p>",
        "id": 238767885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620999567
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7478\">#7478</a> is now merged. Now we only need the homotopy PR.</p>",
        "id": 238815383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621019580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I refactored the \"dual is free\" proof, and merged your gordan branch into master.</p>",
        "id": 238870258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621056189
    },
    {
        "content": "<p>Do you think that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">polyhedral_lattice</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- In a polyhedral lattice the ball around the origin of radius `c` is finite. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">filtration_finite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">filtration</span> <span class=\"bp\">Λ</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is now also easy to do?</p>",
        "id": 238870425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621056398
    },
    {
        "content": "<p>That is from the file <code>polyhedral_lattice/topology.lean</code></p>",
        "id": 238870427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621056420
    },
    {
        "content": "<p><code>Gordan</code> is now also green in the dependency graph</p>",
        "id": 238875482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621062037
    },
    {
        "content": "<p>Is someone working on <code>filtration_finite</code>? I have some time this week to try to do it.</p>",
        "id": 239073956,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621252096
    },
    {
        "content": "<p>I have been thinking about it. But it's Lean-nontrivial</p>",
        "id": 239074011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252140
    },
    {
        "content": "<p>I think it would be best if we can get some help from Bhavik and/or Yael, because they understand all the machinery behind their proof of Gordan.</p>",
        "id": 239074074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252182
    },
    {
        "content": "<p>I think Bhavik might have some time this week.</p>",
        "id": 239074083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> there is also a sorry left in <code>polyhedral_lattice/cech.lean</code>. But again, I think this one is non-trivial, and might need stuff about convex polyhedra.</p>",
        "id": 239074259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252299
    },
    {
        "content": "<p>It's the claim that the quotient norm on the quotient lattices is actually generated by finitely many elements.</p>",
        "id": 239074341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252336
    },
    {
        "content": "<p>Intuitively, I want to say: the image of a convex polyhedron under a linear map is again a convex polyhedron.</p>",
        "id": 239074402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252367
    },
    {
        "content": "<p>But that doesn't constitute a Lean proof.</p>",
        "id": 239074412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252381
    },
    {
        "content": "<p>Hm, I see, that seems indeed non trivial..</p>",
        "id": 239074581,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621252467
    },
    {
        "content": "<p>In the meantime I am doing the easy sorry in <code>polyhedral_lattice/topology</code></p>",
        "id": 239074617,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621252491
    },
    {
        "content": "<p>Yes, but I'm now not so sure that approach will help.</p>",
        "id": 239075152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252778
    },
    {
        "content": "<p>I guess it can be made to work.</p>",
        "id": 239075183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252795
    },
    {
        "content": "<p>But given a list of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>λ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_1, \\dots, \\lambda_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> that generate the norm, we need a bound on the denominator <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> for elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msub><mi>c</mi><mn>1</mn></msub><msub><mi>λ</mi><mn>1</mn></msub><mo>+</mo><mo>…</mo><msub><mi>c</mi><mi>n</mi></msub><msub><mi>λ</mi><mi>n</mi></msub></mrow><mi>d</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{c_1\\lambda_1 + \\dots c_n\\lambda_n}{d}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2412079999999999em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8962079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4101em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"minner mtight\">…</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> whose norm is less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span></p>",
        "id": 239075424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252877
    },
    {
        "content": "<p>And I guess that bound will be something like the maximum of all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><msub><mi>i</mi><mn>1</mn></msub></msub><mo>∧</mo><mo>⋯</mo><mo>∧</mo><msub><mi>λ</mi><msub><mi>i</mi><mi>k</mi></msub></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_{i_1} \\wedge \\dots \\wedge \\lambda_{i_k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9445399999999999em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9502999999999999em;vertical-align:-0.25586em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25586em;\"><span></span></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is the rank of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>.</p>",
        "id": 239075573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621252954
    },
    {
        "content": "<p>Ah, you mean the lemmas about <code>star</code> are there only to be used to prove <code>filtration_finite</code>? If this is the case it's probably better to wait to have a proof of that, I agree</p>",
        "id": 239075599,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621252968
    },
    {
        "content": "<p>Would you be interested in converting <code>for_mathlib/finite_free</code> into mathlib API for <code>module.free</code>?</p>",
        "id": 239075718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621253019
    },
    {
        "content": "<p>It's not a simple copy-paste.</p>",
        "id": 239075733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621253027
    },
    {
        "content": "<p>Sure!</p>",
        "id": 239075850,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621253089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239074402\">said</a>:</p>\n<blockquote>\n<p>Intuitively, I want to say: the image of a convex polyhedron under a linear map is again a convex polyhedron.</p>\n</blockquote>\n<p>Actually, why is that nontrivial? A convex polyhedron is the convex hull of finitely many points, and the image is just the convex hull of the finitely many image points. Now I'm not sure what the current implicit definition of \"convex polyhedron\" is, but I think it's actually quite close to \"the convex hull of finitely many points\".</p>",
        "id": 239081725,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621255623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239075424\">said</a>:</p>\n<blockquote>\n<p>But given a list of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>λ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_1, \\dots, \\lambda_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> that generate the norm, we need a bound on the denominator <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> for elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msub><mi>c</mi><mn>1</mn></msub><msub><mi>λ</mi><mn>1</mn></msub><mo>+</mo><mo>…</mo><msub><mi>c</mi><mi>n</mi></msub><msub><mi>λ</mi><mi>n</mi></msub></mrow><mi>d</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{c_1\\lambda_1 + \\dots c_n\\lambda_n}{d}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2412079999999999em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8962079999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4101em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"minner mtight\">…</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> whose norm is less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ε</span></span></span></span></p>\n</blockquote>\n<p>Maybe a better question is: Why is this relevant?</p>",
        "id": 239081771,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621255643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> I think that claim shouldn't be hard. The trouble is to show that \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>λ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_1, \\dots, \\lambda_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> generate the norm\" is equivalent to \"the unit ball is a convex polyhedron\"</p>",
        "id": 239082209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621255831
    },
    {
        "content": "<p>We need to translate between \"convex hull of vertices\" point of view and \"finitely many faces given by affine hyperspaces\" point of view</p>",
        "id": 239082357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621255904
    },
    {
        "content": "<p>Concerning the other question: if we can bound the number of such <code>d</code> (assuming the <code>c_i</code> are coprime), then I have a proof of finiteness for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mo>:</mo><mi mathvariant=\"normal\">∥</mi><mi>x</mi><mi mathvariant=\"normal\">∥</mi><mo>≤</mo><mi>ε</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x : \\|x\\| \\le \\varepsilon\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">}</span></span></span></span> without going through convex polyhedra</p>",
        "id": 239082589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621255991
    },
    {
        "content": "<p>I think that <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> might have dealt with this (convex hull = intersection of affine hyperspaces). About ten days ago when Bhavik said he wanted to take on the proof of Gordan he showed me a reference which claimed to prove a Gordan's Lemma and I pointed out to him that it had a different definition of convex polyhedron to the one in LTE and it was too late to change the LTE definition. We looked through a proof that the two notions were equivalent and my understanding was that Bhavik seemed optimistic that it was do-able and my impression was that for him to prove Gordan this way he was going to have to do it. So I suspect he's done it. Bhavik am I right?</p>",
        "id": 239086687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621257516
    },
    {
        "content": "<p>Bhavik and I also talked a lot at CLUG last Wed about this finiteness issue.</p>",
        "id": 239086983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621257608
    },
    {
        "content": "<p>No, not completely. Bhavik has so far only done intersections of linear halfspaces, not affines.</p>",
        "id": 239087040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621257628
    },
    {
        "content": "<p>But I agree that the easiest way forward it to build on what Bhavik has done.</p>",
        "id": 239087125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621257657
    },
    {
        "content": "<p>Sorry for the late answer, but do we really need this translation here, between \"convex hull of vertices\" and \"finitely many faces given by affine hyperspaces\"? I had the feeling that in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>, we take convex hulls of vertices, and then in 9.7 (~ Gordan's lemma) we pass to the dual side, and look at intersections of halfspaces. But for those quotients of polyhedral lattice, we're staying purely on the side of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>.</p>",
        "id": 239091700,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621259285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> Sure, but how should we prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mo>:</mo><mi mathvariant=\"normal\">∥</mi><mi>x</mi><mi mathvariant=\"normal\">∥</mi><mo>≤</mo><mi>ε</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{x : \\|x\\| \\le \\varepsilon\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">}</span></span></span></span> is finite? I wanted that finiteness to deduce that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span> is discrete, which in turn is used to show that we take quotients by closed subgroups, so that the quotient is separated.</p>",
        "id": 239092627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621259634
    },
    {
        "content": "<p>I think the easiest way is to show that it's the intersection of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span> and a compact subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo>⊗</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda \\otimes \\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span></p>",
        "id": 239093576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621259994
    },
    {
        "content": "<p>But to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∈</mo><mi mathvariant=\"normal\">Λ</mi><mo>⊗</mo><mi mathvariant=\"double-struck\">R</mi><mo>:</mo><mi mathvariant=\"normal\">∥</mi><mi>x</mi><mi mathvariant=\"normal\">∥</mi><mo>≤</mo><mi>ε</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ x\\in \\Lambda \\otimes \\R : \\|x\\| \\le \\varepsilon\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">Λ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">}</span></span></span></span> is compact, I thought that the \"finitely many faces given by affine hyperspaces\" POV was the best approach</p>",
        "id": 239093779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621260053
    },
    {
        "content": "<p>OK, I see. It sounded to me like there are two problems: Show that the quotient is still normed (as opposed to semi-normed), and show that its norm is polyhedral. But it seems to me that the second is not a problem?</p>",
        "id": 239094663,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621260349
    },
    {
        "content": "<p>The second is also a problem (for me)</p>",
        "id": 239095141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621260512
    },
    {
        "content": "<p>I have the following proof state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ'</span>\n<span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n<span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">H1</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">l</span> <span class=\"n\">i</span>\n<span class=\"n\">H2</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"bp\">∥</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">quotient_add_group.mk</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∥⇑</span><span class=\"o\">(</span><span class=\"n\">quotient_add_group.mk'</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span>\n</code></pre></div>",
        "id": 239095342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621260580
    },
    {
        "content": "<p>Let me try to translate it to maths</p>",
        "id": 239095369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621260591
    },
    {
        "content": "<p>So the <code>l i</code> generate the norm, and I've used that to get the hypotheses <code>H1</code> and <code>H2</code></p>",
        "id": 239095469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621260615
    },
    {
        "content": "<p><code>x: fin m →₀ Λ'</code> should be read as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"normal\">Λ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mo stretchy=\"false\">)</mo><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">x \\in (\\Lambda&#x27;)^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">Λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 239095538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621260640
    },
    {
        "content": "<p>And now we need to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>⋅</mo><mi mathvariant=\"normal\">∥</mi><mover accent=\"true\"><mi>x</mi><mo>ˉ</mo></mover><mi mathvariant=\"normal\">∥</mi><mo>=</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>c</mi><mi>i</mi></msub><mo>⋅</mo><mi mathvariant=\"normal\">∥</mi><mover accent=\"true\"><msub><mi>l</mi><mi>i</mi></msub><mo stretchy=\"true\">‾</mo></mover><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">d \\cdot \\|\\bar x\\| = \\sum_i c_i \\cdot \\|\\overline{l_i}\\|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.56778em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">x</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.22222em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.14444em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.89444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.81444em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span><span class=\"mord\">∥</span></span></span></span></p>",
        "id": 239095689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621260697
    },
    {
        "content": "<p>Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>x</mi><mo>ˉ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\bar x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.56778em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.56778em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">x</span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.22222em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><msub><mi>l</mi><mi>i</mi></msub><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{l_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04444em;vertical-align:-0.15em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.89444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.81444em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span> denote the projections into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mi mathvariant=\"normal\">/</mi><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Lambda/L_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Λ/</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 239095785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621260723
    },
    {
        "content": "<p>Well, the inequality <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\leq </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> ought to be clear by the triangle inequality; while <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo></mrow><annotation encoding=\"application/x-tex\">\\geq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span></span></span></span> follows by using the same property on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi></mrow><annotation encoding=\"application/x-tex\">\\Lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Λ</span></span></span></span>; I think...</p>",
        "id": 239096938,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621261116
    },
    {
        "content": "<p>(Sorry, I'm writing this while simultaneously attending a lecture, so I'm slow and can't think too much...)</p>",
        "id": 239097003,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621261141
    },
    {
        "content": "<p>Hmm, I will think about it again. I must admit that I postponed thinking about this for a while</p>",
        "id": 239097975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621261462
    },
    {
        "content": "<p>I'm only now starting to understand what's written in the code there. Why are there different <code>quotient_add_group.mk</code> commands on the two sides?</p>",
        "id": 239098348,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621261588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239086687\">said</a>:</p>\n<blockquote>\n<p>I think that <span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> might have dealt with this (convex hull = intersection of affine hyperspaces). About ten days ago when Bhavik said he wanted to take on the proof of Gordan he showed me a reference which claimed to prove a Gordan's Lemma and I pointed out to him that it had a different definition of convex polyhedron to the one in LTE and it was too late to change the LTE definition. We looked through a proof that the two notions were equivalent and my understanding was that Bhavik seemed optimistic that it was do-able and my impression was that for him to prove Gordan this way he was going to have to do it. So I suspect he's done it. Bhavik am I right?</p>\n</blockquote>\n<p>As Johan says, I only did linear halfspaces - more specifically we talked about polyhedral cones (intersection of linear halfspaces) but what's needed now is for polyhedra (intersection of affine halfspaces). But again as I mentioned to Johan the other day, it seems like you can use the linear version to get to the affine version</p>",
        "id": 239099058,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1621261835
    },
    {
        "content": "<p>Maybe the missing link here is the following: The discreteness you want to be prove to show that the quotient is still normed should also include the statement that for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>x</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.63056em;vertical-align:0em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.63056em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.55056em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> you can find some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mover accent=\"true\"><mi>x</mi><mo stretchy=\"true\">‾</mo></mover><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||x|| = ||\\overline{x}||</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣∣</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.63056em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.55056em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mord\">∣∣</span></span></span></span> -- as there are only finitely many <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>'s with bounded norm, so the infimum is actually a minimum. Then if you use such a lift <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> in the above, you get</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mover accent=\"true\"><mi>x</mi><mo stretchy=\"true\">‾</mo></mover><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi>d</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>c</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>l</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≥</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>c</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mover accent=\"true\"><mi>l</mi><mo stretchy=\"true\">‾</mo></mover><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">d ||\\overline{x}|| = d ||x|| = \\sum_i c_i ||l_i||\\geq \\sum_i c_i ||\\overline{l}_i||,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\">∣∣</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.63056em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.55056em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mord\">∣∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\">∣∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣∣</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.19415em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣∣</span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.89444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span><span style=\"top:-3.81444em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣∣</span><span class=\"mpunct\">,</span></span></span></span></p>\n<p>while by the triangle inequality <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mover accent=\"true\"><mi>x</mi><mo stretchy=\"true\">‾</mo></mover><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>c</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mover accent=\"true\"><mi>l</mi><mo stretchy=\"true\">‾</mo></mover><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">d||\\overline{x}||\\leq \\sum_i c_i ||\\overline{l}_i||</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\">∣∣</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.63056em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.55056em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mord\">∣∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.19415em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣∣</span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.89444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span><span style=\"top:-3.81444em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣∣</span></span></span></span>, so you get the desired equality.</p>",
        "id": 239100116,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621262152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239098348\">said</a>:</p>\n<blockquote>\n<p>I'm only now starting to understand what's written in the code there. Why are there different <code>quotient_add_group.mk</code> commands on the two sides?</p>\n</blockquote>\n<p><code>quotient_add_group.mk</code> and <code>quotient_add_group.mk'</code> are essentially the same thing, you can ignore the difference.<br>\nTechnically the first work also if the subgroup is not normal (but the quotient is not a group of course), while the latter works only for normal subgroups.</p>",
        "id": 239101129,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621262466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> yes, that sounds familiar. I think some time ago I came to the conclusion that we needed to know that the infimum is a minimum. (But then I forgot again that we needed this <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>)<br>\nI guess technically this can be done by showing that polyhedral lattices are complete, since discrete</p>",
        "id": 239104063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621263442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239082209\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> I think that claim shouldn't be hard. The trouble is to show that \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>λ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_1, \\dots, \\lambda_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> generate the norm\" is equivalent to \"the unit ball is a convex polyhedron\"</p>\n</blockquote>\n<p>This has very much a LCTVS flavor, doesn't it? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span><br>\nWhat I would like to do if I weren't bound to proving Szemerédi's Theorem or losing my wit to Vector Calculus calculations would be to define LCVTS and make them an API that would talk about (convex) polytopes as intersections of halfspaces, polyhedrons as convex hulls of finsets, and would bridge between both.</p>",
        "id": 239105525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621263949
    },
    {
        "content": "<p>Yes, I think everything should be done for locally convex topological vector spaces really.</p>",
        "id": 239105765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621264031
    },
    {
        "content": "<p>But not until after your exams :-)</p>",
        "id": 239105799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621264045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239104063\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> yes, that sounds familiar. I think some time ago I came to the conclusion that we needed to know that the infimum is a minimum. (But then I forgot again that we needed this <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>)<br>\nI guess technically this can be done by showing that polyhedral lattices are complete, since discrete</p>\n</blockquote>\n<p>That too is something I want to do. Can't wait for the exams to be over!</p>",
        "id": 239106110,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621264126
    },
    {
        "content": "<p>And yeah I agree that bounded intersection of closed halfspaces &lt;=&gt; convex hull of a finset is relatively easy. What's hard is to translate that to space of a pure simplificial complex.</p>",
        "id": 239106358,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621264221
    },
    {
        "content": "<p>But we don't need that last part (-;</p>",
        "id": 239109029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621264990
    },
    {
        "content": "<p>Actually, I wonder whether this part of the argument can be simplified by modifying the definition of a polyhedral lattice. What happens if you simply get rid of the integer factor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">d\\geq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, replacing it by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>?</p>",
        "id": 239111262,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621265770
    },
    {
        "content": "<p>In that case, polyhedral lattices may not satisfy <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>n</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi>n</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">||nx||=n||x||</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣∣</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">∣∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣∣</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n\\geq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, but I think that's never used (is it?)</p>",
        "id": 239111411,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621265836
    },
    {
        "content": "<p>No, that isn't used, because I haven't proved it yet.</p>",
        "id": 239116190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621267453
    },
    {
        "content": "<p>I will check asap whether removing the <code>d</code> works.</p>",
        "id": 239116221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621267471
    },
    {
        "content": "<p>(I am about to start a board game with my son.)</p>",
        "id": 239116272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621267499
    },
    {
        "content": "<p>I can confirm that the proof of 9.8 still works after setting <code>d = 1</code></p>",
        "id": 239136023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621275335
    },
    {
        "content": "<p>I'm now building the rest of the project. But this looks good!</p>",
        "id": 239136054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621275348
    },
    {
        "content": "<p>Several proofs simplified (-;</p>",
        "id": 239136086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621275360
    },
    {
        "content": "<p>Yup, no problems in the rest of the project either <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 239136569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621275531
    },
    {
        "content": "<p>Great!! So no more sorry's involving (cech conerves of) polyhedral lattices?</p>",
        "id": 239144510,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621278846
    },
    {
        "content": "<p>Hmm, almost none atm</p>",
        "id": 239145454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621279292
    },
    {
        "content": "<p>The finiteness is now sorry-free</p>",
        "id": 239145475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621279299
    },
    {
        "content": "<p>I still have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">norm_lift</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient_add_group.mk'</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_generator</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→₀</span> <span class=\"bp\">Λ'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">generates_norm</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"n\">quotient_add_group.mk'</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">l</span> <span class=\"n\">i</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 239145504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621279314
    },
    {
        "content": "<p><code>norm_lift</code> should be easy, given the finiteness.</p>",
        "id": 239145718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621279429
    },
    {
        "content": "<p>For <code>norm_generator</code>, I guess we really need to look under the hood of the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>m</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> again.</p>",
        "id": 239145789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621279452
    },
    {
        "content": "<p>That sounds good! But I'm still a little lost math-wise. Isn't <code>norm_generator</code> what we discussed above, as a consequence of <code>norm_lift</code>?</p>",
        "id": 239147228,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621280154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> <code>norm_lift</code> says that there exists a pre-image with the same norm as <code>y</code> in the quotient.</p>",
        "id": 239148829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621280869
    },
    {
        "content": "<p>But for <code>norm_generator</code> we claim that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> that generate the norm upstairs have the same norm when projected into the quotient.</p>",
        "id": 239148921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621280902
    },
    {
        "content": "<p>If one of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> where in the subgroup that we take a quotient by, that is obviously false. So we need to do something.</p>",
        "id": 239148980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621280945
    },
    {
        "content": "<p>Oh I see. But that's probably not true, is it? Do we actually need that statement?</p>",
        "id": 239152950,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621282500
    },
    {
        "content": "<p>hmm, maybe I misunderstood how you want to use <code>norm_lift</code>.</p>",
        "id": 239155371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621283531
    },
    {
        "content": "<p>But I was under the impression that <code>norm_generator</code> is true in our setting.</p>",
        "id": 239155496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621283586
    },
    {
        "content": "<p>Ooh, your proof is a lot easier... <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 239156797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621284123
    },
    {
        "content": "<p>Polyhedral quotients are now completely sorry-free! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 239190166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621305761
    },
    {
        "content": "<p>What is the status with mathlib bumping at the moment? There are a few minor PRs that have merged that I would like to bump, but I'm not sure to what extent, if any, the new homological complex design has been incorporated.</p>",
        "id": 239191906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621307327
    },
    {
        "content": "<p>I can look into doing this, but I suspect Johan has the comparative advantadge here!</p>",
        "id": 239191917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621307345
    },
    {
        "content": "<p>I'm working on the homological refactor in a separate branch</p>",
        "id": 239191928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621307354
    },
    {
        "content": "<p>I think I'm halfway done</p>",
        "id": 239191931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621307359
    },
    {
        "content": "<p>The homotopy fix landed yesterday, and I'm going to see if that helps now</p>",
        "id": 239191946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621307381
    },
    {
        "content": "<p>But feel free to fix other things on master at the same time</p>",
        "id": 239191953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621307396
    },
    {
        "content": "<p><code>master</code> is already bumped to latest <code>mathlib-master</code></p>",
        "id": 239192007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621307409
    },
    {
        "content": "<p>Hmm, I first need to sleep two more hours.</p>",
        "id": 239192996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621308428
    },
    {
        "content": "<p>I've pushed to <code>homological-refactor</code></p>",
        "id": 239193005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621308433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> feel free to hack on it</p>",
        "id": 239193017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621308448
    },
    {
        "content": "<p>Wow, that must have been a short night! Thanks for all the great work Johan!</p>",
        "id": 239212807,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621324581
    },
    {
        "content": "<p>Sounds like it's down to the path 8.19 --&gt; 9.2 --&gt; column exactness in the proof of 9.5 (and then verify that all constants can be chosen to satisfy the required constraints)!</p>",
        "id": 239212873,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621324623
    },
    {
        "content": "<p>Johan can smell the 9.5 finish line, he no longer sleeps.</p>",
        "id": 239212955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621324672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239212807\">said</a>:</p>\n<blockquote>\n<p>Wow, that must have been a short night! Thanks for all the great work Johan!</p>\n</blockquote>\n<p>More like a broken night... 11pm -- 3:30, and then 5:00 -- 7:00</p>",
        "id": 239212961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621324675
    },
    {
        "content": "<p>I can find Lean time today, I'll work on 9.2</p>",
        "id": 239213122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621324764
    },
    {
        "content": "<p>Maybe now is a good time to point out that in the proof of the column exactness of 9.5, I once refer to 9.10, but actually this reference doesn't really work as one is passing to a kernel complex instead of a cokernel complex. On the other hand, the situation is actually much easier than in 9.10.</p>\n<p>What I really mean to say: After 8.19 and 9.2 are done, one should first \"marry\" them and prove the version of 8.19 where all terms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>M</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hat{M}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.19677em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> are replaced by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></msup></mrow><annotation encoding=\"application/x-tex\">\\hat{V}(S)^{T^{-1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.23692em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869199999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 239213129,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621324768
    },
    {
        "content": "<p>Hmm actually probably I should write up more precisely what I mean</p>",
        "id": 239213308,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621324839
    },
    {
        "content": "<p>Having a precise write up would be lovely.</p>",
        "id": 239213384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621324872
    },
    {
        "content": "<p>OK, will try to do, maybe later today</p>",
        "id": 239213534,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621324952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239213129\">said</a>:</p>\n<blockquote>\n<p>Maybe now is a good time to point out that in the proof of the column exactness of 9.5, I once refer to 9.10, but actually this reference doesn't really work as one is passing to a kernel complex instead of a cokernel complex. On the other hand, the situation is actually much easier than in 9.10.</p>\n<p>What I really mean to say: After 8.19 and 9.2 are done, one should first \"marry\" them and prove the version of 8.19 where all terms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>M</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hat{M}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.19677em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> are replaced by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover><mo stretchy=\"false\">(</mo><mi>S</mi><msup><mo stretchy=\"false\">)</mo><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></msup></mrow><annotation encoding=\"application/x-tex\">\\hat{V}(S)^{T^{-1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.23692em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869199999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>Upon further reflection, I think the situation isn't really much different than in 9.10; it's just \"dual\". So I don't think there's a point in \"marrying\" 8.19 and 9.2. But one has to prove the dual version of 9.10, for passing to kernel complexes instead of cokernel complexes. (<span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> ?)</p>",
        "id": 239228003,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621332264
    },
    {
        "content": "<p>I forgot all the details of the proof of 9.10, but if the strategy is similar (I mean, completely explicit) I am sure we can prove the dual version without problems</p>",
        "id": 239229602,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621333195
    },
    {
        "content": "<p>Yes, I expect that this should be extremely similar.</p>",
        "id": 239229699,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621333235
    },
    {
        "content": "<p>Of course, taking kernels in (semi)normed groups is easier than taking cokernels, so maybe some technical problems disappear</p>",
        "id": 239229775,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621333272
    },
    {
        "content": "<p>Is it clear what the constants will do? If it's not immediately clear <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, then I would suggest just adding random new constants <code>k_new</code> and <code>K_new</code> and starting the proof. Along the way you'll then figure out what they must be.</p>",
        "id": 239233592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621335575
    },
    {
        "content": "<p>The precise statement we need is exactly the same as 9.10 (modulo a different constant), but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>N</mi><mi>c</mi><mo>∙</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">N_c^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.93033em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span> is the kernel of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>f</mi><mi>c</mi><mo>∙</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">f_c^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9414399999999999em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 239233926,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621335731
    },
    {
        "content": "<p>So we will have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><msub><mi>M</mi><mn>1</mn></msub><mo>→</mo><msub><mi>M</mi><mn>2</mn></msub><mo>→</mo><msub><mi>M</mi><mn>3</mn></msub><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0 \\to M_1 \\to M_2 \\to M_3 \\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> maps of systems of complexes, and on each level this gives a short exact sequence of abelian groups. But the map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub><mo>→</mo><msub><mi>M</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_2 \\to M_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> does not satisfy the quotient property of normed group homs, I think.</p>",
        "id": 239234386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621335969
    },
    {
        "content": "<p>So we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><msub><mi>M</mi><mn>1</mn></msub><mo>→</mo><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">f \\colon M_1 \\to M_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><msub><mi>M</mi><mn>2</mn></msub><mo>→</mo><msub><mi>M</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">g \\colon M_2 \\to M_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and the image of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is the kernel of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> (as abelian groups).<br>\nAlso the norm on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is strictly compatible with the norm on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 239234531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621336065
    },
    {
        "content": "<p>But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> satisfies something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∥</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><msup><mi>r</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∥</mi><mi>x</mi><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">\\|g(x)\\| \\le (1 + r^{-1})\\|x\\|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∥</span></span></span></span>. And also, for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\varepsilon &gt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, there exists an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">g(x) = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>x</mi><mi mathvariant=\"normal\">∥</mi><mo>≤</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>ε</mi><mo stretchy=\"false\">)</mo><mfrac><mi>r</mi><mrow><mn>1</mn><mo>−</mo><mi>r</mi></mrow></mfrac><mi mathvariant=\"normal\">∥</mi><mi>y</mi><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">\\|x\\| \\le (1 + \\varepsilon)\\frac{r}{1-r}\\|y\\|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.153331em;vertical-align:-0.403331em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∥</span></span></span></span>.</p>",
        "id": 239234907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621336250
    },
    {
        "content": "<p>This will roll out of 9.2.</p>",
        "id": 239234916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621336261
    },
    {
        "content": "<p>Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>r</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 &lt; r &lt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 239234984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621336299
    },
    {
        "content": "<p>Well, kind of dualize 9.10: You have a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>f</mi><mi>c</mi><mi>i</mi></msubsup><mo>:</mo><msubsup><mi>M</mi><mi>c</mi><mi>i</mi></msubsup><mo>→</mo><msubsup><mi>N</mi><mi>c</mi><mi>i</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">f^i_c: M^i_c\\to N^i_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.071664em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.071664em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.071664em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span> of systems of complexes, both are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>k</mi><mo separator=\"true\">,</mo><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(k,K)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span>-weak exact, and I think you can even assume that each map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>f</mi><mi>c</mi><mi>i</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">f^i_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.071664em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span> is surjective, of bounded norm, and any element has a lift of bounded norm (as Johan just wrote as I was typing this <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> ). Then you want to show that the system of  kernels is also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(k_{new},K_{new})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>-weak exact</p>",
        "id": 239234998,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621336306
    },
    {
        "content": "<p>OK, I guess we need a predicate <code>is_kernel</code> dual to <code>is_quotient</code></p>",
        "id": 239235130,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621336357
    },
    {
        "content": "<p>I don't know... in this case I think you can just phrase it as ad hoc assumption to the statement</p>",
        "id": 239235171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621336385
    },
    {
        "content": "<p>But I certainly would advise to use a predicate, instead of the actual <code>ker</code> construction.</p>",
        "id": 239235218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621336412
    },
    {
        "content": "<p>So one thing is slightly better than in 9.10: Each map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>f</mi><mi>c</mi><mi>i</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">f^i_c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.071664em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span> is already surjective (in 9.10, the maps are not required to be injective, only up to some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-rescaling. You might do the same here, but I think it's not required.)</p>",
        "id": 239235303,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621336448
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">weak_normed_snake_dual</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"n\">k''</span> <span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"n\">K''</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hk'</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hk''</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k''</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_weak_bounded_exact</span> <span class=\"n\">k'</span> <span class=\"n\">K'</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'_adm</span> <span class=\"o\">:</span> <span class=\"n\">M'.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">k''</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"o\">(</span><span class=\"n\">k''</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">k''</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">=</span> <span class=\"n\">g.apply.ker</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hgker</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes.is_kernel</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"c1\">--is_kernel to be defined, maybe here</span>\n  <span class=\"n\">N.is_weak_bounded_exact</span> <span class=\"o\">(</span><span class=\"n\">k''</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K'</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">K''</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span>\n</code></pre></div>",
        "id": 239236697,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621337261
    },
    {
        "content": "<p>The constants have to be changed of course</p>",
        "id": 239236735,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621337282
    },
    {
        "content": "<p><code>0 &lt; r &lt; 1</code> is arbitrary?</p>",
        "id": 239236798,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621337302
    },
    {
        "content": "<p>I think you can maybe abstract the <code>(1 + r\\inv)</code> away.</p>",
        "id": 239236822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621337321
    },
    {
        "content": "<p>And similarly for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>ϵ</mi><mo stretchy=\"false\">)</mo><mfrac><mi>r</mi><mrow><mn>1</mn><mo>−</mo><mi>r</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">(1+\\epsilon) \\frac{r}{1-r}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.153331em;vertical-align:-0.403331em;\"></span><span class=\"mord mathnormal\">ϵ</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>",
        "id": 239236840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621337344
    },
    {
        "content": "<p>Just replace them by some constants from <code>nnreal</code></p>",
        "id": 239236876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621337365
    },
    {
        "content": "<p>Maybe you need to know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><msup><mi>r</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">1 + r^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> is larger than 1, I don't know. Probably it doesn't matter.</p>",
        "id": 239236988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621337422
    },
    {
        "content": "<p>Yes, this is my question,  <code>1 + r⁻¹</code> can be anything bigger than <code>1</code> (or <code>0</code>, or whatever) and <code>(1 + ε) * r /(1-r)</code> can be anything positive?</p>",
        "id": 239237065,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621337468
    },
    {
        "content": "<p>I think both can be arbitrary positive numbers for this lemma</p>",
        "id": 239237354,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621337640
    },
    {
        "content": "<p>I created the <code>normed_snake_dual</code> branch, with a file <code>normed_snake_dual.lean</code>. I will take care of the proof, but at last you can test if it is the statement we want</p>",
        "id": 239239099,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621338583
    },
    {
        "content": "<p>In the statement, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′′</span></span></span></span></span></span></span></span></span></span></span></span> seems to serve no role?</p>",
        "id": 239240846,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621339450
    },
    {
        "content": "<p>Ops, copy/paste mistake, fixed</p>",
        "id": 239241641,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621339832
    },
    {
        "content": "<p>Abstracting constants away is good because the natural constant coming out of the proof of 9.2 will probably be different. Currently the project uses two different ways of saying \"a constant almost as good as C\": \"∀ ε &gt; 0, C + ε works\" and \"∀ ε &gt; 0, C(1 + ε) works\". Of course this is completely immaterial, but sticking to one way makes reusing stuff easier.</p>",
        "id": 239246368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621341981
    },
    {
        "content": "<p>The two ways are different when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">C=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>! (This comment is not as stupid as it may sound.)</p>",
        "id": 239246494,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621342035
    },
    {
        "content": "<p>(But I think for the concerns right now it is indeed immaterial.)</p>",
        "id": 239246709,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621342101
    },
    {
        "content": "<p>Dumb question: Is there any need whatsoever for open polyhedrons? Should the halfspaces we intersect be forced closed, or should I allow them to be open?</p>",
        "id": 239261832,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621347771
    },
    {
        "content": "<p>I think you shouldn't care much here because your polyhedrons arise in discrete spaces, right?</p>",
        "id": 239262002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621347840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> we actually found a way around needing polyhedra yesterday night</p>",
        "id": 239262912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621348161
    },
    {
        "content": "<p>Oh well! That's one thing off my todo list <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 239263007,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621348200
    },
    {
        "content": "<p>Short update about this afternoon: together with Scott I finished the homological refactor. So LTE is now using mathlib's cochain complexes, etc.<br>\n(Apart from 1 file, that is waiting for 1 more mathlib PR to be merged, but that file is currently a leaf of LTE.)</p>",
        "id": 239268897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621350168
    },
    {
        "content": "<p>Then, after that, Adam stated 8.19 in Lean.</p>",
        "id": 239268992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621350188
    },
    {
        "content": "<p>Which means the game is on.</p>",
        "id": 239269062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621350201
    },
    {
        "content": "<p>Independently, Riccardo started working on snake_lemma2.</p>",
        "id": 239269177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621350241
    },
    {
        "content": "<p>I've made progress on 9.2, I really hope I'll be done before going to bed.</p>",
        "id": 239269548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621350339
    },
    {
        "content": "<p>Great!</p>",
        "id": 239269746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621350399
    },
    {
        "content": "<p>Should I merge master while working to snake_lemma2?</p>",
        "id": 239270493,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621350649
    },
    {
        "content": "<p>I mean, did you changed something that will break my proof?</p>",
        "id": 239270531,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621350663
    },
    {
        "content": "<p>I did it anyway <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 239270752,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621350746
    },
    {
        "content": "<p>Bors is really taking it's time with <a href=\"https://github.com/leanprover-community/mathlib/issues/7643\">#7643</a></p>",
        "id": 239295802,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621359884
    },
    {
        "content": "<p>(I think it was just waiting in the queue for a while. Maintainers can check the log <a href=\"https://app.bors.tech/repositories/24316/log\">here</a>. From what I can tell there were a few batches that failed, so it only got to the top of the queue again 2 hours ago.)</p>",
        "id": 239297157,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1621360438
    },
    {
        "content": "<p>I am a little confused about the pen and paper proof of the dual snake lemma: we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo>∙</mo></msup><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><msup><mi>M</mi><mo>∙</mo></msup><mo>→</mo><msup><mi>N</mi><mo>∙</mo></msup></mrow><annotation encoding=\"application/x-tex\">f^\\bullet \\colon M^\\bullet \\to N^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span></span></span></span>, of controlled norm and almost surjective.  Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>K</mi><mo>∙</mo></msup></mrow><annotation encoding=\"application/x-tex\">K^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span></span></span></span> be the system of kernels (let's ignore all the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">kc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">c</span></span></span></span> and so on, so no restriction). We want to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>K</mi><mo>∙</mo></msup></mrow><annotation encoding=\"application/x-tex\">K^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span></span></span></span> is blah blah exact. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msup><mi>K</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">x \\in K^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><msup><mi>M</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">x \\in M^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> and I can use exactness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo>∙</mo></msup></mrow><annotation encoding=\"application/x-tex\">M^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span></span></span></span> to produce <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><msup><mi>M</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y \\in M^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>. But then I don't know what to do... maybe check the proof the standard snake lemma...</p>",
        "id": 239317456,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621368397
    },
    {
        "content": "<p>what are the assumptions on f?</p>",
        "id": 239319184,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621369153
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">M'</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⟶</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⟶</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">weak_normed_snake_dual</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hk'</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_weak_bounded_exact</span> <span class=\"n\">k'</span> <span class=\"n\">K'</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM_adm</span> <span class=\"o\">:</span> <span class=\"n\">M.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">r₂</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">=</span> <span class=\"n\">g.apply.ker</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfker</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes.is_kernel</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.is_weak_bounded_exact</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span>\n</code></pre></div>",
        "id": 239319390,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621369238
    },
    {
        "content": "<p>The constants are random</p>",
        "id": 239319404,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621369244
    },
    {
        "content": "<p>I mean, the constants in the last line will be what it's given by the proof</p>",
        "id": 239319457,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621369261
    },
    {
        "content": "<p><code>is_kernel</code> means morally that it is the inclusion of the kernel. With pen and paper <code>N</code> is the kernel of <code>f</code>.</p>",
        "id": 239319597,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621369328
    },
    {
        "content": "<p>Oh so the M and N are backwards in the above?</p>",
        "id": 239319707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621369382
    },
    {
        "content": "<p>Ah that helps :)</p>",
        "id": 239319775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621369414
    },
    {
        "content": "<p>Yes... sorry. (To double confuse someone will read this in 15 minutes, now the two messages have the same variables).</p>",
        "id": 239319786,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621369419
    },
    {
        "content": "<p>Mmh, maybe it is enough to go to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mo>⋅</mo><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\cdot^{i-2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mbin\">⋅</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 239320299,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621369633
    },
    {
        "content": "<p>I mean the usual trick is to map the <code>y</code> with respect to <code>g</code> and see what happens.</p>",
        "id": 239320325,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621369650
    },
    {
        "content": "<p>What do you mean by going to <code>i-2</code>?</p>",
        "id": 239320716,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621369817
    },
    {
        "content": "<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z = g(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>. Use exactness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to produce <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mn>1</mn></msub><mo>∈</mo><msup><mi>M</mi><mrow><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></mrow></msup></mrow><annotation encoding=\"application/x-tex\">z_1 \\in M&#x27;^{i-2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span>, lift it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo>∈</mo><msup><mi>M</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y_1 \\in M^{i-2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>. Now <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>y</mi><mo>∈</mo><msup><mi>N</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">d(y_1)-y \\in N^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 239321037,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621369957
    },
    {
        "content": "<p>Yeah that sounds right (at least from the usual snake lemma)</p>",
        "id": 239321140,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621369995
    },
    {
        "content": "<p>Yes, for some reasons I wanted to play with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{i+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> rather than using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{i-2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 239321227,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621370036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239321037\">said</a>:</p>\n<blockquote>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z = g(y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>. Use exactness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">M&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to produce <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>z</mi><mn>1</mn></msub><mo>∈</mo><msup><mi>M</mi><mrow><mo mathvariant=\"normal\">′</mo><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></mrow></msup></mrow><annotation encoding=\"application/x-tex\">z_1 \\in M&#x27;^{i-2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span>, lift it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo>∈</mo><msup><mi>M</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y_1 \\in M^{i-2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span>. Now <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>y</mi><mo>∈</mo><msup><mi>N</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">d(y_1)-y \\in N^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<p>Hmm, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi>y</mi><mo>∈</mo><msup><mi>N</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">d(y_1)-y \\in N^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> it's not true... I will think about it tomorrow.</p>",
        "id": 239338431,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621378705
    },
    {
        "content": "<p>I'll be able to help tomorrow evening if sleeping on it is not enough.</p>",
        "id": 239338918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621378958
    },
    {
        "content": "<p>What's the question? What is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>?</p>",
        "id": 239339758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621379429
    },
    {
        "content": "<p>No idea. I haven't been following this at all, I can only see this is in the portion of the project where I can easily help.</p>",
        "id": 239339845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621379510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/239317456\">said</a>:</p>\n<blockquote>\n<p>I am a little confused about the pen and paper proof of the dual snake lemma: we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>g</mi><mo>∙</mo></msup><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><msup><mi>M</mi><mo>∙</mo></msup><mo>→</mo><msup><mi>M</mi><mrow><mo mathvariant=\"normal\">′</mo><mo>∙</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">g^\\bullet \\colon M^\\bullet \\to M&#x27;^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">∙</span></span></span></span></span></span></span></span></span></span></span></span>, of controlled norm and almost surjective.  Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mo>∙</mo></msup></mrow><annotation encoding=\"application/x-tex\">N^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span></span></span></span> be the system of kernels (let's ignore all the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">kc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">c</span></span></span></span> and so on, so no restriction). We want to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mo>∙</mo></msup></mrow><annotation encoding=\"application/x-tex\">N^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span></span></span></span> is blah blah exact. Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><msup><mi>N</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">n \\in N^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><msup><mi>M</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">n\\in M^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> and I can use exactness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mo>∙</mo></msup></mrow><annotation encoding=\"application/x-tex\">M^\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.674115em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∙</span></span></span></span></span></span></span></span></span></span></span> to produce <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><msup><mi>M</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">y \\in M^{i-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>. But then I don't know what to do... maybe check the proof the standard snake lemma...</p>\n</blockquote>\n<p>This was my original question</p>",
        "id": 239341489,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621380571
    },
    {
        "content": "<p>I am trying to prove this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">M'</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">⟶</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">⟶</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">weak_normed_snake_dual</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"n\">K</span> <span class=\"n\">K'</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">hk'</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k'</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM'</span> <span class=\"o\">:</span> <span class=\"n\">M'.is_weak_bounded_exact</span> <span class=\"n\">k'</span> <span class=\"n\">K'</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">c₀</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hM_adm</span> <span class=\"o\">:</span> <span class=\"n\">M.admissible</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M'</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">r₂</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f.apply</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">M</span> <span class=\"n\">c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">=</span> <span class=\"n\">g.apply.ker</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfker</span> <span class=\"o\">:</span> <span class=\"n\">system_of_complexes.is_kernel</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">N.is_weak_bounded_exact</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K'</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span>\n</code></pre></div>\n<p>Where the constants at the end can be changed to whatever needed.</p>",
        "id": 239341582,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621380607
    },
    {
        "content": "<p>Small typo: In the blueprint, in Definition 5.11, the complex looks like a homological complex, but it's cohomological</p>",
        "id": 239377707,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621408750
    },
    {
        "content": "<p>Thanks, fixed.</p>",
        "id": 239384589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621412472
    },
    {
        "content": "<p>So around <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> or so. Impressive! It's about the factor I'd have expected for a properly digested normal writeup.</p>",
        "id": 239388293,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621414307
    },
    {
        "content": "<p>I'm still trying to get back up to speed mathematically. <code>is_weak_bounded_exact k K m c₀</code> is presumably the \"weakly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">\\leq k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-exact in degrees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\leq m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> and for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>≥</mo><msub><mi>c</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">c\\geq c_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with bound <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>\" in Def 4.8 of <a href=\"https://leanprover-community.github.io/liquid/sec-some_normed_homological_algebra.html\">the blueprint</a>.</p>",
        "id": 239395052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621417831
    },
    {
        "content": "<p>and the claim is basically of the form \"the kernel of a surjection of weakly bounded exact systems of complexes is weakly bounded exact (with some different constants, and in particular the degree changes a bit)\"</p>",
        "id": 239395130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621417876
    },
    {
        "content": "<p>Right. It's like 4.13 in the blueprint, and the proof ought to be similar</p>",
        "id": 239395154,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1621417891
    },
    {
        "content": "<p>oh this is so cool, I can click on the blueprint and go directly to the Lean code</p>",
        "id": 239395346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621417987
    },
    {
        "content": "<p>Status update:</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> worked out all the constants! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> </li>\n<li><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> is making really good progress on 8.19. I get the impression he's 90% done. (Correct me if I'm wrong.)</li>\n<li>I'm working on <code>col_exact</code> and things are going according to plan. My guess is that in a couple of days this will be done.</li>\n</ul>\n<p>So I hope that 9.5 will be sorry-free around the end of the month.</p>",
        "id": 240280370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622005766
    },
    {
        "content": "<p>I've made some updates to the blueprint. In particular, I commented out some of the lemmas that we don't really need. So the graph now looks as follows: <a href=\"https://leanprover-community.github.io/liquid/dep_graph.html\">https://leanprover-community.github.io/liquid/dep_graph.html</a></p>",
        "id": 240280422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622005809
    },
    {
        "content": "<p>Nice! <code>normedcompletion</code> looks a little lonely there, with no child notes, though... It looks important, though, so I guess it will actually come into play later?</p>",
        "id": 240280509,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1622005956
    },
    {
        "content": "<p>No, I think we actually don't need it.</p>",
        "id": 240280527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622005990
    },
    {
        "content": "<p>So I just pushed a commit that also comments that one out.</p>",
        "id": 240280532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622006000
    },
    {
        "content": "<p>In the formal proof everything goes via locally constant functions.</p>",
        "id": 240280539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622006013
    },
    {
        "content": "<p>I like how in <code>canonical_iso_2</code> it's written as LHS=RHS. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> would be proud</p>",
        "id": 240280584,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1622006049
    },
    {
        "content": "<p>Right! It's <em>canonical</em> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 240280618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622006125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> not sure about 90% <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> I spent all of yesterday afternoon proving that the terms in the Cech nerve commute with limits. Tidy decided to give up on me from the beginning, so it was much harder than I expected :)</p>",
        "id": 240338832,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622041412
    },
    {
        "content": "<p>Hmmz, that's unfortunate.</p>",
        "id": 240339007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622041461
    },
    {
        "content": "<p>So is 75% more realistic?</p>",
        "id": 240339086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622041487
    },
    {
        "content": "<p>Let's say 80%</p>",
        "id": 240339179,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622041519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240339179\">said</a>:</p>\n<blockquote>\n<p>Let's say 80%</p>\n</blockquote>\n<p>Make that 90% -- The proof of <code>exists_clopen</code> is finished, showing that when a profinite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a cofiltered limit of profinite sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, any clopen set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> arises from some clopen <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> in some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 240469142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622123031
    },
    {
        "content": "<p>What's left?</p>",
        "id": 240469568,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622123200
    },
    {
        "content": "<p>I still need to promote that to arbitrary discrete quotients.</p>",
        "id": 240469714,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622123278
    },
    {
        "content": "<p>Once that's done, the final three sorry's for 8.19 should be doable</p>",
        "id": 240469867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622123332
    },
    {
        "content": "<p>To be fair, the index category I've been working with here is a <code>semilattice_inf</code> not a general cofiltered category, because we don't have the definition of <code>cofiltered</code> in mathlib <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span> (we have <code>filtered</code> but working with opposites is a huge pain), so the result is a bit specialized for our context.</p>",
        "id": 240471455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622123990
    },
    {
        "content": "<p>OK, that's fine...</p>",
        "id": 240472312,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622124309
    },
    {
        "content": "<p>(I mean, I hope that the profinite sets that Johan wants to apply this to have the required shape)</p>",
        "id": 240472361,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622124331
    },
    {
        "content": "<p>They do. The terms in the Cech nerve of an arrow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> are limits over the discrete quotients of X, which is such a <code>semilattice_inf</code></p>",
        "id": 240473065,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622124591
    },
    {
        "content": "<p>But I hope that Johan doesn't have to worry about such things once 8.19 is done <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 240473185,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622124623
    },
    {
        "content": "<p>I'm already using 8.19 as stated. It works great.</p>",
        "id": 240473258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622124649
    },
    {
        "content": "<p>Oh right, I see, you have the freedom to write your profinite sets in any way you like.</p>",
        "id": 240474577,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622125197
    },
    {
        "content": "<p>I just showed that the canonical hom between the simplicial profinite sets is compatible with <del>restriction</del> inclusion maps coming from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>≤</mo><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">c_1 \\le c_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.<br>\nSorry count:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop819.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">pfpng_iso.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">col_exact.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop819</span><span class=\"bp\">/</span><span class=\"n\">locally_constant.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">clopen_limit.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">locally_constant.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">12</span>\n</code></pre></div>",
        "id": 240476014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622125729
    },
    {
        "content": "<p>For <code>col_exact</code> (modulo 8.19) I need to show that this canonical hom that comes from the Cech nerve adjunction is bijective.<br>\nAnd we need this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mi>e</mi><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi><msup><mi>M</mi><mi>n</mi></msup><msup><mo stretchy=\"false\">)</mo><mi>N</mi></msup><mo>=</mo><mi>r</mi><mi>e</mi><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><msup><mi>M</mi><mi>N</mi></msup><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(rescale M^n)^N = rescale ((M^N)^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">resc</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">resc</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">((</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> isomorphism, and show that it is compatible with the summation maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><mi mathvariant=\"normal\">_</mi><mo>→</mo><msup><mi>M</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum \\colon \\_ \\to M^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 240476291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622125828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240471455\">said</a>:</p>\n<blockquote>\n<p>(we have <code>filtered</code> but working with opposites is a huge pain)</p>\n</blockquote>\n<p>I don't particularly mind doing the copy-and-paste dualisation to obtain <code>cofiltered</code>, if you'd then use it.</p>",
        "id": 240543990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622157593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240469714\">said</a>:</p>\n<blockquote>\n<p>I still need to promote that to arbitrary discrete quotients.</p>\n</blockquote>\n<p>This is now done..</p>",
        "id": 240548904,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622161922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240543990\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240471455\">said</a>:</p>\n<blockquote>\n<p>(we have <code>filtered</code> but working with opposites is a huge pain)</p>\n</blockquote>\n<p>I don't particularly mind doing the copy-and-paste dualisation to obtain <code>cofiltered</code>, if you'd then use it.</p>\n</blockquote>\n<p>I would be happy to use it! At some point we should add to mathlib the fact that Profinite is equivalent to <code>Pro(Fintype)</code>, and it would surely be useful for that. For now, in LTE, I'm happy sticking to the semilattice_inf's</p>",
        "id": 240548989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622162017
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7731\">#7731</a></p>",
        "id": 240556916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622171201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240339179\">said</a>:</p>\n<blockquote>\n<p>Let's say 80%</p>\n</blockquote>\n<p>Make that 100%</p>",
        "id": 240662605,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622237401
    },
    {
        "content": "<p>Now it's time to catch up on 1591 emails</p>",
        "id": 240663431,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622237948
    },
    {
        "content": "<p>The covid numbers in NL have gone down enough that Germany thinks it is safe to visit again. So we have just packed all our bags, and tomorrow we'll be driving to NL for 8 hours to visit family for a week.</p>",
        "id": 240668557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622241878
    },
    {
        "content": "<p>This means that the final sorry will have to wait a bit before it is killed. It might be Monday before I have time again.<br>\nSorry for the cliff hanger.</p>",
        "id": 240668595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622241921
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">cosimplicial_extra.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 240668610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622241950
    },
    {
        "content": "<p>Hahaha, as usual, when you give up and go to bed... you can't sleep. And then you realize the correct proof. And you <em>have</em> to finish it.</p>",
        "id": 240670148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622243355
    },
    {
        "content": "<p>I'm currently building locally. <span aria-label=\"time ticking\" class=\"emoji emoji-23f3\" role=\"img\" title=\"time ticking\">:time_ticking:</span></p>",
        "id": 240670164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622243393
    },
    {
        "content": "<p>Pushed <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"checkered flag\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"checkered flag\">:checkered_flag:</span></p>",
        "id": 240670259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622243485
    },
    {
        "content": "<p>Now I really need to go to bed</p>",
        "id": 240670270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622243505
    },
    {
        "content": "<p>Compiles at this end as well!</p>",
        "id": 240670489,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622243730
    },
    {
        "content": "<p>I'm still staring at a yellow dot on github...</p>",
        "id": 240670557,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622243768
    },
    {
        "content": "<p>It's gone green!</p>",
        "id": 240671978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622245537
    },
    {
        "content": "<p>The octocat agrees! <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> <br>\n<a href=\"/user_uploads/3121/zmrWs47kLvWOShjNZcL3AecP/Screenshot_2021-05-28-leanprover-community-lean-liquid.png\">Screenshot_2021-05-28-leanprover-community-lean-liquid.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/zmrWs47kLvWOShjNZcL3AecP/Screenshot_2021-05-28-leanprover-community-lean-liquid.png\" title=\"Screenshot_2021-05-28-leanprover-community-lean-liquid.png\"><img src=\"/user_uploads/3121/zmrWs47kLvWOShjNZcL3AecP/Screenshot_2021-05-28-leanprover-community-lean-liquid.png\"></a></div>",
        "id": 240672329,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622245911
    },
    {
        "content": "<p>Awesome. Next step? ;-P</p>",
        "id": 240674277,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1622248478
    },
    {
        "content": "<p>Empty the <code>for_mathlib</code> directory? :-)</p>",
        "id": 240677135,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622252838
    },
    {
        "content": "<p>bitrot in 3... 2... 1... :-)</p>",
        "id": 240677148,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622252878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240677135\">said</a>:</p>\n<blockquote>\n<p>Empty the <code>for_mathlib</code> directory? :-)</p>\n</blockquote>\n<p>Despite the emoji, I think this might be the correct answer...</p>",
        "id": 240677223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622252977
    },
    {
        "content": "<p>I guess one step that is probably worth doing now is to install the \"automatically upgrade mathlib, and notify us if things break\" script, as an initial step to avoid bitrot.</p>",
        "id": 240677278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622253004
    },
    {
        "content": "<p>That however makes interesting next steps slightly harder, because we probably still want manual control of bumping mathlib while new targets are being worked on.</p>",
        "id": 240677296,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622253039
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7740\">#7740</a></p>",
        "id": 240677586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622253573
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7741\">#7741</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7742\">#7742</a>!</p>",
        "id": 240679099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622256310
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/homological_complex.eval_at\">docs#homological_complex.eval_at</a></p>",
        "id": 240679228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622256554
    },
    {
        "content": "<p>Just pointing it out.... it's a bit late here and I'm tired so I probably shouldn't review these tonight, but if they're still up I'll look tomorrow</p>",
        "id": 240679301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622256688
    },
    {
        "content": "<p>Thanks! I'll deduplicate.</p>",
        "id": 240679494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622256969
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7743\">#7743</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7744\">#7744</a></p>",
        "id": 240679496,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622256990
    },
    {
        "content": "<p>After PR'ing something then realising it wasn't actually used in LTE, I took the liberty of moving files in <code>for_mathlib</code> that aren't actually imported outside that directory into a <code>for_mathlib/unused/</code> folder. Hopefully authors can salvage and delete those.</p>",
        "id": 240680648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622259253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240677278\">said</a>:</p>\n<blockquote>\n<p>I guess one step that is probably worth doing now is to install the \"automatically upgrade mathlib, and notify us if things break\" script, as an initial step to avoid bitrot.</p>\n</blockquote>\n<p>That's already done. It plays very well with manual bumps. The script has taken care of 50% of our mathlib bumps, I think.</p>",
        "id": 240680676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622259362
    },
    {
        "content": "<p>Thanks everyone for the really cool journey to <code>first_target</code>. I'll see when I'm in NL. Now the 8hr car trip <span aria-label=\"car\" class=\"emoji emoji-1f697\" role=\"img\" title=\"car\">:car:</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 240680708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622259420
    },
    {
        "content": "<p>Have a safe trip! The perfect moment for taking a break!!</p>",
        "id": 240683247,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1622263875
    },
    {
        "content": "<p>Whohoo!! Congratulations!! Truly amazing work!!! <span aria-label=\"champagne\" class=\"emoji emoji-1f37e\" role=\"img\" title=\"champagne\">:champagne:</span></p>",
        "id": 240688204,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622271642
    },
    {
        "content": "<p>Yes, congratulations Johan and everyone else. I agree that for_mathlib should at least be where our attention goes for a while, even though it's boring work. I've designed and redesigned gradings on rings and I've still not made the PR but we saw with our own eyes in the perfectoid project that it's really important to remember that files which compile fine and do interesting things in directories called things like <code>for_mathlib</code> are still unfinished work, and the longer you leave it to finish them the harder it gets</p>",
        "id": 240689886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622274759
    },
    {
        "content": "<p>There is something even more urgent than emptying the <code>for_mathlib</code> folder, at least if we want to communicate about this first step (knowing Kevin, I'm probably writing the message too late). We should identify the trusted code base and review it. I'm not talking about Lean here. I'm perfectly happy to trust the logical foundations of Lean and the Lean kernel. I'm talking about the definitions in the project. We need to list all definitions (transitively) entering the main statement and make sure they are checked by people who really understand the math.</p>",
        "id": 240691475,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622277225
    },
    {
        "content": "<p>This goes with another step which can be parallel to the PRing step: improving documentation through all the project.</p>",
        "id": 240691517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622277258
    },
    {
        "content": "<p>I was tempted to tweet about it last night but Johan encouraged me to hold off until the graph was updated</p>",
        "id": 240691629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622277481
    },
    {
        "content": "<p>Is the linter happy about the project?</p>",
        "id": 240691739,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622277645
    },
    {
        "content": "<p>I really think nobody should tweet about this before Peter is ready to say: I checked they got all definitions and the statement of 9.4 right, and Lean checked the proofs. I know it sounds like I'm giving orders to Peter, but I'm very confident he is interested enough in this project to know this is the right thing to do.</p>",
        "id": 240691740,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622277646
    },
    {
        "content": "<p>I don't think there is any linter setup here.</p>",
        "id": 240691745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622277675
    },
    {
        "content": "<p>The linter would certainly not be happy with the status of doc-strings...</p>",
        "id": 240691752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622277718
    },
    {
        "content": "<p>Setting it up would be extremely helpful, both for documentation (it would force you to document all the defs) and for spotting thousands of tiny mistakes.</p>",
        "id": 240691790,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622277729
    },
    {
        "content": "<p>I'm supportive of Patrick's suggestion to hold off for a bit. I don't think there is urgency is make an announcement. Some tidying up of documentation would go a long way to making the effort intelligible to outsiders who come to have a look after such an announcement.</p>",
        "id": 240691805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622277811
    },
    {
        "content": "<p>I would say that adding all those docstrings (including module docstrings), with very special emphasis for the one that are needed to double check the statement of the first target, is now our top priority.</p>",
        "id": 240691809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622277828
    },
    {
        "content": "<p>But we can work on mathlib PR in parallel.</p>",
        "id": 240691853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622277856
    },
    {
        "content": "<p>How hard is it to add links back to the blueprint from doc-strings? I think having links in both directions for every important definition is a good idea.</p>",
        "id": 240691861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622277886
    },
    {
        "content": "<p>From docstrings where? On GitHub? In VSCode? On a dedicated webpage?</p>",
        "id": 240691936,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622277997
    },
    {
        "content": "<p>I agree! I also thought to myself that now is the time to really verify that you've actually proved the right theorem. What's the best way to proceed? I think I've seen enough Lean code that I can more-or-less parse its grammar and so should be able to tell whether a definition is correct (but I might overlook things where it looks correct but Lean reads it differently than you might think). Maybe you can put some links here to things for me to look at?</p>",
        "id": 240693134,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622280230
    },
    {
        "content": "<p>I just meant putting actual URLs in the doc-strings.</p>",
        "id": 240693183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622280289
    },
    {
        "content": "<p>So there's no need for a rendering step that converts tags to clickable links.</p>",
        "id": 240693191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622280310
    },
    {
        "content": "<p>Peter, we are not quite ready. We need to write more documentation for you and we need to build an accurate list of what you should review.</p>",
        "id": 240693443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622280724
    },
    {
        "content": "<p>Hopefully we can do this pretty quickly.</p>",
        "id": 240693450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622280743
    },
    {
        "content": "<p>Sure, take your time! I just wondered about how we'll proceed. In any case, let me know when/what I should look at.</p>",
        "id": 240693456,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622280770
    },
    {
        "content": "<p>Actually we <em>have</em> to do it quickly, before the enthusiasm goes down.</p>",
        "id": 240693457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622280770
    },
    {
        "content": "<p>Whoops, I got excited and told the world. But I'm not part of the team, so I hope it's treated as unofficial</p>",
        "id": 240693772,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1622281247
    },
    {
        "content": "<p>That's fine</p>",
        "id": 240693785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622281295
    },
    {
        "content": "<p>News gets around anyway</p>",
        "id": 240693791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622281308
    },
    {
        "content": "<p>People on the Discord know because I was talking about it on the voice chat</p>",
        "id": 240693839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622281327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Johan is away for the weekend but I think I should have some time and I'm happy to do some stuff. Can you suggest a concrete job which I would be capable of doing competently so I can work on it today?</p>",
        "id": 240693868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622281430
    },
    {
        "content": "<p>Otherwise I can keep working on the algebraic grading stuff. Johan has suggested a complete refactor of that so I have plenty to do</p>",
        "id": 240693919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622281483
    },
    {
        "content": "<p>I was complaining that I was making an API for additive monoids graded by submonoids and also additive groups graded by subgroups and he suggested that if l restrict to the case where addition is commutative (which covers all use cases I know about) then I could just be grading modules by submodules over some fixed base semiring which could be nat or int if I want to recover the other cases</p>",
        "id": 240694002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622281644
    },
    {
        "content": "<p>Can someone summarize what was accomplished? Is it the whole project or just an intermediate lemma? <code>first_target</code> sounds like there might be a second target</p>",
        "id": 240694384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622282313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130272\">David Michael Roberts</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240693772\">said</a>:</p>\n<blockquote>\n<p>Whoops, I got excited and told the world. But I'm not part of the team, so I hope it's treated as unofficial</p>\n</blockquote>\n<p>It's probably only because I'm a grumpy old man who understands nothing to Tweeter, but I think we live in a very weird world. I think this is not only incredibly rude to everyone who has been actively involved, especially Peter and Johan. It's also extremely unwise for advertisement purposes. If it turns out we messed up something and need a couple of weeks or even months to fix it then everybody will only remember that formalized mathematics can be wrong.</p>",
        "id": 240695108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622283694
    },
    {
        "content": "<p>Mario, you very correctly interpreted that name. The official target of the project, as defined in Peter's original blog post is not formalized yet. Johan estimated that we are half way through.</p>",
        "id": 240695441,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622284294
    },
    {
        "content": "<p>Kevin, you have a very concrete job that you know how to do: docstrings, docstrings, docstrings.</p>",
        "id": 240695474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622284322
    },
    {
        "content": "<p>OK I will go for top down docstrings.</p>",
        "id": 240695996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622285179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, it's the first target. But as far as the mathematical content that I was unsure about is concerned, all of it is in this first target. So the experiment is not yet done, but now I am 100% confident that the argument works. (Will double-check the theorem statement of course, but I'm confident that you formalized the right thing.)</p>",
        "id": 240696540,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622286045
    },
    {
        "content": "<p>So let me try and understand the state of things. All references to theorem numbers refer to [Analytic].</p>\n<ul>\n<li>Peter's challenge is to formalise a statement and proof of a special case of 9.1</li>\n<li>Directly under the statemnt of 9.4 there is a very short proof that 9.4 -&gt; 9.1</li>\n<li>We've got a formal proof of 9.4 in the sense that there is some explicit sorry-free line in the repo which we are claiming is this.</li>\n</ul>\n<p>Am I right so far?</p>",
        "id": 240697672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622288010
    },
    {
        "content": "<p>Questions which one might want to address in the README: <br>\n1) Is it meaningful to attach a de Bruijn factor to the work? What are the issues which mathematicians might have with this metric or an implementation of it?<br>\n 2) The precise line of code which we are claiming is a proof of 9.4 and comments about what we might mean by this claim.</p>",
        "id": 240697743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622288136
    },
    {
        "content": "<p>That is amazing! Congratulations!</p>",
        "id": 240698511,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1622289378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, that's a good summary. It should be noted that the proof of 9.4 --&gt; 9.1 uses a lot of preliminary work: In particular, it is here that any actual condensed mathematics enters. So the relevant part of the manuscript is much more (and much more diffuse) than those few lines of [Analytic].</p>\n<p>Another thing worth taking note of is that there's even a bit of work to do to see that 9.1 implies the statement of the challenge; namely, the comparison between those spaces of measures over the crazy ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z((T))_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and the spaces of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-measures over the reals. This is in Lecture 7, and rather simple, but might also take a little bit of time to do in Lean.</p>",
        "id": 240698993,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622290147
    },
    {
        "content": "<p>Clearly we will have a lot of blueprint work to do before starting the formalization of this second target.</p>",
        "id": 240701554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622293933
    },
    {
        "content": "<p>Actually we also have blueprint work to do on the first target. For instance the blueprint still pretends <a href=\"https://leanprover-community.github.io/liquid/sec-some_normed_homological_algebra.html#prop:completeexact\">this proposition</a> isn't used anywhere</p>",
        "id": 240702182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622294689
    },
    {
        "content": "<p>and also that it hasn't been formalized</p>",
        "id": 240702195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622294713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240702182\">said</a>:</p>\n<blockquote>\n<p>Actually we also have blueprint work to do on the first target. For instance the blueprint still pretends <a href=\"https://leanprover-community.github.io/liquid/sec-some_normed_homological_algebra.html#prop:completeexact\">this proposition</a> isn't used anywhere</p>\n</blockquote>\n<p>Yeah, I kind of bypassed it</p>",
        "id": 240702200,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622294728
    },
    {
        "content": "<p>Really? did you at least used <a href=\"https://leanprover-community.github.io/liquid/sec-some_normed_homological_algebra.html#lem:closure_surjective\">this one</a> somewhere?</p>",
        "id": 240702990,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622295782
    },
    {
        "content": "<p>It's a bit frustrating that several of the lemmas I was asked to prove weren't actually useful (the other one was the fact that <a href=\"https://leanprover-community.github.io/liquid/sec-some_normed_homological_algebra.html#weakexact_implies_exact\">weakly exact implies strongly exact</a> for complete groups).</p>",
        "id": 240703088,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622295873
    },
    {
        "content": "<p>I used controlled_exactness</p>",
        "id": 240703090,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622295881
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/3f8ca3bf7f0eae69606a931b4c423fd6276f71bc/src/normed_group/controlled_exactness.lean#L18\">https://github.com/leanprover-community/lean-liquid/blob/3f8ca3bf7f0eae69606a931b4c423fd6276f71bc/src/normed_group/controlled_exactness.lean#L18</a></p>",
        "id": 240703091,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622295883
    },
    {
        "content": "<p>Oh, so you didn't bypass anything. The lemma I pointed out took all its content from <code>controlled_exactness</code></p>",
        "id": 240703165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622295965
    },
    {
        "content": "<p>Sure. I didn't actually see why we needed the 4-term complex version (i.e.. the one you pointed to)</p>",
        "id": 240703210,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622296004
    },
    {
        "content": "<p>So we should simply remove the lemmas that is stated in terms of 4-term complexes</p>",
        "id": 240703213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622296017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/status.20update/near/240703088\">said</a>:</p>\n<blockquote>\n<p>It's a bit frustrating that several of the lemmas I was asked to prove weren't actually useful (the other one was the fact that <a href=\"https://leanprover-community.github.io/liquid/sec-some_normed_homological_algebra.html#weakexact_implies_exact\">weakly exact implies strongly exact</a> for complete groups).</p>\n</blockquote>\n<p>That's going to be one of the first things that we will use in the proof 9.4 =&gt; 9.1. So don't worry, it will be used in the end.</p>",
        "id": 240703221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622296033
    },
    {
        "content": "<p>Well, the 4-terms complexes version is Peter's version</p>",
        "id": 240703222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622296034
    },
    {
        "content": "<p>Hey! Are you done with driving?</p>",
        "id": 240703225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622296057
    },
    {
        "content": "<p>Yes, we arrived around 14:00</p>",
        "id": 240703305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622296084
    },
    {
        "content": "<p>just a word of warning: I had to increase the default deterministic timeout bound to work on <code>src/prop819.lean</code> after Scott's changes from yesterday</p>",
        "id": 240703421,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622296270
    },
    {
        "content": "<p>I noticed this file takes a <em>lot</em> of time</p>",
        "id": 240703427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622296291
    },
    {
        "content": "<p>it was slow before, but something changed yesterday that pushed it over the edge (I'm not sure what)</p>",
        "id": 240703477,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622296327
    },
    {
        "content": "<p>I'm working on cleaning it up</p>",
        "id": 240703485,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622296346
    },
    {
        "content": "<p>Beware I just pushed</p>",
        "id": 240703508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622296383
    },
    {
        "content": "<p>Concerning the blueprint, I will write a detailed proof of <code>col_exact</code> now that I know the precise argument.</p>",
        "id": 240703575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622296449
    },
    {
        "content": "<p>But it might be a couple of days before I get round to that.</p>",
        "id": 240703579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622296461
    },
    {
        "content": "<p>Yes, this is part of the documentation effort we need to make now.</p>",
        "id": 240703757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622296721
    },
    {
        "content": "<p>Where is 8.19 in the blueprint?</p>",
        "id": 240703852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622296826
    },
    {
        "content": "<p><code>cechcover-exact</code></p>",
        "id": 240703885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622296910
    },
    {
        "content": "<p>I have tidied up the README so that it now gives a global overview of what is done and what is not done, explained in a way which (hopefully) a mathematician with no Lean background can understand.</p>",
        "id": 240708722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622304141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Actually, without your proof that weak exact implies exact, I still wouldn't be 100% confident in the proof</p>",
        "id": 240710042,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622306097
    },
    {
        "content": "<p>Nice!</p>",
        "id": 240710060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622306143
    },
    {
        "content": "<p>So I only regard the current first_target <em>in combination with</em> that fact to push it to 100% confidence level (note that the actual formulation of 9.4 in [Analytic] is for actual exactness)</p>",
        "id": 240710064,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622306159
    },
    {
        "content": "<p>Tiny remark: technicaly, right now, there is no formal proof of a statement that exactly matches 9.4 or 9.5.</p>\n<p>(i) Both statements use strong exactness, we only have formal proofs of weak exactness. But together with Patrick's lemma, we can very easily move from weak exactness to strong exactness.<br>\n(ii) The statement of 9.4 in [Analytic] is for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal M}_{r&#x27;}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> profinite. We have only formalized <code>Mbar r' S</code> for finite <code>S</code> at the moment.</p>\n<p>Conclusion: we can easily state and prove an exact match of 9.5 right now. For 9.4 we need to do more work, because we need to generalize the definition of <code>Mbar r' S</code> (and in particular make it functorial in <code>S</code>) and then deduce <code>weak-but-profinite-9.4</code> from <code>weak-and-finite-9.4</code> (which we have). After that, we can derive <code>strong-and-profinite-9.4</code> using Patrick's lemma.</p>\n<p>Peter pointed out that the other side of the square <code>weak-and-finite-9.4 -&gt; strong-but-finite-9.4 -&gt; strong-and-profinite-9.4</code> leads to worse constants, because the <code>finite -&gt; profinite</code> step pushes you to go via <code>weak-but-profinite-9.4</code> anyways.</p>",
        "id": 240800495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622446035
    },
    {
        "content": "<p>I regard all of this as part of <code>second_target</code>.</p>",
        "id": 240800512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622446048
    },
    {
        "content": "<p>But if we want to announce a formal proof of 9.5, we can of course spend 5 minutes to state and prove the strong exact version. It's good to be aware that we will not actually use that precise version in <code>second_target</code> which is why I hadn't bothered stating it so far.</p>",
        "id": 240800647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622446138
    },
    {
        "content": "<p>As long as you didn't smuggle in any dependence on the finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> into the constants, I regard the difference between these statements as tiny. Still, for PR purposes, it might be good to make the small step of stating the precise version of 9.5 from [Analytic]; this would also make it more obvious that there are no leaves in the dependency graph. (The only other leaves are statements ensuring that the hypotheses of 9.5 can actually be satisfied.)</p>",
        "id": 240803440,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1622447985
    },
    {
        "content": "<p>I am currently on a horrible internet connection. So I can't use Lean interactively on the beast in my cellar back in Germany.</p>",
        "id": 240803811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622448228
    },
    {
        "content": "<p>If someone else wants to do the proper version of 9.5, that would be great.</p>",
        "id": 240803858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622448243
    },
    {
        "content": "<p>I'll restrict myself to working on the blueprint and docstrings. Because that can be done in text-only mode.</p>",
        "id": 240803878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622448268
    },
    {
        "content": "<p>Haha, I've got a better internet connection now, and now that I try to do this, it is of course more work than 5 minutes <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 240822619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622461198
    },
    {
        "content": "<p>First, it became clear that due to some carelessness there were unused assumptions in the theorems</p>",
        "id": 240822688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622461222
    },
    {
        "content": "<p>Secondly, we need to show that we are working with a system of complexes whose objects are separated and complete.</p>",
        "id": 240822708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622461248
    },
    {
        "content": "<p>And this is not true by definition, because we are taking those <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>T</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">T^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>-invariants.</p>",
        "id": 240822736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622461274
    },
    {
        "content": "<p>Quick update: I'll be visiting family next week. So I won't be very active.</p>",
        "id": 259742703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635615721
    }
]