[
    {
        "content": "<p>I added a skeleton for the inductive case of the injectivity part of the proof of Proposition 2.1 here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/14a3e29edc37b48c3f7c55dd4d546f2c81365a66/src/free_pfpng/main.lean#L232\">https://github.com/leanprover-community/lean-liquid/blob/14a3e29edc37b48c3f7c55dd4d546f2c81365a66/src/free_pfpng/main.lean#L232</a></p>\n<p>This proof contains a bunch of relatively small sorries, some of which should be trivial, while some a bit more complicated.<br>\nAny help with these would be much appreciated!</p>",
        "id": 279707830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650559921
    },
    {
        "content": "<p>So that's the first 25% of the entire proof, basically?</p>",
        "id": 279713281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650562357
    },
    {
        "content": "<p>I think surjectivity will actually be a bit easier.</p>",
        "id": 279713815,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650562607
    },
    {
        "content": "<p>Well, once the following is sorry-free: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/b0c7649a6aebfa8f4bda55e06e462d240cb248a2/src/condensed/ab.lean#L446\">https://github.com/leanprover-community/lean-liquid/blob/b0c7649a6aebfa8f4bda55e06e462d240cb248a2/src/condensed/ab.lean#L446</a></p>",
        "id": 279714001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650562683
    },
    {
        "content": "<p>Essentially that will reduce the proof of surjectivity to show that for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> there exists some profinite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> and some map of condensed sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">T \\to \\mathbb{Z}[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> and a <em>surjective</em> map of profinite sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>S</mi><msub><mo stretchy=\"false\">]</mo><mrow><mo>≤</mo><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T \\to \\mathbb{Z}[S]_{\\le n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2952em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span> such that the obvious diagram with target <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⋃</mo><mi>n</mi></msub><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>S</mi><msub><mo stretchy=\"false\">]</mo><mrow><mo>≤</mo><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\bigcup_n \\mathbb{Z}[S]_{\\le n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">⋃</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2952em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≤</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span> commutes (this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> is taken to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mi>n</mi></msup><mo>×</mo><mo stretchy=\"false\">{</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mo stretchy=\"false\">}</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">S^n \\times \\{-1,0,1\\}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> in <code>Analytic.pdf</code>), and I don't think that will be too difficult.</p>",
        "id": 279714604,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650562976
    },
    {
        "content": "<p>Ok, sounds good!</p>",
        "id": 279717479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650564285
    },
    {
        "content": "<p>Does the following <code>sorry</code> need a mathlib refactor? Or merely a library hunt? (cc <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">limits.has_limits_of_size.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 279721707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650566249
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.has_limits_of_size_shrink\">docs#category_theory.limits.has_limits_of_size_shrink</a></p>",
        "id": 279721904,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1650566354
    },
    {
        "content": "<p>Hmm, I'm not sure if that is enough...</p>",
        "id": 279726815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650568766
    },
    {
        "content": "<p>Ooh, it is!</p>",
        "id": 279727216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650568946
    },
    {
        "content": "<p>In other news, <code>Profinite.mono_free'_to_condensed_free_pfpng_induction_aux</code> is done.</p>",
        "id": 279921949,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650713342
    },
    {
        "content": "<p>The decl <code>profinite_to_condensed_unit</code> contains a sorry. But I don't think that decl is used in the rest of the file. Do you expect to use it at some point? (There are also some commented variants all the way at the bottom of the file.)</p>",
        "id": 279931346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650727103
    },
    {
        "content": "<p>Let's leave it for now, but we can probably drop it later.</p>",
        "id": 279936475,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650734474
    },
    {
        "content": "<p>Another mystery: <code>src/free_pfpng/basic.lean</code> has a broken definition now that I filled in two <code>sorry</code>s there.</p>",
        "id": 279936569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650734603
    },
    {
        "content": "<p>I don't understand how that can happen.</p>",
        "id": 279936571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650734610
    },
    {
        "content": "<p>I pushed after filling in the sorry, so now the build is broken <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 279936577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650734623
    },
    {
        "content": "<p>The fix was easy: add <code>.{u u}</code>. Still, it's surprising that filling in two <code>sorry</code>s of type <code>Prop</code> could cause this issue.</p>",
        "id": 279937296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650735734
    },
    {
        "content": "<p>Johan breaking Lean every day a little more <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 279937470,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650736022
    },
    {
        "content": "<p>I just pushed a proof of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">epi_Profinite_to_Condensed_map_of_epi</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">epi</span> <span class=\"o\">(</span><span class=\"n\">Profinite_to_Condensed.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>with a few small sorries. This will be needed for the surjectivity part of 2.1.</p>",
        "id": 279938146,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650736898
    },
    {
        "content": "<p>Fixed some more sorries.</p>",
        "id": 279939342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650738702
    },
    {
        "content": "<p>Only 9 left in that file</p>",
        "id": 279939347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650738717
    },
    {
        "content": "<p>make it 8</p>",
        "id": 279940913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650741079
    },
    {
        "content": "<p>(maybe 7?)</p>",
        "id": 279940916,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650741082
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">free_pfpng</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n</code></pre></div>",
        "id": 279940974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650741139
    },
    {
        "content": "<p>Of which 2 seem to be in quasi-dead code.</p>",
        "id": 279940977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650741149
    },
    {
        "content": "<p>Of course there is also still</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n</code></pre></div>",
        "id": 279940996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650741216
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/2bbe6f6caef14ade0dceed174b6e9dc54af6a468/src/free_pfpng/main.lean#L563\">https://github.com/leanprover-community/lean-liquid/blob/2bbe6f6caef14ade0dceed174b6e9dc54af6a468/src/free_pfpng/main.lean#L563</a><br>\n<span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> that one is a pretty serious sorry.</p>",
        "id": 279941000,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650741233
    },
    {
        "content": "<p>I think the ones in <code>ab.lean</code> should be manageable.</p>",
        "id": 279941122,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650741374
    },
    {
        "content": "<p>I'm working on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Profinite.is_iso_free_to_pfpng</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">is_iso</span> <span class=\"n\">S.free_to_pfpng</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 279941781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650742414
    },
    {
        "content": "<p>Shouldn't be too hard.</p>",
        "id": 279941783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650742418
    },
    {
        "content": "<p>Update: <code>free_pfpng/main.lean</code> now has 13 sorries, but no \"sorried\" data.</p>",
        "id": 280086692,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650901019
    },
    {
        "content": "<p>(Well, except for the sorry in <code>free_pfpng_profinite_iso</code>, but that's somehow unrelated to the crux of Prop 2.1)</p>",
        "id": 280087199,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650901127
    },
    {
        "content": "<p>Here's is a sorry that has zero category theory involved, and is needed for the surjectivity part of Prop 2.1</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Profinite.pmz_to_free_pfpng_epi_aux</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">∥</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∥₊</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">⌊</span><span class=\"n\">r</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">→</span> <span class=\"n\">pmz</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">⌊</span><span class=\"n\">r</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"bp\">⌊</span><span class=\"n\">r</span><span class=\"bp\">⌋₊</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(Here <code>pmz</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1,-1,0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span>.)<br>\nThe lemma is here, in case anyone wants to take a look:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/ea406127dcb3d2ad72e51f9b59b4bc805b1f8f52/src/free_pfpng/main.lean#L910\">https://github.com/leanprover-community/lean-liquid/blob/ea406127dcb3d2ad72e51f9b59b4bc805b1f8f52/src/free_pfpng/main.lean#L910</a></p>",
        "id": 280208843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650979312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Mathlib contains <code>sign_type</code>. Could that be reused in place of <code>pmz</code>?</p>",
        "id": 280211113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650980405
    },
    {
        "content": "<p>Sure, i can switch out <code>pmz</code>.</p>",
        "id": 280211355,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650980535
    },
    {
        "content": "<p>Other question: shall we split the file?</p>",
        "id": 280211377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650980548
    },
    {
        "content": "<p>yes, probably.</p>",
        "id": 280211393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650980556
    },
    {
        "content": "<p>I can do it -- give me about 30 mins</p>",
        "id": 280211416,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650980569
    },
    {
        "content": "<p>All the sorries are at the bottom, and I need to wait quite a while to get rid of orange bars in the first 750 lines</p>",
        "id": 280211424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650980576
    },
    {
        "content": "<p>The other chunky sorry left in this file is this:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/ea406127dcb3d2ad72e51f9b59b4bc805b1f8f52/src/free_pfpng/main.lean#L960\">https://github.com/leanprover-community/lean-liquid/blob/ea406127dcb3d2ad72e51f9b59b4bc805b1f8f52/src/free_pfpng/main.lean#L960</a></p>",
        "id": 280211605,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650980657
    },
    {
        "content": "<p>This looks like a fun <code>sorry</code>.</p>",
        "id": 280211797,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650980739
    },
    {
        "content": "<p>Yeah, it's one of those things that's \"trivial\" mathematically, but is <del>hard</del> nontrivial to formalize.</p>",
        "id": 280211933,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650980791
    },
    {
        "content": "<p>Actually, another question: Do we have a name for <code> (λ (s : T), if (t i = s) then (e i : ℤ) else 0)</code>? It's just <code>finsupp.single</code> but as a plain function.</p>",
        "id": 280212316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650980972
    },
    {
        "content": "<p>Is there <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.single\">docs#function.single</a>? (Ans: no)</p>",
        "id": 280213351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650981437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Do you want to take it on?</p>",
        "id": 280213486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650981485
    },
    {
        "content": "<p>I can try while I'm on the train.</p>",
        "id": 280213587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650981540
    },
    {
        "content": "<p>Okay, I split up the files. The lemma in question can now be found in <code>free_pfpng/epi.lean</code> near the bottom (and it now uses <code>sign_type</code> as well)</p>",
        "id": 280216914,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650982975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Prop.202.2E1/near/280213351\">said</a>:</p>\n<blockquote>\n<p>Is there <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.single\">docs#function.single</a>? (Ans: no)</p>\n</blockquote>\n<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.update\">docs#function.update</a></p>",
        "id": 280219345,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650983911
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.single\">docs#pi.single</a>!</p>",
        "id": 280223456,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650985424
    },
    {
        "content": "<p>Hmm... tasty</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">finset.univ.to_list.map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">sign</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join.inth</span>\n</code></pre></div>",
        "id": 280225302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650986165
    },
    {
        "content": "<p>I would be glad if someone had a better idea.</p>",
        "id": 280225380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650986209
    },
    {
        "content": "<p>What's inth?</p>",
        "id": 280232298,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650989273
    },
    {
        "content": "<p>(Btw: I'm looking at the first two <code>sorry</code>s in <code>epi.lean</code>.)</p>",
        "id": 280232849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650989507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Prop.202.2E1/near/280232298\">said</a>:</p>\n<blockquote>\n<p>What's inth?</p>\n</blockquote>\n<p><code>list.nth</code> but for inhabited types.</p>",
        "id": 280232878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650989521
    },
    {
        "content": "<p>So it returns <code>default</code> when out of bounds.</p>",
        "id": 280232930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650989530
    },
    {
        "content": "<p>Fixed three sorries</p>",
        "id": 280238256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650992012
    },
    {
        "content": "<p>Okay I think I got an idea which makes it trivial</p>",
        "id": 280243966,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650994325
    },
    {
        "content": "<p>Another sorry down</p>",
        "id": 280251339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650997397
    },
    {
        "content": "<p>4 left in this file, 1 is for <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, 2 are in comments, and then the final one at the bottom.</p>",
        "id": 280251633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650997532
    },
    {
        "content": "<p>I'll try to take care of the last one.</p>",
        "id": 280253452,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650998320
    },
    {
        "content": "<p>Cool! I saw you pushed a bunch in the past hours. Looks like Prop 2.1 is almost done!</p>",
        "id": 280308172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651040189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Is your \"idea which makes it trivial\" something that you think you can push soonish?</p>",
        "id": 280308202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651040224
    },
    {
        "content": "<p>Yes! I'm working on it right now.</p>",
        "id": 280309742,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651041837
    },
    {
        "content": "<p>I can tell you already that I further need <code>[nonempty T]</code>.</p>",
        "id": 280311580,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651043451
    },
    {
        "content": "<p>I'm 99% sure that this is fine</p>",
        "id": 280316192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651046662
    },
    {
        "content": "<p>In practice, we have <code>T : discrete_quotient S</code>. So if <code>S</code> is nonempty, then <code>T</code> is nonempty as well.<br>\nThis means that we need to make a case distinction in the proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Profinite.pmz_to_free_pfpng_epi</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">epi</span> <span class=\"o\">(</span><span class=\"n\">S.pmz_to_free_pfpng</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>on whether <code>S</code> is empty or not.</p>",
        "id": 280323780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651051369
    },
    {
        "content": "<p>Hmm, that might actually be an issues for empty <code>S</code> and <code>j \\ge 1</code>. We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Profinite.pmz_to_free_pfpng</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S.pmz</span> <span class=\"bp\">⌊</span><span class=\"n\">j</span><span class=\"bp\">⌋₊</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">ProFiltPseuNormGrp₁.level.obj</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">S.free_pfpng</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>which is in other words the map</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>S</mi><mo>×</mo><mo stretchy=\"false\">{</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo stretchy=\"false\">⌊</mo><mi>j</mi><mo stretchy=\"false\">⌋</mo></mrow></msup><mo>⟶</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">(S \\times \\{-1,0,1\\})^{\\lfloor j \\rfloor} \\longrightarrow \\{0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">⌊</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose mtight\">⌋</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span></span></p>\n<p>for all <code>j</code>.</p>",
        "id": 280324271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651051709
    },
    {
        "content": "<p>If <code>S</code> is empty, then <code>S.free_pfpng</code> is the trivial group, and level <code>j</code> of that will always be the singleton <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 280324325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651051749
    },
    {
        "content": "<p>But for <code>j \\ge 1</code> the LHS is empty, so there cannot be a surjective map.</p>",
        "id": 280324370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651051783
    },
    {
        "content": "<p>So we probably have to do the case split on whether <code>S</code> is empty in another place of the proof.</p>",
        "id": 280324555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651051896
    },
    {
        "content": "<p>Yeah, exactly. The sorry you ask for is straight up wrong when <code>T</code> is empty, because there's no map <code>ℕ → T</code>.</p>",
        "id": 280324717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651051979
    },
    {
        "content": "<p>Sorry killed</p>",
        "id": 280325718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651052528
    },
    {
        "content": "<p>I didn't have cache so I don't know what I broke nor whether the <code>noncomputable_theory</code> introduced decidability issues that I didn't have in local.</p>",
        "id": 280325835,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651052615
    },
    {
        "content": "<p>Great! Thanks a lot.</p>",
        "id": 280326066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651052749
    },
    {
        "content": "<p>The trick was to generalize <code>fintype T</code> to <code>s : finset T</code> and then induct.</p>",
        "id": 280326237,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651052846
    },
    {
        "content": "<p>I just want to remark that this means we are now very very close to the point where all that's left is \"just some homological algebra\". All the condensed stuff will be done. Once Filippo and Kevin finish the 6.9/7.2 stuff, all the pseudo-normed-group stuff will also be done.<br>\nThen only the BD lemma remains, and a bunch of glue.</p>",
        "id": 280339626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651061027
    },
    {
        "content": "<p>Oops! Yeah, I should have distinguished the (non)empty case.</p>\n<p>In the empty case, <code>S.free_pfpng</code> and its condensed variants are trivial, and we already know that the comparison map is a mono, so that should be enough to show it's an iso.</p>",
        "id": 280341743,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651062220
    },
    {
        "content": "<p>So I think you may as well assume that <code>S</code> is nonempty (hence <code>T</code> is nonempty) in the whole file <code>free_pfpng/epi.lean</code> and do the case split in <code>free_pfpng/main.lean</code>.</p>",
        "id": 280342417,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651062571
    },
    {
        "content": "<p>I can do that when I get to my office in a couple of hours, if it's not taken care of before then ;)</p>",
        "id": 280342586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651062643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> did you change the type of the lemma in question?</p>",
        "id": 280353544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651067956
    },
    {
        "content": "<p>(except for the nonempty assumption, of course)</p>",
        "id": 280353693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651068003
    },
    {
        "content": "<p>I believe not, except for adding <code>decidable_eq T</code> and <code>nonempty T</code>.</p>",
        "id": 280356061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651068955
    },
    {
        "content": "<p>It's okay, I fixed it.</p>",
        "id": 280356202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651068997
    },
    {
        "content": "<p>You changed the functions from having domain <code>fin _</code> to <code>N</code>, the sum to use <code>finset.range</code>, and the conclusion to say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>t</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\forall t, ...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">...</span></span></span></span> instead of an equality of functions. It was just a few lines to fix.</p>",
        "id": 280356306,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651069052
    },
    {
        "content": "<p>Ah yeah, sorry I forgot</p>",
        "id": 280356349,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651069075
    },
    {
        "content": "<p>Okay, I took care of the empty case as well.</p>",
        "id": 280359621,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651070455
    },
    {
        "content": "<p>So now <code>mono.lean</code>, <code>epi.lean</code> are sorry-free, and <code>main.lean</code> is sorry-free except for some naturality proof and some isomorphism which should be easy to construct. There are a few sorries left in <code>condensed/coproducts</code> and <code>condensed/ab</code></p>",
        "id": 280359773,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651070528
    },
    {
        "content": "<p>Amazing!</p>",
        "id": 280362653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651071809
    },
    {
        "content": "<p>Do you want to throw away the two commented <code>sorry</code>s in epi.lean?</p>",
        "id": 280362766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651071849
    },
    {
        "content": "<p>Or should they stay around for something?</p>",
        "id": 280362792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651071863
    },
    {
        "content": "<p>Ah, those were just some failed experiment. I removed them</p>",
        "id": 280363768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651072255
    },
    {
        "content": "<p>No more sorries in <code>coproducts</code>.</p>",
        "id": 280380953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651079389
    },
    {
        "content": "<p>Now <code>condensed/ab.lean</code> is sorry-free as well</p>",
        "id": 280405994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651091004
    },
    {
        "content": "<p>So Prop 2.1 is (more-or-less) sorry-free</p>",
        "id": 280406072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651091047
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">free_pfpng_profinite_iso</span>\n<span class=\"c1\">-- prints</span>\n<span class=\"n\">propext</span>\n<span class=\"n\">quot.sound</span>\n<span class=\"n\">classical.choice</span>\n</code></pre></div>",
        "id": 280451084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651127767
    },
    {
        "content": "<p>Adam, that was a heroic effort! You pulled it off in a couple of days. Fantastic!</p>",
        "id": 280451239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651127897
    },
    {
        "content": "<p>I just updated the blueprint. Should have another green oval in a couple of minutes.</p>",
        "id": 280451243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651127911
    },
    {
        "content": "<p>It's green: <a href=\"https://leanprover-community.github.io/liquid/dep_graph_section_2.html\">https://leanprover-community.github.io/liquid/dep_graph_section_2.html</a></p>",
        "id": 280452547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651128867
    },
    {
        "content": "<p>I was chatting with Johan a week ago, asking him about what's left to do. My guess was that Proposition 2.1 would be the hardest remaining bit! So I think you're really closing in on the finish line here.</p>",
        "id": 280466054,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1651137889
    },
    {
        "content": "<p>(Congratulations Adam!!)</p>",
        "id": 280466079,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1651137903
    },
    {
        "content": "<p>I should add one more point regarding Prop 2.1 -- I think it's a fairly important milestone for our formalization effort, since its the key result which ties together the condensed side with the more concrete <code>CompHausFiltPseuNormGroup</code> side.</p>",
        "id": 280504180,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651157039
    },
    {
        "content": "<p>Yes, it is a nontrivial computation about condensed sets. Maybe the only nontrivial one we need.</p>",
        "id": 280505890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651157691
    }
]