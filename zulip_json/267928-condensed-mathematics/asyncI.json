[
    {
        "content": "<p>I've added a file <code>hacks_and_tricks.asyncI</code> with the help of <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lean</span> <span class=\"c1\">--make src/for_mathlib/derived/K_projective.lean</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">1</span><span class=\"n\">m25.932s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">1</span><span class=\"n\">m36.875s</span>\n<span class=\"n\">sys</span>     <span class=\"mi\">0</span><span class=\"n\">m3.854s</span>\n<span class=\"c1\">------</span>\n<span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lean</span> <span class=\"c1\">--make src/for_mathlib/derived/K_projective_async.lean</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">0</span><span class=\"n\">m59.830s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">1</span><span class=\"n\">m28.652s</span>\n<span class=\"n\">sys</span>     <span class=\"mi\">0</span><span class=\"n\">m3.774s</span>\n</code></pre></div>",
        "id": 276312093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648030942
    },
    {
        "content": "<p>The idea is that you can wrap subgoals <strong>that do not depend on any metavariables</strong> with <code>asyncI</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">asyncI</span>\n  <span class=\"o\">{</span> <span class=\"n\">my_sub_proof</span><span class=\"o\">,</span>\n    <span class=\"n\">foobar</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 276312193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648031000
    },
    {
        "content": "<p>And then Lean will check those subgoals in parallel</p>",
        "id": 276312211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648031013
    },
    {
        "content": "<p>It also works for proof obligations in records, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ext0</span> <span class=\"o\">:</span> <span class=\"bp\">ùí¶·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"bp\">ùí¶</span> <span class=\"bp\">‚•§</span> <span class=\"n\">Ab</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">preadditive_yoneda.flip.obj</span> <span class=\"o\">(</span><span class=\"n\">opposite.op</span> <span class=\"bp\">$</span> <span class=\"n\">X.unop.replace</span><span class=\"o\">),</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X‚ÇÅ</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">preadditive_yoneda.flip.map</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">X‚ÇÇ.unop.œÄ</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span> <span class=\"n\">X‚ÇÅ.unop.œÄ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">asyncI</span> <span class=\"o\">{</span> <span class=\"c1\">-- ASYNC!!</span>\n    <span class=\"n\">intros</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">Y</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">preadditive_yoneda</span><span class=\"o\">,</span> <span class=\"n\">preadditive_yoneda_obj</span><span class=\"o\">],</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category.comp_id</span><span class=\"o\">,</span> <span class=\"n\">id_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">convert</span> <span class=\"n\">category.id_comp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lift_unique</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">asyncI</span> <span class=\"o\">{</span> <span class=\"c1\">-- ASYNC!!</span>\n    <span class=\"n\">intros</span> <span class=\"n\">X‚ÇÅ</span> <span class=\"n\">X‚ÇÇ</span> <span class=\"n\">X‚ÇÉ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">Y</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.to_add_monoid_hom_coe</span><span class=\"o\">,</span>\n      <span class=\"n\">preadditive_yoneda_obj_map_apply</span><span class=\"o\">,</span> <span class=\"n\">quiver.hom.unop_op</span><span class=\"o\">],</span>\n    <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span> <span class=\"n\">_</span> <span class=\"bp\">‚â´</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">category.assoc</span> <span class=\"o\">},</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lift_unique</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 276312321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648031064
    },
    {
        "content": "<p>So far, I've only used this in <code>K_projective.lean</code>. But I suppose there are plenty files that can benefit from this.</p>",
        "id": 276312383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648031101
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/706\">lean#706</a> is fixing Lean so that <code>async</code> works well with the instance cache. Once that PR lands, and LTE moves to the next version of Lean, we can drop the hacks file, and replace all <code>asyncI</code> with <code>async</code>.</p>",
        "id": 276312456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648031149
    },
    {
        "content": "<p>I haven't tested, but I think we can now write <code>asyncI { slow subproof }</code> instead of using the <code>sorry { slow subproof }</code> trick. And then goals below it should still be responsive quickly.</p>",
        "id": 276313126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648031553
    },
    {
        "content": "<p>Is that crazy to imagine that this could be done automatically everywhere? (I mean, when you open braces, Lean checks whether there are metavariables in the current goal, and if there are none it runs the block in an async way)?</p>",
        "id": 276329221,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1648040534
    },
    {
        "content": "<p>Probably not for Lean 3. I imagine it would take quite some work to implement that.<br>\ncc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 276332003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648041911
    },
    {
        "content": "<p>afaik, Lean 4 already does something like that</p>",
        "id": 276332051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648041932
    },
    {
        "content": "<p>No metavariables in the current goal is not sufficient, right? I mean the metavariable could appear in <em>other</em> goals, so resolving it could affect your other proof branches nondeterministically</p>",
        "id": 276332331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648042048
    },
    {
        "content": "<p>plus any tactic can call <code>result</code> and watch it change in real time</p>",
        "id": 276332407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648042080
    },
    {
        "content": "<p>considering that this is a rather fundamental change to goal management, I am inclined to agree with Johan and say \"unlikely in lean 3, possible (but still unlikely) in lean 4\"</p>",
        "id": 276332609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648042156
    },
    {
        "content": "<p>well, it's probably possible to do something like this in lean 3 if you don't mind random unlikely heisenbugs</p>",
        "id": 276332923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648042271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> But if you only apply this to metavariables that are <code>Prop</code>s, then this \"affect your other proof branches nondeterministically\" shouldn't cause problems right?</p>",
        "id": 276332938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648042277
    },
    {
        "content": "<p>the problem is a lot more fundamental than that; what if you check that a metavariable is assigned, see that it is not and make a branching decision based on that (while another thread assigns it behind you), and then assign it and boom you get a conflict. Assuming that the local context updates are being done in a threadsafe way it's not undefined behavior but it could still lead to nondeterministic failure</p>",
        "id": 276333250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648042412
    },
    {
        "content": "<p>Sure, but realistically, why would you branch on whether a certain proof obligation has been solved?</p>",
        "id": 276333404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648042463
    },
    {
        "content": "<p>because it was a goal and you were asked to solve the first goal</p>",
        "id": 276333459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648042484
    },
    {
        "content": "<p>and lean cleans up assigned metavariables in the goal list</p>",
        "id": 276333502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648042499
    },
    {
        "content": "<p>I think that there is a theoretical model for goal management / ATP where this is not a problem.</p>",
        "id": 276333540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648042514
    },
    {
        "content": "<p>I agree, and I also think this model is not lean 3 or even lean 4</p>",
        "id": 276333573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648042530
    },
    {
        "content": "<p>it's probably closer to the HOL model where the goals are tracked through the type system</p>",
        "id": 276333669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648042563
    },
    {
        "content": "<p>One approach that could work in the lean 3 model (but is still a lot of work to implement) is that we launch a task at any focus block regardless of any dependencies, and this immediately assigns the metavariable with a <code>task&lt;expr&gt;</code> macro which is forced to a value (i.e. made serial again) if any downstream tasks need to ask what expression was assigned there</p>",
        "id": 276335005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648043123
    }
]