[
    {
        "content": "<p>We will need a way to go back and forth between abelian group objects in <code>CondensedType</code> and <code>Condensed Ab</code>.<br>\nI made some initial definitions along these lines here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/abelian_group_object.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/abelian_group_object.lean</a></p>\n<p>There are a few sorry's about proving certain presheaves are sheaves. <br>\nI think it's important to use explicit products and terminal objects here, so we can feed them into the monoidal category constructor and not have to deal with the trouble of going back and forth between the category theoretic product in the category <code>Type*</code> and the usual type-theoretic product.</p>",
        "id": 252671200,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631211536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> have you made any progress in this direction? I didn't find anything in the repo, but I may have missed it.</p>",
        "id": 252671568,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631211673
    },
    {
        "content": "<p>Sorry, haven't gotten around to it yet <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 252687235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631218240
    },
    {
        "content": "<p>No worries. Let me know what you think about the code in the linked file.</p>",
        "id": 252687352,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631218298
    },
    {
        "content": "<p>I think it's a reasonable approach.</p>",
        "id": 252687363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631218302
    },
    {
        "content": "<p>I just read through it. I think it's a pretty smooth approach. LGTM</p>",
        "id": 252687773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631218458
    },
    {
        "content": "<p>Some brave soul might try to prove that for <code>F : SheafOfTypes.Ab T</code> and <code>U : C\\op</code>, the type <code>F.val.obj U</code> has an abelian group structure.</p>",
        "id": 252687963,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631218534
    },
    {
        "content": "<p>And for the restriction maps associated to the sheaf, I'm now a bit sad we don't have <code>is_add_monoid_hom</code>...</p>",
        "id": 252688145,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631218589
    },
    {
        "content": "<p>We do have it, right? It's in <code>deprecated/</code> and it's no longer a <code>class</code>, and at some point in the future it will move back into mathlib proper.</p>",
        "id": 252688393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631218697
    },
    {
        "content": "<p>Will it? I understood Kevin figured out it wasn't worth it.</p>",
        "id": 252688528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631218750
    },
    {
        "content": "<p>Oh, I thought Kevin got rid of those things. I'm probably wrong.</p>",
        "id": 252688608,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631218787
    },
    {
        "content": "<p>I think it's exactly \"edge\" cases like this why we should keep them around.</p>",
        "id": 252689664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631219211
    },
    {
        "content": "<p>But since they are now structures instead of classes, they are probably more useful, because more explicit. And it gives us dot-notation, etc...</p>",
        "id": 252689767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631219263
    },
    {
        "content": "<p>When I started on that refactor I was pretty convinced that there would be occasional cases when the structures would be useful. As time went on I became much less convinced, but I'm open to being convinced again!</p>",
        "id": 252694233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631220991
    },
    {
        "content": "<p>For example I'm pretty sure that we could remove all the <code>import deprecated.*</code> from mathlib, if someone could be bothered. I just got tired of it, I pushed the imports much further down the tree but couldn't quite face finishing the job.</p>",
        "id": 252694363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631221051
    },
    {
        "content": "<p>Quick status update: <em>pre</em>sheaves taking values in an abelian category are abelian<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/4095445272684705da80405a9df74060bc4bcf0f/src/for_mathlib/abelian_sheaves/functor_category.lean#L240\">https://github.com/leanprover-community/lean-liquid/blob/4095445272684705da80405a9df74060bc4bcf0f/src/for_mathlib/abelian_sheaves/functor_category.lean#L240</a></p>\n<p>The case of sheaves is now a little closer.</p>",
        "id": 261966671,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637258874
    },
    {
        "content": "<p>The only thing you now need is the isomorphism theorem in the case of sheaves, right?</p>",
        "id": 261968908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637259983
    },
    {
        "content": "<p>All the rest is done, if I understand correctly</p>",
        "id": 261968930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637259995
    },
    {
        "content": "<p>well, the cokernels in sheaves involved sheafification, so it's a little more complicated to obtain the isomorphism theorem for sheaves.</p>",
        "id": 261969085,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637260070
    },
    {
        "content": "<p>Sure. But once you have that, you would be done, right?</p>",
        "id": 261971019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637260946
    },
    {
        "content": "<p>I think so... I'm trying now.</p>",
        "id": 261971095,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637260984
    },
    {
        "content": "<p>We'll find out whether there are other hangups soon enough</p>",
        "id": 261971124,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637261006
    },
    {
        "content": "<p>Okay, so there is an actual hangup -- we need the fact that sheafification is left exact (in the sense that it preserves finite limits). This follows from the fact that finite limits commute with filtered colimits in <code>Type*</code> (and hence any of the concrete categories we have around in the context of sheafification), but it will require some more serious work to actually get this result.</p>",
        "id": 262027856,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637298480
    },
    {
        "content": "<p>Aah, bummer. Good catch.</p>",
        "id": 262028572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637299352
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/limits/filtered_colimit_commutes_finite_limit.html#top\">https://leanprover-community.github.io/mathlib_docs/category_theory/limits/filtered_colimit_commutes_finite_limit.html#top</a></p>",
        "id": 262031935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637303481
    },
    {
        "content": "<p>(Perhaps I even had this application in mind, I forget. :-)</p>",
        "id": 262031995,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637303536
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">presheaf_to_Sheaf_preserves_finite_limits</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n  <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fin_category</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_limits_of_shape</span> <span class=\"n\">K</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">preserves_limits_of_shape</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">presheaf_to_Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is now sorry free... but it's a mess...</p>",
        "id": 262373852,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637613205
    },
    {
        "content": "<p>And even more good news... the following are both sorry free as well!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">abelian</span> <span class=\"o\">:</span> <span class=\"n\">abelian</span> <span class=\"o\">(</span><span class=\"n\">Sheaf</span> <span class=\"n\">J</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">abelian_of_coim_to_im</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">η</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">abelian</span> <span class=\"o\">(</span><span class=\"n\">Condensed</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">Condensed</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- I don't know why this is needed either...</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">category_theory.Sheaf.abelian.</span><span class=\"o\">{(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span>\n    <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">proetale_topology</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's still very messy... I hope I'll have some time soon to get this in better shape for mathlib.</p>",
        "id": 262393159,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637624401
    },
    {
        "content": "<p>Did you do that stuff I was working very slowly on? The finite products iff binary and 0 product thing?</p>",
        "id": 262393922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637624929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> no I didn't. This abelian category instance is for sheaves on an arbitrary site taking values in any (sufficiently concrete, whatever that means) abelian category</p>",
        "id": 262394151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637625060
    },
    {
        "content": "<p>I did finite products -&gt; empty product and am about half way through finite products -&gt; binary products. I've been held up by a time-critical task :-(</p>",
        "id": 262394155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637625064
    },
    {
        "content": "<p>We will still need the finite product stuff to see that sheaves on profinite can be computed easily using exteremally dosconnecteds</p>",
        "id": 262394188,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637625086
    },
    {
        "content": "<p>Awesome! Thanks a lot <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span></p>",
        "id": 262411009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637641039
    },
    {
        "content": "<p>That's one more milestone out of the way.</p>",
        "id": 262411025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637641065
    },
    {
        "content": "<p>I worked on the adjunction between condensed sets and condensed abelian groups today.</p>\n<p>I got </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ab_to_Type_adjunction</span> <span class=\"o\">:</span> <span class=\"n\">Type_to_Ab</span> <span class=\"bp\">⊣</span> <span class=\"n\">Ab_to_Type</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Type_to_Ab</span> <span class=\"o\">:</span> <span class=\"n\">CondensedSet</span> <span class=\"bp\">⥤</span> <span class=\"n\">Condensed</span> <span class=\"n\">Ab</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ab_to_Type</span> <span class=\"o\">:</span> <span class=\"n\">Condensed</span> <span class=\"n\">Ab</span> <span class=\"bp\">⥤</span> <span class=\"n\">CondensedSet</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>toward the bottom of <code>condensed/adjunctions.lean</code>.</p>\n<p>The only sorrys remaining in the proof of this adjunction are in the file <code>for_mathlib/sheafify_forget.lean</code> about the compatibility of the forgetful functor and sheafification. If anyone wants to practice their lean category theory chops, please feel free to take a look at that file!</p>",
        "id": 262750182,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637887005
    },
    {
        "content": "<p>The sheafification compatibility is here:  <a href=\"https://github.com/leanprover-community/mathlib/issues/10510\">#10510</a></p>",
        "id": 262842237,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637969445
    },
    {
        "content": "<p>Great, thanks a lot!</p>",
        "id": 262858729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637996530
    },
    {
        "content": "<p>Here is a PR for the adjunction in general:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/issues/10541\">#10541</a></p>",
        "id": 263062062,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638216843
    },
    {
        "content": "<p>I will review it later tonight. I'm on a call now.</p>",
        "id": 263062228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638216926
    },
    {
        "content": "<p>No rush</p>",
        "id": 263062258,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638216945
    },
    {
        "content": "<p>I left a review of the PR it depends upon</p>",
        "id": 263070861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638221650
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/10541\">#10541</a> <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 263428096,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638447527
    },
    {
        "content": "<p>Thanks for the reminder. It's on the queue now <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"></p>",
        "id": 263429472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638448428
    },
    {
        "content": "<p>Mecri!</p>",
        "id": 263430156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638448787
    },
    {
        "content": "<p>Do we / will we know that sheafification preserves finite limits?</p>",
        "id": 264612427,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639299637
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">sheafification_preserves_finite_limits</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n  <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fin_category</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_limits_of_shape</span> <span class=\"n\">K</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">preserves_limits_of_shape</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">sheafification</span> <span class=\"n\">J</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">delta</span> <span class=\"n\">sheafification</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264612917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639300490
    },
    {
        "content": "<p>In <code>src/for_mathlib/abelian_sheaves/left_exact.lean</code> of the LTE repo</p>",
        "id": 264612923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639300507
    },
    {
        "content": "<p>Kudos to Adam</p>",
        "id": 264612926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639300512
    },
    {
        "content": "<p>I now notice that this is just above <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nI guess pullbacks of sheaves aren't as far as I thought.</p>",
        "id": 264613148,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639300921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> the fact that <code>Sheaf_to_presheaf</code> creates limits is already in mathlib, and that's enough to obtain limits (in particular, pullbacks) in <code> Sheaf J A</code>. Is this what you're looking for?</p>",
        "id": 264624180,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639316655
    },
    {
        "content": "<p>By pullback I meant the inverse image functor. Not the categorical one.<br>\nI'm looking for the left-exactness of the pullback functor, of which the left-exact-ness of sheafification is the final piece missing.<br>\nNot that I'll need this result right now though. There's still plenty of things to push into mathlib before I could use it to do more stuff.</p>",
        "id": 264624462,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639317086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/Abelian.20sheaves/near/264612427\">said</a>:</p>\n<blockquote>\n<p>Do we / will we know that sheafification preserves finite limits?</p>\n</blockquote>\n<p>Thanks Johan for reviewing  <a href=\"https://github.com/leanprover-community/mathlib/pull/11252\">#11252</a> ! <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> this will be in mathlib in a couple of hours ;)</p>",
        "id": 266937967,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641390996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Did you also do the adjunction between sheaves of types (aka sets) and sheaves of {abelian groups, R-modules, etc}, that forgets in one direction, and takes the free sheaf in the other direction?</p>",
        "id": 267455080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641829444
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/185f86120c3c78e6bd276bac89dd9f977ed328c9/src/condensed/adjunctions.lean#L53\">https://github.com/leanprover-community/lean-liquid/blob/185f86120c3c78e6bd276bac89dd9f977ed328c9/src/condensed/adjunctions.lean#L53</a></p>",
        "id": 267455332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641829539
    },
    {
        "content": "<p>Or in general <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.Sheaf.adjunction_to_types\">docs#category_theory.Sheaf.adjunction_to_types</a></p>",
        "id": 267455641,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641829653
    },
    {
        "content": "<p>If you want to consider <code>Sheaf J Type*</code> instead of <code>SheafOfTypes J</code>, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.Sheaf.adjunction\">docs#category_theory.Sheaf.adjunction</a></p>",
        "id": 267455896,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641829738
    }
]