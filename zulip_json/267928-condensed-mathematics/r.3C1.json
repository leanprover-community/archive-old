[
    {
        "content": "<p>This is hopefully an easy one. Right now in <code>invpoly.basic</code> we have <code>instance : fintype { F : ℤ[T⁻¹] S | ∥F∥₊ ≤ c} := sorry</code> and this <code>sorry</code> is I think false in general if r&gt;=1. If I insert an r&lt;1 hypothesis then various later theorems in the file break because they don't have it but rely on finiteness for a compactness assertion. I've pushed a fix to the <code>is_r_lt_one_assumption</code> branch but didn't want to push to master immediately in case we need some of these results more generally. Can someone take a look over it and/or merge the branch to master? <a href=\"https://github.com/leanprover-community/lean-liquid/compare/is_r_lt_one_assumption_OK\">Here's the diff</a>.</p>",
        "id": 277520447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648894461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Assuming <code>&lt; 1</code> is fine. This will always be satisfied in the final application.</p>",
        "id": 277524832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648900124
    },
    {
        "content": "<p>I pushed a commit fixing up another file</p>",
        "id": 277524922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648900263
    },
    {
        "content": "<p>Hmm. Now <code>src/Lbar/ses.lean</code> is broken, and this was code which worked before. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">to_laurent_measures_nat_trans</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">invpoly.fintype_functor</span> <span class=\"n\">r'</span> <span class=\"bp\">⟶</span> <span class=\"n\">laurent_measures.fintype_functor</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">to_laurent_measures_hom</span> <span class=\"n\">r'</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>-&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">app'</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span><span class=\"o\">),</span> <span class=\"n\">to_laurent_measures_hom</span> <span class=\"n\">r'</span> <span class=\"n\">S</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span><span class=\"o\">),</span> <span class=\"n\">comphaus_filtered_pseudo_normed_group_with_Tinv_hom</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">invpoly</span> <span class=\"n\">r'</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">laurent_measures</span> <span class=\"n\">r'</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fintype_functor</span> <span class=\"n\">r'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">laurent_measures.fintype_functor</span> <span class=\"n\">r'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>Can you work out what's going on from this?</p>",
        "id": 277530975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648907673
    },
    {
        "content": "<p>That's werid... those look like they should be defeq</p>",
        "id": 277531168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648907978
    },
    {
        "content": "<p>Isn't this supposed to be a strict morphism?</p>",
        "id": 277531388,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648908199
    },
    {
        "content": "<p>Oh, nevermind, the homs with Tinv are already strict</p>",
        "id": 277531455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648908301
    },
    {
        "content": "<p>They were defeq, things still compile fine on master. I've just pushed some simple boundedness results, enough to make the <code>fintype</code> instance easy now, but I'm reluctant to start on it if it's going to cause breakages I can't fix :-)</p>",
        "id": 277533030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648910288
    },
    {
        "content": "<p>I'm going to take a short break and then come back to it. I have (extremely mild) Covid BTW so I have to stay at home today :D</p>",
        "id": 277533299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648910559
    },
    {
        "content": "<p>Ok so it was my own error; I hadn't pulled Johan's changes. I think I'm back on track.</p>",
        "id": 277535787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648913419
    },
    {
        "content": "<p>OK so both master and this <code>is_r_lt_one_assumption_OK</code> branch are compiling; the diff is <a href=\"https://github.com/leanprover-community/lean-liquid/compare/is_r_lt_one_assumption_OK\">here</a>; I have added several r&lt;1 assumptions which weren't there before and I am not confident enough to say whether this is OK. If someone wants to give me the goahead then I can merge this to master; in the mean time I'll prove the finiteness result under the r&lt;1 assumption.</p>",
        "id": 277536090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648913872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> feel free to merge it into master now that it compiles</p>",
        "id": 277536779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648914738
    },
    {
        "content": "<p>OK -- finiteness is now done for r&lt;1 and <code>invpoly.basic</code> is sorry-free! I'll look for another project now.</p>",
        "id": 277539764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648918376
    }
]