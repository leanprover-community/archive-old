[
    {
        "content": "<p>When (and HOW) should we attempt a mathlib bump?</p>",
        "id": 289825875,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657974531
    },
    {
        "content": "<p>Is there anything smarter than creating a branch and start working on it?</p>",
        "id": 289826026,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657974731
    },
    {
        "content": "<p>A related question: let's say someone does actually do this. Then you have the same question next month, the month after, the month after that,... . When I realised we were in the analogous situation with perfectoid I just told Patrick that I was not going to spend the rest of my life bumping because as far as I was concerned we'd done what we'd set out to do. IIRC we were in exactly the same situation with perfectoid -- started on par, got behind, never caught up.</p>",
        "id": 289826027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657974732
    },
    {
        "content": "<p>I think once the project is stable, keeping up with the mathlib bumps would be much easier</p>",
        "id": 289826052,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657974801
    },
    {
        "content": "<p>We got it working on 3.4.1 and then just left it. However Patrick still managed to port all the stuff he'd written to mathlib</p>",
        "id": 289826062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657974835
    },
    {
        "content": "<p>One option is to do it in stages. I.e. bump to a certain past mathlib commit, and repeat until we reach mathlib master</p>",
        "id": 289826105,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657974853
    },
    {
        "content": "<p>But let's be honest: we will not keep LTE updated with mathlib <em>forever</em>, no?</p>",
        "id": 289826106,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657974854
    },
    {
        "content": "<p>Right that was my position with perfectoid</p>",
        "id": 289826110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657974869
    },
    {
        "content": "<p>I didn't want it to become an albatross.</p>",
        "id": 289826114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657974886
    },
    {
        "content": "<p>We should be serious with <code>for_mathlib</code> but a certain point it  will stabilise to some mathlib commit and that will be it.</p>",
        "id": 289826116,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657974897
    },
    {
        "content": "<p>No of course not, but it might make sense to bump before we seriously start emptying the for_mathlib folder</p>",
        "id": 289826122,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657974904
    },
    {
        "content": "<p>Oh, sure, this I certainly agree 100% with.</p>",
        "id": 289826129,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657974915
    },
    {
        "content": "<p>I was about to suggest to do it in several steps, this is maybe the easiest thing to to.</p>",
        "id": 289826135,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657974949
    },
    {
        "content": "<p>We are at commit <code>4977fd9da637b6e0a805c1cf460c3a6b8df3f556</code>, how old is it?</p>",
        "id": 289826142,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657974961
    },
    {
        "content": "<p>Pretty old</p>",
        "id": 289826193,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657975018
    },
    {
        "content": "<p>In mathlib terms at least</p>",
        "id": 289826203,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657975025
    },
    {
        "content": "<p>But what about the big homological algebra issue? That was the reason we stopped bumping, I think.</p>",
        "id": 289826220,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657975065
    },
    {
        "content": "<p>There were a few changes in category theory in mathlib that would take a lot of work to integrate in lte. We should probably try to isolate those commits</p>",
        "id": 289826271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657975094
    },
    {
        "content": "<p>May 12th, not that old</p>",
        "id": 289826275,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657975104
    },
    {
        "content": "<p>I am trying to bump to <code>a74298d8e95f8e203ebb906d35f89dd7ce464d74</code>, three days later, to see what happens.</p>",
        "id": 289826911,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657976062
    },
    {
        "content": "<p>Here's the diff between those two commits<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/4977fd9da637b6e0a805c1cf460c3a6b8df3f556...a74298d8e95f8e203ebb906d35f89dd7ce464d74\">https://github.com/leanprover-community/mathlib/compare/4977fd9da637b6e0a805c1cf460c3a6b8df3f556...a74298d8e95f8e203ebb906d35f89dd7ce464d74</a></p>",
        "id": 289827089,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657976362
    },
    {
        "content": "<p>in case it helps!</p>",
        "id": 289827090,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657976366
    },
    {
        "content": "<p>I've created a branch <code>minibump</code>, but I am already stuck with errors related to ordinals in <code>for_mathlib/pid.lean</code>. They are caused by <a href=\"https://github.com/leanprover-community/mathlib/pull/14074\">#14074</a>, I will ask for some help to the author of that PR.</p>",
        "id": 289827819,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657977425
    },
    {
        "content": "<p>Maybe also <span class=\"user-mention\" data-user-id=\"210057\">@Fabian Glöckle</span> can have a look? Everything is caused by the new <code>ordinal.enum_iso</code>, that replaced <code>ordinal.typein_iso</code>: it's in the reverse direction, so adding <code>symm</code> solves certain problems, but not all of them.</p>",
        "id": 289829186,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657979440
    },
    {
        "content": "<p>The only problems left in the minibump are those related to <code>ordinal.enum_iso</code>. I don't know anything about ordinals in mathlib, so I didn't spend too much time on it, but it shouldn't be very hard.</p>",
        "id": 289834411,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657986957
    },
    {
        "content": "<p>Is that on the branch? I can fix the ordinal stuff.</p>",
        "id": 289834747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657987358
    },
    {
        "content": "<p>Yes, in the <code>minibump</code> branch</p>",
        "id": 289834755,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657987379
    },
    {
        "content": "<p>The file <code>for_mathlib/pid.lean</code> has now three sorry.</p>",
        "id": 289834766,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657987396
    },
    {
        "content": "<p>Note that I modified line 661 from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">ords</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">basis.reindex</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">ordinal.typein_iso</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"n\">ords</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">basis.reindex</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">ordinal.enum_iso</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.to_equiv</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>since <code>ordinal.typein_iso</code> was removed in <a href=\"https://github.com/leanprover-community/mathlib/pull/14074\">#14074</a>, but maybe there is a better modification. In any case thanks!</p>",
        "id": 289834868,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657987541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span>  I have subscribed you to this stream so you can see if Yael needs help, but feel free to unsubscribe if you want.</p>",
        "id": 289835333,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657988207
    },
    {
        "content": "<p>Alright. I doubt that this change will cause much trouble - flipping equivalences isn't particularly destructive. Do tell me if anything goes awry.</p>",
        "id": 289835650,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657988713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289826106\">said</a>:</p>\n<blockquote>\n<p>But let's be honest: we will not keep LTE updated with mathlib <em>forever</em>, no?</p>\n</blockquote>\n<p>Is there any reason why not the whole of LTE is merged into mathlib, but only the <code>for_mathlib</code> folder? If the whole is merged, then it <em>is</em> forever maintained. I mean, if later someone wants to formalize a result that depends on LTE, then that person is stuck with an old version of lean and mathlib?</p>",
        "id": 289840687,
        "sender_full_name": "Robert Brijder",
        "timestamp": 1657995922
    },
    {
        "content": "<p>how big is LTE?</p>",
        "id": 289840754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1657995965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392126\">Ben Toner</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/blogpost/near/289827430\">said</a>:</p>\n<blockquote>\n<p>Number of lines: 90967<br>\nNumber of nonblank lines: 78702<br>\nNumber of nonblank lines excluding comments and docstrings: 72661</p>\n</blockquote>",
        "id": 289840766,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657995984
    },
    {
        "content": "<p>that is quite  a number of lines</p>",
        "id": 289840777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1657996005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289840777\">said</a>:</p>\n<blockquote>\n<p>that is quite  a number of lines</p>\n</blockquote>\n<p>So, mathlib is not supposed to grow so much?</p>",
        "id": 289840795,
        "sender_full_name": "Robert Brijder",
        "timestamp": 1657996037
    },
    {
        "content": "<p>Robert, I have been working on PRing my last summer internship for the past year. It was 5k lines. Now there are 2k lines left to be PRed.</p>",
        "id": 289840798,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657996056
    },
    {
        "content": "<p>my contributions to mathlib are only (+24,882 lines, -7,737 lines) in comparison <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 289840809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1657996071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269768\">Robert Brijder</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289840687\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289826106\">said</a>:</p>\n<blockquote>\n<p>But let's be honest: we will not keep LTE updated with mathlib <em>forever</em>, no?</p>\n</blockquote>\n<p>Is there any reason why not the whole of LTE is merged into mathlib, but only the <code>for_mathlib</code> folder? If the whole is merged, then it <em>is</em> forever maintained. I mean, if later someone wants to formalize a result that depends on LTE, then that person is stuck with an old version of lean and mathlib?</p>\n</blockquote>\n<p>Well, you raise a good point. I was saying this thinking that LTE was not supposed to land in mathlib, and keeping a <em>separate</em> project alive, hence bumping mathlib twice a week or so, seems unfeasable.</p>",
        "id": 289840916,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657996095
    },
    {
        "content": "<p>I think the larger issue is that LTE has some objects that may or may not be interesting for most mathematicians but were needed for the formalization. I'm thinking of things like profinitely-filtered pseudo-normed groups</p>",
        "id": 289840929,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657996103
    },
    {
        "content": "<p>mathlib is highly curated, so the PRing process is excruciatingly slow.</p>",
        "id": 289840935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657996108
    },
    {
        "content": "<p>The review process is <em>very</em> thorough, and justly so.  Moreover, very likely the statement of many PRed lemmas would change and it would take effort to make them re-match their corresponding place.  It takes time.</p>",
        "id": 289840969,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657996156
    },
    {
        "content": "<p>On the other hand, I was discussing today with a colleague who was suggesting that if the <em>whole point</em> of mathlib is to allow to build new math in Lean, then LTE needs to be in mathlib.</p>",
        "id": 289840971,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657996158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289840935\">said</a>:</p>\n<blockquote>\n<p>mathlib is highly curated, so the PRing process is excruciatingly slow.</p>\n</blockquote>\n<p>I see, now I understand the reason. PRing to mathlib is just too much work. Thanks!</p>",
        "id": 289840988,
        "sender_full_name": "Robert Brijder",
        "timestamp": 1657996185
    },
    {
        "content": "<p>I think that something like identifying \"basic\" folders where the review process discussed by <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> be very strict; and other folders where we can be more sloppy could give us some flexibility.</p>",
        "id": 289841042,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657996211
    },
    {
        "content": "<p>One point though is that we don't need LTE in mathlib before that happens. And as far as I'm aware nobody, even in maths land, is using Scholze's result <em>yet</em>, right?</p>",
        "id": 289841048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657996221
    },
    {
        "content": "<p>Clausen and Scholze are using it in their new lectures on complex analytic geometry</p>",
        "id": 289841064,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657996255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Well, nobody is using Scholze's result <em>yet</em>. But I think that a full proof of some form of more general duality will develop out of their theory, and this we do not want to miss.</p>",
        "id": 289841089,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657996284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289841064\">said</a>:</p>\n<blockquote>\n<p>Clausen and Scholze are using it in their new lectures on complex analytic geometry</p>\n</blockquote>\n<p>But they aren't using the liquid stuff, right?</p>",
        "id": 289841092,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657996293
    },
    {
        "content": "<p>Yes, to compare algebraic and analytic geometry, I think. That <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> is an analytic ring turns out to be crucial.</p>",
        "id": 289841105,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657996312
    },
    {
        "content": "<p>To be clear, I am absolutely for having all projects reaching mathlib eventually! I just want to clear up priorities.</p>",
        "id": 289841167,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657996337
    },
    {
        "content": "<p>Right. I think the general framework of analytic rings is certainly something that should be in mathlib at some point (= probably the far future). And having examples is also important ;)</p>",
        "id": 289841194,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657996382
    },
    {
        "content": "<p>I confess that after the discussion had this morning with that colleague, I do not have a position any more. On a one side,</p>\n<ul>\n<li>\n<p>If we want to follow-up with the new results by Clausen and Scholze, we need LTE in mathlib.<br>\nBut</p>\n</li>\n<li>\n<p>It will make mathlib much longer to compile; and</p>\n</li>\n<li>We can't ask maintainers to check all the 96k lines (even if we golf them to 50k, say)</li>\n</ul>",
        "id": 289841218,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657996428
    },
    {
        "content": "<p>We also need to keep in mind that the transition to lean 4 will take time and effort</p>",
        "id": 289841263,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657996454
    },
    {
        "content": "<p>So, I'd rather go sailing on holiday for a while... <span aria-label=\"sailboat\" class=\"emoji emoji-26f5\" role=\"img\" title=\"sailboat\">:sailboat:</span> <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 289841280,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657996492
    },
    {
        "content": "<p>My opinion is that we should slowly send bits to mathlib, with the hope that the most reusable ones will get priority. That will slowly erode the LTE mount.</p>",
        "id": 289841374,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657996590
    },
    {
        "content": "<p>yeah probably 20 PR's would be good</p>",
        "id": 289841397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1657996627
    },
    {
        "content": "<p>There could be periodic mathlib spriltze...</p>",
        "id": 289841500,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657996755
    },
    {
        "content": "<p>I would imagine 200, rather...</p>",
        "id": 289841502,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657996758
    },
    {
        "content": "<p>Yeah I already got 4 PRs out of what I did for LTE and I did close to nothing, so...</p>",
        "id": 289841512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657996789
    },
    {
        "content": "<p>If we consider a \"normal\" mathlib PR to contain an average of 100 lines of code (correct me if I am wrong); and if we consider that LTE will have 50k lines after all the golfing process; well, my math tells me we can expect 500 of them.</p>",
        "id": 289841575,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657996867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289841218\">said</a>:</p>\n<blockquote>\n<ul>\n<li>We can't ask maintainers to check all the 96k lines (even if we golf them to 50k, say)</li>\n</ul>\n</blockquote>\n<p>One of the point of having stuff in mathlib is that it is the person that opens a PR that is supposed to make everything OK. And when you exactly which modifications you did is much easier than doing a bump.</p>",
        "id": 289841591,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657996913
    },
    {
        "content": "<p>Also, a lot of the material in the LTE is not \"mathlib-ready\", and my hope is that it will be easier to maintain once it will be in mathlib.</p>",
        "id": 289841647,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657996965
    },
    {
        "content": "<p>But it is really a lot of work, I agree.</p>",
        "id": 289841648,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657996972
    },
    {
        "content": "<p>Again I should stress that I think the most challenging part of porting LTE (even some of the for_mathlib stuff) into mathlib will be finding the right level of generality for the various intermediate constructions and hacks that we have all over the place.</p>",
        "id": 289841704,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657997055
    },
    {
        "content": "<p>What I was trying to suggest is that as mathlib grows we might decide that the definition of  \"mathlib ready\" will only apply to a specific part of \"foundational\" stuff, but that we will be more free-style on other stuff.</p>",
        "id": 289841705,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657997056
    },
    {
        "content": "<p>After all, not every math-paper undergoes the same excruciating review process of a Bourbaki volume; and, probably, rightly so.</p>",
        "id": 289841744,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657997152
    },
    {
        "content": "<p>We can start with something hopefully easy: do we really need all the files? We did something like 3 versions of the snake lemma and long exact sequences. If some of them are not used we can move them somewhere else.</p>",
        "id": 289841893,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657997383
    },
    {
        "content": "<p>In any case branch <code>minibump</code> is now at <code>cfedf1d5b51096eccff25b7dd9ea8c86f4c402c8</code> from May 18th (and not May 15th as the commit says). There are three sorry, but we it's 6 days more recent than <code>master</code>.</p>",
        "id": 289842144,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657997589
    },
    {
        "content": "<blockquote>\n<p>What I was trying to suggest is that as mathlib grows we might decide that the definition of  \"mathlib ready\" will only apply to a specific part of \"foundational\" stuff, but that we will be more free-style on other stuff.</p>\n</blockquote>\n<p>mathlib already has an archive/ directory, and we could also add files to nolint.txt. But I think stuff in archive/ are not supposed to be used, and they also add to CI time. I think we do want things in archive/ to compile with latest mathlib; does LTE really takes much longer time to compile (per line) than mathlib? If we decide to place LTE in archive/, another main concern is whether it will add much maintenance work (to fix breakage from refactoring etc.).</p>",
        "id": 289843030,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657998621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289841092\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289841064\">said</a>:</p>\n<blockquote>\n<p>Clausen and Scholze are using it in their new lectures on complex analytic geometry</p>\n</blockquote>\n<p>But they aren't using the liquid stuff, right?</p>\n</blockquote>\n<p>Oh, we absolutely are using the liquid stuff, everywhere! A better title for the course would have been \"how to use liquid vector spaces to do complex geometry\".</p>",
        "id": 289843539,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1657999355
    },
    {
        "content": "<p>If we want to keep on doing the bump step by step, the next problematic PR is probably <a href=\"https://github.com/leanprover-community/mathlib/pull/13762\">#13762</a>, included in commit <code>c9c9fa15fec7ca18e9ec97306fb8764bfe988a7e</code>.  I've started in branch <code>bump_may_19</code> if someone wants to contribute.</p>",
        "id": 289845811,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658002732
    },
    {
        "content": "<p>I fixed one file</p>",
        "id": 289846555,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658003802
    },
    {
        "content": "<p>Is there a way to make <code>lean build</code> stop when it hits the first error?</p>",
        "id": 289846561,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658003821
    },
    {
        "content": "<p>I don't know, but it would be nice. My current strategy is quite dumb, I do <code>leanproject build</code>, start doing something else checking every 5 minutes or so, and if I see an error a kill the process and rerun it, to see where the first error is.</p>",
        "id": 289846708,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658004035
    },
    {
        "content": "<p>I'm really curious, <span class=\"user-mention\" data-user-id=\"369530\">@Peter Scholze</span> , why the reals are said to <em>not</em> be an analytic ring in Lecture 1 of Complex.pdf. I thought the point of the LTE was  essentially to prove this!</p>",
        "id": 289848014,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1658006052
    },
    {
        "content": "<p>I think they mean that it's not an analytic ring with respect to the spaces of signed Radon measures (the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mi mathvariant=\"double-struck\">R</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{M}_{\\mathbb{R}}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3322em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>).</p>",
        "id": 289848224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658006413
    },
    {
        "content": "<p>Yeah, I know that it's not just the data of the underlying topological ring that is important, but it really surprised me to see such a claim with no foreshadowing that maybe one can choose other structure that does make it work.</p>",
        "id": 289849370,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1658008410
    },
    {
        "content": "<p>For instance, a forward pointer to Thm 3.11, where the family of p-liquid structures are given. Far be it for me to criticise, it was just felt odd. </p>\n<p>Apologies for the OT noise!</p>",
        "id": 289849581,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1658008775
    },
    {
        "content": "<p>The next file for the bump is <code>src/for_mathlib/triangle_shift.lean</code>. The first missing instances are fixed by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">discrete_equiv.add_group</span>\n</code></pre></div>\n<p>Then there is a bunch of errors, but I am done for today.</p>",
        "id": 289850498,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658010171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130272\">David Michael Roberts</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289848014\">said</a>:</p>\n<blockquote>\n<p>I'm really curious, <span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> , why the reals are said to <em>not</em> be an analytic ring in Lecture 1 of Complex.pdf. I thought the point of the LTE was  essentially to prove this!</p>\n</blockquote>\n<p>Ah, thanks for pointing out that the presentation is weird here! We certainly did the foreshadowing live, but somehow it got lost when writing the notes. I will add something to the first lecture.</p>\n<p>(By the way, that the naive guess for an analytic ring structure didn't work, but only a weird patch, is one reason I was worried about this liquid stuff...)</p>",
        "id": 289866372,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1658037084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289866372\">said</a>:</p>\n<blockquote>\n<p>(By the way, that the naive guess for an analytic ring structure didn't work, but only a weird patch, is one reason I was worried about this liquid stuff...)</p>\n</blockquote>\n<p>Oh, that's a cool bit of insight!</p>",
        "id": 289876298,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1658052664
    },
    {
        "content": "<p>Wait, <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, do you still need help on <code>minibump</code>?</p>",
        "id": 289876614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658053159
    },
    {
        "content": "<p>I was having cache troubles yesterday so couldn't actually do anything.</p>",
        "id": 289876618,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658053179
    },
    {
        "content": "<p>I didn't touch the <code>pid.lean</code> file. You can work on it in <code>bump_may_19</code>, you need mathlib cache of course, but you can ignore the rest of LTE.</p>",
        "id": 289877143,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658053934
    },
    {
        "content": "<p>Is it just the <code>enum_iso</code> thing? If so, I can do the bump</p>",
        "id": 289898799,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658083932
    },
    {
        "content": "<p>If pid.lean compiles it is enough</p>",
        "id": 289900459,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658086355
    },
    {
        "content": "<p>I think I see an issue</p>",
        "id": 289907730,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658096717
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/IoqiJMP5w9VCXVosw7VcIQxy/image.png\">image.png</a> The way I wrote <code>to_fun</code> on <code>enum_iso</code> causes def-eq problems</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/IoqiJMP5w9VCXVosw7VcIQxy/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/IoqiJMP5w9VCXVosw7VcIQxy/image.png\"></a></div>",
        "id": 289907808,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658096838
    },
    {
        "content": "<p>Replacing it with the fix on <a href=\"https://github.com/leanprover-community/mathlib/pull/15454\">#15454</a> seems to help unbreak things</p>",
        "id": 289907869,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658096954
    },
    {
        "content": "<p>A temporary solution, for the LTE, is to redefine the old <code>typein_iso</code> or whatever it was, and use it until we get to current mathlib (not so soon I am afraid)</p>",
        "id": 289908188,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658097507
    },
    {
        "content": "<p>At least CI will be happy</p>",
        "id": 289908190,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658097533
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/pull/89\">https://github.com/leanprover-community/lean-liquid/pull/89</a></p>",
        "id": 289908363,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658097842
    },
    {
        "content": "<p>I just added the new <code>enum_iso</code> to the file</p>",
        "id": 289908394,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658097857
    },
    {
        "content": "<p>It's almost identical to the old one except it doesn't use pattern matching</p>",
        "id": 289908426,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658097920
    },
    {
        "content": "<p>I hope my ordinal code doesn't cause further trouble</p>",
        "id": 289908495,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658097985
    },
    {
        "content": "<p>Oh, I didn't realize you're not allowed to push, I sent you an invitation. Can you push directly to the <code>minibump</code> branch? (<em>not</em> to master). Thanks!</p>",
        "id": 289908694,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658098301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> Thanks for working on this mathlib bump!</p>",
        "id": 289928143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658126612
    },
    {
        "content": "<p>I don't understand why the linter is failing <a href=\"https://github.com/leanprover-community/lean-liquid/runs/7385363324?check_suite_focus=true\">here</a>. The error is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">_temp</span><span class=\"bp\">/</span><span class=\"n\">e3ecbc93</span><span class=\"bp\">-</span><span class=\"n\">eeba</span><span class=\"bp\">-</span><span class=\"mi\">4</span><span class=\"n\">fcc</span><span class=\"bp\">-</span><span class=\"mi\">8917</span><span class=\"bp\">-</span><span class=\"n\">c5dda939d11c.sh</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">2</span><span class=\"o\">:</span>  <span class=\"mi\">1881</span> <span class=\"n\">Killed</span>                  <span class=\"n\">lean</span> <span class=\"c1\">--run scripts/lint_project.lean</span>\n</code></pre></div>",
        "id": 289936987,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658133373
    },
    {
        "content": "<p>Hmm, no idea either. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> you are our linter expert. Do you think you could help us?</p>",
        "id": 289938567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658134492
    },
    {
        "content": "<p>I haven't seen that error before, but googling <code>exit code 137</code> suggest that it is an out-of-memory issue.</p>",
        "id": 289939311,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1658134960
    },
    {
        "content": "<p>I think that can sometimes be caused by a simp or instance loop</p>",
        "id": 289939738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658135274
    },
    {
        "content": "<p>In any case at least it compiles. Concerning the next bump, in branch <code>bump_may_19</code>, there is <code>src/for_mathlib/triangle_shift.lean</code> that I am not able to fix if someone is interested. All the changes come from <a href=\"https://github.com/leanprover-community/mathlib/pull/13762\">#13762</a></p>",
        "id": 289940960,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658136210
    },
    {
        "content": "<p>I think that might be the hardest bump. Once we figure out how we want to fix the shift stuff, the rest is \"certainly doable\".</p>",
        "id": 289941139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658136330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Is one of the two bump-branches now in a mergeable state?</p>",
        "id": 289946260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658139747
    },
    {
        "content": "<p>I lost track...</p>",
        "id": 289946268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658139752
    },
    {
        "content": "<p><code>minibump</code> compiles. I've opened <a href=\"https://github.com/leanprover-community/lean-liquid/pull/90\">https://github.com/leanprover-community/lean-liquid/pull/90</a> to check if CI is working, but there the linter problem we don't understand.</p>",
        "id": 289946314,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658139802
    },
    {
        "content": "<p>Aah, gotcha</p>",
        "id": 289946343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658139832
    },
    {
        "content": "<p>It also says <code>thm95</code> is not sorry free, let me check</p>",
        "id": 289946370,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658139843
    },
    {
        "content": "<p>I don't think the shift stuff would be that hard to fix; we just need to explicitly write it out when coercing <code>Z</code> to <code>discrete Z</code>?</p>",
        "id": 289946490,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658139949
    },
    {
        "content": "<p>I think I can attempt on it if nobody is trying now.</p>",
        "id": 289946598,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658140004
    },
    {
        "content": "<p>I am not working on it.</p>",
        "id": 289946656,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658140065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> If you want to help there, that would be great!</p>",
        "id": 289951091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658143169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289946370\">said</a>:</p>\n<blockquote>\n<p>It also says <code>thm95</code> is not sorry free, let me check</p>\n</blockquote>\n<p>Sorry, that's meant to be <code>liquid_tensor_experiment</code> not <code>thm95</code> (I missed one substitution; pull request submitted) and in any case it seems to have crashed rather than concluding there are sorries.</p>",
        "id": 289965107,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658150999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289946314\">said</a>:</p>\n<blockquote>\n<p><code>minibump</code> compiles. I've opened <a href=\"https://github.com/leanprover-community/lean-liquid/pull/90\">https://github.com/leanprover-community/lean-liquid/pull/90</a> to check if CI is working, but there the linter problem we don't understand.</p>\n</blockquote>\n<p><del>In this run, the linter failed to download the oleans built in the previous step. If the linter and sorry-checker have to do their checking without oleans, they're more likely to run of memory, which looks like what happened.</del></p>\n<p><del>I'll figure out why it sometimes fails to download the build.</del></p>\n<p>(This comment was wrong.)</p>",
        "id": 289967646,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658152216
    },
    {
        "content": "<p><code>bump_may_19</code> should now compile.</p>",
        "id": 289968661,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658152698
    },
    {
        "content": "<p>Wow! That's really helpful!</p>",
        "id": 289968701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658152715
    },
    {
        "content": "<p>I was really scared of the shift-bump.</p>",
        "id": 289968731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658152730
    },
    {
        "content": "<p>Please make a PR. And let's hope that CI plays along nicely.</p>",
        "id": 289968812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658152764
    },
    {
        "content": "<p>This is great!</p>",
        "id": 289969082,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658152887
    },
    {
        "content": "<p>I was wrong above about the CI not downloading the oleans. Something else is going wrong in linting and sorry-checking.</p>",
        "id": 289969098,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658152897
    },
    {
        "content": "<p>I think the next big hurdle in bumping is the recent changes to universe parameters in finite limits and colimits.</p>",
        "id": 289969195,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658152924
    },
    {
        "content": "<p>I've created <a href=\"https://github.com/leanprover-community/lean-liquid/pull/94\">https://github.com/leanprover-community/lean-liquid/pull/94</a></p>",
        "id": 289972054,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658154116
    },
    {
        "content": "<p>I've cleaned up <code>for_mathlib.pid</code> on my way to bumping it. Where should such a cleanup go? Should I open a PR to master?</p>",
        "id": 289979096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658157056
    },
    {
        "content": "<p>Yes please!</p>",
        "id": 289979229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658157116
    },
    {
        "content": "<p>It is already compiling in <a href=\"https://github.com/leanprover-community/lean-liquid/pull/94\">https://github.com/leanprover-community/lean-liquid/pull/94</a></p>",
        "id": 289979314,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658157142
    },
    {
        "content": "<p>You can maybe check to see which modification looks better, but I guess it not so important</p>",
        "id": 289979393,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658157184
    },
    {
        "content": "<p>I am fixing some other files in that PR, so it will not compile, but hopefully it will soon do</p>",
        "id": 289979491,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658157228
    },
    {
        "content": "<p>I mean that I did stuff for the bump, but it's actually orthogonal to the bump.</p>",
        "id": 289979962,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658157436
    },
    {
        "content": "<p>Ah sorry, then yes!</p>",
        "id": 289980098,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658157486
    },
    {
        "content": "<p>I am done for today, but the next error in <a href=\"https://github.com/leanprover-community/lean-liquid/pull/94\">https://github.com/leanprover-community/lean-liquid/pull/94</a> is in <code>for_mathlib/derived/ext_coproducts.lean</code>.</p>",
        "id": 289990582,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658162054
    },
    {
        "content": "<p>Thanks for all your help</p>",
        "id": 290004785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658168794
    },
    {
        "content": "<p>Re. the CI issues, I'm out of lean-time for today but here's what I learnt.</p>\n<p>I've been building the <code>minibump</code> branch (commit <code>ba555ce</code>).</p>\n<p>On a machine with 32 cores and 64 GB, everything builds fine and then linting works fine too.</p>\n<p>We're clearly under memory pressure on CI as some builds crash at random times.</p>\n<p>So building on beefier machines would probably fix things.</p>\n<p>The confusing thing is that sometimes the build appears to work but the <code>olean</code>s that come out don't match the ones built on the high-memory machine. Some of them match those I get on the machine with 64 GB, some of them are unchanged from the cache we started with (from <code>master</code>) and some are different from both. Maybe we're going out-of-memory half-way through the build (silently; the build appears to be successful) and we're left with <code>olean</code>s from wherever we got up to?? Then the linting starts with the wrong <code>oleans</code> and eventually goes out-of-memory itself.</p>\n<p>Anyway, the problem is with the building, not the linting, whatever it looks like in CI.</p>\n<p>I didn't investigate what is causing the build to need more memory.</p>",
        "id": 290018315,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658175904
    },
    {
        "content": "<p>Note that in mathlib we sometimes have to run lean twice to get accurate oleans</p>",
        "id": 290018546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658176018
    },
    {
        "content": "<p>Yeah, the first thing I tried was to run lean three times! Anyway, I checked and the build on the 64 GB machine of <code>ba555ce</code> is stable after running lean once.</p>",
        "id": 290018767,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658176138
    },
    {
        "content": "<p>More on the CI failure: The project has been getting bigger over the last two months but, because we cache builds, we haven't had to build it from scratch since the time you stopped bumping mathlib.</p>\n<p>Usually the cache from a version of the project with an older mathlib is not helpful, so when you did try to bump mathlib, that was the first time in two months that we've built the project without the benefit of a cache.</p>\n<p>If I try to build <code>master</code> in CI without the benefit of a cache, the build fails in a similar way to how it fails on the <code>minibump</code> branch. This suggests that it's building from scratch that's the problem, rather than some issue in the newer version of mathlib.</p>\n<p>So maybe something specific was added in the last two months that is causing memory problems, but maybe it's just that the project's grown and there's not actually a problem that's easily identifiable. Do the experts have opinions on how much memory the build should be using?</p>\n<p>As a temporary fix, I've bumped swap on the build machines from 4 GB to 10 GB (which is about as high as it can reasonably go, since the disk is 14 GB; this commit is currently only on the <code>minibump</code> branch), which might get things going again. It's <a href=\"https://github.com/leanprover-community/lean-liquid/actions/runs/2693643931\">running now</a>, but I have to go to bed before it'll finish (or time out).</p>",
        "id": 290036136,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658186776
    },
    {
        "content": "<p>My understanding is that this build has succeeded?</p>",
        "id": 290044536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658195335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> Thanks so much for debugging this. Your analysis makes a lot of sense!</p>",
        "id": 290062434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658215237
    },
    {
        "content": "<p>I think we should merge your change into <code>bump_may_19</code>. That's the mathlib bump that has a PR attached to it.</p>",
        "id": 290062649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658215422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> did you cherry-pick Ben's commit onto your branch?</p>",
        "id": 290078666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658226079
    },
    {
        "content": "<p>I've added my changes to <code>bump_may_19</code> (cc. <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>).</p>",
        "id": 290080158,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658227079
    },
    {
        "content": "<p>I made a separate <a href=\"https://github.com/leanprover-community/lean-liquid/pull/99\">pull request</a> to get the CI improvements on master.  Alternatively you'll get them when you merge <code>bump_may_19</code>.</p>",
        "id": 290080508,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658227319
    },
    {
        "content": "<p>Thanks! The failure in <code>bump_may_19</code> is genuine, and I am not sure I understand how to fix it.</p>",
        "id": 290080648,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658227435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> You are now talking about the error in <code>ext_coproducts</code>? Not some random CI error, right?</p>",
        "id": 290080881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658227581
    },
    {
        "content": "<p>I'm building this branch now</p>",
        "id": 290081276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658227888
    },
    {
        "content": "<p>Yep</p>",
        "id": 290084044,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658229578
    },
    {
        "content": "<p>Ok, my compile got there. So I'll work on them now.</p>",
        "id": 290084200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658229656
    },
    {
        "content": "<p><code>ext_coproducts</code> builds again</p>",
        "id": 290085728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658230604
    },
    {
        "content": "<p><code>single_coproducts</code> done</p>",
        "id": 290086409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658230955
    },
    {
        "content": "<p>Fixed a whole bunch of other files. Still going.</p>",
        "id": 290089978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658233225
    },
    {
        "content": "<p>I pushed wip on <code>QprimeFP</code>. It's almost done.</p>",
        "id": 290100243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658238150
    },
    {
        "content": "<p>Let me know when it builds. I'll merge that PR in a heartbeat</p>",
        "id": 290100503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658238268
    },
    {
        "content": "<p>I have to do something else for ~ 1hr</p>",
        "id": 290103627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658239685
    },
    {
        "content": "<p>What's the next file that needs fixing?</p>",
        "id": 290103730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658239737
    },
    {
        "content": "<p><code>QprimeFP</code> is done</p>",
        "id": 290103795,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658239773
    },
    {
        "content": "<p>Let me see what happens next</p>",
        "id": 290103808,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658239779
    },
    {
        "content": "<p>I'm back</p>",
        "id": 290107564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658241249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> How's it looking?</p>",
        "id": 290108813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658241765
    },
    {
        "content": "<p>I am waiting, for some reason my computer is very slow</p>",
        "id": 290109388,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658241975
    },
    {
        "content": "<p>Heat wave?</p>",
        "id": 290109451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658242001
    },
    {
        "content": "<p>I am also trying to do something but my pc is very slow.</p>",
        "id": 290109458,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658242006
    },
    {
        "content": "<p>On which branch are you working, <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> ?</p>",
        "id": 290109494,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658242023
    },
    {
        "content": "<p>OK, the next one is <code>src/Lbar/ext_aux4.lean</code>, it should be easy.</p>",
        "id": 290110489,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658242427
    },
    {
        "content": "<p>The branch is <code>bump_may_19</code></p>",
        "id": 290110514,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658242435
    },
    {
        "content": "<p>Oh boy, we're at the <code>Lbar/ext_foo</code> files! The end is in sight!</p>",
        "id": 290110626,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658242468
    },
    {
        "content": "<p>Its <code>projective_resolution.lean: is_zero_iff_forall_zero</code> that it is super slow</p>",
        "id": 290111288,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658242724
    },
    {
        "content": "<p>That doesn't sound like it ought to be slow.</p>",
        "id": 290111961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658242975
    },
    {
        "content": "<p>Ah, maybe it's literally taking forever...</p>",
        "id": 290112644,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658243230
    },
    {
        "content": "<p>Are there <code>{ tidy }</code> proofs in there?</p>",
        "id": 290113514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658243571
    },
    {
        "content": "<p>I had to replace those in <code>projective_resolution_module.lean</code></p>",
        "id": 290113536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658243584
    },
    {
        "content": "<p>yes, it's their fault</p>",
        "id": 290113683,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658243641
    },
    {
        "content": "<p>You can probably copy-pasta what I did in that other file</p>",
        "id": 290113758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658243666
    },
    {
        "content": "<p>If <code>tidy</code> has to try <code>rcases</code>, it usually ends up being too slow. You could use clever <code>rintros</code>, <code>rcases</code> or <code>ext</code> with rcases paterns to help it along.</p>",
        "id": 290113854,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658243708
    },
    {
        "content": "<p>And with how <code>discrete</code> was  changed, I can imagine that there is some <code>rcases</code> step missing.</p>",
        "id": 290113900,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658243733
    },
    {
        "content": "<p>I think we need to teach <code>tidy</code> to do cases on <code>foo : discrete X</code></p>",
        "id": 290113907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658243736
    },
    {
        "content": "<p>you can do <code>local attribute [tidy] tactic.case_bash</code> but that slows things WAY down</p>",
        "id": 290113957,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658243760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/290110514\">said</a>:</p>\n<blockquote>\n<p>The branch is <code>bump_may_19</code></p>\n</blockquote>\n<p>Is it normal that if I work on <code>minibump</code> then after 2/3 minutes I can work, but <code>master</code> takes forever to open any file?</p>",
        "id": 290114087,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658243809
    },
    {
        "content": "<p>it's done</p>",
        "id": 290114090,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658243811
    },
    {
        "content": "<p>Note that <code>minibump</code> is completely superseded by the other branch</p>",
        "id": 290114154,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658243841
    },
    {
        "content": "<p>But I ended up triying some out of dispair...</p>",
        "id": 290114348,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658243906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Those branches use different mathlibs, so you'll need to fetch mathlib caches</p>",
        "id": 290114478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658243961
    },
    {
        "content": "<p>And your LTE oleans will also change</p>",
        "id": 290114496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658243969
    },
    {
        "content": "<p>So I'm not surprised that this causes headaches</p>",
        "id": 290114513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658243980
    },
    {
        "content": "<p>Oh right. I did not think at the different mathlib's. Let me try to get all straight.</p>",
        "id": 290114621,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658244015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/290114090\">said</a>:</p>\n<blockquote>\n<p>it's done</p>\n</blockquote>\n<p>Do you mean the entire bump? Or just that file?</p>",
        "id": 290114765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658244074
    },
    {
        "content": "<p>The file</p>",
        "id": 290114805,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658244091
    },
    {
        "content": "<p>Looking for the next error</p>",
        "id": 290114845,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658244104
    },
    {
        "content": "<p>I suppose that running <code>leanproject get-mathlib-cache</code> would update mathlib to the latest mathlib, and this I do not want, right? And that the script <code>fetch_olean_cahce</code> only updates LTE's ones...</p>",
        "id": 290115816,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658244461
    },
    {
        "content": "<p><code>leanproject get-mathlib-cache</code> should do the right thing, it takes mathlib as indicated in <code>leanpkg.toml</code></p>",
        "id": 290116140,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658244587
    },
    {
        "content": "<p>but then you have to recompile all the project, there is no cache for nonmaster branch</p>",
        "id": 290116311,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658244629
    },
    {
        "content": "<p>at least not yet</p>",
        "id": 290116330,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658244639
    },
    {
        "content": "<p>but if I work in master I should have no problems, then.</p>",
        "id": 290116370,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658244653
    },
    {
        "content": "<p>Yep, in master you can use <code>script/get_cache.sh</code></p>",
        "id": 290116504,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658244699
    },
    {
        "content": "<p>Let me try again, I suspect that the 42 degrees we have today in Italy don't help my laptop... <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 290116751,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658244783
    },
    {
        "content": "<p>The bump compiles for me.</p>",
        "id": 290117280,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658244981
    },
    {
        "content": "<p>Nice!</p>",
        "id": 290128446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658249426
    },
    {
        "content": "<p>Let's hope it passes CI!</p>",
        "id": 290128529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658249465
    },
    {
        "content": "<p>Mmm, CI failed</p>",
        "id": 290143761,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658256563
    },
    {
        "content": "<p>With a mysterious error</p>",
        "id": 290143826,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658256585
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/runs/7412687246?check_suite_focus=true\">https://github.com/leanprover-community/lean-liquid/runs/7412687246?check_suite_focus=true</a></p>",
        "id": 290143848,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658256597
    },
    {
        "content": "<p>I've relaunched it</p>",
        "id": 290143988,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658256650
    },
    {
        "content": "<p>Hmm, it got an error again</p>",
        "id": 290149232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658259030
    },
    {
        "content": "<p>It looks like it's still building?</p>",
        "id": 290149285,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658259047
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/runs/7412687246?check_suite_focus=true#step:10:27\">https://github.com/leanprover-community/lean-liquid/runs/7412687246?check_suite_focus=true#step:10:27</a></p>",
        "id": 290149331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658259069
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/runs/7415897270?check_suite_focus=true\">https://github.com/leanprover-community/lean-liquid/runs/7415897270?check_suite_focus=true</a></p>",
        "id": 290149332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658259071
    },
    {
        "content": "<p>Ooh, that's a different run</p>",
        "id": 290149397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658259106
    },
    {
        "content": "<p>Ooh wait... lol</p>",
        "id": 290149413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658259114
    },
    {
        "content": "<p>I should learn to read messages in order.</p>",
        "id": 290149472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658259127
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">date</span><span class=\"o\">:</span> <span class=\"n\">extra</span> <span class=\"n\">operand</span> <span class=\"bp\">‘%</span><span class=\"n\">T</span><span class=\"bp\">’</span>\n<span class=\"n\">Starting</span> <span class=\"n\">build</span> <span class=\"n\">at</span>\n<span class=\"n\">Try</span> <span class=\"bp\">'</span><span class=\"n\">date</span> <span class=\"c1\">--help' for more information.</span>\n</code></pre></div>\n<p>That's my typo, sorry - <a href=\"https://github.com/leanprover-community/lean-liquid/pull/100\">https://github.com/leanprover-community/lean-liquid/pull/100</a>. Doesn't affect anything.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">_temp</span><span class=\"bp\">/</span><span class=\"mi\">9430</span><span class=\"n\">b2ea</span><span class=\"bp\">-</span><span class=\"mi\">94</span><span class=\"n\">d9</span><span class=\"bp\">-</span><span class=\"mi\">4500</span><span class=\"bp\">-</span><span class=\"n\">b5f7</span><span class=\"bp\">-</span><span class=\"n\">bc4ab48a1515.sh</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">6</span><span class=\"o\">:</span>  <span class=\"mi\">2229</span> <span class=\"n\">Killed</span>                  <span class=\"n\">lean</span> <span class=\"c1\">--json --make src</span>\n      <span class=\"mi\">2230</span> <span class=\"n\">Done</span>                    <span class=\"bp\">|</span> <span class=\"n\">python</span> <span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">detect_errors.py</span>\n</code></pre></div>\n<p>That's the OOM killer. Guess the extra swap isn't enough.</p>",
        "id": 290156771,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658262877
    },
    {
        "content": "<p>So lean goes out of memory on a machine with 7 GB RAM and 10 GB swap. Can you please ask the experts if that is reasonable for a project of this size?</p>",
        "id": 290157392,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658263175
    },
    {
        "content": "<p>To add more colour to that question, I'm asking for help because it's unclear to me if the next step should be</p>\n<ol>\n<li>try to figure out if we're doing something wrong that causes memory usage to be high; or</li>\n<li>figure out how to deal with the fact that the project now needs more memory to build.</li>\n</ol>",
        "id": 290162243,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658265567
    },
    {
        "content": "<p>Mathlib compiles with <code>-T150000</code> to cause a timeout in case of too many allocations. Would that be useful for debugging here?</p>",
        "id": 290162544,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658265711
    },
    {
        "content": "<p>I definitely get timeouts compiling with <code>-T150000</code> locally. A higher number might be better, as long as the OOM killer doesn't kick in.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">AddCommGroup</span><span class=\"bp\">/</span><span class=\"n\">explicit_limits.lean</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">AddCommGroup</span><span class=\"bp\">/</span><span class=\"n\">explicit_limits.lean</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pullbacks.lean</span><span class=\"o\">:</span><span class=\"mi\">123</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">collares</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pullbacks.lean</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span><span class=\"mi\">41</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 290162862,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658265855
    },
    {
        "content": "<p>FWIW, my settings in VScode are 16G memory and 400000 time limit, and I'm quite sure that can handle anything in the repo.</p>",
        "id": 290163126,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658265974
    },
    {
        "content": "<p>Where does that python script come from?</p>",
        "id": 290163211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658266043
    },
    {
        "content": "<p>BTW Adam: do you manage to have these VSCode settings not to be uploaded in git? Did you manually add json to gitignore?</p>",
        "id": 290163223,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658266048
    },
    {
        "content": "<p>Honestly I have no clue where vscode stores these settings. I suppose I changed them globally so it shouldn't be in the repo itself.</p>",
        "id": 290163369,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658266120
    },
    {
        "content": "<p>The problem is that AFAIU workshop settings overwrite user settings, and the workshop ones are shared on a git repo.</p>",
        "id": 290163475,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658266186
    },
    {
        "content": "<p>But if you tell me you managed to, I will try to do the same myself.</p>",
        "id": 290163568,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1658266214
    },
    {
        "content": "<p>Oh I see. I only use vscode for Lean (and emacs for everything else), so I don't mind setting all of my settings globally :)</p>",
        "id": 290163627,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658266241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/290162544\">said</a>:</p>\n<blockquote>\n<p>Mathlib compiles with <code>-T150000</code> to cause a timeout in case of too many allocations. Would that be useful for debugging here?</p>\n</blockquote>\n<p>Thanks!! I've started two builds in CI with <code>-T200000</code> (since you already tested <code>-T150000</code> locally) and <code>-T400000</code>.</p>",
        "id": 290163835,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658266334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/290163211\">said</a>:</p>\n<blockquote>\n<p>Where does that python script come from?</p>\n</blockquote>\n<p>Which Python script? <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/scripts/detect_errors.py\">This</a> one?</p>",
        "id": 290164072,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658266448
    },
    {
        "content": "<p>Oh yes, that's the one. I'm just trying to understand the CI script</p>",
        "id": 290164166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658266501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392126\">Ben Toner</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/290163835\">said</a>:</p>\n<blockquote>\n<p>Thanks!! I've started two builds in CI with -T200000 (since you already tested -T150000 locally) and -T400000.</p>\n</blockquote>\n<p>Then perhaps I should mention that I tested <code>-T150000</code> only on the <code>bump_may_19</code> branch, because Lean decides to rebuild a lot of mathlib when I test lean-liquid master here (yes, even after <code>leanproject get-m</code>).</p>",
        "id": 290164447,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658266658
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 290165243,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658267083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> what are the problematic declarations? Maybe I can try to speed them up (if that helps)? (sorry, I pinged the wrong person, I meant to ping <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> !)</p>",
        "id": 290165353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658267156
    },
    {
        "content": "<p>For now, the ones <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> mentions above. Then whatever turns up <a href=\"https://github.com/leanprover-community/lean-liquid/actions\">here</a> in a couple of hours, if those builds do fail with deterministic timeouts.</p>",
        "id": 290165517,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658267251
    },
    {
        "content": "<p>Well... I'm still trying to build the branch, so don't hold your breath!</p>",
        "id": 290165664,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658267318
    },
    {
        "content": "<p>The branch built successfully on my machine with the same command that's used in the CI script. I merged master (which includes Ben's typo fix) to the bump branch. Let's hope that CI is <em>finally</em> happy!</p>",
        "id": 290171145,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658270794
    },
    {
        "content": "<p>The problem, as I understand it, is that the CI machine runs out of memory but doesn't give a detailed error message, so fixing the OOM is hard. If your machine has a lot of memory, that might not be a problem locally. Adding <code>-T200000</code> provides clues of what things need to be optimized to make it fit into the CI memory budget (the CI run triggered by Ben shows at least one timeout with this flag). But I'm hoping it works!</p>",
        "id": 290171510,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658271046
    },
    {
        "content": "<p>Okay, progress! (Thanks <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>!) There are deterministic timeouts <a href=\"https://github.com/leanprover-community/lean-liquid/runs/7418215358?check_suite_focus=true\">in CI</a> even with <code>-T400000</code>.</p>",
        "id": 290175036,
        "sender_full_name": "Ben Toner",
        "timestamp": 1658273896
    },
    {
        "content": "<p>I tried speeding up some of the proofs that were causing timeouts. I hope this helps!</p>",
        "id": 290184632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658280449
    },
    {
        "content": "<p>I can confirm that the branch also builds on my machine. How do we get it past CI?</p>",
        "id": 290197622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658297774
    },
    {
        "content": "<p>Can we bundle up our locally built oleans and push those to the shared storage (I know this is a pretty ugly hack).</p>",
        "id": 290201009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658301038
    },
    {
        "content": "<p>I pushed a commit bumping the swap size to 14. Let's see if that helps.</p>",
        "id": 290202539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658302342
    },
    {
        "content": "<p>Answer: nope<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/runs/7424346509?check_suite_focus=true#step:15:38\">https://github.com/leanprover-community/lean-liquid/runs/7424346509?check_suite_focus=true#step:15:38</a></p>",
        "id": 290202587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658302389
    },
    {
        "content": "<p>Scott helped us use the Hoskinson runners, which have a lot more juice. Things are looking good now!</p>",
        "id": 290208599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658306906
    },
    {
        "content": "<p>It looks like everything worked except pushing to Azure: <a href=\"https://github.com/leanprover-community/lean-liquid/runs/7424647087?check_suite_focus=true\">https://github.com/leanprover-community/lean-liquid/runs/7424647087?check_suite_focus=true</a></p>",
        "id": 290208894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658307127
    },
    {
        "content": "<p>It seems to be hanging on that step?</p>",
        "id": 290208965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658307193
    },
    {
        "content": "<p>I'm too impatient. It worked</p>",
        "id": 290209054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658307256
    },
    {
        "content": "<p>Do we know why it is so slower?</p>",
        "id": 290214440,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658311165
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/pull/94\">https://github.com/leanprover-community/lean-liquid/pull/94</a> is green!</p>",
        "id": 290215218,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658311680
    },
    {
        "content": "<p>Quick, merge it!</p>",
        "id": 290218079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658313662
    },
    {
        "content": "<p>It's merged.</p>",
        "id": 290230077,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658321500
    },
    {
        "content": "<p>Let's try one week later.</p>",
        "id": 290230399,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658321682
    },
    {
        "content": "<p>Maybe we should take slightly bigger steps now?</p>",
        "id": 290232520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658322876
    },
    {
        "content": "<p>I think we can take 2 or 3 weeks in one go.</p>",
        "id": 290232540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658322889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Did you already start a new branch?</p>",
        "id": 290245041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658328401
    },
    {
        "content": "<p>Yes, I can publish it if you want. Nothing special at the moment.</p>",
        "id": 290245088,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658328426
    },
    {
        "content": "<p>Yes, please post the branch name, if only to prevent people from starting a competing branch</p>",
        "id": 290245148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658328461
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/pull/103\">https://github.com/leanprover-community/lean-liquid/pull/103</a><br>\nthe branch is <code>bump_june_10</code></p>",
        "id": 290245395,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658328572
    },
    {
        "content": "<p>I am stopping to work at the bump. The first error is now in <code>condensed/exact</code> .</p>",
        "id": 290256942,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658333103
    },
    {
        "content": "<p>Oww, that one seems pretty nasty.</p>",
        "id": 290268951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658338250
    },
    {
        "content": "<p>What's the mathlib change that makes this bad?</p>",
        "id": 290269106,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658338315
    },
    {
        "content": "<p>Je ne sais pas</p>",
        "id": 290269165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658338327
    },
    {
        "content": "<p>It doesn't look like <code>cospan_ext</code> ever changed: <a href=\"https://mathlib-changelog.org/def/category_theory.limits.cospan_ext\">https://mathlib-changelog.org/def/category_theory.limits.cospan_ext</a></p>",
        "id": 290269423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658338435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/289969195\">said</a>:</p>\n<blockquote>\n<p>I think the next big hurdle in bumping is the recent changes to universe parameters in finite limits and colimits.</p>\n</blockquote>\n<p>This is later, isn't it?</p>",
        "id": 290270226,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658338765
    },
    {
        "content": "<p>I'm trying to look into the error for this bump, but I have to build first.</p>",
        "id": 290270494,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658338884
    },
    {
        "content": "<p>I think <code>fetch_olean_cache</code> should now work!</p>",
        "id": 290270785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658339016
    },
    {
        "content": "<p>it's doing something!</p>",
        "id": 290270885,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658339054
    },
    {
        "content": "<p>The issue is in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.cospan_comp_iso\">docs#category_theory.limits.cospan_comp_iso</a> and the issue is here: <a href=\"https://github.com/leanprover-community/mathlib/pull/14351\">https://github.com/leanprover-community/mathlib/pull/14351</a></p>",
        "id": 290274427,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658340486
    },
    {
        "content": "<p>The composition with with <code>walking_cospan_functor</code> was removed in a later PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15067\">#15067</a> but that is the one that generalizes a bunch of universes</p>",
        "id": 290274550,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658340549
    },
    {
        "content": "<p>A temporary fix is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.diagram_iso_cospan\">docs#category_theory.limits.diagram_iso_cospan</a> as well, but we will have to modify this again when we go to the next bump</p>",
        "id": 290274752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658340641
    },
    {
        "content": "<p>I'll push the temporary fix. I hope this doesn't cause build issues in other places, but I guess we'll see!</p>",
        "id": 290275403,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658340880
    },
    {
        "content": "<p>BTW, it's possible that the <code>diagram_iso_cospan</code> will be harmless later on... I guess we shall see :)</p>",
        "id": 290275850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658341046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Can you leave a comment near the code describing this diagnosis?</p>",
        "id": 290276049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658341118
    },
    {
        "content": "<p>And thanks for debugging!</p>",
        "id": 290276071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658341126
    },
    {
        "content": "<p>I wrote this in the code itself</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"c1\">-- This next line can be removed later if/when we generalize universe parameters in finite (co)limits</span>\n  <span class=\"n\">refine</span> <span class=\"n\">_</span> <span class=\"bp\">≪≫</span> <span class=\"o\">(</span><span class=\"n\">diagram_iso_cospan</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 290276147,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658341161
    },
    {
        "content": "<p>Honestly, I'm a little scared of bumping past <a href=\"https://github.com/leanprover-community/mathlib/pull/15067\">#15067</a> <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span></p>",
        "id": 290276469,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658341298
    },
    {
        "content": "<p>I think that on a system with enough RAM to have two clones open at the same time, it should be doable.</p>",
        "id": 290276609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658341340
    },
    {
        "content": "<p>After this bump is done we can maybe try the PR immediately before <a href=\"https://github.com/leanprover-community/mathlib/pull/15067\">#15067</a>, so later we can concentrate on it.</p>",
        "id": 290279450,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658342470
    },
    {
        "content": "<p>It should compile now</p>",
        "id": 290284811,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658344659
    },
    {
        "content": "<p>Ooh, that went fast! Cool!</p>",
        "id": 290285595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658344981
    },
    {
        "content": "<p>I'm starting on <code>bump_jul_03</code></p>",
        "id": 290338509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658385186
    },
    {
        "content": "<p>Are you working on it? I have some time now.</p>",
        "id": 290356772,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658398182
    },
    {
        "content": "<p>Sorry, I was gone for lunch</p>",
        "id": 290362652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658402699
    },
    {
        "content": "<p>Now I'm back. How about you?</p>",
        "id": 290362675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658402708
    },
    {
        "content": "<p>Let me push what I've done.</p>",
        "id": 290362718,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658402748
    },
    {
        "content": "<p>I am fixing <code>col_exact</code>, hopefully the errors are easy to fix since it's a pain to work with that file.</p>",
        "id": 290363283,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658403066
    },
    {
        "content": "<p>OK, it should be done and pushed.</p>",
        "id": 290364441,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658403722
    },
    {
        "content": "<p>I am stopping for at least half an hour</p>",
        "id": 290364485,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658403743
    },
    {
        "content": "<p>Okido, I'll take over</p>",
        "id": 290364990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658404073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/290363283\">said</a>:</p>\n<blockquote>\n<p>I am fixing <code>col_exact</code>, hopefully the errors are easy to fix since it's a pain to work with that file.</p>\n</blockquote>\n<p>Yes, this might be the most painful file in the entire project.</p>",
        "id": 290369115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658406756
    },
    {
        "content": "<p>I fixed two more files. We're converging towards the end of this bump <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 290371633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658408162
    },
    {
        "content": "<p><code>Qprime_isoms.lean</code> is done</p>",
        "id": 290373238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658409067
    },
    {
        "content": "<p>It's done!</p>",
        "id": 290376395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658410777
    },
    {
        "content": "<p>Shall we start the universe-bump on top of this one?</p>",
        "id": 290376664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658410910
    },
    {
        "content": "<p>I'm starting on <code>bump-universes</code></p>",
        "id": 290377004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658411099
    },
    {
        "content": "<p>Can someone reproduce the following?</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>leanproject get lean-liquid:bump-universes\n<span class=\"nb\">cd</span> lean-liquid_bump-universes\nleanproject build\n</code></pre></div>\n<p>And lean starts compiling mathlib.</p>",
        "id": 290386669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658415471
    },
    {
        "content": "<p>is it <a href=\"#narrow/stream/113488-general/topic/.22saving.20olean.22.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.22saving.20olean.22.3F</a>?</p>",
        "id": 290389613,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658416742
    },
    {
        "content": "<p>Yeah, that might be the issue. In any case, it looks like only a few files had to be compiled in mathlib, so it's not all that bad</p>",
        "id": 290392253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658417873
    },
    {
        "content": "<p>I must say that I am quite unhappy now with the decision to make the universe parameters in diagrams for all finite (co)limits be 0.<br>\nWhat happens, for example, when you have a category <code>C : Type u</code> and <code>category.{v} C</code> which has all products (which means all limits indexed by <code>discrete X</code> where <code>X : Type v</code>), and now you want to identify the binary product with a product over a two-element type?</p>",
        "id": 290399094,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658420718
    },
    {
        "content": "<p>Another one: Suppose I know that a functor <code>F</code> from <code>C</code> to <code>D</code> preserves limits of shape <code>J</code> whenever <code>C</code> has all limits of shape <code>J</code>. How can I deduce that <code>F</code> preserves finite limits if <code>C</code> has all finite limits?</p>",
        "id": 290404461,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658423041
    },
    {
        "content": "<p>Do I now have to prove that <code>F</code> preserves limits of shape <code>J</code> for both <code>J : Type v</code> and <code>J : Type 0</code>?</p>\n<p>I'm frustrated</p>",
        "id": 290404620,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658423101
    },
    {
        "content": "<p>Hmmz, shouldn't there be generic instances for that?</p>",
        "id": 290405713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658423579
    },
    {
        "content": "<p>I understand your frustration.</p>",
        "id": 290405749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658423599
    },
    {
        "content": "<p>I really wonder whether Lean should have extra support for quantifying over universes less than a fixed universe <code>u</code>.</p>",
        "id": 290405794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658423622
    },
    {
        "content": "<p>We can already model this using <code>max u v</code>, so it wouldn't increase the strength (or even the amount of computations) of the kernel. But <code>max u v</code> doesn't scale from a UI point of view.</p>",
        "id": 290405938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658423676
    },
    {
        "content": "<p>yeah I found  <code>preserves_finite_limits_of_preserves_finite_limits_of_size</code></p>",
        "id": 290406188,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658423784
    },
    {
        "content": "<p>Still, it feels like this change didn't really make anything easier!</p>",
        "id": 290406207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658423793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Do you think we should forgo this bump, and \"fix\" mathlib first?</p>",
        "id": 290407921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658424660
    },
    {
        "content": "<p>I don't know. But here is another issue: The stuff in <code>category_theory/limits/concrete.lean</code> was never generalized.</p>",
        "id": 290408435,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658424942
    },
    {
        "content": "<p>Ouch! That's annoying.</p>",
        "id": 290409072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658425290
    },
    {
        "content": "<p>actually, maybe that file is okay (I got it to work in LTE), but it involved introducing new instances</p>",
        "id": 290409338,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658425432
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.Sheaf.is_sheaf_of_is_limit\">docs#category_theory.Sheaf.is_sheaf_of_is_limit</a> needs to be generalized as well</p>",
        "id": 290411139,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658426282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.is_limit.cone_points_iso_of_equivalence\">docs#category_theory.limits.is_limit.cone_points_iso_of_equivalence</a> which should be useful.</p>",
        "id": 290420579,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658430580
    },
    {
        "content": "<p>I could try and bump it myself as well. Since I reviewed that refactor, some responsibility of the frustration might be on me. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 290420979,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658430806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> if you want to take a look at <code>for_mathlib/abelian_sheaves/main</code> in the <code>bump-universes</code> branch, that would be helpful! It's just a silly proof (essentially just that limits commute with limits at the end of the day) that doesn't quite generalize with what's in mathlib</p>",
        "id": 290422748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658431675
    },
    {
        "content": "<p>The building is slower than I thought, and it is late in my timezone. I'll have a thorough look at it tomorrow.</p>",
        "id": 290428018,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658434382
    },
    {
        "content": "<p>I fixed all the files up to (and including) the ExtrDisc equivalence, which I think is the most challenging part of this mathlib bump. There is still more work to do though, but I think we will get there soon.</p>",
        "id": 290453207,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658451724
    },
    {
        "content": "<p>I fixed one more file</p>",
        "id": 290471919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658473114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> if you want to hack on this, go ahead! I'll keep my hands off my keyboard (-;</p>",
        "id": 290471932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658473149
    },
    {
        "content": "<p>I pushed what I did. There's a <code>sorry</code> in <code>thm95/col_exact.lean</code></p>",
        "id": 290472836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658473985
    },
    {
        "content": "<p>I pushed whatever I did. I'm gone for ~3 hrs</p>",
        "id": 290477035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658477420
    },
    {
        "content": "<p>I am having a look</p>",
        "id": 290478636,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658478611
    },
    {
        "content": "<p>I also have to stop (without having fixed one single error <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span> )</p>",
        "id": 290481548,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658480637
    },
    {
        "content": "<p>I'll try to fix some stuff in <code>for_mathlib</code> now.</p>",
        "id": 290481656,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658480704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> did you already fix <code>ab4.lean</code>?</p>",
        "id": 290498356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658492416
    },
    {
        "content": "<p>Yes. I can push what I have now.</p>",
        "id": 290498415,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658492456
    },
    {
        "content": "<p>Thanks. Then I'll start looking at <code>breen_deligne/</code>.</p>",
        "id": 290498447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658492480
    },
    {
        "content": "<p>Which was completely broken and didn't even know what<code>AB4</code> meant.</p>",
        "id": 290498475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658492497
    },
    {
        "content": "<p>Pushed. I'm working on <code>for_mathlib/AddCommGroup/tensor</code> now.</p>",
        "id": 290498583,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658492540
    },
    {
        "content": "<p>Do we have a \"resize\" instance for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">reflects_colimit.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">functor.empty.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"n\">FF</span>\n</code></pre></div>",
        "id": 290502043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658494462
    },
    {
        "content": "<p>I want to deduce this <code>.{0 0}</code> case from the <code>.{u+1 u+1}</code> case.</p>",
        "id": 290502079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658494490
    },
    {
        "content": "<p>It should be <code>reflects_colimits_of_size_shrink.{0 u+1 0 u+1} FF</code>, I think.</p>",
        "id": 290504016,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658495528
    },
    {
        "content": "<p>Thanks, I'll try.</p>",
        "id": 290504132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658495600
    },
    {
        "content": "<p>That worked. I fixed 3 files and pushed.</p>",
        "id": 290506313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658496862
    },
    {
        "content": "<p><code>condensed/filtered_colimits</code> seems to be quite a nightmare.</p>",
        "id": 290508747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658498119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> how is the tensor file going?</p>",
        "id": 290508761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658498130
    },
    {
        "content": "<p>It should (hopefully) be almost done. I had to generalize the universe of <code>for_mathlib/AddCommGroup.lean</code> and we are missing a universe polymorphic <code>has_biproducts_of_shape_of_has_finite_biproducts</code>.</p>",
        "id": 290508967,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658498230
    },
    {
        "content": "<p>for_mathlib should be all fixed if lean didn't lie to me</p>",
        "id": 290523174,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658502641
    },
    {
        "content": "<p>I'm working on <code>condensed/acyclic</code></p>",
        "id": 290527604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658504477
    },
    {
        "content": "<p>done, and now I need to go</p>",
        "id": 290531213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658505944
    },
    {
        "content": "<p>I fixed <code>condesed/filtered_colimits</code>.</p>",
        "id": 290561428,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658521259
    },
    {
        "content": "<p>What a mess!</p>",
        "id": 290561438,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658521267
    },
    {
        "content": "<p>Wow! I had 3 attempts that all failed</p>",
        "id": 290563063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658521638
    },
    {
        "content": "<p>It looks like <code>pseudo_normed_group/Qprime</code> is the next pain in the ***.</p>\n<p>I wonder whether it would be easier to revert <code>Pow</code> to how it was before this attempted bump (i.e. defined as biproducts over ulifts of <code>fin n</code> as opposed to <code>fin n</code> itself). There is an instance missing, but I think this would make <code>Qprime</code> easier to handle.</p>",
        "id": 290577686,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658531577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/290577686\">said</a>:</p>\n<blockquote>\n<p>It looks like <code>pseudo_normed_group/Qprime</code> is the next pain in the ***.</p>\n<p>I wonder whether it would be easier to revert <code>Pow</code> to how it was before this attempted bump (i.e. defined as biproducts over ulifts of <code>fin n</code> as opposed to <code>fin n</code> itself). There is an instance missing, but I think this would make <code>Qprime</code> easier to handle.</p>\n</blockquote>\n<p>Scratch that... <code>pseudo_normed_group/Qprime.lean</code> is now fixed.</p>",
        "id": 290582037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658536233
    },
    {
        "content": "<p>I <em>think</em> the branch will actually build with my latest commit. There may still be some linting remaining though</p>",
        "id": 290585748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658541358
    },
    {
        "content": "<p>There was one slightly concerning thing that came up that I will mention here, just so that we (maybe) remember it in the future.<br>\nOne of the last errors that came up in this branch was a maximum TC depth error in <code>Lbra/ext</code> in the decl <code>condensify_iso_extend</code>. <br>\nAdding the following instance fixed the issue, but there is probably some TC loop. What I don't know is whether the loop comes from mathlib, or from mathlib together will all of the hacky instances we have all over the place in LTE (I suppose the latter is more likely). </p>\n<p>I mentioned a brief comment in the following:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/615ffdbfee74760114a2c98b92287ccf7eb9ae1d/src/Lbar/ext.lean#L44\">https://github.com/leanprover-community/lean-liquid/blob/615ffdbfee74760114a2c98b92287ccf7eb9ae1d/src/Lbar/ext.lean#L44</a><br>\nIn case anyone has time to help diagnose, if the <code>:= {}</code> on line 47 of the file in the link above is replaced with <code>:= by apply_instance</code>, the same error should show up.</p>",
        "id": 290586000,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658541702
    },
    {
        "content": "<p>I'm starting the mathlib bump to mathlib master.</p>",
        "id": 290743940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658746339
    },
    {
        "content": "<p>I'm not going to rename <code>pseudo_normed_group</code> to <code>pseudo_normed_add_comm_group</code> for now.</p>",
        "id": 290745586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658747409
    },
    {
        "content": "<p>Is <code>pseudo_normed_group</code> pseudo in the same sense as <code>pseudo_metric_space</code>?</p>",
        "id": 290746552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658748147
    },
    {
        "content": "<p>It is an algebraic version of a semi-norm, which is semi in the same sense as pseudometric space is pseudo.</p>",
        "id": 290746980,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658748434
    },
    {
        "content": "<p>I pushed to <code>mathlib-bump-25-jul-22</code>.</p>",
        "id": 290764416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658758768
    },
    {
        "content": "<p>Modulo</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pullbacks.lean</span><span class=\"o\">:</span><span class=\"mi\">117</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">pullback_cone.fst</span> <span class=\"n\">S</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">≌</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">has_pullback</span> <span class=\"o\">(</span><span class=\"n\">e.inverse.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.inverse.map</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">cospan</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">S.X</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">e.pullback_cone</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≫</span> <span class=\"n\">e.functor.map</span> <span class=\"n\">pullback.fst</span> <span class=\"bp\">≫</span> <span class=\"n\">e.counit.app</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">pullback_cone.fst</span> <span class=\"n\">S</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">e.inverse.map</span> <span class=\"o\">(</span><span class=\"n\">S.π.app</span> <span class=\"n\">walking_cospan.left</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">e.unit_iso.hom.app</span> <span class=\"o\">(</span><span class=\"n\">e.inverse.obj</span> <span class=\"n\">S.X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n      <span class=\"n\">e.inverse.map</span> <span class=\"o\">(</span><span class=\"n\">e.counit_iso.hom.app</span> <span class=\"n\">S.X</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n        <span class=\"n\">e.inverse.map</span> <span class=\"n\">m</span> <span class=\"bp\">≫</span> <span class=\"n\">e.unit_iso.inv.app</span> <span class=\"o\">(</span><span class=\"n\">pullback</span> <span class=\"o\">(</span><span class=\"n\">e.inverse.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e.inverse.map</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">pullback.fst</span>\n</code></pre></div>\n<p>I think that <code>for_mathlib</code> is error-free.</p>",
        "id": 290764520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658758807
    },
    {
        "content": "<p>I'm working on making <code>thm95</code> error-free.</p>",
        "id": 290765903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658759442
    },
    {
        "content": "<p>That seems to be done. Looking at <code>condensed/</code> next.</p>",
        "id": 290769443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658760930
    },
    {
        "content": "<p>I've been pushing a bunch of fixes. Unfortunately I find it hard to say how much of the project compiles, and how much still needs to be fixed. Does Lean have a way of reporting this?</p>",
        "id": 290786638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658767457
    },
    {
        "content": "<p><code>condensed/</code> seems to be error-free</p>",
        "id": 290788604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658768349
    },
    {
        "content": "<p>Is the error in for_mathlib fixed yet? I could try if it is not.</p>",
        "id": 290792766,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658770409
    },
    {
        "content": "<p>I just did</p>",
        "id": 290792791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658770423
    },
    {
        "content": "<p>Things are tentatively looking good. I'm compiling <code>ext_aux1.lean</code> locally.</p>",
        "id": 290793652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658770877
    },
    {
        "content": "<p>Locally, it builds. But CI might complain at the linting step.</p>",
        "id": 290795198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658771664
    },
    {
        "content": "<p>One linting error. I pushed a fix.</p>",
        "id": 290798368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658773160
    },
    {
        "content": "<p>It's merged! The elephant is no longer in the room!</p>",
        "id": 290800689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658774214
    },
    {
        "content": "<p>I'll believe it when the table at the bottom of <br>\n<a href=\"https://leanprover-community.github.io/lean_projects.html\">https://leanprover-community.github.io/lean_projects.html</a><br>\nis updated ;)</p>",
        "id": 290800899,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658774284
    },
    {
        "content": "<p>Amazing! That means I can more easily work on <code>nnrat</code> and Gordan.</p>",
        "id": 290800934,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658774307
    },
    {
        "content": "<p>That table is apparently broken and possibly at the end of it's life due to a low ROI on maintaining it</p>",
        "id": 290853494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658816470
    },
    {
        "content": "<p>I wanted to do a bump, but I very quickly got stuck with <a href=\"https://github.com/leanprover-community/mathlib/pull/15690\">#15690</a>. The definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homological_complex.hom.prev\">docs#homological_complex.hom.prev</a> changed, and the docstring is now false, right? If there is no <code>i</code> such that <code>r i j</code>, then <code>c.prev j = j</code> and I think <code>f.prev j</code> is <code>f.f j</code>.</p>",
        "id": 292483647,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1659985911
    },
    {
        "content": "<p>yeah that docstring is wrong</p>",
        "id": 292483775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659985977
    },
    {
        "content": "<p>(also, the name of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/X_prev_iso_zero\">docs#X_prev_iso_zero</a> and friends is now wrong)</p>",
        "id": 292483784,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1659985981
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">homological_complex.prev_eq_zero'</span> <span class=\"o\">[</span><span class=\"n\">has_zero_morphisms</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">C</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c.prev</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.prev</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>in <code>for_mathlib/homological_complex_map_d_to_d_from</code> is now false, and should be stated using the isomorphism above. Do you think it is going to affect a lot of stuff in other files?</p>",
        "id": 292483927,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1659986061
    },
    {
        "content": "<p>no I think the correct thing to do now is to use the fact that <code>X.d j j = 0</code></p>",
        "id": 292484015,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659986125
    },
    {
        "content": "<p>I guess the hope is that lemmas such as this will no longer be necessary. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> thoughts?</p>",
        "id": 292484134,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659986196
    },
    {
        "content": "<p>where is this <code>prev_eq_zero'</code> used?</p>",
        "id": 292484202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659986262
    },
    {
        "content": "<p>For example, <a href=\"https://github.com/leanprover-community/lean-liquid/blob/9701fc4a29514852b599e9732c2409f34153ce2a/src/for_mathlib/homological_complex_map_d_to_d_from.lean#L31\">https://github.com/leanprover-community/lean-liquid/blob/9701fc4a29514852b599e9732c2409f34153ce2a/src/for_mathlib/homological_complex_map_d_to_d_from.lean#L31</a> should now be true just by definition!</p>",
        "id": 292484496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659986412
    },
    {
        "content": "<p>I just returned from a week of holidays. I should probably do this bump, because I also made that mathlib PR.</p>",
        "id": 292484592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1659986468
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15940\">#15940</a> for the modifications not done in the previous PR</p>",
        "id": 292484792,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1659986557
    },
    {
        "content": "<p>I just started working on the bump. 1 file done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">leanpkg.toml</span>                                             <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex_map_d_to_d_from.lean</span> <span class=\"bp\">|</span> <span class=\"mi\">147</span> <span class=\"bp\">+++++++++++++++++++++</span><span class=\"c1\">------------------------------------------------------------------------------------------------------------------------------</span>\n <span class=\"mi\">2</span> <span class=\"n\">files</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"mi\">22</span> <span class=\"n\">insertions</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"mi\">127</span> <span class=\"n\">deletions</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 292531298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660026687
    },
    {
        "content": "<p>I pushed what I have so far to <code>mathlib-bump-aug-09</code></p>",
        "id": 292599235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660058560
    },
    {
        "content": "<p>The proof strategy for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">homology_embed_nat_iso</span> <span class=\"o\">(</span><span class=\"bp\">𝓐</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">ι₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">ι₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">c₁.embedding</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">e.c_iff</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">ι₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">ι₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">e.f</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">embed</span> <span class=\"n\">e</span> <span class=\"bp\">⋙</span> <span class=\"n\">homology_functor</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₂</span> <span class=\"n\">i₂</span> <span class=\"bp\">≅</span> <span class=\"n\">homology_functor</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₁</span> <span class=\"n\">i₁</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is now broken...</p>",
        "id": 292599307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660058586
    },
    {
        "content": "<p>But that isom is still true. We just need a new way to fill it in.</p>",
        "id": 292599349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660058606
    },
    {
        "content": "<p>I don't know if this compiles for you; my version of the branch is all broken.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">homology_embed_nat_iso</span> <span class=\"o\">(</span><span class=\"bp\">𝓐</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"bp\">𝓐</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">ι₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">ι₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">c₁.embedding</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">e.c_iff</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">ι₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">ι₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁₂</span> <span class=\"o\">:</span> <span class=\"n\">e.f</span> <span class=\"n\">i₁</span> <span class=\"bp\">=</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">embed</span> <span class=\"n\">e</span> <span class=\"bp\">⋙</span> <span class=\"n\">homology_functor</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₂</span> <span class=\"n\">i₂</span> <span class=\"bp\">≅</span> <span class=\"n\">homology_functor</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₁</span> <span class=\"n\">i₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">calc</span> <span class=\"n\">embed</span> <span class=\"n\">e</span> <span class=\"bp\">⋙</span> <span class=\"n\">homology_functor</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₂</span> <span class=\"n\">i₂</span> <span class=\"bp\">≅</span>\n    <span class=\"n\">embed</span> <span class=\"n\">e</span> <span class=\"bp\">⋙</span> <span class=\"o\">(</span><span class=\"n\">short_complex.functor_homological_complex</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₂</span> <span class=\"n\">i₂</span> <span class=\"bp\">⋙</span>\n      <span class=\"n\">short_complex.homology_functor</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≅</span> <span class=\"o\">(</span><span class=\"n\">embed</span> <span class=\"n\">e</span> <span class=\"bp\">⋙</span> <span class=\"n\">short_complex.functor_homological_complex</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₂</span> <span class=\"n\">i₂</span><span class=\"o\">)</span> <span class=\"bp\">⋙</span>\n      <span class=\"n\">short_complex.homology_functor</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≅</span> <span class=\"n\">short_complex.functor_homological_complex</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₁</span> <span class=\"n\">i₁</span> <span class=\"bp\">⋙</span>\n    <span class=\"n\">short_complex.homology_functor</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≅</span> <span class=\"n\">homology_functor</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₁</span> <span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">iso_whisker_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">short_complex.homology_functor_iso</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₂</span> <span class=\"n\">i₂</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">functor.associator</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h₁₂</span><span class=\"o\">,</span>\n    <span class=\"n\">congr'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">short_complex.homology_functor_iso</span> <span class=\"bp\">𝓐</span> <span class=\"n\">c₁</span> <span class=\"n\">i₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292605524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660060524
    },
    {
        "content": "<p>I just took the line which didn't work, tried <code>subst</code> and then apparently <code>congr'</code> works, but honestly I have errors before this in the file, I have errors in imports, this might be nonsense.</p>",
        "id": 292605711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660060570
    },
    {
        "content": "<p><code>  { subst h₁₂, refl, },</code> works for me too.</p>",
        "id": 292605859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660060623
    },
    {
        "content": "<p>Ooh, maybe oleans did something weird. Let me try to compile.</p>",
        "id": 292606843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660060915
    },
    {
        "content": "<p>Does the proof not work at your end?</p>",
        "id": 292608254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660061342
    },
    {
        "content": "<p>Sorry, I'm a bit flooded by bureaucracy. Back at this problem. I don't see errors in imports at the moment.</p>",
        "id": 292611542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660062380
    },
    {
        "content": "<p><code>subst h₁₂, congr'</code> doesn't work for me.</p>",
        "id": 292611769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660062442
    },
    {
        "content": "<p>It would also be very surprising. Because afaict that line is just false, with current mathlib.</p>",
        "id": 292611868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660062477
    },
    {
        "content": "<p>Ooh, that's not actually true. The line is still fine. But the proof can not start with <code>refine iso_whisker_right _</code>. After that you would end up with something that isn't true.</p>",
        "id": 292612178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660062566
    },
    {
        "content": "<p>I do not have time now to fix this immediately, but I think one may remove the <code>e.c_iff</code> assumption which I introduced only as a convenience.</p>",
        "id": 292612313,
        "sender_full_name": "Joël Riou",
        "timestamp": 1660062607
    },
    {
        "content": "<p>I think you need <code>e.c_iff</code>. What happens if you have a discrete <code>complex_shape</code> that doesn't have any <code>rel i j</code> and you embed it into a \"normal\" complex shape?</p>",
        "id": 292612947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660062821
    },
    {
        "content": "<p>Oh, I had the correct lean-liquid oleans but probably incorrect mathlib oleans. Sorry for the noise!</p>",
        "id": 292613038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660062846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/292612947\">said</a>:</p>\n<blockquote>\n<p>I think you need <code>e.c_iff</code>. What happens if you have a discrete <code>complex_shape</code> that doesn't have any <code>rel i j</code> and you embed it into a \"normal\" complex shape?</p>\n</blockquote>\n<p>Ooh never mind, I guess it actually still works out.</p>",
        "id": 292613070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660062859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/292613070\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/292612947\">said</a>:</p>\n<blockquote>\n<p>I think you need <code>e.c_iff</code>. What happens if you have a discrete <code>complex_shape</code> that doesn't have any <code>rel i j</code> and you embed it into a \"normal\" complex shape?<br>\n</p>\n</blockquote>\n</blockquote>\n<p>Ah, I do not remember the details, but in your example, the <code>d_to</code> and <code>d_from</code> are all zeros, so that homologies are trivially the same.<br>\nInstead of constructing an isomorphism between two functors to <code>short_complex</code> as I initially did, a possible approach would be to define a natural transformation between two functors with values in <code>short_complex</code>, and then show it is an isomorphism object by object, which may require dealing with many cases...</p>",
        "id": 292613919,
        "sender_full_name": "Joël Riou",
        "timestamp": 1660063171
    },
    {
        "content": "<p>I have some time now to play with this... what branch is this on?</p>",
        "id": 292617739,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660064364
    },
    {
        "content": "<p>and what file?</p>",
        "id": 292617748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660064366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/292599235\">said</a>:</p>\n<blockquote>\n<p>I pushed what I have so far to <code>mathlib-bump-aug-09</code></p>\n</blockquote>\n<p>It's in the file <code>for_mathlib/complex_extend</code></p>",
        "id": 292617907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660064418
    },
    {
        "content": "<p>Bah, we have <code>embed_iso</code>, but not <code>embed_prev_iso</code> or <code>embed_next_iso</code>.</p>",
        "id": 292622225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660065801
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ leanproject get-mathlib-cache\nSHA b<span class=\"s1\">'ec818836889c031d4035c928bcbc638af5fbd736'</span> could not be resolved, git returned: b<span class=\"s1\">'ec818836889c031d4035c928bcbc638af5fbd736 missing'</span>\n</code></pre></div>",
        "id": 292626464,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660067313
    },
    {
        "content": "<p>on this branch....</p>",
        "id": 292626477,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660067318
    },
    {
        "content": "<p>The file <code>for_mathlib/homological_complex_map_d_from_d</code> seems broken on my end as well... can someone reproduce?</p>",
        "id": 292629800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660068413
    },
    {
        "content": "<p>Is there a way to tell <code>leanproject</code> to pull the correct commit based on the hash in the <code>toml</code> file of a non-mathlib project?</p>",
        "id": 292631567,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660069043
    },
    {
        "content": "<p>I had to do things manually with git in the <code>_target</code> folder.</p>",
        "id": 292631611,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660069065
    },
    {
        "content": "<p>Unforunately... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">embed_prev_iso</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">embed</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X_prev</span> <span class=\"o\">(</span><span class=\"n\">e.f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">X.X_prev</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>isn't just <code>embed_iso</code>, so all the nice stuff we gained by redefining <code>prev</code> and <code>next</code> no longer applies when we have to deal with embedings :(</p>",
        "id": 292637941,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660071363
    },
    {
        "content": "<p>here <code>embed_iso</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">embed_iso</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">embed</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">e.f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">X.X</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 292638149,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660071449
    },
    {
        "content": "<p>Can we redefine the stuff around embeddings so that we get better defeqs? Is it worth it?</p>",
        "id": 292638932,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660071706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/292638932\">said</a>:</p>\n<blockquote>\n<p>Can we redefine the stuff around embeddings so that we get better defeqs? Is it worth it?</p>\n</blockquote>\n<p>I do not think so. When we embed <code>ℕ</code> in <code>ℤ</code> (with the <code>chain_complex</code> convention) and start with a complex <code>K</code> indexed by <code>ℕ</code>, the homology comparison in degree <code>0</code> will be between the homology of the short complex <code>K.X 1 ⟶ K.X 0 ⟶ K.X 0</code> (the right map is zero) and the homology of <code>K.X 1 ⟶ K.X 0 ⟶ 0</code>. With the homology refactor,  <code>embed_next_iso</code> no longer exists.<br>\nWhat I suggested above is that one may still define a (natural) map of <code>short_complex</code> (take the identities when there are available, and <code>0</code> in the \"irrelevant\" cases), and it should be an isomorphism on homology.</p>",
        "id": 292644301,
        "sender_full_name": "Joël Riou",
        "timestamp": 1660073788
    },
    {
        "content": "<p>And I guess that checking that it is an isom involves 4 cases?</p>",
        "id": 292644864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660074032
    },
    {
        "content": "<p>Depending on whether <code>prev</code>/<code>next</code> exists or not.</p>",
        "id": 292644939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660074064
    },
    {
        "content": "<p>Yes, that is the idea. Actually, in order to have better definitional properties for the homology iso, instead of a natural transformation which turns out to be an iso, it should be possible to define natural transformations with values in <code>short_complex</code> in both directions, and then in homology, they would induce inverse isomorphisms.</p>",
        "id": 292647251,
        "sender_full_name": "Joël Riou",
        "timestamp": 1660075003
    },
    {
        "content": "<p>So can someone explain again why we shouldn't just change the definition of complexes to be a bunch of short complexes glued with isomorphisms?</p>",
        "id": 292647428,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660075071
    },
    {
        "content": "<p>Maybe we should do that refactor of mathlib before bothering with this bump?</p>",
        "id": 292648753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660075533
    },
    {
        "content": "<p>Well I though  we're not all in agreement that this was the way to go.</p>",
        "id": 292648860,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660075573
    },
    {
        "content": "<p>I'll mull over it again in my sleep tonight (-;</p>",
        "id": 292649118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660075675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/292647428\">said</a>:</p>\n<blockquote>\n<p>So can someone explain again why we shouldn't just change the definition of complexes to be a bunch of short complexes glued with isomorphisms?</p>\n</blockquote>\n<p>The \"bunch of short complexes\" approach has several problems. One was the definition of morphisms of complexes, which was not straightforward. (I have some concerns also about the definition of homotopies.) Another problem I see with the draft definition you outlined is that I am not sure that the map which sends a complex <code>K</code> to the short complex \"around a certain degree <code>n</code>\" would be a functor, because if <code>n</code> has no prev, you only required that the left map of the short complex be zero, not that the left object is zero (which we cannot do if we want to allow complexes in categories with no zero object). Then, with this definition, there is no reason that two isomorphic complexes have isomorphic associated short complexes.</p>\n<p>I think that the strategy I suggested above should work to get back <code>embed_homology_nat_iso</code>. Once the natural transformations are defined in both direction, the verification we have inverse isomorphims should follow mostly from statements like <code>of_g_are_zeros</code>, etc. at the end of <code>homology_map_datum.lean</code>.</p>",
        "id": 292654646,
        "sender_full_name": "Joël Riou",
        "timestamp": 1660077884
    },
    {
        "content": "<p>The functoriality issue is easy to solve: ensure <code>is_zero</code> instead of just the morphism being zero. Yes, keeping track of the various isomorphisms would be tedious at first, but I think we just have to do this once then forget about all the coherences because they would be part of the data! With the current approach, it seems that we have to chase these isomorphisms whenever we pass to short complexes and/or homology. I would rather have slightly more pain at the start instead of constant mild pain every time we deal with homology.</p>",
        "id": 292655295,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660078194
    },
    {
        "content": "<p>Ensuring <code>is_zero</code> doesn't address Joël's point that we would rule out complexes in categories without a zero object. Note that we use those in LTE: stuff like <code>breen_deligne.data</code>.</p>\n<p>Also, I don't think this approach would make it easier to define <code>embed</code>. (Also not much harder, to be fair.)<br>\nYou will have to construct the short complex in degree <code>-1</code> will be. And this involves two zero-objects, and the non-trivial <code>X_next</code> coming from the object in degree <code>0</code>.</p>\n<p>So for the issue at hand, I don't think this refactor will save us any work.</p>",
        "id": 292693314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660107167
    },
    {
        "content": "<p>I have implemented part of ideas I suggested for <code>homology_embed_nat_iso</code> in the following commit <a href=\"https://github.com/leanprover-community/lean-liquid/commit/88a880feb20226290b5d2f153fb4aa2c01494e10\">https://github.com/leanprover-community/lean-liquid/commit/88a880feb20226290b5d2f153fb4aa2c01494e10</a></p>",
        "id": 292704987,
        "sender_full_name": "Joël Riou",
        "timestamp": 1660116163
    },
    {
        "content": "<p>I have fixed one sorry about the commutativity of some square (the proof is not very elegant, but at least it works). The others sorries should be similar.</p>",
        "id": 292714417,
        "sender_full_name": "Joël Riou",
        "timestamp": 1660120759
    },
    {
        "content": "<p>If we have a category with zero morphisms, then I think you can formally adjoin a zero object in a \"free\" way. In an ideal world it would be seamless to go back and forth between the original category and such a gadget. Unfortunately, I don't think we live in such an ideal world :(</p>\n<p>Anyway, I was already convinced before that we need to allow complexes for categories with no zero object (even though you had to remind me!) and now I'm convinced that just assuming a morphism is zero on the extremes is not good because of funcotriality issues, as Joel pointed out. So I think the idea of gluing short complexes might be dead in the water. </p>\n<p>But that doesn't change the fact that I think the current approach to complexes and homology isn't great. We want Lean to be a tool that regular mathematicians can use, so we should build out theories to match mathematicians' intuition as closely as possible, and I think the current definitions here are very far from doing that. </p>\n<p>So what else can we do? I have another (completely different) idea that I'll try to sketch.</p>",
        "id": 292736597,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660131020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/292736597\">said</a>:</p>\n<blockquote>\n<p>But that doesn't change the fact that I think the current approach to complexes and homology isn't great. We want Lean to be a tool that regular mathematicians can use, so we should build out theories to match methematicians' intuition as closely as possible, and I think the current definitions here are very far from doing that. </p>\n</blockquote>\n<p>Completely agreed.</p>",
        "id": 292740199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660132555
    },
    {
        "content": "<p><code>homology_embed_nat_iso</code> is almost done now. There are only three sorries (which are essentially isomorphic to the first ugly proof in <code>embed_short_complex_ι</code>in <code>complex_extend.lean</code>. If anyone wants to tidy this proof and duplicate it (changing prev/next, etc), feel free to do so, as I will not have time to do it today (India/Chennai time). (As I suggested above, I have removed the unnecessary <code>iff</code> assumption, so that a little fix should be necessary in the files which refer to <code>homology_embed_nat_iso</code>.)</p>",
        "id": 292749942,
        "sender_full_name": "Joël Riou",
        "timestamp": 1660136341
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 292755190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660138258
    },
    {
        "content": "<p>Are the problems with cohomology really because of the definitions, or are we actually just missing good API? Why should the definitions matter? In Isabelle they don't!</p>",
        "id": 292767184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660142199
    },
    {
        "content": "<p>Kevin when is the last time you considered the differential from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>37</mn></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C^{37}(G,A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">37</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C^2(G,A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mo>∗</mo></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C^*(G,A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> is the complex of inhomogeneous cochains of a group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>?</p>",
        "id": 292768429,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660142598
    },
    {
        "content": "<p>You just don't like the fact that it makes sense? Yeah I didn't like that 1/0 made sense for a while. But do you think we can do spectral sequences with what we have?</p>",
        "id": 292792002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660150005
    },
    {
        "content": "<p>I think it's an important point to keep spectral sequences in mind!</p>",
        "id": 292793998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660150651
    },
    {
        "content": "<p>Or have they all been replaced with derived functors nowadays? Or even the derived infinity category?</p>",
        "id": 292794245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660150727
    },
    {
        "content": "<p>Do we really want differentials going all over the place on the <code>E_2</code> instead of just somehow restricting to <code>E i j -&gt; E (i+2) (j-1)</code>? I don't know.</p>",
        "id": 292794347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660150760
    },
    {
        "content": "<p>Sure, derived functors are the right level of generality, but things like the Serre spectral sequence are still important for explicit calculations which we should be able to do!</p>",
        "id": 292794543,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660150822
    },
    {
        "content": "<p>We have to have the differentials everywhere for the same reason we ended up having them everywhere on the E1 page</p>",
        "id": 292794649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660150859
    },
    {
        "content": "<p>Actually we only had arbitrary horizontal ones I guess</p>",
        "id": 292794725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660150882
    },
    {
        "content": "<p>Aside: should we make a separate homology stream to discuss this stuff?</p>",
        "id": 292794772,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660150902
    },
    {
        "content": "<p>Hmm, maybe 3 or 4 topics in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> also works? But ey, streams are cheap. I don't care (-;</p>",
        "id": 292794880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660150937
    },
    {
        "content": "<p>The maths stream is fine, but it's easy for things to get lost in there.</p>",
        "id": 292794985,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660150973
    },
    {
        "content": "<p>I can do it when I get back to my computer, if <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> doesn't beat me to it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 292795113,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660151025
    },
    {
        "content": "<p>See <a class=\"stream\" data-stream-id=\"335062\" href=\"/#narrow/stream/335062-homological-algebra\">#homological algebra</a></p>",
        "id": 292795367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660151102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/292749942\">said</a>:</p>\n<blockquote>\n<p><code>homology_embed_nat_iso</code> is almost done now. There are only three sorries (which are essentially isomorphic to the first ugly proof in <code>embed_short_complex_ι</code>in <code>complex_extend.lean</code>. If anyone wants to tidy this proof and duplicate it (changing prev/next, etc), feel free to do so, as I will not have time to do it today (India/Chennai time). (As I suggested above, I have removed the unnecessary <code>iff</code> assumption, so that a little fix should be necessary in the files which refer to <code>homology_embed_nat_iso</code>.)</p>\n</blockquote>\n<p>Fixed the remaining sorries.</p>",
        "id": 293059820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660290098
    },
    {
        "content": "<p>Bah, this bump is quite annoying.</p>",
        "id": 293317492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660421328
    },
    {
        "content": "<p>I made it to 50% of mapping_cone.lean</p>",
        "id": 293955268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660762032
    },
    {
        "content": "<p>I was hoping to continue today, after a bunch of travelling/holidays. But Deutsche Bahn has decided that I'll have to do it without the computational power of the beast in my office.</p>",
        "id": 295803792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661762858
    },
    {
        "content": "<p>DB allowed me to travel to my office today. <code>mapping_cone.lean</code> has been fixed.</p>\n<p><a href=\"/user_uploads/3121/tGW5i2ix8wJwyOSKVUK3ptL6/db_logo.jpg\">db_logo.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tGW5i2ix8wJwyOSKVUK3ptL6/db_logo.jpg\" title=\"db_logo.jpg\"><img src=\"/user_uploads/3121/tGW5i2ix8wJwyOSKVUK3ptL6/db_logo.jpg\"></a></div>",
        "id": 296069682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661853445
    },
    {
        "content": "<p>Should compile now: <a href=\"https://github.com/leanprover-community/lean-liquid/pull/122\">https://github.com/leanprover-community/lean-liquid/pull/122</a></p>",
        "id": 296169969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661878543
    },
    {
        "content": "<p>Nice work!</p>",
        "id": 296170131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661878599
    },
    {
        "content": "<p>I particularly like <a href=\"https://github.com/leanprover-community/lean-liquid/pull/122/files#diff-ef25eff2213ff3cc983adabc2279c500d329f4eecf29f20ba80262ff44aa5a67R330\">https://github.com/leanprover-community/lean-liquid/pull/122/files#diff-ef25eff2213ff3cc983adabc2279c500d329f4eecf29f20ba80262ff44aa5a67R330</a></p>",
        "id": 296170586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661878739
    },
    {
        "content": "<p>I will be absolutely honest and say that I was looking at the diff and it was precisely that line which motivated my previous post!</p>\n<p>I also looked at the recent diff for the mathlib bump to new Lean. That's coming your way...(fortunately most of the changes seem trivial, it's just that there might be many many changes...)</p>",
        "id": 296171006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661878848
    },
    {
        "content": "<p>Oh does that mean we can now bump to <code>nnrat</code>?</p>",
        "id": 296171752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661879064
    },
    {
        "content": "<p>Almost! Still need to have CI give the green flag on this PR.</p>",
        "id": 296172245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661879241
    },
    {
        "content": "<p>It builds, but the linter complains: <a href=\"https://github.com/leanprover-community/lean-liquid/runs/8101380577?check_suite_focus=true\">https://github.com/leanprover-community/lean-liquid/runs/8101380577?check_suite_focus=true</a></p>",
        "id": 296221395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661893626
    },
    {
        "content": "<p>I'm done for the day though</p>",
        "id": 296221410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661893634
    },
    {
        "content": "<p>I am fixing the linter.</p>",
        "id": 296229380,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1661897578
    },
    {
        "content": "<p>It's merged!</p>",
        "id": 296250661,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1661915657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> thanks so much</p>",
        "id": 296257060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661922813
    },
    {
        "content": "<p>Let me start a new bump then!</p>",
        "id": 296262869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661926934
    },
    {
        "content": "<p>I can join you in ~ 20 mins.</p>",
        "id": 296263210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661927179
    },
    {
        "content": "<p>Somehow <code>mapping_cone.lean</code> is now in the deps of <code>liquid.lean</code>.</p>",
        "id": 296271498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661931719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> fixed Gordan.lean.</p>",
        "id": 296274326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661932875
    },
    {
        "content": "<p>Now <code>liquid.lean</code> compiles. I'll work on the rest of the bump.</p>",
        "id": 296274346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661932886
    },
    {
        "content": "<p>It compiles locally. This bump was easy-peasy-lemon-squeezy. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 296282459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661936223
    },
    {
        "content": "<p>And it is merged!</p>",
        "id": 296300755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661943751
    },
    {
        "content": "<p>That is awesome! You're on today's mathlib. I seriously thought that it would go like the perfectoid project -- beyond some point it would just prove too hard to bump. That's amazing that it's all compiling and also all up to date. Congratulations.</p>",
        "id": 296360338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661960326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> can you have a look at branch <code>bump-24-sep</code>? There is an error in <code>src/free_pfpng/epi.lean</code> related to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_signed_sum\">docs#exists_signed_sum</a> univ, that you PRed to mathlib with a slightly different statement. I am catching a plane and I won't probably have time to fix it today, but it shouldn't be too hard. Thanks!</p>\n<p>In any case if someone else wants to keep on doing the bump feel free to do so, it seems rather easy.</p>",
        "id": 300605564,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664078591
    },
    {
        "content": "<p>It's not completely trivial to go from the version I PRed to the version we need, so it might take a week until I have time to fix this properly.</p>",
        "id": 300687291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664136985
    },
    {
        "content": "<p>If it's complicated we can just change the name of the LTE version</p>",
        "id": 300693460,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664142273
    },
    {
        "content": "<p>I think that's maybe the easy fix that we should go for in this mathlib bump.</p>",
        "id": 300719339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664169514
    },
    {
        "content": "<p>Then Yaël can refactor whenever they want/have time.</p>",
        "id": 300719357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664169532
    },
    {
        "content": "<p>We're being bitten by</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\">1c1</span>\n<span class=\"w\">&lt; has type</span>\n<span class=\"gd\">---</span><span class=\"w\"></span>\n<span class=\"w\">&gt; but is expected to have type</span>\n<span class=\"w\">22,24c22,23</span>\n<span class=\"w\">&lt;        (@category_theory.abelian.to_preadditive.{u+1 u+2} Ab.{u+1} AddCommGroup.large_category.{u+1}</span>\n<span class=\"w\">&lt;           AddCommGroup.category_theory.abelian.{u+1}))</span>\n<span class=\"w\">&lt;     (@category_theory.Sheaf.category_theory.preadditive.{u+2 u u+1} ExtrDisc.{u} ExtrDisc.category_theory.category.{u}</span>\n<span class=\"gd\">---</span><span class=\"w\"></span>\n<span class=\"w\">&gt;        AddCommGroup.category_theory.preadditive.{u+1})</span>\n<span class=\"w\">&gt;     (@category_theory.Sheaf.preadditive.{u u+1 u+1 u+2} ExtrDisc.{u} ExtrDisc.category_theory.category.{u}</span>\n<span class=\"w\">28,29c27</span>\n<span class=\"w\">&lt;        (@category_theory.abelian.to_preadditive.{u+1 u+2} Ab.{u+1} AddCommGroup.large_category.{u+1}</span>\n<span class=\"w\">&lt;           AddCommGroup.category_theory.abelian.{u+1}))</span>\n<span class=\"gd\">---</span><span class=\"w\"></span>\n<span class=\"w\">&gt;        AddCommGroup.category_theory.preadditive.{u+1})</span>\n</code></pre></div>",
        "id": 300723471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664172602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> do you recognize a change in category theory that might have caused this?</p>",
        "id": 300725001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664173523
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">free_Cech'_iso_ExtrDisc</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Condensed_ExtrSheaf_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inverse.map_homological_complex</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">free_Cech'</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≅</span>\n  <span class=\"n\">free_ExtrDisc_Cech'</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">ExtrDisc_sheafification_iso</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"n\">whiskering_Cech_comp_iso</span> <span class=\"n\">F</span>\n  <span class=\"o\">(</span><span class=\"n\">Profinite_to_Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⋙</span> <span class=\"n\">CondensedSet_to_Condensed_Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n  <span class=\"o\">((</span><span class=\"n\">Condensed_ExtrSheaf_equiv.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">inverse</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Profinite_to_ExtrDisc_presheaf_Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⋙</span> <span class=\"n\">presheaf_to_Sheaf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">ExtrDisc.proetale_topology.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">$</span>\n<span class=\"n\">nat_iso.of_components</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">e.symm.app</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat_iso.app_hom</span><span class=\"o\">],</span>\n  <span class=\"n\">erw</span> <span class=\"n\">e.symm.hom.naturality</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"bp\">≪≫</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">free_ExtrDisc_Cech'</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">iso.refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>yields</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">arrow.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">whiskering_left.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">ExtrDisc.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">ExtrDisc_to_Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">⋙</span> <span class=\"n\">presheaf_to_Sheaf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">ExtrDisc.proetale_topology.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">≅</span> <span class=\"n\">presheaf_to_Sheaf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">proetale_topology.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">⋙</span> <span class=\"o\">(</span><span class=\"n\">Condensed_ExtrSheaf_equiv.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">inverse</span> <span class=\"o\">:=</span> <span class=\"n\">ExtrDisc_sheafification_iso.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Sheaf.preadditive.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">abelian.to_preadditive.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Did someone change anything about preadditive instances?</p>",
        "id": 300860067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664211619
    },
    {
        "content": "<p>BTW, <code>abelian C</code> is a subsingleton. Does someone want to prove this?</p>",
        "id": 300860502,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664211745
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16403\">#16403</a> just got merged, so it cannot be the guilty, but maybe it is worth to upgrade mathlib to it to avoid duplicating the work</p>",
        "id": 300861249,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664211977
    },
    {
        "content": "<p>it will take quite a lot of work to bump to <a href=\"https://github.com/leanprover-community/mathlib/pull/16403\">#16403</a></p>",
        "id": 300861452,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664212042
    },
    {
        "content": "<p>but of course we should do it.</p>",
        "id": 300861484,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664212052
    },
    {
        "content": "<p>I'm SO confused:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">free_Cech'_iso_ExtrDisc</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Condensed_ExtrSheaf_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inverse.map_homological_complex</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">free_Cech'</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≅</span>\n  <span class=\"n\">free_ExtrDisc_Cech'</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">ExtrDisc_sheafification_iso</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"n\">whiskering_Cech_comp_iso</span> <span class=\"n\">F</span>\n  <span class=\"o\">(</span><span class=\"n\">Profinite_to_Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⋙</span> <span class=\"n\">CondensedSet_to_Condensed_Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n  <span class=\"o\">((</span><span class=\"n\">Condensed_ExtrSheaf_equiv.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">inverse</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Profinite_to_ExtrDisc_presheaf_Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⋙</span> <span class=\"n\">presheaf_to_Sheaf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">ExtrDisc.proetale_topology.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">$</span>\n<span class=\"n\">nat_iso.of_components</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">e.symm.app</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat_iso.app_hom</span><span class=\"o\">],</span>\n  <span class=\"n\">erw</span> <span class=\"n\">e.symm.hom.naturality</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">)</span> <span class=\"bp\">≪≫</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">free_ExtrDisc_Cech'</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">iso.refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">preadditive.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_comm_group.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Are these defeq? If so, why can't lean figure it out!?</p>",
        "id": 300861695,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664212121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/The.20elephant.20in.20the.20room/near/300860502\">said</a>:</p>\n<blockquote>\n<p>BTW, <code>abelian C</code> is a subsingleton. Does someone want to prove this?</p>\n</blockquote>\n<p>We have it (well, essentially)! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.subsingleton_preadditive_of_has_binary_biproducts\">docs#category_theory.subsingleton_preadditive_of_has_binary_biproducts</a></p>",
        "id": 300886081,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664220679
    },
    {
        "content": "<p>I fixed <code>condensed/acyclic.lean</code> in this branch.</p>",
        "id": 300906909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664229769
    },
    {
        "content": "<p>The issue was the <code>nsmul</code> and <code>zsmul</code> from the preadditive instance on <code>Sheaf _</code> was not defeq to what we had in LTE.<br>\nThe source of the issue was that mathlib now knows that sheaves of abelian groups form a preadditive category, but the preadditive instance is obtained via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_group\">docs#function.injective.add_comm_group</a> which doesn't give the expected defeq behavior for nsmul and zsmul</p>",
        "id": 300907161,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664229905
    },
    {
        "content": "<p>Anyway, once we bump past <a href=\"https://github.com/leanprover-community/mathlib/pull/16403\">#16403</a> then the abelian category instance on sheaves of abelian groups will come from mathlib and will end up having the mathlib preadditive instance, so all should be fine again.</p>",
        "id": 300907314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664229965
    },
    {
        "content": "<p>The fix for now was to use the preadditive instance from mathlib in LTE.</p>",
        "id": 300907329,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664229976
    },
    {
        "content": "<p>(plus some minor error that was fixed with an explicit universe annotation)</p>",
        "id": 300907353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1664229994
    },
    {
        "content": "<p>Ooh wow, ugly nasty bug. Thanks for fixing it!</p>",
        "id": 300929857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664247113
    },
    {
        "content": "<p>Thanks for finishing the bump!</p>",
        "id": 300970015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664271832
    }
]