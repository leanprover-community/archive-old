[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Could you please take a look at the branch <code>mathlib-bump-21-06-18</code>?</p>",
        "id": 243202475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046403
    },
    {
        "content": "<p>Sure, I'll take a look in a few hours</p>",
        "id": 243202526,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624046425
    },
    {
        "content": "<p>There is one error in <code>for_mathlib/Profinite/clopen_limit.lean</code> (line 404) that I don't immediately see how to fix.</p>",
        "id": 243202531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046430
    },
    {
        "content": "<p>The rest seems to be fine.</p>",
        "id": 243202539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046435
    },
    {
        "content": "<p>I'm on mobile now, but I can take a quick look now without writing any code</p>",
        "id": 243202589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624046469
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_locally_constant_factors</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">locally_constant</span> <span class=\"n\">C.X</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">gg</span> <span class=\"o\">:</span> <span class=\"n\">locally_constant</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">gg</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">C.π.app</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">discrete_quotient</span> <span class=\"n\">C.X</span> <span class=\"o\">:=</span> <span class=\"n\">ff.to_discrete_quotient</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">fff</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ff.desc</span><span class=\"o\">,</span> <span class=\"c1\">-- error is here</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfff</span> <span class=\"o\">:</span> <span class=\"n\">fff</span> <span class=\"bp\">∘</span> <span class=\"n\">S.proj</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff.factors</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">T</span><span class=\"o\">,</span><span class=\"n\">hT</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_discrete_quotient</span> <span class=\"n\">F</span> <span class=\"n\">C</span> <span class=\"n\">hC</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 243202703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046523
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">locally_constant</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">),</span>\n    <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">h</span> <span class=\"bp\">→</span> <span class=\"n\">function.injective</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">→</span> <span class=\"n\">locally_constant</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">u_1</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_inf</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">Profinite</span><span class=\"o\">,</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n<span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"n\">locally_constant</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">C.X</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">discrete_quotient</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">C.X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff.to_discrete_quotient</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gg</span> <span class=\"o\">:</span> <span class=\"n\">locally_constant</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"n\">gg</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">C.π.app</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">ff</span>\n</code></pre></div>",
        "id": 243202738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046541
    },
    {
        "content": "<p>Oh, that's because the <code>desc</code> that you removed is not the same <code>desc</code> that's now in mathlib</p>",
        "id": 243202917,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624046657
    },
    {
        "content": "<p>Right, but I don't see immediately how to fix it.</p>",
        "id": 243202963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046695
    },
    {
        "content": "<p>It's not just the order of arguments that changed, or something trivial like that.</p>",
        "id": 243202986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046710
    },
    {
        "content": "<p>So is there now a different decl that I need to use?</p>",
        "id": 243202999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046724
    },
    {
        "content": "<p>No, I still haven't added the necessary construction to mathlib.</p>",
        "id": 243203028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624046749
    },
    {
        "content": "<p>So I should unremove <code>desc</code> and call it <code>desc'</code>?</p>",
        "id": 243203078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624046766
    },
    {
        "content": "<p>Yeah, that should work for now.</p>",
        "id": 243203096,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624046778
    },
    {
        "content": "<p>I'm going to open a PR with a generalization of this theorem soon, so it won't stick around in <code>for_mathlib</code> for long <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 243203146,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624046815
    },
    {
        "content": "<p>mathlib bump now pushed to master</p>",
        "id": 243205581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624048360
    },
    {
        "content": "<p>I'm working on that followup PR now... N.B. it will depend on <a href=\"https://github.com/leanprover-community/mathlib/issues/7982\">#7982</a></p>",
        "id": 243206091,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624048700
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7992\">#7992</a></p>",
        "id": 243210168,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624051798
    },
    {
        "content": "<p>This should allow us to essentially completely remove the second half of <code>for_mathlib/Profinite/clopen_limit</code>.</p>",
        "id": 243210216,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624051819
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> , I have realised that the lemma introduced in <code>for_mathlib/finsupp</code> called <code>sum_eq_sum_fintype</code> was already in <code>mathlib</code>, as <code>finsupp.sum_fintype</code>. I have modified all the occurrences, and commented the whole <code>for_mathlib/finsupp</code>, so we can actually throw it away.</p>",
        "id": 243304543,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624198164
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 243345843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624259133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> In the future, feel free to just remove the file.</p>",
        "id": 243345959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624259219
    },
    {
        "content": "<p>mathlib bumped again</p>",
        "id": 243353987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624265096
    },
    {
        "content": "<p>What is the plan going forwards here? Right now the emphasis is on emptying <code>for_mathlib</code> before we go any further? [says the person whose term is finishing this Friday]</p>",
        "id": 243357953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624267682
    },
    {
        "content": "<p>Yes, I've had very little Lean time in the past two weeks... but people are working on PRing parts of <code>for_mathlib</code>, which is great!</p>",
        "id": 243358047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624267732
    },
    {
        "content": "<p>I'm working on getting rid of the <code>linear_algebra</code> file (see <a href=\"https://github.com/leanprover-community/mathlib/issues/7963\">#7963</a>) and of <code>kronecker</code></p>",
        "id": 243358053,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624267736
    },
    {
        "content": "<p>Besides such PRs, I want to work on documenting the files outside of <code>for_mathlib</code>.</p>",
        "id": 243358096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624267779
    },
    {
        "content": "<p>There is <code>normed_group_hom_equalizer.lean</code> that is more or less ready for PR.  My only hesitation is that I don't see any <code>monoid_hom.equalizer</code> in mathlib (but there is <code>alg_hom.equalizer</code>). It would be a little strange to have the equalizer for morphisms of normed groups but not  for groups...</p>",
        "id": 243358525,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624268042
    },
    {
        "content": "<p>I've bumped mathlib again to include <a href=\"https://github.com/leanprover-community/mathlib/issues/7875\">#7875</a>.</p>",
        "id": 243398079,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624288703
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7992\">#7992</a> is ready for review, in case anyone wants to take a look. Once this is merged, it will help clean up a big chunk of <code>for_mathlib/Profinite/*</code></p>",
        "id": 243429859,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624303150
    },
    {
        "content": "<p>I just did a bit of cleanup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">diff</span> <span class=\"mi\">0253</span><span class=\"n\">ede091338f3f3f84a1c52ac5c5a99f256e4b</span> <span class=\"c1\">--stat</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">adjunction.lean</span>                   <span class=\"bp\">|</span>  <span class=\"mi\">7</span> <span class=\"c1\">-------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">arrow_limit.lean</span>             <span class=\"bp\">|</span> <span class=\"mi\">17</span> <span class=\"bp\">++++++++++++++++-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">fibprod.lean</span>                 <span class=\"bp\">|</span> <span class=\"mi\">37</span> <span class=\"c1\">-------------------------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow.lean</span>                             <span class=\"bp\">|</span> <span class=\"mi\">53</span> <span class=\"c1\">-----------------------------------------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">topology.lean</span>                          <span class=\"bp\">|</span> <span class=\"mi\">44</span> <span class=\"c1\">--------------------------------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">unused</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">functorial_limit.lean</span> <span class=\"bp\">|</span> <span class=\"mi\">16</span> <span class=\"bp\">++++++++++++++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop819.lean</span>                                       <span class=\"bp\">|</span> <span class=\"mi\">36</span> <span class=\"bp\">++++++++++++++</span><span class=\"c1\">----------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop819</span><span class=\"bp\">/</span><span class=\"n\">locally_constant.lean</span>                      <span class=\"bp\">|</span> <span class=\"mi\">47</span> <span class=\"c1\">-----------------------------------------------</span>\n <span class=\"mi\">8</span> <span class=\"n\">files</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"mi\">44</span> <span class=\"n\">insertions</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"mi\">213</span> <span class=\"n\">deletions</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243464280,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624326682
    },
    {
        "content": "<p>We have a whole folder called <code>for_mathlib/unused</code>. Do we want to keep it around?</p>",
        "id": 243464299,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624326714
    },
    {
        "content": "<p>I'm not particularly attached to it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 243472083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624337311
    },
    {
        "content": "<p>We could add a branch <code>unused-stuff</code> just before dropping that directory, so that people can easily find it if they want to look at it again</p>",
        "id": 243472096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624337350
    },
    {
        "content": "<p>The branch <code>for-mathlib-unused</code> now contains this directory.</p>",
        "id": 243522103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624371062
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"mi\">87</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">adjunction.lean</span>\n   <span class=\"mi\">229</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n   <span class=\"mi\">637</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n   <span class=\"mi\">329</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">arrow_limit.lean</span>\n   <span class=\"mi\">425</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">clopen_limit.lean</span>\n   <span class=\"mi\">151</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">compat_discrete_quotient.lean</span>\n    <span class=\"mi\">36</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">locally_constant.lean</span>\n   <span class=\"mi\">283</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup.lean</span>\n   <span class=\"mi\">160</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">SemiNormedGroup_Completion.lean</span>\n    <span class=\"mi\">22</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow.lean</span>\n    <span class=\"mi\">16</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow</span><span class=\"bp\">/</span><span class=\"n\">iso_mk.lean</span>\n    <span class=\"mi\">19</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n   <span class=\"mi\">126</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">data_setoid_partition.lean</span>\n    <span class=\"mi\">74</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">discrete_quotient.lean</span>\n    <span class=\"mi\">47</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">fin.lean</span>\n    <span class=\"mi\">89</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finite_free.lean</span>\n   <span class=\"mi\">385</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group.lean</span>\n    <span class=\"mi\">87</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">is_locally_constant.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">kronecker.lean</span>\n    <span class=\"mi\">65</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra.lean</span>\n   <span class=\"mi\">593</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnrat.lean</span>\n    <span class=\"mi\">20</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnreal.lean</span>\n    <span class=\"mi\">60</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom.lean</span>\n   <span class=\"mi\">210</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_completion.lean</span>\n    <span class=\"mi\">92</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_equalizer.lean</span>\n    <span class=\"mi\">89</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">order.lean</span>\n    <span class=\"mi\">21</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">quotient.lean</span>\n   <span class=\"mi\">565</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">rational_cones.lean</span>\n    <span class=\"mi\">43</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">augmented.lean</span>\n   <span class=\"mi\">161</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">complex.lean</span>\n    <span class=\"mi\">64</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">iso.lean</span>\n    <span class=\"mi\">16</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">topology.lean</span>\n    <span class=\"mi\">34</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">tsum.lean</span>\n    <span class=\"mi\">54</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">wide_pullback.lean</span>\n  <span class=\"mi\">5469</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 243522428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624371180
    },
    {
        "content": "<p>A little while there was over 7000 lines in <code>for_mathlib</code>. So we've made quite a dent already.</p>",
        "id": 243522483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624371202
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> for <a href=\"https://github.com/leanprover-community/mathlib/issues/7992\">#7992</a> if you want to get that number even smaller <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 243522920,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624371386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> does that become easier if you use <code>bool</code> instead of <code>fin 2</code>?</p>",
        "id": 243524334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624371919
    },
    {
        "content": "<p>Otherwise, lgtm</p>",
        "id": 243524347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624371923
    },
    {
        "content": "<p>as an outsider, would there be any issues with me just diving in to some part of that code that I can understand, and try port it over to mathlib? or should I leave that to you all</p>",
        "id": 243524576,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624371996
    },
    {
        "content": "<p>I don't think using <code>bool</code> is much easier, especially given <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_constant.of_clopen\">docs#locally_constant.of_clopen</a></p>",
        "id": 243524849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624372101
    },
    {
        "content": "<p>And I tried making this <code>of_clopen</code> thing use <code>bool</code>. It turned out to be more or less the same as using <code>fin 2</code></p>",
        "id": 243525011,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624372188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> Feel free to browse through <code>for_mathlib</code> and PR whatever you think looks ready to PR.</p>",
        "id": 243525106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624372214
    },
    {
        "content": "<p>(Some parts of it might need polishing... and you are free to do that as well, if you want to help!)</p>",
        "id": 243525152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624372236
    },
    {
        "content": "<p>Also, please leave a note here when you \"claim\" a file. So that we don't duplicate efforts.</p>",
        "id": 243525207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624372265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20bump/near/243524849\">said</a>:</p>\n<blockquote>\n<p>I don't think using <code>bool</code> is much easier, especially given <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_constant.of_clopen\">docs#locally_constant.of_clopen</a></p>\n</blockquote>\n<p>Okido <img alt=\":merge:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/5e3e16a6488be72497f3dc476ec5306cd294251d/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f333132312f656d6f6a692f696d616765732f31383532372e706e67\" title=\"merge\"></p>",
        "id": 243525356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624372325
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">compat_discrete_quotient.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow</span><span class=\"bp\">/</span><span class=\"n\">iso_mk.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">discrete_quotient.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">fin.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finite_free.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">kronecker.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnrat.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnreal.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">order.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">quotient.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">augmented.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">complex.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">iso.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">topology.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">tsum.lean</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">wide_pullback.lean</span>\n</code></pre></div>\n<p><span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span> seem to be the files that do not import other files from LTE</p>",
        "id": 243553290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624384026
    },
    {
        "content": "<p>Actually <code>linear_algebra</code> should have disappeared, I have just <code>merged</code> from <code>bump-mathlib-220621</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 243553439,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624384088
    },
    {
        "content": "<p>Ooh, I forgot to <code>git pull</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 243553897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624384312
    },
    {
        "content": "<p>I'll take care of <code>free_abelian_group.lean</code></p>",
        "id": 243553927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624384322
    },
    {
        "content": "<p>I am not far from getting rid of<code>kronecker</code>but I need another <code>PR</code> to go through.</p>",
        "id": 243554011,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624384350
    },
    {
        "content": "<p>(btw: can you confirm that my <code>mathlib-bump</code> was OK, meaning that <code>linear_algebra</code> has disappeared?)</p>",
        "id": 243554096,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624384386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I don't see a new commit on <code>master</code></p>",
        "id": 243554831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624384672
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 243554932,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624384697
    },
    {
        "content": "<p>Should I <code>git merge -</code> while being in the <code>master</code> or in the <code>bump-mathlib-***</code> branch? I would have said the latter, but I thought you suggested the former.</p>",
        "id": 243555044,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624384755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> maybe you forgot to push?</p>",
        "id": 243556013,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624385150
    },
    {
        "content": "<p><code>git merge -</code> means \"merge the branch I was on previously into the branch I am on now\"</p>",
        "id": 243556097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624385168
    },
    {
        "content": "<p>OK, strange. The <code>bump-mathlib-220621</code> branch online contains all my modifications, so I guess the <code>push</code> went through correctly.</p>",
        "id": 243556224,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624385219
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8046\">#8046</a> contains most of <code>for_mathlib/free_abelian_group.lean</code>, namely the isomorphism with finsupp</p>",
        "id": 243556238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624385225
    },
    {
        "content": "<p>I can try to do it again (or, for that matter, I believe <em>anyone</em> can do <code>git merge -</code> after <code>git checkout bump-mathlib-220621</code> and <code>git checkout master</code>, right?) <span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span></p>",
        "id": 243556561,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624385364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> would you like me to merge <code>bump-mathlib-220621</code> to <code>master</code>?</p>",
        "id": 243557597,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624385824
    },
    {
        "content": "<p>Yes please!</p>",
        "id": 243557626,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624385837
    },
    {
        "content": "<p>ok give me a sec</p>",
        "id": 243557678,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624385865
    },
    {
        "content": "<p>done</p>",
        "id": 243558024,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624386008
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 243558127,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624386056
    },
    {
        "content": "<p>I'm working on another mathlib bump right now</p>",
        "id": 243560259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624386960
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">diff</span> <span class=\"n\">d6b8d023a38d11c57ba7460840276f4cbaeeb7a3</span> <span class=\"c1\">--stat</span>\n <span class=\"n\">leanpkg.toml</span>                                    <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">clopen_limit.lean</span>     <span class=\"bp\">|</span> <span class=\"mi\">279</span> <span class=\"c1\">------------------------------------------------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">locally_constant.lean</span> <span class=\"bp\">|</span>  <span class=\"mi\">36</span> <span class=\"c1\">--------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">is_locally_constant.lean</span>        <span class=\"bp\">|</span>  <span class=\"mi\">14</span> <span class=\"c1\">---</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop819.lean</span>                                <span class=\"bp\">|</span>  <span class=\"mi\">13</span> <span class=\"bp\">+</span><span class=\"c1\">--</span>\n <span class=\"mi\">5</span> <span class=\"n\">files</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"mi\">5</span> <span class=\"n\">insertions</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"mi\">339</span> <span class=\"n\">deletions</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243561885,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624387687
    },
    {
        "content": "<p>I noticed some overlap with <code>for_mathlib/locally_constant</code> and some stuff from the recent mathlib PR that was merged. I deduplicated in the branch <code>locally_constant_cleanup</code>. </p>\n<p><a href=\"https://github.com/leanprover-community/lean-liquid/compare/locally_constant_cleanup\">https://github.com/leanprover-community/lean-liquid/compare/locally_constant_cleanup</a></p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> since this was your code, could you please take a look and see if you're okay with the changes?</p>",
        "id": 243568825,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624390881
    },
    {
        "content": "<p>I guess that will move us below the 5000 lines threshold <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 243569079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624391021
    },
    {
        "content": "<p>If it still compiles then it's ok for me</p>",
        "id": 243573854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624393364
    },
    {
        "content": "<p>Okay, it's merged to master now.</p>",
        "id": 243581104,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624397145
    },
    {
        "content": "<p>Not quite under 5000 just yet <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"mi\">87</span> <span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">adjunction.lean</span>\n   <span class=\"mi\">229</span> <span class=\"n\">Cech</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n   <span class=\"mi\">637</span> <span class=\"n\">Gordan.lean</span>\n   <span class=\"mi\">329</span> <span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">arrow_limit.lean</span>\n   <span class=\"mi\">146</span> <span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">clopen_limit.lean</span>\n   <span class=\"mi\">151</span> <span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">compat_discrete_quotient.lean</span>\n   <span class=\"mi\">283</span> <span class=\"n\">SemiNormedGroup.lean</span>\n   <span class=\"mi\">160</span> <span class=\"n\">SemiNormedGroup_Completion.lean</span>\n    <span class=\"mi\">22</span> <span class=\"n\">arrow.lean</span>\n    <span class=\"mi\">16</span> <span class=\"n\">arrow</span><span class=\"bp\">/</span><span class=\"n\">iso_mk.lean</span>\n    <span class=\"mi\">19</span> <span class=\"n\">arrow</span><span class=\"bp\">/</span><span class=\"n\">split.lean</span>\n   <span class=\"mi\">126</span> <span class=\"n\">data_setoid_partition.lean</span>\n    <span class=\"mi\">74</span> <span class=\"n\">discrete_quotient.lean</span>\n    <span class=\"mi\">47</span> <span class=\"n\">fin.lean</span>\n    <span class=\"mi\">89</span> <span class=\"n\">finite_free.lean</span>\n   <span class=\"mi\">382</span> <span class=\"n\">free_abelian_group.lean</span>\n    <span class=\"mi\">48</span> <span class=\"n\">is_locally_constant.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">kronecker.lean</span>\n   <span class=\"mi\">593</span> <span class=\"n\">nnrat.lean</span>\n    <span class=\"mi\">20</span> <span class=\"n\">nnreal.lean</span>\n    <span class=\"mi\">60</span> <span class=\"n\">normed_group.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">normed_group_hom.lean</span>\n   <span class=\"mi\">210</span> <span class=\"n\">normed_group_hom_completion.lean</span>\n    <span class=\"mi\">92</span> <span class=\"n\">normed_group_hom_equalizer.lean</span>\n    <span class=\"mi\">89</span> <span class=\"n\">order.lean</span>\n    <span class=\"mi\">21</span> <span class=\"n\">quotient.lean</span>\n   <span class=\"mi\">565</span> <span class=\"n\">rational_cones.lean</span>\n    <span class=\"mi\">43</span> <span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">augmented.lean</span>\n   <span class=\"mi\">161</span> <span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">complex.lean</span>\n    <span class=\"mi\">64</span> <span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">iso.lean</span>\n    <span class=\"mi\">16</span> <span class=\"n\">topology.lean</span>\n    <span class=\"mi\">34</span> <span class=\"n\">tsum.lean</span>\n    <span class=\"mi\">54</span> <span class=\"n\">wide_pullback.lean</span>\n  <span class=\"mi\">5047</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 243581601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624397435
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8048\">#8048</a> is a very easy PR which will let us kill <code>for_mathlib/topology.lean</code></p>",
        "id": 243584581,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624399457
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8049\">#8049</a> knocks out <code>for_mathlib/fin.lean</code>. (and would be under 5000!)</p>",
        "id": 243588982,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624402615
    },
    {
        "content": "<p>It looks like we have ~1700 lines coming from <code>nnrat</code>, <code>rational_cones</code> and <code>Gordan</code>. This should definitely move to mathlib at some point. But I think <code>nnrat</code> can be generalized to \"ordered semiring of non-negative elements of ordered ring\". But that should probably wait till Damiano's order-refactor is done. Otherwise we need to do it twice.</p>",
        "id": 243607335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624424538
    },
    {
        "content": "<p>Damiano\"s refactor has been one of the unexpected benefits of the experiment. I remember Damiano and I discussing how to set up the very foundations of the theory for Gordan so they would apply to more than N v Z and nnreal v real, and I suspect this was one of the things which got him started experimenting with orders in general. The half of the project which we have pushed through has had knock-on benefits for mathlib beyond the obvious ones</p>",
        "id": 243619066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624435781
    },
    {
        "content": "<p>(note: I just had to get the number under 5000, so I golfed a few proofs last night... I think it's around 4950ish now.)</p>",
        "id": 243646037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624452520
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7457\">#7457</a> takes care of <code>arrow.lean</code> (6 lines)</p>",
        "id": 243660963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624458957
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8057\">#8057</a> takes care of <code>arrow/iso_mk.lean</code> (again ~6 lines)</p>",
        "id": 243664519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624460394
    },
    {
        "content": "<p>Kevin, I confirm that my decision to take over the <code>order</code> refactor stemmed from LTE!  Besides, yours and Eric's gradings and part of Bhavik's and Yaël's push to finish Krein-Millman/Hahn-Banach and generally working with convex sets was also a consequence of this!</p>",
        "id": 243700934,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624476667
    },
    {
        "content": "<p>Definitely! We had defined extreme and exposed sets, but we wouldn't have proved Krein-Milman without you (momentarily) needing it.</p>",
        "id": 243706665,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624479464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20bump/near/243588982\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8049\">#8049</a> knocks out <code>for_mathlib/fin.lean</code>. (and would be under 5000!)</p>\n</blockquote>\n<p>This has now landed in mathlib. Thanks for your help <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>. I'm bumping mathlib right now</p>",
        "id": 243878539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624600731
    },
    {
        "content": "<p>Ooh, I now see that you already made a PR for this! <span aria-label=\"surprise\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"surprise\">:surprise:</span> <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 243878810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624601085
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8085\">#8085</a> is a quick PR which takes care of <code>for_mathlib/simplicial/augmented</code>.</p>",
        "id": 243979546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624661606
    },
    {
        "content": "<p>Mathlib bumped.</p>",
        "id": 246575162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626782827
    },
    {
        "content": "<p>Does anyone know what happened to <code>real.Sup_le</code>?</p>",
        "id": 248725726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628356168
    },
    {
        "content": "<p>Aha <code>chore(data/real/basic): drop some lemmas (#8523)</code> seems relevant. I was on a wrong branch of mathlib when I did <code>git pull</code>. Hence the logs didn't show anything.</p>",
        "id": 248725869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628356373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> is it causing some error in LTE? I fixed some error related to <code>real.Sup_le</code> missing a few days ago...</p>",
        "id": 248726534,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628357334
    },
    {
        "content": "<p>Hmm, let me check that I'm not duplicating your work.</p>",
        "id": 248726860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628357773
    },
    {
        "content": "<p>Ok, I'm up to date. The error is in <code>locally_constant/analysis</code></p>",
        "id": 248726873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628357806
    },
    {
        "content": "<p>wip is in <code>mathlib-bump-wip</code></p>",
        "id": 248726887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628357851
    },
    {
        "content": "<p>Oh, sorry, I misremembered. I fixed something related to <code>real.exists_sup</code>.</p>",
        "id": 248726964,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628357943
    },
    {
        "content": "<p>This actually solves a golfing issue that we had (-; <a href=\"https://github.com/leanprover-community/lean-liquid/compare/mathlib-bump-wip?expand=1#diff-eaaa24ad786e47b8b16bacbf6e5b2ddc517e8d60bd585ade06d159f75125ce6dL27\">https://github.com/leanprover-community/lean-liquid/compare/mathlib-bump-wip?expand=1#diff-eaaa24ad786e47b8b16bacbf6e5b2ddc517e8d60bd585ade06d159f75125ce6dL27</a></p>",
        "id": 248729644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628361587
    },
    {
        "content": "<p>bump complete</p>",
        "id": 248730385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628362736
    },
    {
        "content": "<p>another day, another bump</p>",
        "id": 248854908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628519545
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>$ git show --stat\ncommit fd47ddc5a6f29069a1c666beb11be57893914889 (HEAD -&gt; master)\nAuthor: Johan Commelin &lt;johan@commelin.net&gt;\nDate:   Fri Aug 13 13:47:25 2021 +0000\n\n    mathlib bump\n\n leanpkg.toml                                     |  4 ++--\n src/for_mathlib/SemiNormedGroup.lean             |  2 --\n src/for_mathlib/normed_group_hom.lean            | 88 ----------------------------------------------------------------------------------------\n src/for_mathlib/normed_group_hom_completion.lean |  2 --\n src/locally_constant/analysis.lean               |  2 --\n src/normed_group/controlled_exactness.lean       |  3 +--\n src/prop_92/concrete.lean                        |  4 ++--\n src/pseudo_normed_group/LC.lean                  |  1 -\n 8 files changed, 5 insertions(+), 101 deletions(-)\n</code></pre></div>",
        "id": 249362266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628862479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> did you push to master?</p>",
        "id": 249368045,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1628865372
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 249368080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628865394
    },
    {
        "content": "<p>done</p>",
        "id": 249368084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628865396
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8499\">#8499</a> has been merged, this is the end of a long series of mathlib PRs. I think the <code>for_mathlib</code> folder should now be almost empty of contributions from me.</p>",
        "id": 249611225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629131162
    },
    {
        "content": "<p>I'm bumping right now.</p>",
        "id": 249611397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629131241
    },
    {
        "content": "<p>But I started before that merge. So I suggest we do two bumps in a row.</p>",
        "id": 249611433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629131267
    },
    {
        "content": "<p>I just did <code>git push --set-upstream origin mathlib-bump-16-aug-2021</code></p>",
        "id": 249612994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629132000
    },
    {
        "content": "<p>So far, I fixed 1 thingy. But now I get a super-annoying timeout in <code>col_exact.lean</code></p>",
        "id": 249613084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629132022
    },
    {
        "content": "<p>Well, the build on the command line doesn't even timeout. It just hangs forever.</p>",
        "id": 249613128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629132046
    },
    {
        "content": "<p>I need to run now... sorry</p>",
        "id": 249613164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629132065
    },
    {
        "content": "<p>I won't have time for this today either, I'm afraid. So if someone wants to hack on this, please go ahead.</p>",
        "id": 249682446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629181098
    },
    {
        "content": "<p>I managed to finish the bump. <code>ext</code> got into problems somehow...</p>",
        "id": 249734203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629213627
    },
    {
        "content": "<p>So now we are ready for Patrick's bump. And then there is the Kronecker bump.</p>",
        "id": 249734292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629213669
    },
    {
        "content": "<p>I have the feeling we're almost done with the Kronecker <code>PR</code>, just waiting for a final approval.</p>",
        "id": 249734355,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1629213708
    },
    {
        "content": "<p>I just bumped mathlib again</p>",
        "id": 249742637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629217252
    },
    {
        "content": "<p>I noticed that <a href=\"https://leanprover-community.github.io/lean_projects.html\">https://leanprover-community.github.io/lean_projects.html</a> says that <code>lean-liquid</code> is always failing. I wonder if this display could better reflect that lean-liquid is actually keeping up.</p>",
        "id": 249793133,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629244275
    },
    {
        "content": "<p>The failure is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">built</span> <span class=\"n\">on</span> <span class=\"n\">version</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">because</span> <span class=\"n\">some</span> <span class=\"n\">of</span> <span class=\"n\">its</span> <span class=\"n\">dependencies</span> <span class=\"k\">do</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"n\">corresponding</span> <span class=\"n\">version</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"bp\">'</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">gptf'</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 249794964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629246002
    },
    {
        "content": "<p>Daniel noted that the gptf dependency is not actually used, and has been removing it in build tests. Perhaps you could remove it from the actual project and let users add it themselves if they want?</p>",
        "id": 249795904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629247080
    },
    {
        "content": "<p>I'm doing this right now</p>",
        "id": 249807992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629262656
    },
    {
        "content": "<p>I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jmc</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">math</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Mbar</span><span class=\"bp\">/</span><span class=\"n\">Mbar_le.lean</span><span class=\"o\">:</span> <span class=\"n\">parsing</span> <span class=\"n\">at</span> <span class=\"n\">line</span> <span class=\"mi\">724</span><span class=\"c\">/-</span><span class=\"cm\"> The `check_univs` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> THE STATEMENTS OF THE FOLLOWING DECLARATIONS HAVE BAD UNIVERSE LEVELS. This usually means that there is a `max u v` in the declaration where neither `u` nor `v` occur by themselves. Solution: Find the type (or type bundled with data) that has this universe argument and provide the universe level explicitly. If this happens in an implicit argument of the declaration, a better solution is to move this argument to a `variables` command (where the universe level can be kept implicit).</span>\n<span class=\"cm\">Note: if the linter flags an automatically generated declaration `xyz._proof_i`, it means that</span>\n<span class=\"cm\">the universe problem is with `xyz` itself (even if the linter doesn't flag `xyz`) -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_add_functor._proof_3</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_add_functor._proof_6</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_add_functor._proof_4</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_add_functor._proof_1</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_add_functor._proof_7</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_add_functor._proof_2</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_neg_functor._proof_2</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_neg_functor._proof_1</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_bifunctor._proof_4</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_bifunctor._proof_2</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_bifunctor._proof_3</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.Fintype_bifunctor._proof_5</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.functor_prod._proof_2</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.functor_prod._proof_1</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.functor_prod._proof_3</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.functor_prod_cone._proof_2</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.add_functor._proof_3</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.add_functor._proof_2</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.add_functor._proof_1</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.neg_functor._proof_1</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.bifunctor._proof_1</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar_le.bifunctor._proof_2</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">Mbar.profinite._proof_1</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u_1, u_2] only occur together. -/</span>\n</code></pre></div>",
        "id": 249808594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629263216
    },
    {
        "content": "<p>But those declarations don't mention universes at all. So the elaborator (or its friend) is doing something silly</p>",
        "id": 249808606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629263255
    },
    {
        "content": "<p>This one is weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">profinite.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)],</span> <span class=\"n\">Profinite.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 249808869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629263576
    },
    {
        "content": "<p>Here is the Lean code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The functor `Mbar : Profinite ⥤ Type*`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">profinite</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">as_small.down</span> <span class=\"bp\">⋙</span> <span class=\"n\">profinite_diagram</span> <span class=\"n\">r'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flip</span> <span class=\"bp\">⋙</span> <span class=\"n\">colim</span>\n</code></pre></div>\n<p>If I explicitly ask it to use <code>.{u}</code>, then I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_colimits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">as_small</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 249808909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629263641
    },
    {
        "content": "<p>The solution is to write <code>Profinite.{u}</code> explicitly</p>",
        "id": 249809078,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629263865
    },
    {
        "content": "<p>The error probably means that the instance also needs an explicit <code>.{u}</code> somewhere</p>",
        "id": 249809118,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629263882
    },
    {
        "content": "<p>aha, that makes sense</p>",
        "id": 249809168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629263907
    },
    {
        "content": "<p>Probably you want to replace <code>Profinite</code> by <code>Profinite.{u}</code> in most places (once per declaration that doesn't mention <code>u</code> yet)</p>",
        "id": 249809173,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629263928
    },
    {
        "content": "<p>well, I'm adding a <code>nolint</code> for now. I'll first try to get everything to build. We can hunt down the bad instance afterwards.</p>",
        "id": 249809175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629263934
    },
    {
        "content": "<p>but if the linter can figure out that all the <code>max u v</code>'s can be replaced by <code>u</code>, then lean should be able to do that without my handholding, right?</p>",
        "id": 249809201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629263976
    },
    {
        "content": "<p>in theory, yes</p>",
        "id": 249809222,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629263999
    },
    {
        "content": "<p>I pushed</p>",
        "id": 249809290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629264039
    },
    {
        "content": "<p>the easy hackish solution is to check (after elaboration) whether there are two universe levels <code>u</code> and <code>v</code>, both of which only occur as <code>max u v</code>, and if so, replace <code>max u v</code> by a new universe variable.<br>\nA hard solution is to fix the underlying problem that causes these <code>max u v</code>'s.</p>",
        "id": 249809371,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629264137
    },
    {
        "content": "<p>mathlib bumped</p>",
        "id": 250079341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629436875
    },
    {
        "content": "<p>back from a short trip, bumped mathlib</p>",
        "id": 250775135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629985967
    },
    {
        "content": "<p>I bumped mathlib again</p>",
        "id": 253261133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631629872
    },
    {
        "content": "<p>Bumped again</p>",
        "id": 253546628,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1631781095
    },
    {
        "content": "<p>thanks!</p>",
        "id": 253549951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631783106
    },
    {
        "content": "<p>high time for another bump: we're on a new version of Lean now, and we can use semilinear maps!</p>",
        "id": 254861562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632595991
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>commit e8fc8f972722318b8918c0340e7ecde3e1c9abb8 (HEAD -&gt; master, origin/master, origin/HEAD)\nAuthor: Johan Commelin &lt;johan@commelin.net&gt;\nDate:   Sat Sep 25 18:52:11 2021 +0000\n\n    bump mathlib\n\n leanpkg.toml                        | 2 +-\n src/combinatorial_lemma/lem97.lean  | 2 +-\n src/condensed/ab.lean               | 1 +\n src/for_mathlib/finite_free.lean    | 4 ++--\n src/for_mathlib/nnrat.lean          | 2 +-\n src/for_mathlib/rational_cones.lean | 4 ++--\n src/for_mathlib/snake_lemma.lean    | 3 ---\n src/system_of_complexes/basic.lean  | 1 -\n 8 files changed, 8 insertions(+), 11 deletions(-)\n</code></pre></div>",
        "id": 254861640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632596048
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> !</p>",
        "id": 254863826,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632597907
    },
    {
        "content": "<p><code>for_mathlib/finite_free</code> is gone.</p>",
        "id": 254932421,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1632663777
    },
    {
        "content": "<p>I started working on a mathlib bump. This one might be a bit messy...</p>",
        "id": 255703383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633074083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I think you created <code>linear_algebra/free_module</code>, right? Should <code>linear_algebra.free_module_pid</code> also move there?</p>",
        "id": 255708428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633076948
    },
    {
        "content": "<p>Ah yes, that's a good idea. I will do it</p>",
        "id": 255709458,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633077448
    },
    {
        "content": "<p>Bump finished</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">leanpkg.toml</span>                                    <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Mbar</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                             <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">lean</span>                <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">homotopy.lean</span>                 <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">suitable.lean</span>                 <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">combinatorial_lemma</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>            <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">combinatorial_lemma</span><span class=\"bp\">/</span><span class=\"n\">lem97.lean</span>              <span class=\"bp\">|</span>  <span class=\"mi\">5</span> <span class=\"bp\">++</span><span class=\"c1\">---</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">facts</span><span class=\"bp\">/</span><span class=\"n\">nnreal.lean</span>                           <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>                     <span class=\"bp\">|</span>  <span class=\"mi\">7</span> <span class=\"bp\">+</span><span class=\"c1\">------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnrat.lean</span>                      <span class=\"bp\">|</span>  <span class=\"mi\">6</span> <span class=\"bp\">+++</span><span class=\"c1\">---</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">rational_cones.lean</span>             <span class=\"bp\">|</span>  <span class=\"mi\">5</span> <span class=\"bp\">+++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">real.lean</span>                       <span class=\"bp\">|</span> <span class=\"mi\">20</span> <span class=\"bp\">+++</span><span class=\"c1\">-----------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69_bad.lean</span>             <span class=\"bp\">|</span> <span class=\"mi\">10</span> <span class=\"bp\">+++++</span><span class=\"c1\">-----</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">normed_group</span><span class=\"bp\">/</span><span class=\"n\">normed_with_aut.lean</span>           <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">normed_snake_dual.lean</span>                      <span class=\"bp\">|</span>  <span class=\"mi\">6</span> <span class=\"bp\">+++</span><span class=\"c1\">---</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">normed_spectral.lean</span>                        <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>               <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">finsupp.lean</span>             <span class=\"bp\">|</span>  <span class=\"mi\">1</span> <span class=\"bp\">+</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group.lean</span> <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">quotient.lean</span>            <span class=\"bp\">|</span>  <span class=\"mi\">1</span> <span class=\"bp\">+</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">with_Tinv.lean</span>          <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">rescale</span><span class=\"bp\">/</span><span class=\"n\">normed_group.lean</span>                   <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">rescale</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group.lean</span>            <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">col_exact.lean</span>                        <span class=\"bp\">|</span>  <span class=\"mi\">6</span> <span class=\"bp\">+++</span><span class=\"c1\">---</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">col_exact_prep.lean</span>                   <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_iso.lean</span>                   <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"mi\">26</span> <span class=\"n\">files</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"mi\">45</span> <span class=\"n\">insertions</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"mi\">62</span> <span class=\"n\">deletions</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255714563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633080112
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9482\">#9482</a></p>",
        "id": 255720797,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633083295
    },
    {
        "content": "<p>bumped mathlib again</p>",
        "id": 256697957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633677012
    },
    {
        "content": "<p>Mathlib bumped</p>",
        "id": 257070185,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633961669
    },
    {
        "content": "<p>Merci! I was about to start a bump</p>",
        "id": 257070213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633961687
    },
    {
        "content": "<p>Bumping mathlib</p>",
        "id": 257492847,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634197238
    },
    {
        "content": "<p>What happened to <code>exact fact.out _</code>? It doesn't work anymore,  \"failed to synthesize type class instance for\" and the instance is looking for is the goal. Not a real problem, manually doing <code>exact _inst_3.out</code> works, but it's weird.</p>",
        "id": 257495864,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634198981
    },
    {
        "content": "<p>Hmm, but explicitly mentioning <code>_inst_3</code> is fragile.</p>",
        "id": 257496531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634199260
    },
    {
        "content": "<p>I'm not aware of any changes to the <code>fact</code> machinery.</p>",
        "id": 257496545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634199272
    },
    {
        "content": "<p>Is this a general problem, or just in a few cases?</p>",
        "id": 257496557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634199283
    },
    {
        "content": "<p>I count 66 lines with <code>fact.out _</code> in LTE. Are they all broken <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> ?</p>",
        "id": 257496610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634199326
    },
    {
        "content": "<p>No, I don't think so.</p>",
        "id": 257496647,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634199356
    },
    {
        "content": "<p>See for example here<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/commit/d90a89fae8432d3d91293a77f0872b21783e8fdd\">https://github.com/leanprover-community/lean-liquid/commit/d90a89fae8432d3d91293a77f0872b21783e8fdd</a></p>",
        "id": 257496691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634199363
    },
    {
        "content": "<p>Both are for <code>0 &lt; r</code>, with <code>r : ℝ≥0</code>, so it should be something related to that</p>",
        "id": 257496754,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634199404
    },
    {
        "content": "<p>Aah, some instances for <code>nnreal</code> changed to more general nonneg instances for <code>{x // 0 ≤ x}</code>. That might cause the problem?</p>",
        "id": 257497035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634199554
    },
    {
        "content": "<p>The more stable solution in this case might be to write <code>exact ‹fact (0 &lt; r)›.out</code> instead of mentioning <code>_inst_3</code>.</p>",
        "id": 257497151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634199622
    },
    {
        "content": "<p>Yes, that works! Taking care of that</p>",
        "id": 257497310,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634199715
    },
    {
        "content": "<p>The bump is done. I will throw away <code>for_mathlib/SemiNormedGroup</code> later today.</p>",
        "id": 257503088,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634202449
    },
    {
        "content": "<p>Merci!</p>",
        "id": 257503674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202773
    },
    {
        "content": "<p>I'm working on another bump right now.</p>",
        "id": 257581175,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634235596
    },
    {
        "content": "<p>Not too bad...</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git diff --stat 509fcea815344d9eba240f9ca859a2255bc9e3f1\n leanpkg.toml                              <span class=\"p\">|</span>  <span class=\"m\">2</span> +-\n src/Mbar/bounded.lean                     <span class=\"p\">|</span>  <span class=\"m\">4</span> ++--\n src/for_mathlib/Gordan.lean               <span class=\"p\">|</span> <span class=\"m\">14</span> +++++++-------\n src/for_mathlib/abelian_group_object.lean <span class=\"p\">|</span> <span class=\"m\">31</span> ++++++++++++++++---------------\n src/laurent_measures/bounded.lean         <span class=\"p\">|</span>  <span class=\"m\">8</span> ++++----\n src/laurent_measures/thm69.lean           <span class=\"p\">|</span> <span class=\"m\">17</span> +++++++++--------\n src/polyhedral_lattice/topology.lean      <span class=\"p\">|</span>  <span class=\"m\">2</span> +-\n src/thm95/constants/default.lean          <span class=\"p\">|</span> <span class=\"m\">14</span> +++++++-------\n <span class=\"m\">8</span> files changed, <span class=\"m\">47</span> insertions<span class=\"o\">(</span>+<span class=\"o\">)</span>, <span class=\"m\">45</span> deletions<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257586202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634237606
    },
    {
        "content": "<p>I also got rid of <code>as_small</code> in <code>condensed</code>, and proved the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">category_theory.functor.is_proetale_sheaf_iff</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P.is_proetale_sheaf</span> <span class=\"bp\">↔</span> <span class=\"n\">presheaf.is_sheaf</span> <span class=\"n\">proetale_topology</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>where </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">category_theory.functor.is_proetale_sheaf</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span><span class=\"bp\">ᵒᵖ</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span>\n<span class=\"c1\">-- a finite family of morphisms with base B</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"c1\">-- jointly surjective</span>\n<span class=\"o\">(</span><span class=\"n\">surj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"c1\">-- test object</span>\n<span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"c1\">-- family of moprhisms</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"bp\">⟶</span> <span class=\"n\">P.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n<span class=\"c1\">-- which is compatible</span>\n<span class=\"o\">(</span><span class=\"n\">compat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g₂</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">≫</span> <span class=\"n\">P.map</span> <span class=\"n\">g₁.op</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">≫</span> <span class=\"n\">P.map</span> <span class=\"n\">g₂.op</span><span class=\"o\">),</span>\n<span class=\"c1\">-- the actual condition</span>\n<span class=\"bp\">∃!</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">⟶</span> <span class=\"n\">P.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">≫</span> <span class=\"n\">P.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 257591867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634239829
    },
    {
        "content": "<p>That's a version of the sheaf condition that I hope is a bit more familiar...</p>",
        "id": 257591926,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634239854
    },
    {
        "content": "<p>We still need to rethink the universe levels in <code>condensed/Ab.lean</code>.</p>",
        "id": 257592026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634239907
    },
    {
        "content": "<p>Another piece of good news:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive category]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Condensed</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Sheaf</span> <span class=\"n\">proetale_topology.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ab.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">37</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Condensed.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Ring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">37</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 257592259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634240006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Wow, thanks a lot! That looks really good.</p>",
        "id": 257592396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634240060
    },
    {
        "content": "<p>So I guess that in this strand, the next step would be the sheaf condition in terms of extr.disc.s?</p>",
        "id": 257592466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634240094
    },
    {
        "content": "<p>Yeah, I'll work on that next...</p>",
        "id": 257592484,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634240106
    },
    {
        "content": "<p>Mathlib bumped, <code>for_mathlib/SemiNormedGroup</code> is gone.</p>",
        "id": 257895555,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634454214
    },
    {
        "content": "<p>After the next bump (I can to it later today), <code>for_mathlib/SemiNormedGroup_Completion</code> can be removed. I think that there will be nothing left in <code>for_mathlib</code> related to <code>normed_group</code>. It has been quite a journey, if I remember correctly we didn't had even <code>normed_group_hom</code> in mathlib before LTE (we had the operator norm for normed spaces). We added exotic stuff like <code>pseudo_emetric_space</code>, but also quotients and completions of normed groups. Do you think the story is worth a small blog post? To show how projects like LTE can be useful to mathlib.</p>",
        "id": 258053323,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634573161
    },
    {
        "content": "<p>Thanks for all your work on this. A blogpost definitely seems appropriate.</p>",
        "id": 258055075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634573762
    },
    {
        "content": "<p>The bump is done.</p>",
        "id": 258161192,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634633293
    },
    {
        "content": "<p>I tried another bump, but <code>has_coe_to_fun</code> changed and I don't really understand it, so I leave it to someone more experienced :)</p>",
        "id": 258831962,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635007245
    },
    {
        "content": "<p>Also beware of <code>floor</code>/<code>ceil</code>/<code>nat_floor</code>/<code>nat_ceil</code> now being <code>int.floor</code>/<code>int.ceil</code>/<code>nat.floor</code>/<code>nat.ceil</code>.</p>",
        "id": 258832058,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635007388
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>, enjoy!</p>",
        "id": 258832062,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635007399
    },
    {
        "content": "<p>Also, did the behavior  of  <code>namespace</code> changed? I had to move it after a <code>variables</code> declaration to make everything working.</p>",
        "id": 258832119,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635007457
    },
    {
        "content": "<p>Hmm weird, I'm not aware of changes to <code>namespace</code></p>",
        "id": 258832620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635008206
    },
    {
        "content": "<p>I don't have time for a bump this weekend. I'll look at it Monday if it's still an issue then.</p>",
        "id": 258832635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635008232
    },
    {
        "content": "<p>ah, everything is <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/258490147\">here</a></p>",
        "id": 258833063,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635008761
    },
    {
        "content": "<p>I'm attempting to do the bump now.</p>",
        "id": 258846858,
        "sender_full_name": "Ben Toner",
        "timestamp": 1635029633
    },
    {
        "content": "<p>Bump done, but probably someone should review as I am a beginner!</p>\n<p>To deal with the lean upgrade in the commit linked by <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> above, and the issue with <code>namespace</code>, I changed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">homological_complex</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">homological_complex</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">_root_.category_theory</span> <span class=\"n\">_root_.category_theory.limits</span>\n</code></pre></div>\n<p>and similarly in a <a href=\"https://github.com/leanprover-community/lean-liquid/commit/4f2ea75e1ccda68b2d3e24ef9a12acc18b1e3d33\">couple</a> of other places. But I don't understand why that is necessary. Is there a way to trace what's going on?</p>",
        "id": 258848940,
        "sender_full_name": "Ben Toner",
        "timestamp": 1635033316
    },
    {
        "content": "<p>The behaviour of <code>open</code> was changed recently, to match the behaviour in Lean4.</p>",
        "id": 258849027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635033470
    },
    {
        "content": "<p>If <code>A</code> is open, and both <code>B</code> and <code>A.B</code> exist, now <code>open B</code> means <code>open A.B</code>, whereas it used to mean <code>open _root_.B</code>.</p>",
        "id": 258849088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635033530
    },
    {
        "content": "<p>Often you can move your <code>open</code> statements outside of <code>namespace</code>s, or just change the order of the <code>open</code>s, to avoid having to write the ugly <code>_root_</code> so much.</p>",
        "id": 258849102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635033572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thanks - I'll change the order. I'm still confused though: there is no <code>homological_complex.category_theory</code> so what's it finding?</p>",
        "id": 258849582,
        "sender_full_name": "Ben Toner",
        "timestamp": 1635034207
    },
    {
        "content": "<p>Never mind - I figured it out, I think: because the namespace <code>homological_complex</code> already has an instance <code>homological_complex.category_theory.category</code> from an import, <code>homological_complex.category_theory</code> does exist, and so it's necessary to disambiguate.</p>",
        "id": 258851400,
        "sender_full_name": "Ben Toner",
        "timestamp": 1635037466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> Thanks a lot for thise fixes!</p>",
        "id": 258863841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635058885
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 258959500,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635168949
    },
    {
        "content": "<p>I'm attempting to bump LTE to zpow/zsmul and co.</p>",
        "id": 259345029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635402185
    },
    {
        "content": "<p>Here is a recipe for this: global search and replace of <code>gpow</code> and <code>fpow</code> with <code>zpow</code>. Then, where compilation fails, add a subscript <code>0</code> at the end of the offending lemma. That's it!</p>",
        "id": 259350478,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635406702
    },
    {
        "content": "<p>Yeah, and luckily we aren't using <code>gpowers</code> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 259351580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635407520
    },
    {
        "content": "<p>Indeed, I just checked, and the build finished. So bump is done.</p>",
        "id": 259351654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635407547
    },
    {
        "content": "<p>I got distracted for a moment, but the bump is now done</p>",
        "id": 261677316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637084168
    },
    {
        "content": "<p>I'm starting a bump</p>",
        "id": 262988489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638180874
    },
    {
        "content": "<p>When this bump is done, we'll have much more flexible categorical limits in LTE. Will be interesting to see if we can get rid of some <code>ulift</code>s.</p>",
        "id": 262990075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638181753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Do you think we should remove the universe polymorphism from <code>simplex_category</code> now?</p>",
        "id": 262990102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638181772
    },
    {
        "content": "<p>Bump finished</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>commit 85213c7b7155a8947e24987bcdc0636407eb8c74 (HEAD -&gt; master, origin/master, origin/HEAD)\nAuthor: Johan Commelin &lt;johan@commelin.net&gt;\nDate:   Mon Nov 29 11:42:59 2021 +0000\n\n    bump mathlib\n\n leanpkg.toml                                            |  2 +-\n src/banach.lean                                         |  2 +-\n src/breen_deligne/eval.lean                             |  2 +-\n src/breen_deligne/suitable.lean                         |  2 +-\n src/breen_deligne/universal_map.lean                    |  1 +\n src/for_mathlib/Profinite/disjoint_union.lean           | 47 -----------------------------------------------\n src/for_mathlib/abelian_sheaves/main.lean               | 10 +++++-----\n src/for_mathlib/concrete_filtered_colimit_commutes.lean |  8 ++++----\n src/for_mathlib/nnrat.lean                              |  4 ++--\n src/real_measures.lean                                  |  2 +-\n src/thm95/col_exact.lean                                |  3 ++-\n src/thm95/constants/default.lean                        |  2 +-\n 12 files changed, 20 insertions(+), 65 deletions(-)\n</code></pre></div>",
        "id": 262997132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638186217
    },
    {
        "content": "<p>You missed <code>is_preconnected.preimage</code> and  <code>is_connected.preimage</code>! But I'll take care of it myself once <a href=\"https://github.com/leanprover-community/mathlib/issues/10511\">#10511</a> hits mathlib.</p>",
        "id": 263004448,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638190798
    },
    {
        "content": "<p>What do you mean with \"missed\"?</p>",
        "id": 263004696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638190904
    },
    {
        "content": "<p>Lean didn't complain about them. So I didn't touch them.</p>",
        "id": 263004714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638190913
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_preconnected.preimage_of_open_map\">docs#is_preconnected.preimage_of_open_map</a></p>",
        "id": 263004731,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638190921
    },
    {
        "content": "<p>I see. Well, that's your job <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 263004804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638190939
    },
    {
        "content": "<p>I guess <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 263004819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638190957
    },
    {
        "content": "<p>I think mathlib bumps should do the minimal thing to get the build working again.</p>",
        "id": 263004826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638190962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20bump/near/262990102\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> Do you think we should remove the universe polymorphism from <code>simplex_category</code> now?</p>\n</blockquote>\n<p>It's certainly worth trying!</p>",
        "id": 263012114,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638194711
    },
    {
        "content": "<p>Mathlib bumped -- please refresh your oleans.</p>\n<p>There is a bunch of cleanup to do for unneeded code now, especially in <code>condensed/adjunctions.lean</code>, but I'm not sure I'll have time for it today.</p>",
        "id": 263660157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638569543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Thanks!</p>",
        "id": 263686397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638597185
    },
    {
        "content": "<p>What's next on plan? To PR the stuff on abelian sheaves? Or do you want to first try out some use cases (i.e. more about <code>Cond(Ab)</code>)?</p>",
        "id": 263686444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638597245
    },
    {
        "content": "<p>How does one refresh oleans?</p>",
        "id": 263695039,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638609810
    },
    {
        "content": "<p><code>leanproject get-mathlib-cache</code></p>",
        "id": 263695290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638610122
    },
    {
        "content": "<p>In fact this is the thing where I don't actually know the correct workflow. Here's what I just did (all in the <code>lean-liquid</code> repo, on the command line):</p>\n<p>1) Check you're on <code>master</code> branch and don't have any random stuff which needs to be committed or whatever with <code>git status</code></p>\n<p>2) <code>git pull</code> and note that <code>leanpkg.toml</code> just changed.</p>\n<p>3) <code>leanproject build</code> and wait until <code>lean --make src</code> starts running and the computer starts recompiling mathlib from scratch (on Linux I see stuff in <code>_target/deps/mathlib</code> beginning to be compiled). Then Ctrl-C to exit this process (I don't want to compile mathlib)</p>\n<p>4) <code>leanproject get-m</code> (=get-mathlib-cache) to get the correct mathlib oleans.</p>\n<p>5) <code>leanproject build</code> again (and this time it starts building the lean-liquid repo rather than mathlib.</p>",
        "id": 263695521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638610393
    },
    {
        "content": "<p>In fact instead of (5) I usually do <code>lean -M6000 --make src</code> with the <code>-M</code> flag so I can control how much memory the build uses. But I use <code>leanproject build</code> for (3) because it's helping to sort out <code>_target</code>.</p>",
        "id": 263695587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638610476
    },
    {
        "content": "<p>What I think is going on is that after (2) <code>git pull</code> the toml says that we're supposed to be using one commit of mathlib (the new one), but the actual mathlib git repo in <code>_target</code> is pointing at another commit (the old one) and <code>leanproject get-m</code> directly after <code>git pull</code> <em>might</em> not do all of (a) pulling the master branch of mathlib in <code>_target</code> from github (b) switching to the correct commit according to the lean-liquid toml (c) pulling the correct oleans from Azure. I haven't tried this with <code>leanproject 1.1.0</code> though (and I just missed my chance). I think (3) <code>leanproject build</code> gets the lean files in <code>_target</code> into the correct state and then (4) <code>leanproject get-m</code> gets the olean files into the correct state.</p>",
        "id": 263695732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638610734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <code>./scripts/get-cache.sh</code> will download LTE oleans for you.</p>",
        "id": 263696715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638612120
    },
    {
        "content": "<p>OK so I just tried this on another machine with a clean master branch which hasn't been synced with github for a few days. The question is \"the project I'm working on with someone else has mathlib as a dependency, and the other person bumped mathlib; what do I do?\"</p>\n<p>1) Note that <code>leanproject up</code> (=leanproject upgrade-mathlib) is <em>not</em> what we want to do if we're not the person who's actually doing the bumping. This command bumps mathlib to current master, rather than the commit specified in the project toml, and this is definitely not what we want.</p>\n<p>2) After <code>git pull</code>, the toml now points to the new mathlib commit, but _target leans and oleans are on the old mathlib commit.</p>\n<p>3) Directly running <code>leanproject get-mathlib-cache</code> now looks in the new toml and downloads the oleans corresponding to the new commit, but it does not seem to change the lean files at all, so now we have new oleans but old lean files. Your project is now in a dangerous state! but it's Ok because...</p>\n<p>4) Running <code>leanproject build</code> now switches the commit in _target to the correct one, and doesn't touch the oleans (which is good because they were already correct).</p>\n<p>So on this occasion, <code>git pull</code>, <code>leanproject get-mathlib-cache</code>, <code>leanproject build</code> works.</p>\n<p>I am a bit nervous about whether this always works though; I think I've run into trouble before when people make structural changes to mathlib, e.g. renaming the file <code>data/foo.lean</code> to <code>data/foo/basic.lean</code> and doing other stuff like this; because in step (3) above when the lean files are on one commit and the olean files are on the other commit, in the past you have been able to find yourself in a situation where <code>leanproject</code> wants to put olean files in directories which do not actually exist yet. So whilst the incantation in this message works on this occasion, I am a bit nervous about whether it works 100% of the time. </p>\n<p>Another proof I've used with 100% success rate is <code>git pull</code>, <code>rm -rf _target</code>, <code>leanproject build</code>.</p>",
        "id": 263696930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638612393
    },
    {
        "content": "<p>PS just to confirm that <code>./scripts/get-cache.sh</code> works for me -- however on both the machines I tried it on, it reported (on line 3 of the output) \"Found local lean-liquid oleans\" which cannot possibly be true (unless it means \"I found some oleans in src on your computer, which now are not at all relevant\")</p>",
        "id": 263697540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638613379
    },
    {
        "content": "<p>Aah! So does <code>git pull</code>, <code>rm -rf _target</code>, <code>./scripts/get-cache.sh</code> always work?? This script also gets mathlib leans and oleans, it seems! If this is the case then for this particular project that might be the easiest workflow. It just worked for me now.</p>",
        "id": 263697707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638613617
    },
    {
        "content": "<p>It would be interesting to know whether <code>git pull</code>, <code>./scripts/get-cache.sh</code> works or whether this leaves _target pointing at the wrong mathlib commit. If anyone who didn't bump yet wants to continue this experiment further they could try it and see if <code>lean --make src</code> returns after a few seconds with no output or starts compiling mathlib. My fear is that it will leave the system with all the right olean files but with mathlib in _target still on the old commit.</p>",
        "id": 263697736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638613680
    },
    {
        "content": "<p>Oh this is interesting -- I think that the workflow above does leave you with the wrong lean files but with the correct olean files, so <code>lean --make src</code> <em>does</em> work but jump to definition in VS Code is broken!</p>",
        "id": 263697940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638614029
    },
    {
        "content": "<p>Conclusion: assuming you haven't been an evil person and have edited mathlib files in _target (\"I'll PR it later, promise\"),  then<code>git pull</code>, <code>rm -rf _target</code>, <code>./scripts/get-cache.sh</code> is the golfiest way to happiness, but that's only for this specific project. For other projects with mathlib as dependency, <code>git pull</code>, <code>rm -rf _target</code>, <code>leanproject get-mathlib-cache</code>, <code>leanproject build</code> looks like a failsafe approach.</p>",
        "id": 263698028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638614158
    },
    {
        "content": "<p><code>leanproject pull</code> does what <code>git pull, rm -rf _target</code> does</p>",
        "id": 263700335,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638617426
    },
    {
        "content": "<p>It sounds like we're missing a leanproject command that updates the oleans and leans from the toml version</p>",
        "id": 263851464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638798333
    },
    {
        "content": "<p>I assumed <code>get-mathlib-cache</code> was the command, but evidently it's not.</p>",
        "id": 263851580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638798387
    },
    {
        "content": "<p>The <code>scripts/get-cache.sh</code> script was meant to be a temporary workaround. The plan was that <code>leanproject get-cache</code> would retrieve the cached oleans for a project and its dependencies. At one point I said I'd do this but I haven't and I'm unlikely to this year. Design is in this thread: <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment</a></p>",
        "id": 263859748,
        "sender_full_name": "Ben Toner",
        "timestamp": 1638801995
    },
    {
        "content": "<p>It's been a long time since the last mathlib bump. I'm trying one now, and it's quite messy <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <br>\nThe biggest pain is in <code>src/for_mathlib/abelian_sheaves/main.lean</code>. I think I've fixed almost all the other trouble.<br>\nI've pushed my progress to branch <code>bump-29-Dec-21</code>.</p>",
        "id": 266334380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640774283
    },
    {
        "content": "<p>Now I need to prepare some lunch</p>",
        "id": 266334404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640774292
    },
    {
        "content": "<p>Concerning fixing sheafy stuff: since the last mathlib bump, sheaves and sheaf homs now have dedicated structures as their defs.<br>\nSo a sheaf must be defined as <code>{ val := ..., cond := ... }</code> and a hom as <code>⟨...⟩</code> or more precisely <code>{ val := ... }</code>.</p>",
        "id": 266334526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640774405
    },
    {
        "content": "<p>I'll try to fix up main.lean now...</p>",
        "id": 266338707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640778478
    },
    {
        "content": "<p>(before my laptop battery dies ;))</p>",
        "id": 266338748,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640778488
    },
    {
        "content": "<p>Great! Thanks a lot</p>",
        "id": 266341161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640780802
    },
    {
        "content": "<p>main.lean is fixed and my laptop still has 44% battery. I'll try to build locally to see what else breaks.</p>",
        "id": 266341460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640781126
    },
    {
        "content": "<p>There's an error in <code>condensed/ab.lean</code></p>",
        "id": 266341578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640781260
    },
    {
        "content": "<p>That seems to be the only thing remaining.</p>",
        "id": 266341588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640781276
    },
    {
        "content": "<p>Still building the necessary oleans for me...</p>",
        "id": 266341638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640781319
    },
    {
        "content": "<p>ok, ab.lean was very easy to fix.</p>",
        "id": 266341991,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640781633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> I'm working on getting the left exactness of sheafification into mathlib as well... I have a branch called <a href=\"https://github.com/leanprover-community/mathlib/tree/left_exact_sheafification\">branch#left_exact_sheafification</a> with the proof more-or-less done, just very slow.</p>",
        "id": 266342109,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640781736
    },
    {
        "content": "<p>Thats great! looking forward to the result.</p>",
        "id": 266342149,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640781781
    },
    {
        "content": "<p>So we can merge the bump into master now?</p>",
        "id": 266342190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640781836
    },
    {
        "content": "<p>If it builds, sure!</p>",
        "id": 266342238,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640781847
    },
    {
        "content": "<p>I'm still building on my end...</p>",
        "id": 266342240,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640781852
    },
    {
        "content": "<p>If you're done building, feel free to merge Johan</p>",
        "id": 266342253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640781868
    },
    {
        "content": "<p>Yep, done (and pushed)</p>",
        "id": 266342292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640781913
    },
    {
        "content": "<p>I did another mathlib bump.</p>",
        "id": 266784774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641287546
    },
    {
        "content": "<p>This is the current sorry count:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">6</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">21</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">adjunctions.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">proj_cond.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Mbar</span><span class=\"bp\">/</span><span class=\"n\">functor.lean</span>\n<span class=\"mi\">32</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">5</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">concrete_multiequalizer.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex_abelian.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">split_exact.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">abelian_group_object.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">mapping_cone.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex_shift_jmc.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">extend.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">disjoint_union.lean</span>\n<span class=\"mi\">9</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">abelian_sheaves</span><span class=\"bp\">/</span><span class=\"n\">left_exact</span><span class=\"bp\">-</span><span class=\"n\">backup.lean</span>\n<span class=\"mi\">5</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">abelian_sheaves</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">107</span>\n</code></pre></div>",
        "id": 266784783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641287556
    },
    {
        "content": "<p><code>for_mathlib/abelian_sheaves/left_exact-backup.lean</code> can be removed to reduce the count by 9.</p>",
        "id": 266822176,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641310572
    },
    {
        "content": "<p>Which would instantly bring us below <code>100</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 266822354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641310648
    },
    {
        "content": "<p>But wait, there's more! I think the strategy in <code>for_mathlib/abelian_group_object.lean</code> has been abandoned. We can at least comment out the code in that file.</p>",
        "id": 266822467,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641310689
    },
    {
        "content": "<p>That reminds me... I should finish off the PR on left exactness. Would you mind looking at <a href=\"https://github.com/leanprover-community/mathlib/pull/11154\">#11154</a> which will be used in the left-exactness work?</p>",
        "id": 266822613,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641310748
    },
    {
        "content": "<p>Looking at it now</p>",
        "id": 266823648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641311287
    },
    {
        "content": "<p>In <code>thm69.lean</code> there are things which are now abandoned, so I guess the count will also drop as soon as I comment them (later tonight)</p>",
        "id": 266831506,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641314209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20bump/near/266822176\">said</a>:</p>\n<blockquote>\n<p><code>for_mathlib/abelian_sheaves/left_exact-backup.lean</code> can be removed to reduce the count by 9.</p>\n</blockquote>\n<p>Since this is now in mathlib, I can just completely trash the file, right?</p>",
        "id": 266964987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641403992
    },
    {
        "content": "<p>yes, and also the <code>for_mathlib/src/abelian_sheaves/left_exact.lean</code> file once mathlib is bumped.</p>",
        "id": 266965066,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641404031
    },
    {
        "content": "<p>I will start a bump now</p>",
        "id": 266965439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641404213
    },
    {
        "content": "<p>OK, I won't push things until you are done, then.</p>",
        "id": 266965504,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641404251
    },
    {
        "content": "<p>I've pushed to <code>05-Jan-22-bump-mathlib</code>. Somehow the new <code>left_exact.lean</code> doesn't slot in perfectly with the old one.</p>",
        "id": 266977093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641409777
    },
    {
        "content": "<p>So now some instance about preserving limits can't be found.</p>",
        "id": 266977101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641409787
    },
    {
        "content": "<p>I'll take a look soon</p>",
        "id": 266977564,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641410024
    },
    {
        "content": "<p>Which file has the error?</p>",
        "id": 266979319,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641410855
    },
    {
        "content": "<p><code>main.lean</code></p>",
        "id": 266979554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641410989
    },
    {
        "content": "<p>annoying... the missing thing was the fact that abelian categories have finite limits. I just added <code>[has_finite_limits A]</code>, and it's fixed.</p>",
        "id": 266980192,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641411322
    },
    {
        "content": "<p>At some point I'll do this properly and deduce the instance from <code>[abelian A]</code>.</p>",
        "id": 266980223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641411340
    },
    {
        "content": "<p>aah, thanks a lot for fixing!</p>",
        "id": 266980275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641411363
    },
    {
        "content": "<p>This solved both errors in that file?</p>",
        "id": 266980322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641411376
    },
    {
        "content": "<p>pushed to the branch.</p>",
        "id": 266980323,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641411376
    },
    {
        "content": "<p>Ok, I will compile</p>",
        "id": 266980336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641411386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> what is the purpose of <code>for_mathlib/concrete_filtered_colimit_commutes.lean</code>? It doesn't seem to be imported atm</p>",
        "id": 266981757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641412137
    },
    {
        "content": "<p>Pushed mathlib bump to <code>master</code>.</p>",
        "id": 266981867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641412195
    },
    {
        "content": "<p>Oh, that whole file can be removed.</p>",
        "id": 266982155,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641412313
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11271\">#11271</a></p>",
        "id": 266982723,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641412549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20bump/near/266981757\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> what is the purpose of <code>for_mathlib/concrete_filtered_colimit_commutes.lean</code>? It doesn't seem to be imported atm</p>\n</blockquote>\n<p>The content of that file was more-or-less done in <a href=\"https://github.com/leanprover-community/mathlib/pull/11154\">#11154</a></p>",
        "id": 266982973,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641412670
    },
    {
        "content": "<p>I see, that's sort of what I was guessing.</p>",
        "id": 266983111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641412740
    },
    {
        "content": "<p>Just wanted to double check.</p>",
        "id": 266983119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641412746
    },
    {
        "content": "<p>Sorry, I've been bad about cleaning up after myself in <code>for_mathlib/...</code></p>",
        "id": 266983184,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641412780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20bump/near/266982155\">said</a>:</p>\n<blockquote>\n<p>Oh, that whole file can be removed.</p>\n</blockquote>\n<p>done</p>",
        "id": 266983200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641412786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> The comment above the <code>sorry</code>s in <code>src/condensed/adjunctions.lean</code> is now no longer accurate, right? Do you still want to keep those <code>sorry</code>d examples?</p>",
        "id": 266990435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641416446
    },
    {
        "content": "<p>Yeah, those comments can be removed!</p>",
        "id": 266991923,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641417243
    },
    {
        "content": "<p>I removed the comments</p>",
        "id": 266993225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641417950
    },
    {
        "content": "<p>The <code>leanproject pull</code> command seems to give an error after yesterday's <code>bump</code>; I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">pull</span>\n<span class=\"n\">Pulling</span> <span class=\"k\">from</span> <span class=\"n\">origin</span>\n<span class=\"n\">SHA</span> <span class=\"n\">b'9fd7a02d03ba2ea9786eea4bf547b2c51e56ed6a'</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">be</span> <span class=\"n\">resolved</span><span class=\"o\">,</span> <span class=\"n\">git</span> <span class=\"n\">returned</span><span class=\"o\">:</span> <span class=\"n\">b'9fd7a02d03ba2ea9786eea4bf547b2c51e56ed6a</span> <span class=\"n\">missing'</span>\n</code></pre></div>",
        "id": 267069565,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641480971
    },
    {
        "content": "<p>Does <code>git pull</code> work?</p>",
        "id": 267069838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641481098
    },
    {
        "content": "<p>Yes, it does</p>",
        "id": 267069846,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641481107
    },
    {
        "content": "<p>Try removing  the <code>_target</code> directory</p>",
        "id": 267069856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641481115
    },
    {
        "content": "<p>maybe a bug in <code>leanproject</code>?</p>",
        "id": 267069868,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641481121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20bump/near/267069856\">said</a>:</p>\n<blockquote>\n<p>Try removing _target</p>\n</blockquote>\n<p>You mean by brute force? Just throw it away?</p>",
        "id": 267069934,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641481156
    },
    {
        "content": "<p>I usually try a <code>leanproject build</code> in this case</p>",
        "id": 267069936,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641481159
    },
    {
        "content": "<p>If it starts compiling everything try <code>leanproject get-mathlib-cache</code></p>",
        "id": 267069964,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641481183
    },
    {
        "content": "<p>Well,<br>\n<span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20bump/near/267069936\">said</a>:</p>\n<blockquote>\n<p>I usually try a <code>leanproject build</code> in this case</p>\n</blockquote>\n<p>I did a <code>leanproject up</code> (which works)</p>",
        "id": 267069977,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641481197
    },
    {
        "content": "<p>Trying with <code>build</code>...</p>",
        "id": 267070147,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641481252
    },
    {
        "content": "<p><code>leanproject up</code> starts a mathlib bump.</p>",
        "id": 267071115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641481760
    },
    {
        "content": "<p>So now you have a mathlib in your <code>_target</code> that is newer than it was a few minutes ago. And so the build might be broken.</p>",
        "id": 267071149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641481792
    },
    {
        "content": "<p>Ah, I see. OK.</p>",
        "id": 267071239,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641481832
    },
    {
        "content": "<p>Then I'd rather simply trash my current folder and clone a fresh new one.</p>",
        "id": 267071270,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641481858
    },
    {
        "content": "<p>Well, please make sure you don't throw away stuff that you haven't pushed to github</p>",
        "id": 267071311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641481885
    },
    {
        "content": "<p>Yes, I am sure (I pulled yesterday and haven't done anything today yet).</p>",
        "id": 267071350,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641481915
    },
    {
        "content": "<p>Still, the problem with <code>leanproject pull</code> is strange, no?</p>",
        "id": 267071403,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641481929
    },
    {
        "content": "<p>I've got the same error in <code>flt-regular</code>, but not anymore. Maybe <code>leanproject</code> has been updated?</p>",
        "id": 267072557,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641482588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  ?</p>",
        "id": 267072694,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641482656
    },
    {
        "content": "<p><code>leanproject --version</code> says <code>1.1.0</code></p>",
        "id": 267072967,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641482798
    },
    {
        "content": "<p>BTW, shouldn't the <code>flt</code> appear also <a href=\"https://leanprover-community.github.io/lean_projects.html\">here</a>?</p>",
        "id": 267073519,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641483104
    },
    {
        "content": "<p>You should remove _target (which just has mathlib and maybe gptf) and then leanproject pull/leanpkg configure</p>",
        "id": 267103770,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641497653
    },
    {
        "content": "<p>If you always leanproject pull this shouldn't happen but I agree, it's pretty wild that the tooling fails completely if it's done mildly incorrectly once</p>",
        "id": 267103843,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641497689
    },
    {
        "content": "<p>Just for the record; after I have deleted the local folder <code>lean_liquid</code> and cloned a new one, <code>leanproject pull</code> is working again like a charm.</p>",
        "id": 267181943,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1641557518
    },
    {
        "content": "<p>Just cleaning up a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ git diff 17cbfe3c8e445ccba03833ee81fcbf8c1ae37283 --stat\n src/for_mathlib/concrete.lean                           <span class=\"p\">|</span>  <span class=\"m\">51</span> ---------\n src/for_mathlib/concrete_filtered_colimit_commutes.lean <span class=\"p\">|</span> <span class=\"m\">304</span> ----------------------------------------------------\n src/for_mathlib/concrete_multiequalizer.lean            <span class=\"p\">|</span>  <span class=\"m\">89</span> ---------------\n src/for_mathlib/evaluation_adjunction.lean              <span class=\"p\">|</span>  <span class=\"m\">65</span> -----------\n src/for_mathlib/is_sheaf.lean                           <span class=\"p\">|</span>  <span class=\"m\">19</span> ----\n src/for_mathlib/limit_obj.lean                          <span class=\"p\">|</span>  <span class=\"m\">17</span> ---\n <span class=\"m\">6</span> files changed, <span class=\"m\">545</span> deletions<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 267200473,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641568583
    },
    {
        "content": "<p>Oops! I broke the build... but <code>leanproject build</code> succeeds on my machine with these files deleted.</p>",
        "id": 267201549,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641569144
    },
    {
        "content": "<p>Does <code>leanproject build</code> not ignore the zombie oleans before building?</p>",
        "id": 267203374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641569989
    },
    {
        "content": "<p>Doesn't <code>import foo</code> just work in the presence of either <code>foo.lean</code> or <code>foo.olean</code>?</p>",
        "id": 267204568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641570603
    },
    {
        "content": "<p>yeah, that's exactly the issue. I had oleans for files that I deleted, so my local <code>leanproject build</code> happily completed and I pushed to master on github only to get an angry email from CI.</p>",
        "id": 267204663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641570661
    },
    {
        "content": "<p>anyway, I'm fixing it now...</p>",
        "id": 267204684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641570671
    },
    {
        "content": "<p>BTW, is there some flag I can pass to <code>leanproject build</code> that will make it so that the <code>warning: imported file ... uses sorry</code> messages don't show up, but any build errors still show up?</p>",
        "id": 267204898,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641570782
    },
    {
        "content": "<p>Are the warnings going to STDOUT and the errors to STDERR?</p>",
        "id": 267218479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641577298
    },
    {
        "content": "<p>I'm not sure. let me check.</p>",
        "id": 267218567,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641577335
    },
    {
        "content": "<p>ok, so the <code>... uses sorry</code> messages are not sent to stderr.</p>",
        "id": 267218848,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641577501
    },
    {
        "content": "<p>at least they still appear with <code>leanproject build 2&gt;/dev/null</code></p>",
        "id": 267218887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641577518
    },
    {
        "content": "<p>and it seems that actual build errors also are not sent to stderr.</p>",
        "id": 267219111,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641577607
    },
    {
        "content": "<p>open an issue? I'm not really a computer scientist but I'm a bit surprised about this. Or is it normal?</p>",
        "id": 267219530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641577829
    },
    {
        "content": "<p>I suppose these messages come from <code>lean</code> itself?</p>",
        "id": 267220331,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641578268
    },
    {
        "content": "<p>Right these errors do come from Lean, and all go to stdout, I couldn't see any built in way using lean or leanproject to filter these out.<br>\nProbably some simple shell script can do this too but one fairly easy way to manually filter these out is using the json output mode and using <a href=\"https://stedolan.github.io/jq/\">https://stedolan.github.io/jq/</a> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lean --json src/s.lean <span class=\"p\">|</span> jq <span class=\"s1\">'select(.severity == \"error\")'</span>\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"caption\"</span>: <span class=\"s2\">\"\"</span>,\n  <span class=\"s2\">\"file_name\"</span>: <span class=\"s2\">\"/home/alex/test/src/s.lean\"</span>,\n  <span class=\"s2\">\"pos_col\"</span>: <span class=\"m\">19</span>,\n  <span class=\"s2\">\"pos_line\"</span>: <span class=\"m\">3</span>,\n  <span class=\"s2\">\"severity\"</span>: <span class=\"s2\">\"error\"</span>,\n  <span class=\"s2\">\"text\"</span>: <span class=\"s2\">\"type mismatch, term\\n  trivial\\nhas type\\n  true\\nbut is expected to have type\\n  false\"</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>doing the inverse filter gets you the opposite</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ lean --json src/s.lean <span class=\"p\">|</span> jq <span class=\"s1\">'select(.severity == \"warning\")'</span>\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"caption\"</span>: <span class=\"s2\">\"\"</span>,\n  <span class=\"s2\">\"file_name\"</span>: <span class=\"s2\">\"/home/alex/test/src/t.lean\"</span>,\n  <span class=\"s2\">\"pos_col\"</span>: <span class=\"m\">0</span>,\n  <span class=\"s2\">\"pos_line\"</span>: <span class=\"m\">1</span>,\n  <span class=\"s2\">\"severity\"</span>: <span class=\"s2\">\"warning\"</span>,\n  <span class=\"s2\">\"text\"</span>: <span class=\"s2\">\"declaration 't' uses sorry\"</span>\n<span class=\"o\">}</span>\n<span class=\"o\">{</span>\n  <span class=\"s2\">\"caption\"</span>: <span class=\"s2\">\"\"</span>,\n  <span class=\"s2\">\"file_name\"</span>: <span class=\"s2\">\"/home/alex/test/src/s.lean\"</span>,\n  <span class=\"s2\">\"pos_col\"</span>: <span class=\"m\">0</span>,\n  <span class=\"s2\">\"pos_line\"</span>: <span class=\"m\">1</span>,\n  <span class=\"s2\">\"severity\"</span>: <span class=\"s2\">\"warning\"</span>,\n  <span class=\"s2\">\"text\"</span>: <span class=\"s2\">\"imported file '/home/alex/test/src/t.lean' uses sorry\"</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>you can pretty easily configure this to only print out the actual file name and text of the errors or put it in whatever format you want, or even only filter warnings containing the string sorry and leave the rest.</p>",
        "id": 267222358,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641579240
    },
    {
        "content": "<p>Nice.</p>",
        "id": 267222451,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641579274
    },
    {
        "content": "<p>I was going to hack something together with sed, but I like <code>jq</code> ;)</p>",
        "id": 267222472,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641579287
    },
    {
        "content": "<p>Yeah it even nicely formats and colorizes. This seems a decent setup: <code>lean --json src/s.lean | jq 'select(.severity == \"error\") | [{\"name\":.file_name,\"error\":.text, \"line\":.pos_line}]'</code></p>",
        "id": 267223045,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641579568
    },
    {
        "content": "<p>'nother day, 'nother mathlib bump</p>",
        "id": 267279806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641623537
    },
    {
        "content": "<p>We're now down to 90 sorrys:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">6</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">21</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">proj_cond.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Mbar</span><span class=\"bp\">/</span><span class=\"n\">functor.lean</span>\n<span class=\"mi\">34</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex_abelian.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">mapping_cone.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex_shift_jmc.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">extend.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">5</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">abelian_sheaves</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">split_exact.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">90</span>\n</code></pre></div>",
        "id": 267279819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641623578
    },
    {
        "content": "<p>And down to 75!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">6</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">21</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">proj_cond.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Mbar</span><span class=\"bp\">/</span><span class=\"n\">functor.lean</span>\n<span class=\"mi\">23</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">split_exact.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">mapping_cone.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex_shift_jmc.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">extend.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"mi\">5</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">abelian_sheaves</span><span class=\"bp\">/</span><span class=\"n\">main.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">75</span>\n</code></pre></div>",
        "id": 267396800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641791711
    },
    {
        "content": "<p>The 5 sorry's in <code>abelian_sheaves/main</code> are in a comment ;)</p>",
        "id": 267431724,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641817449
    },
    {
        "content": "<p>ditto for the one in <code>Profinite/extend</code></p>",
        "id": 267431793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641817497
    },
    {
        "content": "<p>and the two in <code>laurent_measures/basic</code></p>",
        "id": 267432024,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641817677
    },
    {
        "content": "<p>Ok, I will replace them with <code>(by) admit</code> to make the sorry count a bit more accurate</p>",
        "id": 267432259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641817809
    },
    {
        "content": "<p>Unfortunately, I think the sorry in <code>Mbar/functor</code> is wrong, but it should be okay (and even sorry-free) if we replace <code>ProFiltPseuNormGrpWithTinv</code> with <code>ProFiltPseuNormGrpWithTinv₁</code></p>",
        "id": 267432290,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641817851
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/ae6f3ad81ba600fb36e15793adc44d3940351d94/src/pseudo_normed_group/category.lean#L1353\">https://github.com/leanprover-community/lean-liquid/blob/ae6f3ad81ba600fb36e15793adc44d3940351d94/src/pseudo_normed_group/category.lean#L1353</a></p>",
        "id": 267432381,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641817908
    },
    {
        "content": "<p>The two in <code>mapping_cone.lean</code> are commented out as well.</p>",
        "id": 267432533,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641818018
    },
    {
        "content": "<p>Ok, I will update those as well</p>",
        "id": 267432589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818043
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">6</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">21</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">proj_cond.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Mbar</span><span class=\"bp\">/</span><span class=\"n\">functor.lean</span>\n<span class=\"mi\">23</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">mapping_cone.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">split_exact.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">63</span>\n</code></pre></div>",
        "id": 267432610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818073
    },
    {
        "content": "<p>btw what's <code>homological_complex_shift_jmc.lean</code>?</p>",
        "id": 267432670,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641818132
    },
    {
        "content": "<p>Old cruft. I think it should be removed.</p>",
        "id": 267432685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818143
    },
    {
        "content": "<p>Aah, it's not even checked into git. It's just a random file I had locally.</p>",
        "id": 267432761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818184
    },
    {
        "content": "<p>Bamm, down to 63 (-;</p>",
        "id": 267432829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818247
    },
    {
        "content": "<p>Cheap way of getting rid of <code>sorry</code>s <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 267432843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818259
    },
    {
        "content": "<p><code>leanproject sorrycount</code> should be a thing.</p>",
        "id": 267432929,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641818302
    },
    {
        "content": "<p>the easiest way to get rid of a sorry is to delete the theorem <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 267432930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641818305
    },
    {
        "content": "<p>This is my <code>sorrycount</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>rg -l sorry <span class=\"p\">|</span> rg -v scripts <span class=\"p\">|</span> xargs -I % sh -c <span class=\"s1\">'nsorry=`rg sorry % | wc -l`; echo -n \"$nsorry\\t%\\n\"'</span><span class=\"p\">;</span> <span class=\"nb\">echo</span> -en <span class=\"s2\">\"Total:\\t\"</span><span class=\"p\">;</span> rg sorry <span class=\"p\">|</span> rg -v scripts <span class=\"p\">|</span> wc -l\n</code></pre></div>",
        "id": 267433229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Do you think the <code>sorry</code> in <code>Mbar/functor</code> is now tractable, after we add the <code>₁</code>s?</p>",
        "id": 267433385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818575
    },
    {
        "content": "<p>yeah, it should just be taken care of by tc resolution in fact</p>",
        "id": 267433419,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641818598
    },
    {
        "content": "<p>I'm building <span aria-label=\"fencing\" class=\"emoji emoji-1f93a\" role=\"img\" title=\"fencing\">:fencing:</span> right now, but I'll try it afterwards.</p>",
        "id": 267433517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818647
    },
    {
        "content": "<p>If you need the functor to land in the category without the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">{}_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4511em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, we have the canonical functors from <code>foo_1</code> to <code>foo</code>.</p>",
        "id": 267433556,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641818682
    },
    {
        "content": "<p>It should also be possible to fix ≥ 10 of the sorrys in <code>condensed/ab.lean</code>, I think.</p>",
        "id": 267433562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641818687
    },
    {
        "content": "<p>yeah, it should be. I'll try to fix some of those a little later (if they're still there)</p>",
        "id": 267433592,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641818707
    },
    {
        "content": "<p>The sorry in <code>Mbar/functor</code> is fixed.</p>",
        "id": 267434846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641819368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20bump/near/267069565\">said</a>:</p>\n<blockquote>\n<p>The <code>leanproject pull</code> command seems to give an error after yesterday's <code>bump</code>; I get</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">pull</span>\n<span class=\"n\">Pulling</span> <span class=\"k\">from</span> <span class=\"n\">origin</span>\n<span class=\"n\">SHA</span> <span class=\"n\">b'9fd7a02d03ba2ea9786eea4bf547b2c51e56ed6a'</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">be</span> <span class=\"n\">resolved</span><span class=\"o\">,</span> <span class=\"n\">git</span> <span class=\"n\">returned</span><span class=\"o\">:</span> <span class=\"n\">b'9fd7a02d03ba2ea9786eea4bf547b2c51e56ed6a</span> <span class=\"n\">missing'</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I just ran into this issue on another repo, after a <code>git pull</code> changed <code>leanpkg.toml</code>. I accidentally typed <code>leanproject get-c</code> instead of <code>leanproject get-m</code> (I don't know if this had anything to do with it). After <code>leanproject get-m</code> I got the dreaded \"SHA could not be resolved\" error. I fixed it by <code>leanproject build</code> and then breaking out of the build (it was compiling mathlib) and then <code>leanproject get-m</code> again, and then <code>leanproject build</code> worked fine.</p>",
        "id": 267500293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641849023
    },
    {
        "content": "<p>Can you open an issue on the mathlibtools git repository?</p>",
        "id": 267521175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641860450
    },
    {
        "content": "<p>I've told Patrick many times that I don't understand the workflow when someone else bumps mathlib and hence changes leanpkg.toml in a joint project with mathlib as a dependency. All that's happened is that the error message has changed recently</p>",
        "id": 267542690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641883660
    },
    {
        "content": "<p>I used to have the same problem. I now only use <code>leanproject pull</code> and everything works.</p>",
        "id": 267542898,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641883807
    },
    {
        "content": "<p>Ah that's right, I think this is the command he wrote when I complained the last time. My problem is that I don't remember this command, nothing more</p>",
        "id": 267542958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641883873
    },
    {
        "content": "<p>I remember the workarounds</p>",
        "id": 267542968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641883887
    },
    {
        "content": "<p>bumped mathlib. We're now on <code>lean 3.37.0c</code> and <code>default</code> no longer takes an explicit argument. Otherwise, uneventful bump.</p>",
        "id": 267588823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641911509
    },
    {
        "content": "<p>Another mathlib bump. We're now on <code>lean 3.38.0c</code>. This means that <code>simp</code> is more powerful, and a bunch of <code>congr</code>s could be removed.<br>\n<span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> I made a couple of changes to <code>thm69.lean</code>. So be aware <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 267704103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641982016
    },
    {
        "content": "<p>I have just killed 15 sorries.</p>",
        "id": 267903732,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642095420
    },
    {
        "content": "<p>That's the definition of progress <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 267906590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642096697
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">6</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">4</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">top_comparison.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">combinatorial_lemma</span><span class=\"bp\">/</span><span class=\"n\">profinite.lean</span>\n<span class=\"mi\">11</span>      <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">split_exact.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">mapping_cone.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">33</span>\n</code></pre></div>",
        "id": 267906626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642096713
    },
    {
        "content": "<p>Big congrats, <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> !!</p>",
        "id": 267906648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642096724
    },
    {
        "content": "<p>... And I just increased the sorry count (in <code>condensed/extr</code>)</p>",
        "id": 267918759,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642102324
    },
    {
        "content": "<p>The file <code>condensed/extr</code> now has 15 sorrys, so I counteracted all of the progress that Filippo has made. <br>\nOn the other hand, all of these sorry's are props, some are more doable than others, and they should give the equivalence between <code>Condensed C</code> and <code>ExtrSheaf C</code> (which is some version of sheaves on <code>ExtrDisc</code>, the category of projective objects in <code>Profinite</code>).</p>",
        "id": 267927389,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642106579
    },
    {
        "content": "<p>Ok, I'll try my best to insert at least 6 sorries ASAP! <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 267927465,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642106628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> Thanks so much for fix the build!</p>",
        "id": 268350238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642489201
    },
    {
        "content": "<p>I just bumped mathlib. Just a reminder to refresh your oleans!</p>",
        "id": 268931701,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642820053
    },
    {
        "content": "<p>mathlib bumped again. Please refresh your oleans.</p>",
        "id": 269007803,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1642930055
    },
    {
        "content": "<p>I believe that I just did a bump: as this was my (almost) first time, I hope that I did not mess anything up!</p>\n<p>The most important change was the addition of <code>open_locale pointwise</code> for the category stuff.</p>",
        "id": 269226481,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643101287
    },
    {
        "content": "<p>Looking at your last commit, you didn't change <code>leanpkg.toml</code>, so you didn't actually bumped mathlib. Have you done <code>leanproject up</code>?</p>",
        "id": 269226946,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643101509
    },
    {
        "content": "<p>Looks good. Thanks!</p>",
        "id": 269226947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643101510
    },
    {
        "content": "<p>Hmm, when I did a <code>git pull</code> just now, <code>leanpkg.toml</code> was changed.</p>",
        "id": 269226982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643101531
    },
    {
        "content": "<p>Was that from an earlier commit?</p>",
        "id": 269226990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643101537
    },
    {
        "content": "<p>I am talking about <code>7b3e09e</code></p>",
        "id": 269227023,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643101559
    },
    {
        "content": "<p>But the bot updated mathlib in <code>2adc6eb</code>, so probably no manual intervention was needed.</p>",
        "id": 269227222,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643101663
    },
    {
        "content": "<p>The toml now points to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">commit</span> <span class=\"mi\">32</span><span class=\"n\">cd27879f81e108b4537c4f2ca64701f765dc83</span>\n<span class=\"n\">Author</span><span class=\"o\">:</span> <span class=\"n\">Yury</span> <span class=\"n\">G.</span> <span class=\"n\">Kudryashov</span> <span class=\"bp\">&lt;</span><span class=\"n\">urkud</span><span class=\"bp\">@</span><span class=\"n\">urkud.name</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">Date</span><span class=\"o\">:</span>   <span class=\"n\">Mon</span> <span class=\"n\">Jan</span> <span class=\"mi\">24</span> <span class=\"mi\">03</span><span class=\"o\">:</span><span class=\"mi\">52</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"mi\">2022</span> <span class=\"bp\">+</span><span class=\"mi\">0000</span>\n</code></pre></div>\n<p>which seems good to me.</p>",
        "id": 269227239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643101676
    },
    {
        "content": "<p>Ok, I am glad that it worked!  I did not touch the toml file, since it scares me.  My flow was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanproject</span> <span class=\"n\">up</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"bp\">#</span><span class=\"n\">probably</span> <span class=\"n\">unnecessary</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">build</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">fix</span><span class=\"o\">,</span> <span class=\"n\">build</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 269233269,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643104798
    },
    {
        "content": "<p><code>leanproject up</code> modifies the file for you. It didn't in this case because it was already up-to-date</p>",
        "id": 269235425,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643105840
    },
    {
        "content": "<p>I'm curious about this <code>fix</code> bash script you have Damiano...</p>",
        "id": 269267477,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643122355
    },
    {
        "content": "<p>I just pushed a trivial bump. But this does mean that we have access to some of the goodies that <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> pushed to mathlib recently.</p>",
        "id": 269993592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643617096
    },
    {
        "content": "<p>bumped</p>",
        "id": 270677678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643960852
    },
    {
        "content": "<p>Sorry count:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>\n<span class=\"mi\">3</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">ab.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">is_proetale_sheaf.lean</span>\n<span class=\"mi\">8</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">aux_lemmas.lean</span>\n<span class=\"mi\">2</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex.lean</span>\n<span class=\"mi\">1</span>       <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>\n<span class=\"n\">Total</span><span class=\"o\">:</span>  <span class=\"mi\">20</span>\n</code></pre></div>",
        "id": 270677692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643960870
    },
    {
        "content": "<p>Bumbed again.</p>",
        "id": 272233971,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645090357
    },
    {
        "content": "<p>I don't know why but <code>leanproject</code> didn't pick the last mathlib, so I bumped again.</p>",
        "id": 272246271,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1645097583
    },
    {
        "content": "<p>The reason is <a href=\"#narrow/stream/113488-general/topic/lean-3.2E39.2E1.20branch.20not.20updating/near/272249334\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/lean-3.2E39.2E1.20branch.20not.20updating/near/272249334</a>, so probably using leanproject up will bump down until that process does its business and tags mathlib branches again</p>",
        "id": 272255568,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645103052
    },
    {
        "content": "<p>Bumped.</p>",
        "id": 273646873,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646144169
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">commit</span> <span class=\"mi\">0</span><span class=\"n\">d4e3e7ca25671add2f585ec44baccd43fa454ac</span> <span class=\"o\">(</span><span class=\"n\">HEAD</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"n\">Author</span><span class=\"o\">:</span> <span class=\"n\">Johan</span> <span class=\"n\">Commelin</span> <span class=\"bp\">&lt;</span><span class=\"n\">johan</span><span class=\"bp\">@</span><span class=\"n\">commelin.net</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">Date</span><span class=\"o\">:</span>   <span class=\"n\">Thu</span> <span class=\"n\">Mar</span> <span class=\"mi\">10</span> <span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"mi\">59</span><span class=\"o\">:</span><span class=\"mi\">52</span> <span class=\"mi\">2022</span> <span class=\"bp\">+</span><span class=\"mi\">0000</span>\n\n    <span class=\"n\">bump</span> <span class=\"n\">mathlib</span>\n\n <span class=\"n\">leanpkg.toml</span>                                       <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>                                  <span class=\"bp\">|</span>  <span class=\"mi\">3</span> <span class=\"bp\">++-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor_zero.lean</span>          <span class=\"bp\">|</span> <span class=\"mi\">36</span> <span class=\"bp\">+++++++++++++++++</span><span class=\"c1\">-------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homology.lean</span>                      <span class=\"bp\">|</span> <span class=\"mi\">48</span> <span class=\"c1\">------------------------------------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homotopy_category.lean</span>             <span class=\"bp\">|</span> <span class=\"mi\">33</span> <span class=\"bp\">++++++++++++++++++++++++++++++</span><span class=\"c1\">---</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">mapping_cone.lean</span>                  <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">short_exact_sequence.lean</span>          <span class=\"bp\">|</span> <span class=\"mi\">18</span> <span class=\"bp\">+++++++++++++++++-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">simpler_laurent_measures.lean</span> <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">+</span><span class=\"c1\">---</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">theta.lean</span>                    <span class=\"bp\">|</span>  <span class=\"mi\">5</span> <span class=\"bp\">++++-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">profinitely_filtered.lean</span>  <span class=\"bp\">|</span> <span class=\"mi\">66</span> <span class=\"bp\">+++++++++++++++++++++++++++++++++++++++++++</span><span class=\"c1\">-----------------------</span>\n <span class=\"mi\">10</span> <span class=\"n\">files</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"mi\">116</span> <span class=\"n\">insertions</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"mi\">101</span> <span class=\"n\">deletions</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 274855313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646928019
    },
    {
        "content": "<p>Mathlib changed quite a bit in the last two weeks.</p>",
        "id": 274855378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646928035
    },
    {
        "content": "<p>Bumped.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">leanpkg.toml</span>                                     <span class=\"bp\">|</span>   <span class=\"mi\">4</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lbar</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                              <span class=\"bp\">|</span>   <span class=\"mi\">4</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>                               <span class=\"bp\">|</span>   <span class=\"mi\">1</span> <span class=\"bp\">+</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived_functor_zero.lean</span>        <span class=\"bp\">|</span> <span class=\"mi\">286</span> <span class=\"bp\">+++++++</span><span class=\"c1\">-------------------------------------------------------------------------------------------------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">is_biprod.lean</span>                   <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pid.lean</span>                         <span class=\"bp\">|</span>   <span class=\"mi\">9</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">projective_replacement.lean</span>      <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">aux_lemmas.lean</span>             <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                  <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">bounded.lean</span>                <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">int_nat_shifts.lean</span>         <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">no_longer_needed_maybe.lean</span> <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">real_measures</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                     <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">system_of_complexes</span><span class=\"bp\">/</span><span class=\"n\">completion.lean</span>          <span class=\"bp\">|</span>   <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"mi\">14</span> <span class=\"n\">files</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"mi\">35</span> <span class=\"n\">insertions</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"mi\">287</span> <span class=\"n\">deletions</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275962393,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647776043
    },
    {
        "content": "<p>The linter gives now an error I don't understand</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">/</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">lint_project.lean</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">category_theory.abelian.homology</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">category_theory.abelian.homology_c._proof_1'</span>\n</code></pre></div>\n<p>Unfortunately I don't have time today to investigate this.</p>",
        "id": 275968300,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647784385
    },
    {
        "content": "<p>It happens when there are two automatically generated lemmas that are named the same. It looks like <code>for_mathlib/homology</code> needs to be cleaned up after the bump.</p>",
        "id": 275969958,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647786621
    },
    {
        "content": "<p>Bumped again, and fixed the problem with <code>homology</code>.</p>",
        "id": 276036510,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647862044
    },
    {
        "content": "<p>I've pushed a start to <code>mathlib-bump-07-apr-22</code></p>",
        "id": 278176433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649343498
    },
    {
        "content": "<p>need to run to my train now</p>",
        "id": 278176447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649343504
    },
    {
        "content": "<p>todo: rename <code>pseudo_exact_of_exact</code> to use dot-notation</p>",
        "id": 278178493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649344199
    },
    {
        "content": "<p>Afaict the proof of thm9.5 should work without problems again. Of course the tricky part is bumping all the homological stuff, because <code>exact</code> is no longer a typeclass. But it seems to be pretty straightforward.</p>",
        "id": 278179007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649344413
    },
    {
        "content": "<p>TODO: <code>abelian.category_theory.limits.cokernel.desc.category_theory.mono</code> is a real name</p>",
        "id": 278200248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649353168
    },
    {
        "content": "<p>How hard would it be to make autogenerated instance names not add the same namespace several times?</p>",
        "id": 278202926,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649354313
    },
    {
        "content": "<p>mathlib bump is done</p>",
        "id": 278214151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649359445
    },
    {
        "content": "<p>hopefully oleans will be ready in a couple of minutes</p>",
        "id": 278214172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649359459
    },
    {
        "content": "<p>I'm starting another mathlib bump</p>",
        "id": 279800707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650620436
    },
    {
        "content": "<p>That was a most awful bump</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">leanpkg.toml</span>                                                    <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">breen_deligne</span><span class=\"bp\">/</span><span class=\"n\">functorial_map.lean</span>                           <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">challenge.lean</span>                                              <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>                                      <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">exact.lean</span>                                        <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">condensed</span><span class=\"bp\">/</span><span class=\"n\">projective_resolution.lean</span>                        <span class=\"bp\">|</span>  <span class=\"mi\">6</span> <span class=\"bp\">++</span><span class=\"c1\">----</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">AddCommGroup</span><span class=\"bp\">/</span><span class=\"n\">kernels.lean</span>                       <span class=\"bp\">|</span>  <span class=\"mi\">8</span> <span class=\"bp\">++++</span><span class=\"c1\">----</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">abelian_category.lean</span>                           <span class=\"bp\">|</span> <span class=\"mi\">74</span> <span class=\"bp\">++++++++++++++++++++++++++++</span><span class=\"c1\">----------------------------------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">abelian_sheaves</span><span class=\"bp\">/</span><span class=\"n\">functor_category.lean</span>           <span class=\"bp\">|</span> <span class=\"mi\">12</span> <span class=\"bp\">++++++++</span><span class=\"c1\">----</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>                                    <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">+++-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">delta_functor.lean</span>                              <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">bounded_homotopy_category.lean</span>          <span class=\"bp\">|</span> <span class=\"mi\">55</span> <span class=\"bp\">+++++++++++++++++++++++++++++++++++++++</span><span class=\"c1\">----------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">derived_cat.lean</span>                        <span class=\"bp\">|</span> <span class=\"mi\">42</span> <span class=\"bp\">++++++++++++++++++++++++++</span><span class=\"c1\">----------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"kd\">example</span><span class=\"bp\">.</span><span class=\"n\">lean</span>                            <span class=\"bp\">|</span> <span class=\"mi\">19</span> <span class=\"bp\">+++++++++++</span><span class=\"c1\">--------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">lemmas.lean</span>                             <span class=\"bp\">|</span>  <span class=\"mi\">3</span> <span class=\"bp\">+</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">derived</span><span class=\"bp\">/</span><span class=\"n\">les_facts.lean</span>                          <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">exact_seq2.lean</span>                                 <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group.lean</span>                         <span class=\"bp\">|</span>  <span class=\"mi\">4</span> <span class=\"bp\">++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex_abelian.lean</span>                <span class=\"bp\">|</span> <span class=\"mi\">10</span> <span class=\"bp\">++++++</span><span class=\"c1\">----</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homological_complex_equiv_functor_category.lean</span> <span class=\"bp\">|</span>  <span class=\"mi\">8</span> <span class=\"bp\">++++</span><span class=\"c1\">----</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homology_exact.lean</span>                             <span class=\"bp\">|</span> <span class=\"mi\">31</span> <span class=\"bp\">+++++++++++++++++++++</span><span class=\"c1\">----------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homotopy_category.lean</span>                          <span class=\"bp\">|</span> <span class=\"mi\">20</span> <span class=\"bp\">+++++++++++++++</span><span class=\"c1\">-----</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">homotopy_category_pretriangulated.lean</span>          <span class=\"bp\">|</span> <span class=\"mi\">10</span> <span class=\"bp\">++++++++</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">les_homology.lean</span>                               <span class=\"bp\">|</span> <span class=\"mi\">14</span> <span class=\"bp\">++++</span><span class=\"c1\">----------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">mapping_cone.lean</span>                               <span class=\"bp\">|</span> <span class=\"mi\">43</span> <span class=\"bp\">+++++++++++++++++++++++++++++++++++++++</span><span class=\"c1\">----</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pid.lean</span>                                        <span class=\"bp\">|</span>  <span class=\"mi\">3</span> <span class=\"bp\">+</span><span class=\"c1\">--</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">projective_replacement.lean</span>                     <span class=\"bp\">|</span> <span class=\"mi\">30</span> <span class=\"bp\">+++++++</span><span class=\"c1\">-----------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">sheafification_mono.lean</span>                        <span class=\"bp\">|</span> <span class=\"mi\">45</span> <span class=\"bp\">+++++++++</span><span class=\"c1\">------------------------------------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">simplicial</span><span class=\"bp\">/</span><span class=\"n\">complex.lean</span>                         <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">split_exact.lean</span>                                <span class=\"bp\">|</span> <span class=\"mi\">18</span> <span class=\"bp\">+++++++++++++</span><span class=\"c1\">-----</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">free_pfpng</span><span class=\"bp\">/</span><span class=\"n\">acyclic.lean</span>                                     <span class=\"bp\">|</span> <span class=\"mi\">10</span> <span class=\"bp\">+++</span><span class=\"c1\">-------</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">invpoly</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                                          <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>                                 <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">ses.lean</span>                                   <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">laurent_measures</span><span class=\"bp\">/</span><span class=\"n\">thm69.lean</span>                                 <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">polyhedral_lattice</span><span class=\"bp\">/</span><span class=\"n\">cech.lean</span>                                <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">prop819.lean</span>                                                <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">++</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">LC.lean</span>                                 <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">rescale</span><span class=\"bp\">/</span><span class=\"n\">LC.lean</span>                                             <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"kd\">constants</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>                                <span class=\"bp\">|</span>  <span class=\"mi\">1</span> <span class=\"bp\">-</span>\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">thm95</span><span class=\"bp\">/</span><span class=\"n\">homotopy.lean</span>                                         <span class=\"bp\">|</span>  <span class=\"mi\">2</span> <span class=\"bp\">+-</span>\n <span class=\"mi\">41</span> <span class=\"n\">files</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"mi\">277</span> <span class=\"n\">insertions</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span> <span class=\"mi\">237</span> <span class=\"n\">deletions</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279863792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650653000
    },
    {
        "content": "<p>But it solved a very annoying <code>sorry</code>.</p>",
        "id": 279863816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650653016
    },
    {
        "content": "<p>At the same time <code>for_mathlib/derived/derived_cat.lean</code> is timing out like crazy. So I've had to introduce a few <code>sorry</code>s there.</p>",
        "id": 279863906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650653048
    },
    {
        "content": "<p>On my hardware at home, there is no way I can fix that file.</p>",
        "id": 279863924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650653062
    },
    {
        "content": "<p>If and when the time comes that we'll all be asked to write computer-checked proofs, will access to insane computer clusters become critical to pure math research? (With the bonus question: Is the required electricity/energy worth it in times of climate change?)</p>",
        "id": 279866334,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1650654452
    },
    {
        "content": "<p>It's a question that we can still ignore for a little time, but not for too long, I guess. It's not clear to me what the cause of these speed issues is. At least they don't seem to be exponential, otherwise we would have been forced to a grinding halt quite a while ago.<br>\nOnce LTE is over, I think there's some interesting CS / engineering questions to be answered about the repo.</p>",
        "id": 279867212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650654995
    },
    {
        "content": "<p>I was messing around with this and got rid of the first 4 sorries, but this managed to make <code>shift_functor_localization_functor</code> time out. How could this even be? The first four sorries are not data...</p>",
        "id": 279871738,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650657606
    },
    {
        "content": "<p>or does LTE use a bigger timeout value than mathlib?</p>",
        "id": 279871844,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650657640
    },
    {
        "content": "<p>I'm going to attempt to look at <code>derived_cat.lean</code> on my dinky laptop. Wish me luck!</p>",
        "id": 279897255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650676833
    },
    {
        "content": "<p>Okay, I finished off all the remaining sorries in <code>derived_cat.lean</code>.</p>",
        "id": 279898901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650679058
    },
    {
        "content": "<p>Wow, I'm impressed! How did you avoid all the timeouts? I really couldn't work with the file.</p>",
        "id": 279909923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650694782
    },
    {
        "content": "<p>I didn't really have any issues... I just got the necessary oleans from the imports using <code>lean --make foobar.lean</code>, which did take a little while, but once that was done I didn't hit any timeouts.<br>\nMy vscode settings are </p>\n<ul>\n<li>Memory: 16000</li>\n<li>Time limit: 200000</li>\n</ul>\n<p>Are these unusually high?</p>",
        "id": 279920563,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650711441
    },
    {
        "content": "<p>Ahh, I had 100000 time limit, I think that's why. It's higher than the mathlib one, not that high, though. I similarly found editing the file to be okay!</p>",
        "id": 279921408,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650712565
    },
    {
        "content": "<p>I also had 100000, just increased it to 200000. And I had 12GB memory, which I've increased to 16GB.</p>",
        "id": 279921764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650713073
    },
    {
        "content": "<p>I would like <code>for_mathlib/abelian_sheaves/functor_category.lean</code> over in mathlib (setting up representation theory). I think this is yours, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>. I haven't looked at it beyond checking it has the results I need, but I can have a go at getting it PR ready.</p>",
        "id": 280061638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650889965
    },
    {
        "content": "<p>I guess it mostly looks good, just a matter of finding homes for everything. The proof of <code>nat_trans.coimage_image_comparison_app</code> has suspiciously many <code>dsimp</code>s, so perhaps some lemmas are still missing.</p>",
        "id": 280062113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650890219
    },
    {
        "content": "<p>On the other hand, maybe I'll just do it from scratch. I think there's no point doing these special constructions with kernels and cokernels in the functor category. At the end of the day we're assuming D is abelian, so the functor category already has all finite limits and colimits by existing abstract nonsense, which you can compute pointwise.</p>",
        "id": 280062907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650890596
    },
    {
        "content": "<p>Sounds good to me <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> !</p>",
        "id": 280068040,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650892948
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13686\">#13686</a></p>",
        "id": 280076448,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650896633
    },
    {
        "content": "<p>Seems to work as hoped.</p>",
        "id": 280076503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650896648
    },
    {
        "content": "<p>FYI: I'm doing a mathlib bump now. Shouldn't be hard this time. After your PR is merged we can do another bump.</p>",
        "id": 280086390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650900951
    },
    {
        "content": "<p>My b0xen completed the bump while I had dinner.</p>",
        "id": 280094723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650904398
    },
    {
        "content": "<p>I just bumped mathlib again. We now have limits in <code>Ab</code> for arbitrary small universes. Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 282092217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652355276
    },
    {
        "content": "<p>I didn't generalize limits all over the place, so I've just added <code>.{u u}</code> in many places.</p>",
        "id": 282092261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652355302
    }
]