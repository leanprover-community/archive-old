[
    {
        "content": "<p>What percentage of mathlib ends up imported in a proof of the main theorem of LTE? Is there an easy way to answer this? One measure of \"how big is LTE\" is \"about 90K lines of code\" and another measure is \"about 90K lines of code and a one million line maths library on top\". Knowing how much mathlib is imported will give a third answer which in some sense is more representative.</p>",
        "id": 298067002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662765258
    },
    {
        "content": "<p>That's a good question. I think with the Radon stuff in the examples file we end up importing a big chunk of mathlib's functional analysis,, although it doesn't get imported for the actual challenge</p>",
        "id": 298073214,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662770478
    },
    {
        "content": "<p>My guess would be 75% of mathlib</p>",
        "id": 298073332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1662770635
    },
    {
        "content": "<p>I don't know in terms of lines, but using leancrawler we can count the number of theorems/definitions in mathlib</p>",
        "id": 298145714,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662821252
    },
    {
        "content": "<p>I assume we could proxy the number of lines by the number of files</p>",
        "id": 298148674,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662822679
    },
    {
        "content": "<p>I don't have time during the weekend, but I can easily enough provide a list of things used in the LTE</p>",
        "id": 298151989,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662824742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> If you want to create some precise stats, that would be nice.</p>",
        "id": 298343221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662974716
    },
    {
        "content": "<p>I am running leancrawler, then gephi can probably produce all the stats we want</p>",
        "id": 298362836,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662982437
    },
    {
        "content": "<p>The full graph leading to <code>liquid_tensor_experiment</code> has 20172 nodes and 466568 edges. There are 15201 declarations from mathlib and 1010 from core, giving a total of 16211 declarations already in Lean, so 3961 are only in LTE. <a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/LTE.csv\">Here</a> is a csv file with the full list, including other data.</p>",
        "id": 298381313,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662989324
    },
    {
        "content": "<p>Unsurprisingly, the most important node is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq\">docs#eq</a></p>",
        "id": 298381896,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662989527
    },
    {
        "content": "<p>Here is something that really surprises me, and it makes me thinking I've done something wrong. </p>\n<p>Doing the same as above without selecting only the connected component of <code>liquid_tensor_experiment</code> gives 99729 nodes and 23991227 edges. 4366 are from core and 86996 are from mathlib, so 8367 are only in the LTE (note that I did <code>leancrawler challenge</code>, so files that are completely useless to that should be ignored). This means that we wrote 4406 declarations that are never used to prove <code>liquid_tensor_experiment</code>?! <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 298404628,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662996570
    },
    {
        "content": "<p>If you counted autogenerated declarations, that wouldn't surprise me. Many of them are never used, LTE or not.</p>",
        "id": 298405251,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662996737
    },
    {
        "content": "<p><a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/data.yaml\">data.yaml</a> and <a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/LTE_data\">LTE_data</a> if someone wants to play with them (the first one is the output of <code>lean --run crawl.lean</code> after <code>leancrawler challenge</code> the second one is by <code>lib.dump</code>).</p>",
        "id": 298405403,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662996779
    },
    {
        "content": "<p>Ah, autogenerated declarations, of course, this makes sense.</p>",
        "id": 298405677,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662996851
    },
    {
        "content": "<p>I don't see any way of filtering out these declarations unfortunately :(</p>",
        "id": 298406989,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662997154
    },
    {
        "content": "<p>Right, I guess <code>@[simps]</code> might generate for example 4 lemmas of which only 2 are used.</p>",
        "id": 298407376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662997246
    },
    {
        "content": "<p>I can produce the list of the useless declarations. Then a stupid workaround to find those we really wrote would be to grep the names in the LTE folder. Do you think it is an interesting information to have?</p>",
        "id": 298408723,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662997604
    },
    {
        "content": "<p>Personally I would be interested to know if there is a huge bug in <code>leancrawler</code> that explains those numbers.</p>",
        "id": 298410220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662998044
    },
    {
        "content": "<p>It's very possible I did something wrong, this is why I posted the data. In any case I am trying to find an unused lemma and check if I can really remove it.</p>",
        "id": 298410563,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662998152
    },
    {
        "content": "<p>I'm quite certain you can find ~ 30 lemmas with a <code>-- move me</code> comment that haven't been used.</p>",
        "id": 298419686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663000992
    },
    {
        "content": "<p>I kept those, because they are generally good mathlib lemmas. Even if they weren't used in LTE after a refactor.</p>",
        "id": 298419762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663001015
    },
    {
        "content": "<p>Here is a sample of apparently useless declarations</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Ab.is_limit_ext</span>\n<span class=\"n\">Ab.limit_cone'_cone</span>\n<span class=\"n\">Ab.limit_cone'_is_limit</span>\n<span class=\"n\">Ab.ulift_map_apply</span>\n<span class=\"n\">Ab.ulift_obj</span>\n<span class=\"n\">AddCommGroup.AB5</span>\n<span class=\"n\">AddCommGroup.Ab.category_theory.limits.has_colimits_of_size</span>\n<span class=\"n\">AddCommGroup.Ab.category_theory.limits.has_limits_of_size</span>\n<span class=\"n\">AddCommGroup.add_equiv_of_iso</span>\n<span class=\"n\">AddCommGroup.add_subgroup.equiv_top</span>\n<span class=\"n\">AddCommGroup.add_subgroup.equiv_top_apply_coe</span>\n<span class=\"n\">AddCommGroup.add_subgroup.equiv_top_symm_apply</span>\n<span class=\"n\">AddCommGroup.cocone</span>\n<span class=\"n\">AddCommGroup.coe_of'</span>\n<span class=\"n\">AddCommGroup.colimit_comparison</span>\n<span class=\"n\">AddCommGroup.comp_helper</span>\n<span class=\"n\">AddCommGroup.coproduct_cocone_of_basis</span>\n<span class=\"n\">AddCommGroup.coproduct_cocone_of_basis_is_colimit</span>\n<span class=\"n\">AddCommGroup.diagram</span>\n</code></pre></div>\n<p><a href=\"https://gist.github.com/riccardobrasca/df3a90f2326b2020633ad0fd6c1c7ae8\">Here</a> the full list.</p>",
        "id": 298421128,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663001412
    },
    {
        "content": "<p>Oh, some of those were things that made it to mathlib but never deleted from LTE.</p>",
        "id": 298421582,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663001534
    },
    {
        "content": "<p>E.g. <code>Ab.is_limit_ext</code> is a special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.concrete.is_limit_ext\">docs#category_theory.limits.concrete.is_limit_ext</a></p>",
        "id": 298421663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663001563
    },
    {
        "content": "<p>It's not quite correct to say that <code>AddCommGroup.diagram</code> isn't used, because I'm quite sure <code>AddCommGorup.is_colimit_cocone</code> is used, and this is a statement about a cocone over <code>AddcommGroup.diagram</code>,.</p>",
        "id": 298422357,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663001782
    },
    {
        "content": "<p>let me see if it is possible to compile the project without <code>AddCommGroup.diagram</code></p>",
        "id": 298422983,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663001969
    },
    {
        "content": "<p>But it claims that <code>AddCommGroup.is_colimit_cocone</code> is also not used.</p>",
        "id": 298423041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663001994
    },
    {
        "content": "<p>I think they're used in one of the proofs in the same file</p>",
        "id": 298423184,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663002032
    },
    {
        "content": "<p>It is only used in <code>AddCommGroup.tensor_obj_map_preserves_mono</code>, which is also in the \"unused\" list.</p>",
        "id": 298423285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663002069
    },
    {
        "content": "<p>I am not claiming these are <em>never</em> used.</p>",
        "id": 298423299,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663002075
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/17f13b74d4bc045e82465f86f5705a3f6e1994e3/src/for_mathlib/AddCommGroup.lean#L329\">https://github.com/leanprover-community/lean-liquid/blob/17f13b74d4bc045e82465f86f5705a3f6e1994e3/src/for_mathlib/AddCommGroup.lean#L329</a></p>",
        "id": 298423364,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663002096
    },
    {
        "content": "<p>Exactly, I am saying these are not in the connected component of <code>liquid_tensor_experiment</code></p>",
        "id": 298423366,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663002097
    },
    {
        "content": "<p>But that lemma is definitely used in the proof of the challenge</p>",
        "id": 298423504,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663002134
    },
    {
        "content": "<p>I'm confused.</p>",
        "id": 298423515,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663002137
    },
    {
        "content": "<p>It's maybe my fault, so you claim that <code>tensor_obj_map_preserves_mono</code> is used to prove <code>liquid_tensor_experiment</code>?</p>",
        "id": 298423641,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663002183
    },
    {
        "content": "<p>Yes. At least the math version of that statement.</p>",
        "id": 298423682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663002198
    },
    {
        "content": "<p>And I don't know of other lean-similar statements that might have been used instead.</p>",
        "id": 298423736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663002215
    },
    {
        "content": "<p>OK, let's see.</p>",
        "id": 298423773,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663002225
    },
    {
        "content": "<p>I'm claiming that <code>is_iso_of_preserves_of_is_tensor_unit</code> is used in <code>liquid_tensor_experiment</code>, which uses <code>is_iso_of_preserves</code> which uses <code>AddCommGroup.is_colimit_cocone</code> which needs <code>AddCommGroup.diagram</code>, etc.</p>",
        "id": 298423976,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663002275
    },
    {
        "content": "<p>Something is off. There are a lot of names on the list that I'm pretty sure are used.</p>",
        "id": 298425095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663002656
    },
    {
        "content": "<p>A whole bunch of <code>thm95</code> stuff, starting at: <a href=\"https://gist.github.com/riccardobrasca/df3a90f2326b2020633ad0fd6c1c7ae8#file-useless-txt-L4165\">https://gist.github.com/riccardobrasca/df3a90f2326b2020633ad0fd6c1c7ae8#file-useless-txt-L4165</a></p>",
        "id": 298425180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663002687
    },
    {
        "content": "<p>Certainly <code>thm95.col_exact</code> is used.</p>",
        "id": 298425225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663002706
    },
    {
        "content": "<p>Does this count check whether a declaration is used in the proof of a prop?</p>",
        "id": 298425773,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663002889
    },
    {
        "content": "<p>I guess this is the whole point of leancrawler</p>",
        "id": 298425860,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663002926
    },
    {
        "content": "<p>But <code>thm95.col_exact</code> is very close to the end, let me experiment with that</p>",
        "id": 298425882,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663002939
    },
    {
        "content": "<p>Can it see instance arguments?</p>",
        "id": 298425919,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1663002956
    },
    {
        "content": "<p>Very close to the end of the proof of <code>thm95</code>. But the whole 2nd part of the project is still built on top of that.</p>",
        "id": 298426010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663002977
    },
    {
        "content": "<p>I guess it is still \"relatively\" close to the end though.</p>",
        "id": 298426060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663002995
    },
    {
        "content": "<p>But I would expect that you still need to recompile 10 files or so.</p>",
        "id": 298426094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663003008
    },
    {
        "content": "<p>Note that <code>homology_bd_eval</code> is definitely used, and not on the list, but its construction is <code>(as_iso (tensor_to_homology BD M i)).symm</code>, and the instance <code>is_iso (tensor_to_homology BD M i)</code> is on the list.</p>",
        "id": 298426584,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1663003176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> is it possible that leancrawler makes a mistake if a lemma is used in a definition? In particular, I see that <a href=\"https://github.com/leanprover-community/lean-liquid/blob/a1f009de0f88731492e998e4fd8f27de3f6952af/src/thm95/default.lean#L76\">NSC</a> appears in the connected component leading to <code>liquid_tensor_experiment</code>, but <code>thm95.col_exact</code>, that it is used to give the definition, does not.</p>",
        "id": 298433007,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663005343
    },
    {
        "content": "<p>Indeed, if I do <code>lib['NSC']</code>, I see <code>col_exact := _</code>, instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">col_exact</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n <span class=\"bp\">...</span>\n    <span class=\"n\">refine</span> <span class=\"n\">thm95.col_exact</span> <span class=\"n\">BD.data</span> <span class=\"n\">κ</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">V</span> <span class=\"bp\">Λ</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">lem98.d</span> <span class=\"bp\">Λ</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k₁_sqrt</span> <span class=\"n\">κ'</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">k₁</span> <span class=\"n\">κ'</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K₁</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">BD</span> <span class=\"n\">κ'</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">c₀</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">BD</span> <span class=\"n\">κ</span> <span class=\"n\">κ'</span> <span class=\"n\">m</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">le_rfl</span><span class=\"o\">⟩</span> <span class=\"n\">infer_instance</span> <span class=\"o\">⟨</span><span class=\"n\">le_rfl</span><span class=\"o\">⟩,</span>\n<span class=\"bp\">...</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>so the need for <code>thm95.col_exact</code> seems to be forgotten.</p>",
        "id": 298443646,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663008663
    },
    {
        "content": "<p>Could it have to do something with this flag: <a href=\"https://github.com/leanprover-community/leancrawler/blob/master/leancrawler/crawler.py#L275\">https://github.com/leanprover-community/leancrawler/blob/master/leancrawler/crawler.py#L275</a> ?</p>",
        "id": 298549002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663063069
    },
    {
        "content": "<p>I am having lunch, then I will try to produce a MWE</p>",
        "id": 298549925,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663063457
    },
    {
        "content": "<p>I've tried with something as simple as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.nat.lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">crawler</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">crawler.add</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">crawler</span>\n</code></pre></div>\n<p>but then <code>lib['crawler.test']</code> shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LeanDecl</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">='</span><span class=\"n\">crawler.test'</span><span class=\"o\">,</span> <span class=\"n\">filename</span><span class=\"bp\">='/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">brasca</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">test_crawl</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test_crawl.lean'</span><span class=\"o\">,</span>\n<span class=\"n\">line_nb</span><span class=\"bp\">=</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">kind</span><span class=\"bp\">='</span><span class=\"kd\">definition</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">is_inductive</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure_field</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span>\n<span class=\"n\">is_class</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_instance</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_recursor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_constructor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"bp\">='Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n<span class=\"n\">crawler.add</span> <span class=\"n\">n</span> <span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"n\">type_uses_proofs</span><span class=\"bp\">=</span><span class=\"n\">set</span><span class=\"o\">(),</span> <span class=\"n\">type_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">},</span> <span class=\"n\">type_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">type_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">type_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Value</span><span class=\"bp\">='λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">value_uses_proofs</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">nat.add_comm'</span><span class=\"o\">},</span>\n<span class=\"n\">value_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.add.mk'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">},</span> <span class=\"n\">value_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">target_class</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">fields</span><span class=\"bp\">=</span><span class=\"o\">[])</span>\n</code></pre></div>\n<p>and <code>nat.add</code> appears as expected in the field <code> value_uses_proofs</code>. On the other way, the full output of <code>lib['NSC']</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">value_uses_proofs</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">NSC._proof_15'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_18'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_10'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_16'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_12'</span><span class=\"o\">,</span>\n<span class=\"bp\">'</span><span class=\"n\">NSC._proof_11'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_13'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_14'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_19'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_20'</span><span class=\"o\">,</span>\n<span class=\"s2\">\"thm95.universal_constants.one_le_k'\"</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC_row_exact'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">NSC._proof_17'</span><span class=\"o\">}</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 298556355,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663065974
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 298556491,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663066011
    },
    {
        "content": "<p>I think <code>col_exact</code> is hidden in one of these <code>NSC._proof_</code></p>",
        "id": 298558221,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663066609
    },
    {
        "content": "<p>OK, I've a simple example. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.nat.lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">crawler</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">comm</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">crawler.comm</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stupid</span> <span class=\"o\">:</span> <span class=\"n\">test.1</span> <span class=\"bp\">+</span> <span class=\"n\">test.2</span> <span class=\"bp\">=</span> <span class=\"n\">test.2</span> <span class=\"bp\">+</span> <span class=\"n\">test.1</span> <span class=\"o\">:=</span> <span class=\"n\">test.comm</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">crawler</span>\n</code></pre></div>",
        "id": 298560477,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663067467
    },
    {
        "content": "<p><code>lib['crawler.stupid']</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LeanDecl</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">='</span><span class=\"n\">crawler.stupid'</span><span class=\"o\">,</span> <span class=\"n\">filename</span><span class=\"bp\">='/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">brasca</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">test_crawl</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">test_crawl.lean'</span><span class=\"o\">,</span> <span class=\"n\">line_nb</span><span class=\"bp\">=</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"n\">kind</span><span class=\"bp\">='</span><span class=\"kd\">lemma</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">is_inductive</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span>\n<span class=\"n\">is_structure</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_structure_field</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_class</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_instance</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_recursor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span> <span class=\"n\">is_constructor</span><span class=\"bp\">=</span><span class=\"n\">False</span><span class=\"o\">,</span>\n<span class=\"kt\">Type</span><span class=\"bp\">='</span><span class=\"n\">crawler.test.x</span> <span class=\"bp\">+</span> <span class=\"n\">crawler.test.y</span> <span class=\"bp\">=</span> <span class=\"n\">crawler.test.y</span> <span class=\"bp\">+</span> <span class=\"n\">crawler.test.x'</span><span class=\"o\">,</span> <span class=\"n\">type_uses_proofs</span><span class=\"bp\">=</span><span class=\"n\">set</span><span class=\"o\">(),</span>\n<span class=\"n\">type_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.comm.x'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">eq'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">crawler.comm.y'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">has_add.add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">crawler.test'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat.has_add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">nat'</span><span class=\"o\">},</span> <span class=\"n\">type_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">type_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">type_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Value</span><span class=\"bp\">='</span><span class=\"n\">crawler.test.comm'</span><span class=\"o\">,</span> <span class=\"n\">value_uses_proofs</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.comm.comm'</span><span class=\"o\">},</span>\n<span class=\"n\">value_uses_others</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"bp\">'</span><span class=\"n\">crawler.test'</span><span class=\"o\">},</span> <span class=\"n\">value_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_dedup_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">value_pp_size</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">target_class</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">parent</span><span class=\"bp\">=</span><span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">fields</span><span class=\"bp\">=</span><span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 298560644,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663067527
    },
    {
        "content": "<p><code>nat.add_comm</code> is never mentioned.</p>",
        "id": 298560668,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663067539
    },
    {
        "content": "<p>I've the result from the new version of leancrawler. As expected, the full graph has the same number of nodes (well, four more, but I added the statement of the challenge, so maybe it is because of this), 99733.</p>\n<p>On the other hand, the connected component of <code>liquid_tensor_experiment</code> has now 24780 nodes instead of 20172.</p>",
        "id": 298733960,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663148165
    },
    {
        "content": "<p>The statement has 13873 nodes.</p>",
        "id": 298734363,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663148322
    },
    {
        "content": "<p>Wow, that's still a lot!</p>",
        "id": 298734556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663148400
    },
    {
        "content": "<p>Can you split that into defs vs lemmas</p>",
        "id": 298734625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663148409
    },
    {
        "content": "<p>Yes, I have all of that. Give me a moment to list all the stats I have.</p>",
        "id": 298734742,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663148451
    },
    {
        "content": "<p>Here they are:</p>\n<ul>\n<li>full graph (everything imported by <code>challenge.lean</code>): 99733 nodes. 16010 definitions, 71286 lemmas and 10454 instances. 86996 in mathlib and 4366 in core.</li>\n<li>challenge: 24780 nodes. 5012 definitions, 15390 lemmas and 3571 instances. 18173 in mathlib and 1082 in core.</li>\n<li>statement:  13873 nodes. 2512 definitions, 8502 lemmas and 2180 instances. 11765 in mathlib and 988 in core.</li>\n</ul>",
        "id": 298736351,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663149080
    },
    {
        "content": "<ul>\n<li>first_target : 15223 nodes. 2274 definitions, 10125 lemmas and 2217 instances. 12693 in mathlib and 10128 in core.</li>\n</ul>",
        "id": 298738720,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663149983
    },
    {
        "content": "<p>Thanks! 2512 definitions going into the statement!! That's a lot.</p>\n<p>I'm still confused about the 99733 vs 24780. That delta seems very large to me.</p>",
        "id": 298742352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663151429
    },
    {
        "content": "<p>I am going to post the list of unused stuff</p>",
        "id": 298744059,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663152114
    },
    {
        "content": "<p>There are 2846 declarations in the full graph that are not in mathlib or core, and are not used in the challenge graph (before we had more than 4000 of them). <a href=\"https://gist.github.com/riccardobrasca/fed271dd71cbf9bd2f15052f5cecb44e\">Here</a> is the list.</p>",
        "id": 298746350,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663153079
    },
    {
        "content": "<p>All the examples above are now used, as expected. Note that <code>first_target</code> is in the useless list, but if we want to also have this literal statement it is enough to include</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">first_target</span>\n<span class=\"n\">thm95'</span>\n<span class=\"n\">thm95''</span>\n</code></pre></div>\n<p>so the difference is negligible.</p>",
        "id": 298747067,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663153353
    },
    {
        "content": "<p>Right, it's actually expected that <code>first_target</code> is not a dependency of <code>liquid_tensor_experiment</code>. I ended up using a \"homotopic\" variant called <code>thm94_explicit</code> or something like that.</p>",
        "id": 298747276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663153432
    },
    {
        "content": "<p>Ok, I see a lot of <code>bounded_derived_category</code> on that list. Makes sense, because we ended up only working with the homotopy category.</p>",
        "id": 298747592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663153537
    },
    {
        "content": "<p>I've removed <a href=\"https://gist.github.com/riccardobrasca/9e56afb9c20f44012263cc3d57fafd5b\">here</a> all the namespaces. It would be nice to remove the lines that <em>never</em> appear in <code>src/</code>, because these declarations are autogenerated.  I am quite bad in writing scripts, does someone want to do it?</p>",
        "id": 298750270,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663154621
    },
    {
        "content": "<p>I've done it. The list is now down to 1722. Of those 490 appear exactly once. Unless these are instances, I think it can be removed and the project should compile without problems.</p>",
        "id": 298753531,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663155859
    },
    {
        "content": "<p>Ok, 1722 sounds like a more reasonable number to me.</p>",
        "id": 298756534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663156726
    },
    {
        "content": "<p>Grepping the whole word it's down to 1666</p>",
        "id": 298757300,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663156988
    },
    {
        "content": "<p><a href=\"https://gist.github.com/riccardobrasca/9c421bbd9292cd82eb854abc3035f6e3\">Here</a> is the list. It is the list of declarations that appear in the LTE but are not needed to get to <code>liquid_tensor_experiment</code>, with the number of times the name appears in <code>src/*</code>. Note that I searched for the name, so for example <code>cochain_complex.hom.cons.f</code> appears more than 10000 times because <code>f</code> does so, in particular it is possible that some of these declarations are still autogenerated. Also it's possible that some useless instance can be missing, since the autogenerated name never appears, not even once.</p>",
        "id": 298758209,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663157300
    },
    {
        "content": "<p>If I am not wrong all <a href=\"https://gist.github.com/riccardobrasca/bf4c312e67c0ec07753da31138c75982\">these</a> can be removed safely, meaning that the project should compile, without requiring any further modification.</p>",
        "id": 298758645,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663157476
    },
    {
        "content": "<p>We could try it out on a branch.</p>",
        "id": 298759974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663158004
    },
    {
        "content": "<p>A cheaper optimization is checking which files are not in the import graph closure of <code>challenge.lean</code> and <code>examples/*.lean</code>.</p>",
        "id": 298760050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663158030
    },
    {
        "content": "<p>There might be several files that can be removed entirely.</p>",
        "id": 298760077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663158044
    },
    {
        "content": "<p>Let me try removing some of these declarations.</p>",
        "id": 298760729,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663158284
    },
    {
        "content": "<p>ouf, it considered <code>(add_subgroup.equiv_top _)</code> not the same as <code>add_subgroup.equiv_top</code> because of the <code>(</code>, so it is already wrong.</p>",
        "id": 298761016,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663158415
    },
    {
        "content": "<p>Let's ignore the whole word, there will be just a bunch of false positive.</p>",
        "id": 298761075,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663158440
    },
    {
        "content": "<p>In any case I am considering all the examples useless :(</p>",
        "id": 298761931,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663158790
    },
    {
        "content": "<p>I just realized that what I am doing is stupid, all the information we want are in the graph, it doesn't make sense to use <code>grep</code> or whatever. A never used lemma is just a node with out-degree (maybe in-degree) equal to <code>0</code>.</p>",
        "id": 298764035,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663159640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/how.20much.20mathlib.20in.20LTE.3F/near/298742352\">said</a>:</p>\n<blockquote>\n<p>I'm still confused about the 99733 vs 24780. That delta seems very large to me.</p>\n</blockquote>\n<p>This is something I don't understand. The number of useless declaration in the project seems reasonable, but I doubt very much they need more than 70000 mathlib declarations. <a href=\"https://gist.github.com/riccardobrasca/5e6c5229639d4437a2cc95c561d9f0c2\">Here</a> is the list.</p>",
        "id": 299186750,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663342624
    },
    {
        "content": "<p>Does the 99733 count the definitions declared in some file included by <code>challenge.lean</code> but never used in any (unused or not) definition in LTE?</p>",
        "id": 299187324,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1663342796
    },
    {
        "content": "<p>Ah this can be the explanation! I think <code>leancrawler</code> list all declarations in all files (recursively) imported. So if we only use one declaration from a large file we  get all of them.</p>",
        "id": 299187778,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663342911
    },
    {
        "content": "<p>So 99733 is a totally meaningless number, it depends on the files structure of mathlib.</p>",
        "id": 299188160,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663343019
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/im-1OPpRQWDor351klyXtDd-/final.png\">final.png</a> I've redone the graph using the fixed leancrawler. It's more dense, and <code>liquid_tensor_experiment</code> is now a theorem in analysis, even if it's more in the pseudonormed group region.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/im-1OPpRQWDor351klyXtDd-/final.png\" title=\"final.png\"><img src=\"/user_uploads/3121/im-1OPpRQWDor351klyXtDd-/final.png\"></a></div>",
        "id": 299560924,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663592728
    },
    {
        "content": "<p>The discrete stuff makes this look like a <span aria-label=\"unicorn\" class=\"emoji emoji-1f984\" role=\"img\" title=\"unicorn\">:unicorn:</span></p>",
        "id": 299605226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663606482
    },
    {
        "content": "<p>Sounds about right!</p>",
        "id": 299605244,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663606488
    },
    {
        "content": "<p>Especially since category theory and homological algebra is the mouth which will eat all of mathematics</p>",
        "id": 299605383,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663606531
    },
    {
        "content": "<p>One thing which really excited me about this graph is that it is finally something we can show <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and say \"there, it's taken years but you can finally see category theory interacting with other mathematics\". For many years category theory was essentially completely isolated from the rest of mathlib, and Mario raised the issue about whether it was actually ever useful; I assured him that it was just a matter of time. I don't think there was any category theory at all in the perfectoid project and I strongly doubt it's used in sphere eversion either, but sometimes it plays a crucial role.</p>",
        "id": 299606454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663606855
    },
    {
        "content": "<p>If you squint, it looks a bit like <a href=\"https://en.wikipedia.org/wiki/Antarctica#/media/File:Antarctica_6400px_from_Blue_Marble.jpg\">https://en.wikipedia.org/wiki/Antarctica#/media/File:Antarctica_6400px_from_Blue_Marble.jpg</a></p>",
        "id": 299606802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663606953
    },
    {
        "content": "<p>Should we make a page similar to <a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\">https://leanprover-community.github.io/lean-perfectoid-spaces/</a> and include this graph?</p>",
        "id": 299608201,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663607421
    },
    {
        "content": "<p>We could of course add it to <code>README.md</code> as well</p>",
        "id": 299608350,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663607484
    },
    {
        "content": "<p>Let me post a version with the y of category theory in the image. I am with the phone, I will do it later</p>",
        "id": 299609370,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663607864
    },
    {
        "content": "<p>Maybe I should mention that the perfectoid page linked above was one of the first things that got me personally interested in lean. It's a bit friendlier than a github readme to an outsider.</p>",
        "id": 299609696,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663607993
    },
    {
        "content": "<p>I'm completely fine with having a dedicated landing page that links to blueprint/github/press (and papers, once we have those). Sounds like a good idea to me.</p>",
        "id": 299610624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663608287
    },
    {
        "content": "<p>It says something about a person if a picture of a graph with tens of thousands of nodes/edges is \"a bit friendler\" than a text file ;-)</p>",
        "id": 299610722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663608319
    },
    {
        "content": "<p>Oh sorry I misunderstood! You mean the page in general -- yes I agree!</p>",
        "id": 299610756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663608341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> if you want to tweet the image (once you're happy with it) I'll retweet.</p>",
        "id": 299611079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663608451
    },
    {
        "content": "<p>Yeah I was talking about the webpage vs. the readme file</p>",
        "id": 299617730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1663610648
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/60R7y-f2JZHw7W37pXcNDtRp/final.png\">final.png</a>  Here is the fixed image. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> feel free to tweet it!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/60R7y-f2JZHw7W37pXcNDtRp/final.png\" title=\"final.png\"><img src=\"/user_uploads/3121/60R7y-f2JZHw7W37pXcNDtRp/final.png\"></a></div>",
        "id": 299697975,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663659454
    },
    {
        "content": "<p>Can you make a bigger version?</p>",
        "id": 299698554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663659726
    },
    {
        "content": "<p>I am not sure how to do it, but if someone knows how to tell gephi to produce an higher quality image <a href=\"https://webusers.imj-prg.fr/~riccardo.brasca/files/final.gephi\">here</a> is the file</p>",
        "id": 299699743,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663660303
    }
]