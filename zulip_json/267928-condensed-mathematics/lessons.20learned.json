[
    {
        "content": "<p>Before we start moving towards the 2nd target in this project, I would like to invite everyone involved in the first part to write down observations / lessons learned. This can range from mathematical observations, specific stuff about Lean 3, community patterns, how to run a formalization project, ideas for better automation (please try to be somewhat specific, instead of wishing for Mjolnir).<br>\nI think it's good to record this, before we forget the details.</p>",
        "id": 245051006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625583622
    },
    {
        "content": "<p>This is not really on topic for this thread, but it's also \"lessons learned\". So far, I've had trouble giving a punchline about why condensed sets are better than topological spaces. I think here's one: Topological spaces are meant to capture the idea of spaces with a notion of \"nearness\" of points. However, they can't handle the idea that \"two points are infinitely near, but distinct\". But condensed sets can!</p>",
        "id": 245092279,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625602116
    },
    {
        "content": "<p>Do you mean that there are separated spaces with such points?</p>",
        "id": 245093301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625602714
    },
    {
        "content": "<p>In my mind, the two points of the \"line with the double origin\" are infinitely near but distinct. But that's a pathological example.</p>",
        "id": 245093357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625602756
    },
    {
        "content": "<p>Hmm, infinitely near in the sense of \"each neighborhood of one contains the other\"</p>",
        "id": 245094515,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625603409
    },
    {
        "content": "<p>The upshot being that \"neighborhoods\" weren't the right thing to consider in the first place</p>",
        "id": 245094568,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625603437
    },
    {
        "content": "<p>And no, if you add \"separated\" as an assumption, then this is also ruled out in condensed sets. But the key to all the good algebraic properties is that non-separated quotients like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb R/\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">ℓ</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><msup><mi mathvariant=\"normal\">ℓ</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\ell^2(\\mathbb N)/\\ell^1(\\mathbb N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span></span></span></span> can play along</p>",
        "id": 245094743,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625603527
    },
    {
        "content": "<p>Aah, I see. So the two origins are actually quite far apart, in some sense.</p>",
        "id": 245095864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625604104
    },
    {
        "content": "<p>One thing that this first part of LTE made very clear to me, is that we are in dire need of automation that can be handed two objects and the task to build a \"canonical\" isomorphism between them. (Maybe even of the maps can be given to the tactic.)<br>\nI don't have a concrete plan on how to attack this problem. But it is something that deserves attention, and I would want to spend some time thinking about it.</p>",
        "id": 245096682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625604502
    },
    {
        "content": "<p>I remember Scott mentioning a <code>follow your nose</code> tactic that could fill in things like <code>\\lambda X, X</code> as data.</p>",
        "id": 245096848,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625604591
    },
    {
        "content": "<p>Yes, there is a tactic that allows you to define the Yoneda embedding as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mspace width=\"-0.431em\"/><mi mathvariant=\"normal\">/</mi><mi>Y</mi><mo separator=\"true\">,</mo><mi>λ</mi><mspace width=\"-0.431em\"/><mi mathvariant=\"normal\">/</mi><mi>X</mi><mo separator=\"true\">,</mo><mi>X</mi><mo>⟶</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda\\hskip-1ex/ Y, \\lambda\\hskip-1ex/ X, X \\longrightarrow Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:-0.431em;\"></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:-0.431em;\"></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>. (Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mspace width=\"-0.431em\"/><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda\\hskip-1ex/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:-0.431em;\"></span><span class=\"mord\">/</span></span></span></span> was a special kind of lambda, for constructing functors, invoking tactics to fill in all the missing pieces.)</p>",
        "id": 245097382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625604846
    },
    {
        "content": "<p>One categorical level down, is there good automation for showing that two numbers are equal? (The one time I played with Lean in one strange lemma (for about an hour, with Johan's guidance), I was merely trying to explain how to rebracket and exchange the order of summing over some finite sets, or so. The two expressions whose equality (as elements of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb R_{\\geq 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>) was desired seemed indistinguishable to a human reader.)</p>",
        "id": 245099056,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625605697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lessons.20learned/near/245094743\">said</a>:</p>\n<blockquote>\n<p>And no, if you add \"separated\" as an assumption, then this is also ruled out in condensed sets. But the key to all the good algebraic properties is that non-separated quotients like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb R/\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">ℓ</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><msup><mi mathvariant=\"normal\">ℓ</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\ell^2(\\mathbb N)/\\ell^1(\\mathbb N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span></span></span></span> can play along</p>\n</blockquote>\n<p>I didn't get that separation discussion. What does it mean that non-separated quotients can play along?</p>",
        "id": 245101416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625607078
    },
    {
        "content": "<p>They are perfectly well-behaved as condensed sets/abelian groups.</p>",
        "id": 245101652,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625607236
    },
    {
        "content": "<p>So for example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">ℓ</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><msup><mi mathvariant=\"normal\">ℓ</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\ell^2(\\mathbb N)/\\ell^1(\\mathbb N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span></span></span></span> is a liquid vector space. In all liquid vector spaces, it is about as strange as a torsion abelian group in all abelian groups.</p>",
        "id": 245102000,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625607459
    },
    {
        "content": "<p>But as a topological vector space, it's indiscrete and so has no structure at all</p>",
        "id": 245102149,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625607529
    },
    {
        "content": "<p>I guess I would need to understand more in what sense they are \"perfectly well-behaved\", but that's probably a vague question.</p>",
        "id": 245103375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625608298
    },
    {
        "content": "<p>Is it related to your usual example of the missing cokernel (of the identity from discrete reals to reals) or independent?</p>",
        "id": 245103972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625608697
    },
    {
        "content": "<p>I should probably go to bed and think about this tomorrow, but I guess the answer is obvious to you. Say in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}/\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span></span></span></span> case, is it clear what would be a good profinite S such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>C</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(S, \\mathbb{R})/C(S, \\mathbb{Q})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">)</span></span></span></span> is interesting?</p>",
        "id": 245104066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625608783
    },
    {
        "content": "<p>And how does it fix the non-separatedness issue?</p>",
        "id": 245104211,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1625608834
    },
    {
        "content": "<p>Is that Q with the discrete or subspace topology?</p>",
        "id": 245105261,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1625609569
    },
    {
        "content": "<p>discrete topology</p>",
        "id": 245106560,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625610594
    },
    {
        "content": "<p>It's definitely related to the example of the missing cokernel</p>",
        "id": 245106633,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625610630
    },
    {
        "content": "<p>I wouldn't look for any particular <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> where the value is enlightening, but it's nonzero for all of them</p>",
        "id": 245106711,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625610708
    },
    {
        "content": "<p>By the way, here's a fun exercise: Show that the following formula defines a nonzero map of condensed (even liquid) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-vector spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">ℓ</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi mathvariant=\"normal\">ℓ</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><msup><mi mathvariant=\"normal\">ℓ</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\ell^1(\\mathbb N)\\to \\ell^2(\\mathbb N)/\\ell^1(\\mathbb N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span></span></span></span>:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><msub><mo stretchy=\"false\">)</mo><mi>n</mi></msub><mo>↦</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mi>log</mi><mo>⁡</mo><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>n</mi></msub><mi mathvariant=\"normal\">∣</mi><msub><mo stretchy=\"false\">)</mo><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">(x_n)_n\\mapsto (x_n \\log |x_n|)_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mi>x</mi><mi>log</mi><mo>⁡</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">x\\mapsto x \\log|x|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span></span></span></span> pretends to be linear! The main theorem on liquid vector spaces in some sense gives a bound for how strange maps of this kind can be.</p>",
        "id": 245107120,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625610976
    },
    {
        "content": "<p>But Johan should reclaim this thread for its intended discussion! sorry...</p>",
        "id": 245107242,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625611085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369530\">Peter Scholze</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/lessons.20learned/near/245099056\">said</a>:</p>\n<blockquote>\n<p>One categorical level down, is there good automation for showing that two numbers are equal?</p>\n</blockquote>\n<p>It's a good idea to improve this first. There is some automation out there, but it is far from perfect. What we currently have in Lean is <code>ring</code> for elementary expressions in the language of rings. (So it understands <code>*</code> and <code>+</code>, but it doesn't understand <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span>.) And there is <code>linarith</code> for linear inequalities. And then there is <code>norm_cast</code> (and its friends) that will juggle around canonical inclusions between common types, such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, etc...</p>",
        "id": 245148237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625647712
    },
    {
        "content": "<p>A first easy step would be to teach <code>ring</code> about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∏</mo></mrow><annotation encoding=\"application/x-tex\">\\prod</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span></span></span></span>. But I think there is also room for some tactic on top of these, that combines the lower level tactics. Maybe a variant on <code>tidy</code>.</p>",
        "id": 245148346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625647758
    },
    {
        "content": "<p>I wouldn't be surprised if such algorithms for proving numbers equal could then be adapted to produce canonical isomorphisms. Often that's also about juggling sums and products etc.</p>",
        "id": 245148655,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625647892
    },
    {
        "content": "<p>Did you already start a version of the \"algebraic hierarchy\" one categorical level up? <code>has_add</code> meaning that the category admits finite coproducts (or products? maybe one even wants to say they are equal), <code>has_mul</code> meaning has monoidal structure, etc... it will be a little different, as some of these things are now merely conditions (like <code>has_add</code>), while some become extra structure (for example commutativity of multiplication is data, not just a condition)</p>",
        "id": 245149147,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1625648119
    },
    {
        "content": "<p>Yes, there is quite a hierarchy for categories by now. Unfortunately they use the slightly more verbose <code>has_products</code>, <code>has_terminal</code>, <code>has_limits_of_shape J</code>, etc... (these are all Props)</p>",
        "id": 245150160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625648574
    },
    {
        "content": "<p>Monoidal categories take the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊗</span></span></span></span> as extra data of course.</p>",
        "id": 245150203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625648598
    },
    {
        "content": "<p>I really liked Peter's take on this question, about why are condensed sets better than topological spaces.  While I do not have a good answer to this, I would like to contribute some ideas about \"lessons learned -- formalizing some very specific result\".</p>\n<ul>\n<li>Having a list of sorried lemmas was, in my mind, one of the driving forces of this project.  This requires planning and reading statements with the caveat that the final version might be slightly different and some glue will be needed.</li>\n<li>The first pass may benefit from a \"formalize what you can, possibly with unnecessarily strong assumptions\".  Linting and streamlining can be done later and will likely be better.</li>\n<li>Dive in: start proving a sorried lemma and you will learn something!</li>\n</ul>",
        "id": 245211480,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625677343
    }
]