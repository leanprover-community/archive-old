[
    {
        "content": "<p>In case anyone wants to play with the cech nerve, I've pushed a (somewhat preliminary) definition here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/cb3b771d3f4ceb22a0ea0c8b4e3556ad8540f5a8/src/for_mathlib/cech.lean#L60\">https://github.com/leanprover-community/lean-liquid/blob/cb3b771d3f4ceb22a0ea0c8b4e3556ad8540f5a8/src/for_mathlib/cech.lean#L60</a></p>\n<p>(If you check out this branch, make sure to fetch oleans since it uses an updated version of mathlib)</p>",
        "id": 232668485,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617226352
    },
    {
        "content": "<p>Great, thanks for working on this.</p>",
        "id": 232725894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617268351
    },
    {
        "content": "<p>I'll update mathlib on master now. So that it doesn't get too far out of sync.</p>",
        "id": 232725909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617268365
    },
    {
        "content": "<p>bumped mathlib</p>",
        "id": 232733338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617272071
    },
    {
        "content": "<p>I'll be keeping mathlib pretty fresh in this branch, at least for a little while, since I'm doing a lot of stuff with mathlib PRs.</p>",
        "id": 232757675,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617284408
    },
    {
        "content": "<p>Yes, I think it's great that you're PRing things straight to mathlib.</p>",
        "id": 232757740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617284437
    },
    {
        "content": "<p>On the other hand, if you feel like things are more experimental, and they should be stress-tested before going to mathlib, then it might make sense to keep them in LTE for a while</p>",
        "id": 232757806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617284463
    },
    {
        "content": "<p>Profinite sets will soon have limits <a href=\"https://github.com/leanprover-community/mathlib/issues/7070\">#7070</a><br>\nHopefully next week they will also be Pro(finite) sets.</p>",
        "id": 233398900,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617747110
    },
    {
        "content": "<p>That's great!</p>",
        "id": 233429847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617769829
    },
    {
        "content": "<p>Quick update: profinite sets are limits of finite sets:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/be9b2c67610095d1a8d03f07459a2ea93e3fad4c/src/for_mathlib/Profinite_canon_limit.lean#L442\">https://github.com/leanprover-community/lean-liquid/blob/be9b2c67610095d1a8d03f07459a2ea93e3fad4c/src/for_mathlib/Profinite_canon_limit.lean#L442</a></p>\n<p>Proving that this presentation is actually functorial shouldn't be too hard using the lemma <code>map_refined_comm</code> in the same file.</p>",
        "id": 233673435,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617895300
    },
    {
        "content": "<p>And now here's some form of functoriality: <br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/87c511dc50365f51916e1cb441c4cf8a929d4546/src/for_mathlib/Profinite_canon_limit.lean#L467\">https://github.com/leanprover-community/lean-liquid/blob/87c511dc50365f51916e1cb441c4cf8a929d4546/src/for_mathlib/Profinite_canon_limit.lean#L467</a></p>",
        "id": 233699850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617904649
    },
    {
        "content": "<p>Alright, there is now a more-or-less complete API which provides functoriality of these limit presentations of profinite sets.<br>\nSee <code>change_cone_id</code>, <code>change_cone_comp</code>, and <code>change_cone_lift</code> in the file <a href=\"https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/Profinite_canon_limit.lean\">https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/Profinite_canon_limit.lean</a></p>",
        "id": 233744738,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617923576
    },
    {
        "content": "<p>Thanks a lot for doing this!</p>",
        "id": 233769977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617945806
    },
    {
        "content": "<p>What I'd like to do next is write does the fact that any cover of a profinite set by a profinite set can be expressed as a limit of covers of finite sets by finite sets (I'll think about hypercovers later, as needed, although this might suffice if we really only need the cech complex). </p>\n<p>I'm not sure about the best way to proceed. Any ideas?</p>\n<p>My current thought is to use work in <code>arrow Profinite</code> and try to write down some limit cone there. If </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>d</mi><mo>∈</mo><mi>D</mi></mrow></msub><msub><mi>X</mi><mi>d</mi></msub><mo>→</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>e</mi><mo>∈</mo><mi>E</mi></mrow></msub><msub><mi>Y</mi><mi>e</mi></msub></mrow><annotation encoding=\"application/x-tex\">f : \\lim_{d \\in D} X_d \\to \\lim_{e \\in E} Y_e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.87181em;vertical-align:-0.17737em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999985em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.87181em;vertical-align:-0.17737em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">E</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>is a morphism of profinite sets which are written as limits of finite sets, I think the correct indexing category which exhibits the arrow as a limit is something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>D</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>×</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">D^{op} \\times E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>? But even writing down this diagram is not so easy since for every choice of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>∈</mo><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">e \\in E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> one has to refine the corresponding object of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> (and I guess this needs to be done in a functorial way).</p>",
        "id": 233822242,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617975604
    },
    {
        "content": "<p>Do we have the Grothendieck construction? (yes: :<a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.grothendieck\">docs#category_theory.grothendieck</a> )</p>",
        "id": 233822961,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617975884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Cool! Seems like you're now getting to the heart of things</p>",
        "id": 233824159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617976325
    },
    {
        "content": "<p>There is a \"canonical\" collection of covers of finite sets by finite sets for which it's the limit, right? If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> then just take all the finite quotients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> (this is some subset of the equivalence relations on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>) and the finite quotients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> such that there's a map between the finite quotients making the diagram commute.</p>",
        "id": 233829527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617978259
    },
    {
        "content": "<p>Yes, that works, but I was thinking of taking a finite quotient of Y, whose fibres are then a decomposition of Y into a finite union of clopen disjoint sets, pull those back to get a clopen disjoint cover of X, and consider all refinements of this pullback</p>",
        "id": 233830326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617978576
    },
    {
        "content": "<p>So for every finite quotient of Y you get a cofinal system of the finite quotients of X, and this process of choosing the cofinal system is functorial. Applying something like a grothendieck construction then gives a \"correct\" diagram</p>",
        "id": 233830711,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617978697
    },
    {
        "content": "<p>Well, the case of arrows is now done here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/94be0d767ba802ade4c6f99e6fa2e622da43219c/src/for_mathlib/Profinite_functorial_limit.lean#L785\">https://github.com/leanprover-community/lean-liquid/blob/94be0d767ba802ade4c6f99e6fa2e622da43219c/src/for_mathlib/Profinite_functorial_limit.lean#L785</a><br>\nBut that turned out to be much harder than I originally thought! <br>\nI'm hoping the case of arrows is actually sufficient for what we need (I think it is, if we only need cech complexes).</p>\n<p>In what level of generality is the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo>⇒</mo><mi>P</mi><mi>r</mi><mi>o</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">J \\Rightarrow Profinite</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span></span></span></span> equivalentt to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mo stretchy=\"false\">(</mo><mi>J</mi><mo>⇒</mo><mi>F</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Pro(J \\Rightarrow Finset)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span>? <br>\nThe most general case I could find in the literature is where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> is \"loopless\". (I started on some sketchy code for the general case in <code>for_mathlib/scratch.lean</code> and eventually got stuck, but I think something can be done in the general case. One issue for now is that <code>arrow C</code> is not defined as a functor category in mathlib.)</p>",
        "id": 234071314,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618171030
    },
    {
        "content": "<p>In what generality would you want to apply it?</p>",
        "id": 234107628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618207476
    },
    {
        "content": "<p>Well, for example, what conditions on an augmented simplicial profinite set ensure that it's a limit of an augmented simplicial finite set?</p>",
        "id": 234150535,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618231471
    },
    {
        "content": "<p>That should always be true, right? (I assume you mean the limit of a pro-(augmented simplicial finite set).)</p>",
        "id": 234150674,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618231534
    },
    {
        "content": "<p>Adding in \"hypercover\" both times should be a little more tricky</p>",
        "id": 234150723,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618231553
    },
    {
        "content": "<p>Yeah that's what I mean. There is certainly a functor from pro(aug-simpl-finset) to aug-simpl-profnite, but I don't immediately see why every object is in the image.</p>",
        "id": 234151760,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618231954
    },
    {
        "content": "<p>Do you know of a reference for this?</p>",
        "id": 234151801,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618231965
    },
    {
        "content": "<p>Every simplicial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is the limit of the coskeletons of its skeletons; so one can reduce to the similar assertion for truncated simplicial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>'s; then argue by induction, writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-truncated <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>'s as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>-truncated ones plus a latching map</p>",
        "id": 234153185,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618232507
    },
    {
        "content": "<p>Ah ok. Yes, so when the source category J is finite you get an equiv between pro(J -&gt; Finset) and J -&gt; Profinite.</p>",
        "id": 234153630,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618232676
    },
    {
        "content": "<p>Hmm, that's not right, is it? Or it depends on your definition of \"finite category\". Profinite sets with an automorphism don't have that property</p>",
        "id": 234153728,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618232721
    },
    {
        "content": "<p>Finite means finite objects and finite Homs.</p>",
        "id": 234153786,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618232742
    },
    {
        "content": "<p>OK</p>",
        "id": 234154239,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618232908
    },
    {
        "content": "<p>How does one prove the claim for general finite categories, actually?</p>",
        "id": 234154369,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618232947
    },
    {
        "content": "<p>Ah maybe one really does need the category to be loopless?</p>",
        "id": 234155045,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618233243
    },
    {
        "content": "<p>I'm not sure! For profinite sets with an action by a finite group, it is true, so I'm inclined to believe it's true for finite categories</p>",
        "id": 234155161,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618233290
    },
    {
        "content": "<p>I also just realized that my argument above, as written, applies only to semisimplicial objects</p>",
        "id": 234155483,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618233428
    },
    {
        "content": "<p>The idea I had in mind in the finite case is this (I think it works?): If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> is the finite category and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>∈</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">j \\in J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>, write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> for the associated profinite set. Now given a finite quotient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>e</mi></msub><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">X_e \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, it can be refined (I think?) in some canonical way so that for every endomorphism of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>, the associated endomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>e</mi></msub><mo>→</mo><msub><mi>X</mi><mi>e</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_e \\to X_e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> descends to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. For every other object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">e'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> with a morphism from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>, endow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><msup><mi>e</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></msub></mrow><annotation encoding=\"application/x-tex\">X_{e'}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with the trivial finite quotient, and for every object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e''</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> mapping to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> endow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><msup><mi>e</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></msub></mrow><annotation encoding=\"application/x-tex\">X_{e''}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with the quotient obtained by pulling back this <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>e</mi></msub><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">X_e \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>. If everything works, then this endowed every object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> with a finite quotient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> which are all compatible w.r.t. the morphisms arising from the finite category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>, and furthermore as the original <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> vary, this gives cofinal systems among all finite quotients of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>e</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">e</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 234158203,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618234424
    },
    {
        "content": "<p>That's sketchy, but this is what works in the case of the finite catgory <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∙</mo><mo>→</mo><mo>∙</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet \\to \\bullet</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">∙</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">∙</span></span></span></span> which I used in the <code>arrow Profinite</code> case.</p>",
        "id": 234158313,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618234455
    },
    {
        "content": "<p>(although that category is loopless, so it's easier as one does not have to go through the original step of refining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>)</p>",
        "id": 234158437,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618234502
    },
    {
        "content": "<p>err.... actually that argument doesn't work.</p>",
        "id": 234159322,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618234801
    },
    {
        "content": "<p>Hmm yeah it seems to assume looplessness</p>",
        "id": 234159802,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618234962
    },
    {
        "content": "<p>The point is to take a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>↦</mo><msub><mi>X</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">j \\mapsto X_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> and construct some functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>↦</mo><msub><mi>S</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">j \\mapsto S_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> of finite sets with a functorial quotient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>j</mi></msub><mo>→</mo><msub><mi>S</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_j \\to S_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> in such a way so that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_j</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> are cofinal among the finite quotients.</p>",
        "id": 234159842,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618234975
    },
    {
        "content": "<p>So the argument works for profinite sets with a finite group action. Is it true for profinite sets with a finite <em>monoid</em> action?</p>",
        "id": 234160028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618235035
    },
    {
        "content": "<p>Ah; good question...</p>",
        "id": 234160131,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618235060
    },
    {
        "content": "<p>What's a good example of a finite monoid? {0,1} under multiplication?</p>",
        "id": 234160185,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618235075
    },
    {
        "content": "<p>Sure.</p>",
        "id": 234160273,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618235099
    },
    {
        "content": "<p><code>{0,1,..,n}</code> with saturating addition</p>",
        "id": 234160329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618235115
    },
    {
        "content": "<p>In the first case, I guess that would be profinite sets with an idempotent endomorphism? I think that case is OK</p>",
        "id": 234160588,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618235190
    },
    {
        "content": "<p>In any case, this discussion makes me think that this is a complicated enough question that we should try to make the argument in question work with arrows as opposed to simplicial objects</p>",
        "id": 234161591,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618235514
    },
    {
        "content": "<p>I think so</p>",
        "id": 234162090,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618235662
    },
    {
        "content": "<p>How important is it to pass from arrows to the chech nerve then to the cech complex in 8.4?</p>",
        "id": 234162139,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618235679
    },
    {
        "content": "<p>(well, even though 8.4 in the blueprint is stated with hypercovers)</p>",
        "id": 234162316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618235729
    },
    {
        "content": "<p>8.4=8.19 in Analytic.pdf?</p>",
        "id": 234162448,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618235765
    },
    {
        "content": "<p>OK yes</p>",
        "id": 234162649,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618235829
    },
    {
        "content": "<p>Yeah</p>",
        "id": 234162665,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618235838
    },
    {
        "content": "<p>You mean whether one really needs the intermediary of (co)simplicial objects?</p>",
        "id": 234162703,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618235857
    },
    {
        "content": "<p>right. If we have an arrow <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f : X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> we can construct the Cech complex directly. So the second half of 8.19 in analytic could be stated as: For every cover <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>T</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">f : T \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> of profinite sets, the associated Cech complex <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><mover accent=\"true\"><mi>M</mi><mo stretchy=\"true\">^</mo></mover><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mover accent=\"true\"><mi>M</mi><mo stretchy=\"true\">^</mo></mover><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">0 \\to \\widehat{M}(S) \\to \\widehat{M}(T) \\to \\cdots </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.17333em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92333em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.6833299999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg height=\"0.24em\" preserveAspectRatio=\"none\" viewBox=\"0 0 1062 239\" width=\"100%\"><path d=\"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22 c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\"></path></svg></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.17333em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92333em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.6833299999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg height=\"0.24em\" preserveAspectRatio=\"none\" viewBox=\"0 0 1062 239\" width=\"100%\"><path d=\"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22 c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\"></path></svg></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> is exact and etc.</p>",
        "id": 234163003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618235959
    },
    {
        "content": "<p>It's probably worth formalizing that first; I'm sure some glue will be necessary later anyways. But <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> would know much better</p>",
        "id": 234163313,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618236043
    },
    {
        "content": "<p>Mathematically, it seems completely fine</p>",
        "id": 234163379,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618236067
    },
    {
        "content": "<p>Well, what's rolling out of the construction of the double complex is Lean-wise quite far from the construction of the Cech complex.</p>",
        "id": 234163577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618236126
    },
    {
        "content": "<p>So I was expecting that in the end 8.19 would be stated in terms of some <code>is_Cech_nerve</code></p>",
        "id": 234163654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618236154
    },
    {
        "content": "<p>And if that is the case, I don't think it matters anymore how 8.19 is proven.</p>",
        "id": 234163702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618236173
    },
    {
        "content": "<p>What I'm proposing is to make it in terms of some <code>is_Cech_complex</code></p>",
        "id": 234163721,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618236177
    },
    {
        "content": "<p>Aha. What would the definition look like?</p>",
        "id": 234163817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618236198
    },
    {
        "content": "<p>Good question :)</p>",
        "id": 234163837,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618236208
    },
    {
        "content": "<p>What do I need to check, to verify that some complex <code>is_Cech_complex</code>?</p>",
        "id": 234163851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618236213
    },
    {
        "content": "<p>Naively we could say: \"There exists some cover such that this complex is isomorphic to the Cech complex associated to the cover.\"</p>",
        "id": 234163986,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618236247
    },
    {
        "content": "<p>But there's this implicit variable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>M</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> anyways</p>",
        "id": 234164106,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618236292
    },
    {
        "content": "<p>Where \"isomorphic\" probably means something stronger e.g. the norms should be strictly equal</p>",
        "id": 234164108,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618236293
    },
    {
        "content": "<p>So I think this only really makes sense on the level of the simplicial profinite set</p>",
        "id": 234164160,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618236314
    },
    {
        "content": "<p>Otherwise you force yourself to compose any nice isomorphism you may have through evaluation at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>M</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> and taking alternating face maps</p>",
        "id": 234164324,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618236368
    },
    {
        "content": "<p>Note that the columns in the double complex will not be norm-strict isomorphic to whatever rolls out of the Cech construction, because the <code>i</code>th object has the norm rescaled by <code>(i+1)!</code> or something like that.</p>",
        "id": 234164456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618236422
    },
    {
        "content": "<p>So we'll also need some glue there.</p>",
        "id": 234164476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618236429
    },
    {
        "content": "<p>On second thought it shouldn't be too much of an issue to work with the cech nerve itself. We could say this: If <code>is_cech_nerve f C</code> (meaning that <code>C</code> is <strong>a</strong> cech nerve of a cover <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>T</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">f : T \\to S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>), then the second part of 8.19 holds true, and the proof would go by expressing <code>f</code> as a limit.</p>",
        "id": 234166468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618237037
    },
    {
        "content": "<p>That sounds good</p>",
        "id": 234166630,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618237086
    },
    {
        "content": "<p>Aside: Earlier on, there was a question whether anything actually needs simplicial objects as opposed to semisimplicial objects (eg, hypercovers). Actually, I think everything I write in the lecture notes works for semisimplicial objects. I'm not actually sure now why most modern discussions of hypercovers use simplicial objects. What goes wrong with hypercovers as semisimplicial objects?</p>",
        "id": 234166775,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618237132
    },
    {
        "content": "<p>The definition of hypercover would have to be changed right? The coskeleton functors are consstructed termwise as some limit over some diagram that includes degeneracy maps</p>",
        "id": 234167383,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618237340
    },
    {
        "content": "<p>Hmm, my impression was that the coskeleta are compatible, but I would have to check</p>",
        "id": 234167549,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618237398
    },
    {
        "content": "<p>(ie removing degeneracies from the limit gives a cofinal map, giving the same limit)</p>",
        "id": 234167647,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618237436
    },
    {
        "content": "<p>Oh yeah that should be okay. The coskeleta are some right Kan extension anyway.</p>",
        "id": 234167651,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618237437
    },
    {
        "content": "<p>I pushed a few more things to the <code>cech_stuff</code> branch:</p>\n<ol>\n<li>The equivalence bettween <code>arrow C</code> and functors from <code>with_terminal (discrete punit)</code> to <code>C</code>.</li>\n<li>A <code>cech</code> construction which now goes from <code>arrow C</code> to <code>simplicial.augmented C</code>, and the forgetful functor the other way called <code>to_arrow</code>.</li>\n<li>The adjunction  <code>to_arrow ⊣ cech</code>, which then gives compatibility of <code>cech</code> with limits \"for free\" :)</li>\n</ol>\n<p>If anyone wants to play with these constructions, they're in the <code>for_mathlib/cech.lean</code> file in the <code>cech_stuff</code> branch, and make sure to fetch oleans as this uses an updated mathlib.</p>",
        "id": 234255882,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618278061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> this is starting to look good! I'm still very busy with the homotopy stuff, and I need to do admin because semester is starting again.</p>",
        "id": 234269237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618290456
    },
    {
        "content": "<p>I really want to finish the homotopy part before spending too much time on other parts of the project, and it looks like you're still full steam ahead.</p>",
        "id": 234269339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618290534
    },
    {
        "content": "<p>But if there are specific struggles, please do tell me.</p>",
        "id": 234269354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618290549
    },
    {
        "content": "<p>Does the following link work for anybody?<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/Profinite_functorial_limit.lean\">https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/Profinite_functorial_limit.lean</a></p>",
        "id": 234351316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618328788
    },
    {
        "content": "<p>I'm getting a 500 error</p>",
        "id": 234351334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618328793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/cech_stuff/near/234255882\">said</a>:</p>\n<blockquote>\n<ol>\n<li>The equivalence bettween <code>arrow C</code> and functors from <code>with_terminal (discrete punit)</code> to <code>C</code>.</li>\n</ol>\n</blockquote>\n<p><code>with_terminal (discrete punit)</code> is the same as <code>fin 2</code> and <code>with_initial (discrete punit)</code> right? Perhaps we should make a canonical name for talking about this category, or show that these three are all the same thing</p>",
        "id": 234351533,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618328859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/cech_stuff/near/234351334\">said</a>:</p>\n<blockquote>\n<p>I'm getting a 500 error</p>\n</blockquote>\n<p>I'm getting one too. Even clicking on the link to Profinite_functorial.limit from <a href=\"https://github.com/leanprover-community/lean-liquid/tree/cech_stuff/src/for_mathlib\">the directory</a> fails. Very strange!</p>",
        "id": 234351576,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618328878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I was actually discussing something similar with <span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> recently. Yes this is a good idea!</p>",
        "id": 234351931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618329004
    },
    {
        "content": "<p>I mostly used <code>with_terminal (discrete punit)</code> because I wanted to get the functor to <code>with_terminal simplicial_category</code> for \"free\" by using <code>with_terminal.map</code></p>",
        "id": 234352025,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618329035
    },
    {
        "content": "<p>Right, I think they each have their place to get universal properties nicely</p>",
        "id": 234352103,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618329072
    },
    {
        "content": "<p>Re the 500 error -- I just checked, and the file actually exists if you clone the repo.</p>",
        "id": 234352108,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618329075
    },
    {
        "content": "<p>In general I would also like to have the equivalence between <code>with_terminal J \\func C</code> and the some comma category involving constant functors from J.</p>",
        "id": 234352465,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618329222
    },
    {
        "content": "<p>(and the analogous thing for <code>with_initial</code> as well)</p>",
        "id": 234352486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618329235
    },
    {
        "content": "<p>Now that you mention it, this feels a lot like the ideas in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/constructions/over/products.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/constructions/over/products.lean</a>, where <code>wide_pullback_shape J</code> is essentially <code>with_terminal (discrete J)</code>, and the existence of limits of shape <code>wide_pullback_shape J</code> in <code>C</code> is used to show the existence of limits of shape <code>discrete J</code> in <code>C/X</code></p>",
        "id": 234352953,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618329387
    },
    {
        "content": "<p>In fact I feel like your results on <code>with_terminal</code> could be used to simplify some of the things about <code>wide_pullback_shape</code></p>",
        "id": 234353084,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618329445
    },
    {
        "content": "<p>What's the status of Proposition 8.3 from the blueprint?</p>",
        "id": 234675786,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618493778
    },
    {
        "content": "<p>Has anything been done toward this?</p>",
        "id": 234675833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618493795
    },
    {
        "content": "<p>I looked through a lot of the project recently and I don't recall seeing this, but I would wait to hear from Johan. Of course we don't really have anything at all on condensed anything, not even a definition.</p>",
        "id": 234680554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618495299
    },
    {
        "content": "<p>8.3 itself would have a well-defined meaning, though: We basically defined <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{V}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> only as a functor from profinite sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>, but not via what it should actually be, namely continuous functions to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>V</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{V}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.25em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span> (rather, we took the completion of locally constant functions to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span>)</p>",
        "id": 234681045,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618495434
    },
    {
        "content": "<p>I'm not looking for anything condensed, but note that <code>LCC.obj M</code> is a contravariant functor on <code>Profinite</code>. That's the main thing I'm looking for -- a description of <code>LCC.obj M</code>, as a functor on <code>Profinite\\op</code>, in terms of the completion of <code>M</code> as a topological group</p>",
        "id": 234681114,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618495448
    },
    {
        "content": "<p>It seems to me that this would be the easiest way to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>M</mi><mo stretchy=\"true\">^</mo></mover><mo stretchy=\"false\">(</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mi>i</mi></msub><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\widehat{M}(\\lim_i S_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.17333em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92333em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.6833299999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg height=\"0.24em\" preserveAspectRatio=\"none\" viewBox=\"0 0 1062 239\" width=\"100%\"><path d=\"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22 c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\"></path></svg></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is the colimit of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>M</mi><mo stretchy=\"true\">^</mo></mover><mo stretchy=\"false\">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\widehat{M}(S_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.17333em;vertical-align:-0.25em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.92333em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span><span class=\"svg-align\" style=\"width:calc(100% - 0.16668em);margin-left:0.16668em;top:-3.6833299999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg height=\"0.24em\" preserveAspectRatio=\"none\" viewBox=\"0 0 1062 239\" width=\"100%\"><path d=\"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22 c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z\"></path></svg></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 234681511,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618495572
    },
    {
        "content": "<p>Wait, that's not true, right?</p>",
        "id": 234681578,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618495594
    },
    {
        "content": "<p>The colimit would be the locally constant functions to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>M</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{M}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9467699999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">^</span></span></span></span></span></span></span></span></span></span></p>",
        "id": 234681614,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618495607
    },
    {
        "content": "<p>Oh yeah that's right. So now I'm confused about the proof of 8.4</p>",
        "id": 234681917,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618495703
    },
    {
        "content": "<p>Oh sorry I'm missing a completion</p>",
        "id": 234681979,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618495723
    },
    {
        "content": "<p>should be the completion of the colimit</p>",
        "id": 234682044,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618495743
    },
    {
        "content": "<p>Do we need 8.3?</p>",
        "id": 234683869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618496355
    },
    {
        "content": "<p>It's not mentioned in the proof of 8.4.</p>",
        "id": 234683900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618496365
    },
    {
        "content": "<p>Well, that's what I'm thinking -- we want to express the complex as a (completed) colimit of complexes associated to the finite quotients</p>",
        "id": 234683970,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618496396
    },
    {
        "content": "<p>I'm starting a small refactor of <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's work on the alternating face map construction in the <code>augmented_stuff</code> branch</p>",
        "id": 234717317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618507010
    },
    {
        "content": "<p>Sounds good. I hope it doesn't cause to much pain to adapt the one or two places where I've used it.</p>",
        "id": 234719163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618507658
    },
    {
        "content": "<p>So far it's going fine :)</p>",
        "id": 234719451,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618507757
    },
    {
        "content": "<p>I haven't gotten anywhere beyond where it's defined though</p>",
        "id": 234719486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618507772
    },
    {
        "content": "<p>I ended up getting really bogged down with the Kan extension approach to the Cech nerve, so I redefined <code>cech</code> in terms of wide pullbacks in the following file:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/cech2.lean\">https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/cech2.lean</a><br>\nThe part in the <code>category_theory.limits</code> namespace is some additional API for wide pullbacks, and would be an easy mathlib PR if someone wants to take this on (it would be best to add analogues for <code>wide_pushworward</code> as well as part of a mathlib PR)</p>",
        "id": 235982839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619281506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/cech_stuff/near/235982839\">said</a>:</p>\n<blockquote>\n<p>I ended up getting really bogged down with the Kan extension approach to the Cech nerve, so I redefined <code>cech</code> in terms of wide pullbacks in the following file:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/cech2.lean\">https://github.com/leanprover-community/lean-liquid/blob/cech_stuff/src/for_mathlib/cech2.lean</a><br>\nThe part in the <code>category_theory.limits</code> namespace is some additional API for wide pullbacks, and would be an easy mathlib PR if someone wants to take this on (it would be best to add analogues for <code>wide_pushworward</code> as well as part of a mathlib PR)</p>\n</blockquote>\n<p>(minor nit: <code>wide_pushout</code> rather than <code>wide_pushforward</code>)</p>",
        "id": 235983581,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1619282101
    },
    {
        "content": "<p>(edited)</p>",
        "id": 235983706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619282205
    },
    {
        "content": "<p>Cech nerves are in mathlib! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 238265245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719239
    },
    {
        "content": "<p>I don't know what Cech nerves are. Do they have anything to do with Cech cohomology?</p>",
        "id": 238265500,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620719367
    },
    {
        "content": "<p>(I'd love to have Cech cohomology in mathlib :-)</p>",
        "id": 238265532,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620719387
    },
    {
        "content": "<p>(Because I'd love to have Alexander duality in its general form, and deduce Jordan theorem like a breeze).</p>",
        "id": 238265660,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620719449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> yes there's a very strong connection!</p>",
        "id": 238265930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719600
    },
    {
        "content": "<p>It's the combinatorics behind Cech cohomology</p>",
        "id": 238266055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620719668
    },
    {
        "content": "<p>If you have an open cover <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><msub><mo>⋃</mo><mi>i</mi></msub><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">X = \\bigcup_i U_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> then also of course get a surjection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨆</mo><mi>i</mi></msub><msub><mi>U</mi><mi>i</mi></msub><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">\\bigsqcup_i U_i \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨆</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. The Cech nerve of that surjection is isomorphic to the simplicial object that is usually just constructed by hand from the intersections of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 238266077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719682
    },
    {
        "content": "<p>Once you have the simplicial object, you can build the cohomology for the alternating face map complex.</p>",
        "id": 238266123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719713
    },
    {
        "content": "<p>ok, it's a categorical way of expressing stuff I know how to do by hand.</p>",
        "id": 238266135,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620719718
    },
    {
        "content": "<p>So, I think we are very close to defining cohomology wrt a single cover.</p>",
        "id": 238266177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719747
    },
    {
        "content": "<p>And then there is of course this limiting procedure. That can probably be defined easily, but we might want to have some API around it to work with it nicely.</p>",
        "id": 238266275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719776
    },
    {
        "content": "<p>Modulo the fact that there has been no cohomology theory ever defined in lean for which we can prove a long exact sequence</p>",
        "id": 238266288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620719784
    },
    {
        "content": "<p>I would say that the definitions of all three are well within reach now:</p>\n<ul>\n<li>singular cohomology</li>\n<li>Cech cohomology</li>\n<li>sheaf cohomology</li>\n</ul>",
        "id": 238266319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719807
    },
    {
        "content": "<p>Time for a bunch of comparison isos!</p>",
        "id": 238266335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719814
    },
    {
        "content": "<p>However there are recent grounds for optimism here</p>",
        "id": 238266338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620719817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/cech_stuff/near/238265660\">said</a>:</p>\n<blockquote>\n<p>(Because I'd love to have Alexander duality in its general form, and deduce Jordan theorem like a breeze).</p>\n</blockquote>\n<p>This sounds really great!</p>",
        "id": 238266383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620719846
    },
    {
        "content": "<p>Alexander duality tells you that, if you have two homeomorphic subsets <code>X</code> and <code>Y</code> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, then the cohomologies of their complements are the same (as they can be read off the cohomology of <code>X</code>, resp. <code>Y</code>). So, the complement of anything homeomorphic to the sphere has two connected components, just like for the sphere, which is Jordan's theorem. This is really a crazy theorem (just look at what it says for two circles in the plane: they can be either one inside the other, or separated, but still there are always three connected components in the complement, and two holes).</p>",
        "id": 238267123,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620720202
    },
    {
        "content": "<p>(Well, not so crazy once you think of it, but still amazing :-)</p>",
        "id": 238267459,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620720369
    },
    {
        "content": "<p>I've always thought of the part that's hidden here as the more delicate part: That any open subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> decomposes as a disjoint union of path-connected open and closed subspaces. (This seems \"obvious\" from our mental picture of a smooth manifold, but I think the nasty part of the proof of Jordan's theorem is hidden here.)</p>",
        "id": 238269020,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1620721246
    }
]