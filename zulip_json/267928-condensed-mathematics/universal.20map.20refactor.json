[
    {
        "content": "<p>In the Breen-Deligne section of LTE we are using <code>free_abelian_group</code>. But we might want to switch to <code>finsupp</code>, because will allow us to reuse constructions that Scott has been adding to mathlib. However, when I tried that this afternoon, I got really weird behaviour with the equation compiler. It probably has something to do with <code>free_abelian_group</code> being computable, whereas <code>finsupp</code> is not.</p>\n<p>I pushed to the <code>BD-refactor</code> branch. If you want to take a look, the error shows up around<br>\n<code>src/breen_deligne/category.lean:182</code><br>\nwhere I need to <code>dsimp</code> in a definition.</p>",
        "id": 243656539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624457167
    },
    {
        "content": "<p>I'll try to look at this later today, if it's still an issue</p>",
        "id": 243668367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624461885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> do I understand correctly that the main change from <code>free_abelian_group</code> to <code>finsupp</code> happened in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[A]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 243698982,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624475613
    },
    {
        "content": "<p>Right, and now the rest of the project needs to adept to that change</p>",
        "id": 243699308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624475796
    },
    {
        "content": "<p>But if it is too much work... I wouldn't worry too much.</p>",
        "id": 243699322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624475808
    },
    {
        "content": "<p>Scott's code isn't all in mathlib yet. So it isn't urgent.</p>",
        "id": 243699347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624475822
    },
    {
        "content": "<p>Gotcha. I have a bit of time now so I wanted to get my bearings straight. I'll play more with this branch later</p>",
        "id": 243699416,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624475867
    },
    {
        "content": "<p>Ooof... this proof in <code>hom_pow'_sum</code> is really annoying... I can't make progress at all! Even replacing the first <code>dsimp [...]</code> with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"n\">BD.mul_mul_iso</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">BD.pow'_iso_mul</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n    <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">hom_pow'</span> <span class=\"o\">(</span><span class=\"n\">BD.sum</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">BD.sum</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">BD.sum</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n</code></pre></div>\n<p>(which is what it should be) gives me a timeout.</p>",
        "id": 243727138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624491911
    },
    {
        "content": "<p>Okay, I made some progress. The trick seems to be to avoid using the equation compiler and use <code>nat.rec_on</code> manually.<br>\nI pushed my code to the branch <code>BD-refactor-2</code>.</p>",
        "id": 243732400,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624497595
    },
    {
        "content": "<p>So far I got <code>breen_deligne/category.lean</code> to compile, but I  haven't worked on any of the other files</p>",
        "id": 243732453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624497622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> ooh, thanks for the progress!</p>",
        "id": 243737560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624504880
    },
    {
        "content": "<p>Still, I'm quite surprised that switching from <code>free_abelian_group</code> to <code>finsupp</code> causes this sort of problems.<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Are you interested/do you have time to take a look at what's going on? I don't understand this weird behaviour.</p>",
        "id": 243737570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624504917
    }
]