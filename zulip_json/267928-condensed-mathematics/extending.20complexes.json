[
    {
        "content": "<p>We can now extend <code>ℕ</code>-indexed complexes to <code>ℤ</code>-indexed complexes: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/complex_extend.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/complex_extend.lean</a></p>",
        "id": 274981451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647008719
    },
    {
        "content": "<p>This also allows to embed cochain complexes indexed by <code>ℕ</code> into chain complexes indexed by <code>ℤ</code>, by flipping the directions. (And vice versa)</p>",
        "id": 274981517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647008758
    },
    {
        "content": "<p>Next target: if an <code>ℕ</code>-complex <code>is_projective_resolution</code> then you get <code>is_K_projective</code> after pushing it through this functor, etc...</p>",
        "id": 274981659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647008836
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> has already done that?</p>",
        "id": 274982387,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647009129
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/829d2657ad15f020af7fd1df73f93e214c084a42/src/for_mathlib/projective_replacement.lean#L709\">https://github.com/leanprover-community/lean-liquid/blob/829d2657ad15f020af7fd1df73f93e214c084a42/src/for_mathlib/projective_replacement.lean#L709</a></p>",
        "id": 274982559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647009224
    },
    {
        "content": "<p>This sounds very related to implementing brutal/stupid truncations</p>",
        "id": 274982896,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1647009371
    },
    {
        "content": "<p>We can now get those by restricting and then extending.</p>",
        "id": 274983288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647009574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/extending.20complexes/near/274982559\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/829d2657ad15f020af7fd1df73f93e214c084a42/src/for_mathlib/projective_replacement.lean#L709\">https://github.com/leanprover-community/lean-liquid/blob/829d2657ad15f020af7fd1df73f93e214c084a42/src/for_mathlib/projective_replacement.lean#L709</a></p>\n</blockquote>\n<p>Cool, that will make the proof really short (-;</p>",
        "id": 274983442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647009631
    },
    {
        "content": "<p>I thought Andrew also worked on extending from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>, but maybe I misremembered because I can't seem to find it.</p>",
        "id": 274983529,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647009684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/extending.20complexes/near/274983288\">said</a>:</p>\n<blockquote>\n<p>We can now get those by restricting and then extending.</p>\n</blockquote>\n<p>If you want to truncate somewhere other than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>, then you would need to shift, restrict, extend and unshift, which would be really annoying for defeq reasons.</p>",
        "id": 274983710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647009762
    },
    {
        "content": "<p>In general, is there pleasant API for working with isomorphisms between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>m</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo><mo>∩</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">[m,\\infty) \\cap \\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">m</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>-modules?</p>",
        "id": 274985245,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1647010427
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 274985636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647010589
    }
]