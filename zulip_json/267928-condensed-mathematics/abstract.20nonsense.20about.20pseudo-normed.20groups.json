[
    {
        "content": "<p>I noticed that if you forget the axioms involving subtraction in a pseudo-normed group, a pseudo-normed group is \"just\" a lax monoidal functor from <code>ℝ≥0</code> to <code>Type</code>, where <code>ℝ≥0</code>is thought of as a monoidal category with homs given by <code>≤</code> and tensor product is addition.</p>\n<p>Since generally a monoid is the same thing as a lax monoidal functor from <code>punit</code> to <code>Type</code>, another way to say this is that a pseudo-normed group is a \"<code>ℝ≥0</code>-shaped generalised monoid\".</p>\n<p>However I can't work out how to build subtraction into this model. Has anyone thought about this and knows a solution?</p>",
        "id": 234779608,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618535575
    },
    {
        "content": "<p>(It seems the <code>Tinv</code> action has a nice interpretation in this set up, too.)</p>",
        "id": 234779626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618535595
    },
    {
        "content": "<p>(To fill in some details of the \"just\" claim above, this ignores the part of a pseudo-normed group that can't be seen in any filtration. Such a lax monoidal functor gives <code>F.obj x</code>, some type for each <code>x : ℝ≥0</code>, and coherent morphisms <code>F.obj x ⟶ F.obj y</code> for <code>x ≤ y</code>. I guess there's no reason, however, these need to be injections; but this is easily fixed if important. The unitor gives a morphism <code>punit ⟶ F.obj 0</code>, picking out the zero element. The tensorator gives morphisms <code>(F.obj x) × (F.obj y) ⟶ F.obj (x+y)</code>, which we interpret as addition. The naturality of the tensorator ensures that it's \"the same\" addition when you think of elements as living in later types. Associativity and unitality of addition come from exactly the same axioms for a lax monoidal functor.)</p>",
        "id": 234779998,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618535983
    },
    {
        "content": "<p>Can't you encode subtraction as some involution of this functor?</p>",
        "id": 234782853,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618538544
    },
    {
        "content": "<p>Of course, if you encode negation this way, then some axiom has to be written down to ensure the correct compatibility with the tensorator and unitor</p>",
        "id": 234783901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618539416
    },
    {
        "content": "<p>Yes, I was hoping that duals or dagger structures or something similar would help, but neither fits.</p>",
        "id": 234790359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618545470
    },
    {
        "content": "<p>I had never heard of unitor and tensorator before, but is what you are thinking about some form of Grothendieck group?  If you started with <code>ℝ</code> instead (or along with) <code>ℝ≥0</code>, would the extra types be any help?</p>\n<p>This is probably nonsense, but I would like to understand this more!</p>",
        "id": 234796589,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618550857
    },
    {
        "content": "<p>So what's a pseudo-normed monoid?</p>",
        "id": 234800382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618554141
    },
    {
        "content": "<p>A pseudo-normed group minus the <code>neg</code> axiom?</p>",
        "id": 234800686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618554397
    },
    {
        "content": "<p>Right -- but is it equal to a lax monoidal functor? Maybe we should be considering lax groupoidal functors</p>",
        "id": 234801674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618555161
    },
    {
        "content": "<p>Now you're just making up words, right?</p>",
        "id": 234808832,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618558788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I like this nonsense!</p>",
        "id": 234808907,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618558813
    },
    {
        "content": "<p>Do we ever even use the negation?</p>",
        "id": 234809140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618558970
    },
    {
        "content": "<p>People are about to arrive for dinner here (yay no covid in Australia) but I think you can make sense of \"lax groupoidal functor\". Just like the lax monoidal functors are the monoid objects in functors (equipping functors with Day convolution as the tensor product), when the target is Cartesian I guess you can look at the group objects in functors.</p>",
        "id": 234809146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618558972
    },
    {
        "content": "<p>Certainly in some specific examples, but not in the general theory, I think</p>",
        "id": 234809176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618558993
    },
    {
        "content": "<p>Call these the \"lax groupoidal functors\"!</p>",
        "id": 234809178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618558993
    },
    {
        "content": "<p>Now a lax groupoidal functor from nonneg reals to Type is hopefully a pseudo normed group.</p>",
        "id": 234809220,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618559028
    },
    {
        "content": "<p>But I absolutely haven't checked this.</p>",
        "id": 234809231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618559035
    },
    {
        "content": "<p>Just thinking out loud, so probably actual nonsense.</p>",
        "id": 234809288,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618559053
    },
    {
        "content": "<p>I was going to ask, Johan, if you actually use negation! I did try to delete it from some files and got stuck on a pi instance.</p>",
        "id": 234809351,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618559096
    },
    {
        "content": "<p>We might need to restate the homotopy axiom, so that it doesn't mention <code>f - g</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 234809444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618559140
    },
    {
        "content": "<p>We only apply it to <code>f = g + _</code> anyways</p>",
        "id": 234809459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618559152
    },
    {
        "content": "<p>Isn't negation used a lot when these things are plugged into BD resolutions? The BD matrices all have integral (quite possibly negative) coefficients</p>",
        "id": 234810283,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618559559
    },
    {
        "content": "<p>yeah, that's totally true</p>",
        "id": 234810374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618559631
    },
    {
        "content": "<p>So as soon as we start building complexes we really want negation</p>",
        "id": 234810432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618559652
    },
    {
        "content": "<p>I'm a bit confused about the \"lax groupoidal functors\". Considering the Day convolution interpretation, one has a symmetric monoidal category, and of course one can consider the monoid objects in there. But it's monoids with respect to the symmetric monoidal structure, and I'm not sure what it means to be a group object in a symmetric monoidal category. If the symmetric monoidal structure is the cartesian product, this is of course possible, but I don't think we're in this situation (even if the target of the functors has the cartesian structure).</p>",
        "id": 234813924,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618561318
    },
    {
        "content": "<p>When I was doing group cohomology in Lean with my class a month ago my instincts were to drop as many assumptions as I could, so initially I started with a monoid acting on an abelian monoid, and then I saw how far one could go. For H^0 you're fine, and the monoid never really needs to be upgraded to a group (you're doing Ext for the monoid algebra rather than the group algebra) but minuses appear in the abelian monoid the moment you move beyond H^0. You can avoid them for a while, e.g. don't define d on 1-chains (which involves a minus) but instead just define a 1-cocycle by putting things on the correct side of the equation so you don't need subtraction. However 1-coboundaries already involve subtraction, as does the boundary map from 0-cocycles to 1-cocycles, so it pretty quickly becomes hopeless. Subtraction gives you this really important \"homogeneity\" property which groups have and monoids lack. For example injectivity of a map of monoids is not controlled by the kernel (consider the map from the naturals to {0,1,2,3} where x+y=3 in the monoid if it's &gt;= 3 in the naturals; trivial kernel but not injective). The concept of A -&gt; B -&gt; C being exact makes sense for abelian additive monoids but I'm not sure it's a useful idea, for this reason. A short exact sequence of abelian groups 0 -&gt; A -&gt; B -&gt; C -&gt; 0 is a way of saying \"the monic with target B and the epic with source B are canonically related\" -- this is the key extra symmetry which has been exploited so much in an abelian category -- an epimorphism from B is \"the same as\" a monomorphism into B, and this seems to be the key thing you lose the moment you drop inverses.</p>",
        "id": 234814021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618561347
    },
    {
        "content": "<p>Peter, I agree that I was wrong here. Even if we're looking at functors into Type, where the symmetric monoidal structure is the cartesian one, that's not true of the Day convolution monoidal structure.</p>",
        "id": 234842078,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618575221
    },
    {
        "content": "<p>No worries! What you wrote still suggests that one ought to include a negation map on the functor, and this should satisfy some properties that are probably not so hard to guess. I'm just not seeing the right categorical context; but I also failed to see your very nice interpretation of the monoid portion!</p>",
        "id": 234843728,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1618576038
    },
    {
        "content": "<p>Since group cohomology is just secretly passing something about certain Kan complexes through some kind of possibly non-abelian Dold-Kan equivalence, to do it with monoids you need to go back and work with simplicial tools. Instead of a simplicial group you have a simplicial monoid, but this is not automatically a Kan complex underneath, so in principle one needs some kind of fibrant replacement as well. But for the purposes of elementary/naive attacks (esp for students), this is not helpful!</p>",
        "id": 234955154,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1618629388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> are you talking about changing the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>H</mi><mi>n</mi></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^n(G,M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> to a monoid, or changing the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>?</p>",
        "id": 234973490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618649859
    },
    {
        "content": "<p>I was thinking of both. But it really depends on what you want cohomology to measure. And what model category structure you use for (co)fibrant replacement.</p>",
        "id": 235497260,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1619006428
    },
    {
        "content": "<p>Do we have the notion of equivalence between png? I am in particolar looking for a statement like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M1</span> <span class=\"n\">M2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">pseudo_normed_group</span> <span class=\"n\">M1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pseudo_normed_group</span> <span class=\"n\">M2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M1</span> <span class=\"bp\">≃</span> <span class=\"n\">M2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">filtration</span> <span class=\"n\">M1</span> <span class=\"n\">c</span> <span class=\"bp\">≃</span> <span class=\"n\">filtration</span> <span class=\"n\">M2</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but of course Lean wants to know what <code>M1 ≃ M2</code> means. Also... do we have the above lemma?</p>",
        "id": 275633895,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1647514099
    },
    {
        "content": "<p>I see that we have the following functor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">category</span><span class=\"bp\">/</span><span class=\"n\">ProFiltPseuNormGrpWithTinv.lean</span>\n<span class=\"mi\">84</span><span class=\"o\">:</span><span class=\"c1\">-- @[simps] def Filtration (c : ℝ≥0) : ProFiltPseuNormGrp ⥤ Profinite :=</span>\n</code></pre></div>",
        "id": 275635023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647514761
    },
    {
        "content": "<p>And it's even commented out</p>",
        "id": 275635043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647514776
    },
    {
        "content": "<p>But you would want a more general version anyways</p>",
        "id": 275635060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647514786
    },
    {
        "content": "<p>Let me have a look at it</p>",
        "id": 275635197,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1647514826
    },
    {
        "content": "<p>Well, may be actually playing with <code>f.level</code> would be enough for my purpose, no?</p>",
        "id": 275635327,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1647514903
    },
    {
        "content": "<p>I guess that there <code>f</code> is a <code>PNGWTinv</code>-morphism.</p>",
        "id": 275635413,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1647514938
    },
    {
        "content": "<p>There should be a version of <code>level</code> in a more general setting</p>",
        "id": 275635667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647515076
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">pseudo_normed_group</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">163</span><span class=\"o\">:</span><span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">level</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">pseudo_normed_group</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pseudo_normed_group</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 275635759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647515132
    },
    {
        "content": "<p>OK, I'll try to work with it, thanks.</p>",
        "id": 275636044,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1647515274
    },
    {
        "content": "<p>I'm fairly sure I defined a functor called <code>level</code> (or some other approximation) from <code>PFPNG_1</code> to Profinite</p>",
        "id": 275668198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647530015
    }
]