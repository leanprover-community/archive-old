[
    {
        "content": "<p>It seems in <code>normed_group/NormedGroup.lean</code> that kernels are constructed using the limits API, and then cokernels are constructed \"ad hoc\", with most of the limits API for cokernels repeated by hand. Is there a good reason for this? If not, I can try to refactor.</p>\n<p>Also, I noticed there <code>coker.map</code> and <code>coker.map_lift_comm</code>, which work in any category with cokernels and are not at all specific to normed groups. Again, unless I'm missing something I can replace these.</p>",
        "id": 238883319,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621070429
    },
    {
        "content": "<p>The problem is \"bounded limits\"</p>",
        "id": 238883551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621070683
    },
    {
        "content": "<p>same for equalizers, we also do them by hand</p>",
        "id": 238883559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621070693
    },
    {
        "content": "<p>The problems is, if <code>D : J =&gt; NormedGroup</code> is some diagram, and <code>X</code> is the limit of <code>D</code>, then I can pick any norm-increasing isom <code>f : Y \\to X</code> and then <code>Y</code> is also a limit, but typically in an unhelpful way.</p>",
        "id": 238883607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621070760
    },
    {
        "content": "<p>In particular, the natural map <code>\\iota : equalizer f g -&gt; V_1</code> cannot be shown to be norm-nonincreasing, if we stick to the usual limits API</p>",
        "id": 238883674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621070806
    },
    {
        "content": "<p>Similar issues with quotients.</p>",
        "id": 238883676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621070811
    },
    {
        "content": "<p>Adam started working on a \"bounded limits\" API, but I don't know what the status is.</p>",
        "id": 238883684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621070828
    },
    {
        "content": "<p>So should things like <code>instance : limits.has_kernels.{u (u+1)} NormedGroup</code> just be deleted?</p>",
        "id": 238885918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073212
    },
    {
        "content": "<p>And in any case, the ad hoc development of <code>coker</code> doesn't seem to account for what you say in any way.</p>",
        "id": 238885943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073255
    },
    {
        "content": "<p>It just repeats the standard setup for <code>cokernel</code>.</p>",
        "id": 238885952,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073264
    },
    {
        "content": "<p>Is it also junk?</p>",
        "id": 238885956,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073268
    },
    {
        "content": "<p>The kernels definitely aren't used.</p>",
        "id": 238885962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073280
    },
    {
        "content": "<p>Are you talking about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The cokernel of a morphism of normed groups. -/</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">coker</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span> <span class=\"o\">:=</span> <span class=\"n\">NormedGroup.of</span> <span class=\"bp\">$</span>\n  <span class=\"n\">quotient_add_group.quotient</span> <span class=\"n\">f.range</span>\n</code></pre></div>",
        "id": 238886069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073345
    },
    {
        "content": "<p>Oh, maybe I see: if you just picked any arbitrary categorical cokernel, you wouldn't be able to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coker.π_norm_noninc</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">coker.π</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">coker</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">norm_noninc</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 238886076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073353
    },
    {
        "content": "<p>That one is certainly used.</p>",
        "id": 238886077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073353
    },
    {
        "content": "<p>Exactly, that silly lemma is crucial!</p>",
        "id": 238886084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073371
    },
    {
        "content": "<p>So are there (conventional) cokernels in the category of normed groups with non-increasing maps as morphisms?</p>",
        "id": 238886159,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073425
    },
    {
        "content": "<p>Yes, because we use semi-normed groups</p>",
        "id": 238886174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073446
    },
    {
        "content": "<p>Okay, so my questions above become: can/should someone (e.g. me) refactor the ad hoc development of  cokernels, replacing it with the standard limits API version of cokernels in that category?</p>",
        "id": 238886195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073504
    },
    {
        "content": "<p>I think the concensus was that instead of changing the category, we should extend the limits API</p>",
        "id": 238886264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073557
    },
    {
        "content": "<p>Because sometimes we want to take limits of maps whose norms are all bounded by <code>C</code>, and get a universal property for maps bounded by <code>C'</code>, etc...</p>",
        "id": 238886272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073584
    },
    {
        "content": "<p>It's not clear to me that we can always assume <code>C = 1</code> in the proof of 8.19</p>",
        "id": 238886292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073621
    },
    {
        "content": "<p>Also, to construct the system of complexes that we are interested in, we need to work with norm-increasing maps in intermediary steps.</p>",
        "id": 238886341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073651
    },
    {
        "content": "<p>Sure. Of course it has to be convenient to step outside the non-increasing morphism subcategory.</p>",
        "id": 238886370,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073688
    },
    {
        "content": "<p>But I'd be happier if I knew a concrete problem that required something more general than (co)limits in the non-increasing map category.</p>",
        "id": 238886402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073727
    },
    {
        "content": "<p>So, I'm not saying we shouldn't add <code>NormedGroupNormNoninc</code>. But I just want to warn that we can't simply move the entire project over to that category.</p>",
        "id": 238886406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073730
    },
    {
        "content": "<p>Definitely.</p>",
        "id": 238886415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621073740
    },
    {
        "content": "<p>The proof of 8.19 needs that more general thing.</p>",
        "id": 238886418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073750
    },
    {
        "content": "<p>But Adam understands the details a lot better than I do</p>",
        "id": 238886466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621073773
    }
]