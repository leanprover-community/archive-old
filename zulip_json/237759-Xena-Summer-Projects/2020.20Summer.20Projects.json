[
    {
        "content": "<p>I am running summer projects from 30th June to the end of August. I will give two talks per week <a href=\"https://discord.gg/AnHKcDm\" title=\"https://discord.gg/AnHKcDm\">on Discord</a> and generally will help beginners. The idea is that a student should, at the end of it, have a github repository containing working Lean code, and a little write-up explaining what they have done. </p>\n<p>Far more details are <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/UROP2020.html\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/UROP2020.html\">here</a>. Things will only get going at the end of June, but I'm setting this up now because people are asking what to do next.</p>",
        "id": 196665777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588784888
    },
    {
        "content": "<p>I would be interested! Is this open to not-anymore-but-been-very-recently undergrads too? How open are you to projects that are more on the logic/computation side of maths and have very little overlap with algebra? And would it be possible to start only at the third week or so? German exams are always a bit later than those in the English-speaking world..</p>",
        "id": 196679541,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1588790896
    },
    {
        "content": "<p>I can't offer much supervision on the logic/computation side of things, but you're welcome to join in.</p>",
        "id": 196684411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588793285
    },
    {
        "content": "<p>There are people around here that know things about computation :)</p>",
        "id": 196707016,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588804553
    },
    {
        "content": "<p>Right :-) This whole thing is just a myth, I'm not going to supervise anything, I'm just going to bring a bunch of people together and get them to ask questions on the chat :-)</p>",
        "id": 196709483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588806746
    },
    {
        "content": "<p>Actually I am hoping that my performance will be better than in 2018, when I knew very little about Lean and the students realised very early on that they were better off asking Chris Hughes <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 196709620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588806850
    },
    {
        "content": "<p>This time I feel much better equipped to deal with basic questions</p>",
        "id": 196709637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588806867
    },
    {
        "content": "<p>If some of the students will want to fill in some gaps in our analysis library, then I'm ready to help mentoring them.</p>",
        "id": 198731281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590480243
    },
    {
        "content": "<p>I think that in June when I am out of marking hell I will try and do the analogue of what Patrick/Ryan/Rocky are doing -- go through Imperial's undergraduate course and figure out what is missing. I have not been paying attention to analysis development in mathlib, although I have been keeping more of an eye on algebra/number theory.</p>",
        "id": 198740099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590486584
    },
    {
        "content": "<p>do you have students? are they mostly interacting on discord?</p>",
        "id": 205078102,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595818329
    },
    {
        "content": "<p>Yes and yes</p>",
        "id": 205087922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595834813
    },
    {
        "content": "<p>Could you please tell here what are the projects?</p>",
        "id": 205158058,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595877954
    },
    {
        "content": "<p>People are doing Dedekind domains, working on why 144 is the largest square in the Fibonacci sequence, doing basic number theory (several groups -- stuff we have already, or probably don't want, in mathlib), basic group theory that we have in mathlib already etc</p>",
        "id": 205159899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595879035
    },
    {
        "content": "<p>They're just learning Lean</p>",
        "id": 205159908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595879042
    },
    {
        "content": "<p>Thank you for the list.</p>",
        "id": 205181424,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595892981
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/EBcettoqiHK6vqSCB72T3-rB/Screenshot-2020-07-29-at-13.12.32.png\">Screenshot 2020-07-29 at 13.12.32.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EBcettoqiHK6vqSCB72T3-rB/Screenshot-2020-07-29-at-13.12.32.png\" title=\"Screenshot 2020-07-29 at 13.12.32.png\"><img src=\"/user_uploads/3121/EBcettoqiHK6vqSCB72T3-rB/Screenshot-2020-07-29-at-13.12.32.png\"></a></div>",
        "id": 205354316,
        "sender_full_name": "aris zhu",
        "timestamp": 1596028576
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/3kAChJpoG_Kq1GQaGVp6wUGw/IMG_1C2EAE6ABE0E-1.jpeg\">IMG_1C2EAE6ABE0E-1.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/3kAChJpoG_Kq1GQaGVp6wUGw/IMG_1C2EAE6ABE0E-1.jpeg\" title=\"IMG_1C2EAE6ABE0E-1.jpeg\"><img src=\"/user_uploads/3121/3kAChJpoG_Kq1GQaGVp6wUGw/IMG_1C2EAE6ABE0E-1.jpeg\"></a></div>",
        "id": 205354327,
        "sender_full_name": "aris zhu",
        "timestamp": 1596028584
    },
    {
        "content": "<p>I am trying to formulate the summation expression as shown in the picture, but I am not sure why my code gives me error, can someone help me pls?</p>",
        "id": 205354418,
        "sender_full_name": "aris zhu",
        "timestamp": 1596028638
    },
    {
        "content": "<p>It would be much easier to help you if you could copy-paste code (and LaTeX code) instead of images.</p>",
        "id": 205354575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596028713
    },
    {
        "content": "<p>In particular, a_n is a sequence. My approach to formulate the series is to first express the sum as a function mapping from an int n to the result of summation, then let series be a sequence of sum</p>",
        "id": 205354579,
        "sender_full_name": "aris zhu",
        "timestamp": 1596028717
    },
    {
        "content": "<p>(we'll help you anyway, hold on)</p>",
        "id": 205354593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596028726
    },
    {
        "content": "<p>Ok one sec pls</p>",
        "id": 205354617,
        "sender_full_name": "aris zhu",
        "timestamp": 1596028746
    },
    {
        "content": "<p>(sum : λ n : ℕ, ∑ i in range n, (rpow (u n) n))</p>",
        "id": 205354652,
        "sender_full_name": "aris zhu",
        "timestamp": 1596028773
    },
    {
        "content": "<p>Erm sorry I don’t have the source code for the summation expression</p>",
        "id": 205354805,
        "sender_full_name": "aris zhu",
        "timestamp": 1596028844
    },
    {
        "content": "<p>Let me try to get the source code out</p>",
        "id": 205354916,
        "sender_full_name": "aris zhu",
        "timestamp": 1596028902
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">infinite_sum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205355168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596029017
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><msubsup><mi>a</mi><mi>n</mi><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\sum_{n=1}^{\\infty} a_n^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 205355173,
        "sender_full_name": "aris zhu",
        "timestamp": 1596029022
    },
    {
        "content": "<p>Use <code>$$</code> to enclose LaTeX code</p>",
        "id": 205355256,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596029047
    },
    {
        "content": "<p>Thanks so much</p>",
        "id": 205355618,
        "sender_full_name": "aris zhu",
        "timestamp": 1596029244
    },
    {
        "content": "<p>The provided code had no problem, but when I put the sum as one hypothesis, ie <br>\n(sum : λ N, ∑ n in (range N), (a n)^n), it gives error under <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span> saying that type expected at λ N, ∑ n in (range N), (a n)^n term has type ℕ → ℝ. why is it so?</p>",
        "id": 205360778,
        "sender_full_name": "aris zhu",
        "timestamp": 1596031561
    },
    {
        "content": "<p>What you write has no meaning and, without further context, it's hard to guess what you imagine the meaning would be</p>",
        "id": 205363102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596032578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298236\">@aris zhu</span> please post compiling code with all imports and within triple back ticks like Patrick did</p>",
        "id": 205364494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596033223
    },
    {
        "content": "<p>Oh I see, having just one summation expression is just a definition, cannot be a hypothesis.</p>",
        "id": 205364882,
        "sender_full_name": "aris zhu",
        "timestamp": 1596033385
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">infinite_sum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">import analysis.special_functions.pow</span>\n<span class=\"cm\">import data.real.basic</span>\n<span class=\"cm\">import algebra.big_operators</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">series_of_root_numbers_converges</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_seq</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">l_pos</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l_lt_one</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"c1\">-- (sum : λ N, ∑ n in (range N), (a n)^n) :</span>\n<span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205364971,
        "sender_full_name": "aris zhu",
        "timestamp": 1596033425
    },
    {
        "content": "<p>Now the problem is with has_sum</p>",
        "id": 205365081,
        "sender_full_name": "aris zhu",
        "timestamp": 1596033475
    },
    {
        "content": "<p>You should read more careful the result of my <code>#check has_sum</code></p>",
        "id": 205365455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596033628
    },
    {
        "content": "<p>It is not a <code>Prop</code> but a predicate on real numbers.</p>",
        "id": 205365534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596033654
    },
    {
        "content": "<p>It becomes a <code>Prop</code> if you give a limit candidate.</p>",
        "id": 205365573,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596033670
    },
    {
        "content": "<p>Oh I see, thanks a lot</p>",
        "id": 205365642,
        "sender_full_name": "aris zhu",
        "timestamp": 1596033699
    },
    {
        "content": "<p>May I know if there is a way to search in the mathlib about any theorem I want to use? Particularly I want to use completeness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> so that I can prove that a sequence of real numbers which is bounded above has a supremum. Recently I have been randomly looking into the mathlib folders to see if I can happen to find what I need, but it seems like a rather inefficient way.</p>",
        "id": 205500362,
        "sender_full_name": "aris zhu",
        "timestamp": 1596126312
    },
    {
        "content": "<p>Usually one talks about the supremum of a set, not a sequence. Due to the total function principle, every set has a sup :-) it's just that the sup might be 37 and not obey the properties of a sup.</p>",
        "id": 205500783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596126506
    },
    {
        "content": "<p>in order to find it just by navigating the the mathlib source by eye, you'll have to guess the right level of generality for the result</p>",
        "id": 205501357,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596126788
    },
    {
        "content": "<p>if you search supremum here <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a><br>\nthe first result is in order.complete_lattice</p>",
        "id": 205501479,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596126853
    },
    {
        "content": "<p>I am sorry I don’t think I get entirely what you are saying, Kevin. I think you are pointing out my misunderstanding that I should talk about the sup of a set instead of a sequence, or rather a mapping from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>. So I should focus on the set formed from output of the mapping from natural number, ie the range of the mapping. </p>\n<p>Then I don’t know what you mean by total function principle. I searched online, and only found definition on total function. May I know what the principle you are referring to is and so it leads to your conclusion that every set has a sup? And then I can probably understand what you mean by not obeying the properties of sup</p>",
        "id": 205508425,
        "sender_full_name": "aris zhu",
        "timestamp": 1596130736
    },
    {
        "content": "<p>There's something in lean called Sup or sup, I forget, but it makes sense for every set of reals. However it only satisfies the axioms of a supremum for nonempty bounded sets. You should locate its definition in data.real.basic or wherever it is and then take a look at the lemmas after it, maybe they'll help. I'm sorry I can't help more, I can't access lean right now</p>",
        "id": 205508749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596130899
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order\">docs#conditionally_complete_linear_order</a><br>\n<code>real</code> has an <code>instance</code> of this class.</p>",
        "id": 205510989,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596132028
    },
    {
        "content": "<p>(and it is a <code>conditionally_complete_lattice</code> as well)</p>",
        "id": 205511049,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596132055
    },
    {
        "content": "<p>Also it is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_space\">docs#complete_space</a></p>",
        "id": 205511097,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596132074
    },
    {
        "content": "<p>So any <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cauchy_seq\">docs#cauchy_seq</a> converges</p>",
        "id": 205511122,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596132086
    },
    {
        "content": "<p>Aris, did you try to use the overview pages ?</p>",
        "id": 205513846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596133235
    },
    {
        "content": "<p>Thank you Kevin and Yuri, I will take a look at those.</p>",
        "id": 205516614,
        "sender_full_name": "aris zhu",
        "timestamp": 1596134640
    },
    {
        "content": "<p>Patrick, i don’t know what are overview pages, what are those?</p>",
        "id": 205516708,
        "sender_full_name": "aris zhu",
        "timestamp": 1596134679
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a></p>\n<p>You can reach this from the menu on the top right of <a href=\"https://leanprover-community.github.io\">the community website</a> under \"Learn -&gt; Library overview\".</p>",
        "id": 205517455,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596135095
    },
    {
        "content": "<p>May I know what is the tactics I can use so that I can define a set as the range of a function? Particularly I would like to define a mapping from N to R, ie sequence, and define the range of the mapping as a set of R</p>",
        "id": 205600338,
        "sender_full_name": "aris zhu",
        "timestamp": 1596207422
    },
    {
        "content": "<p>This sounds like <code>set.range</code>in data.set.basic</p>",
        "id": 205601490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596207948
    },
    {
        "content": "<p>the first three results for searching \"range\" at the  <a href=\"https://leanprover-community.github.io/mathlib_docs\">#docs</a> are all relevant</p>",
        "id": 205602253,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596208289
    },
    {
        "content": "<p>Thanks for the tips.</p>\n<p>Currently I want to prove that a set is non-empty. I want to prove that given <code>(u : ℕ → ℝ)</code>,<code> (∃ (x : ℝ), x ∈ range u)</code>. To prove this, I have typed <code>use u 1</code> to provide the possible value of <code>x</code>,  but then I am stuck on the expression <code>⊢ u 1 ∈ range u</code>. I tried to unfold it, getting <code>⊢ u 1 ∈ {x : ℝ | ∃ (y : ℕ), u y = x}</code>, but still don't know what should be the appropriate tactics to close this goal. What should be the tactics to prove this?</p>",
        "id": 205613939,
        "sender_full_name": "aris zhu",
        "timestamp": 1596214265
    },
    {
        "content": "<p>what does <code>suggest</code> say?</p>",
        "id": 205616885,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596215900
    },
    {
        "content": "<p>i think your goal is defeq to <code>\\ex y, u y = u 1</code>, so <code>use 1</code> should work</p>",
        "id": 205616912,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596215923
    },
    {
        "content": "<p>yeah <span class=\"user-mention\" data-user-id=\"298236\">@aris zhu</span> you're on the right track. The <code>dsimp</code> tactic will try to unfold definitions and change your goal to something which is the same by definition, but hopefully simpler to understand, so you could try that before Jalex' suggestion, but in fact Jalex' suggestion should work straight out of the box. I'm back in London now so could hopefully be more helpful.</p>",
        "id": 205618177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596216663
    },
    {
        "content": "<p>There will also be some lemma with a name like <code>set.mem_range</code> that exactly proves things like <code>u 1 ∈ range u</code>.</p>",
        "id": 205618429,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596216800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/205616885\">said</a>:</p>\n<blockquote>\n<p>what does <code>suggest</code> say?</p>\n</blockquote>\n<p>What do you mean by <code>suggest</code>?</p>",
        "id": 205630365,
        "sender_full_name": "aris zhu",
        "timestamp": 1596222985
    },
    {
        "content": "<p>Thanks for helping me. <code>use 1</code> works, however, <code>dsimp</code> does not, neither does <code>set.mem_range</code>.</p>",
        "id": 205630413,
        "sender_full_name": "aris zhu",
        "timestamp": 1596223028
    },
    {
        "content": "<p><code>suggest</code> is the name of a tactic, it works similarly to <code>library_search</code> except it returns more options, see <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#suggest\">tactic#suggest</a></p>",
        "id": 205630535,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596223084
    },
    {
        "content": "<p>wow <code>suggest</code> is a really cool feature!</p>",
        "id": 205631042,
        "sender_full_name": "aris zhu",
        "timestamp": 1596223372
    },
    {
        "content": "<p>btw, via <code>suggest</code> I also managed to use <code>set.mem_range_self 1</code> to close the goal, and subsequently there are a lot of <code>refine</code> tactics statements being <code>suggest</code>ed</p>",
        "id": 205631227,
        "sender_full_name": "aris zhu",
        "timestamp": 1596223466
    },
    {
        "content": "<p><code>suggest</code> makes me feel like Lean is almost possible to do proofs on its own! <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 205632184,
        "sender_full_name": "aris zhu",
        "timestamp": 1596223999
    },
    {
        "content": "<p>at the risk of excessively repeating myself, this google search takes you to the definition of suggest as the first hit<br>\n<a href=\"https://www.google.com/search?q=suggest%20site%3Ahttps%3A%2F%2Fleanprover-community.github.io%2Fmathlib_docs%2F\">https://www.google.com/search?q=suggest%20site%3Ahttps%3A%2F%2Fleanprover-community.github.io%2Fmathlib_docs%2F</a></p>",
        "id": 205643497,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596230942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298236\">aris zhu</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/205632184\">said</a>:</p>\n<blockquote>\n<p><code>suggest</code> makes me feel like Lean is almost possible to do proofs on its own! <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>automation does a lot of work in any modern proof library, in fact moreso in the isabelle and coq libraries than in mathlib. for anyone who likes functional programming enough, there are several open issues in the mathlib github repo describing potential tactics that can automate more for us.</p>",
        "id": 205643680,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596231062
    },
    {
        "content": "<p>Currently I have <code>hM : M ≤ x ↔ ∀ (z : ℝ), z ∈ f_range u → z ≤ x</code>. What is the tactics allow me to change it to something like <code>hM : M ≤ x ↔ ∀ (n : ℕ), u n ≤ x</code>? <code>f_range u</code> is just the range of function <code>u</code>.</p>",
        "id": 205801335,
        "sender_full_name": "aris zhu",
        "timestamp": 1596465419
    },
    {
        "content": "<p>This time <code>suggest</code> just gives me a lot of <code>refine</code> commands, which are rather useless</p>",
        "id": 205801477,
        "sender_full_name": "aris zhu",
        "timestamp": 1596465485
    },
    {
        "content": "<p>If you do <code>have : M ≤ x ↔ ∀ (n : ℕ), u n ≤ x</code>, then tactics which try to figure things out will know what you're trying to figure out</p>",
        "id": 205801806,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596465669
    },
    {
        "content": "<p>another thing I would do here is write <br>\n<code>#check mem_range</code> or <code>#check set.mem_range</code> and look at the autocomplete suggestions</p>",
        "id": 205801954,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596465758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/205801954\">said</a>:</p>\n<blockquote>\n<p>another thing I would do here is write <br>\n<code>#check mem_range</code> or <code>#check set.mem_range</code> and look at the autocomplete suggestions</p>\n</blockquote>\n<p>Regarding the autocomplete suggestions, do you mean the pop-up window? or something in the Lean Infoview pane? <a href=\"/user_uploads/3121/Pq0rJ2fVo1mFcoBZO0ODuvaq/Screenshot-2020-08-03-at-15.48.08.png\">Screenshot-2020-08-03-at-15.48.08.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Pq0rJ2fVo1mFcoBZO0ODuvaq/Screenshot-2020-08-03-at-15.48.08.png\" title=\"Screenshot-2020-08-03-at-15.48.08.png\"><img src=\"/user_uploads/3121/Pq0rJ2fVo1mFcoBZO0ODuvaq/Screenshot-2020-08-03-at-15.48.08.png\"></a></div>",
        "id": 205802828,
        "sender_full_name": "aris zhu",
        "timestamp": 1596466223
    },
    {
        "content": "<p>yes I meant that popup window</p>",
        "id": 205802979,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596466295
    },
    {
        "content": "<p>indeed it looks like <code>rw mem_range</code> is something you want</p>",
        "id": 205803030,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596466317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298236\">aris zhu</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/205801335\">said</a>:</p>\n<blockquote>\n<p><code>f_range u</code> is just the range of function <code>u</code>.</p>\n</blockquote>\n<p>What does this mean? Is <code>f_range</code> something you defined?</p>",
        "id": 205803114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596466335
    },
    {
        "content": "<p>you'll have to help it see through your <code>f_range</code>, though</p>",
        "id": 205803163,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596466354
    },
    {
        "content": "<p>in general, aliases mostly get in the way</p>",
        "id": 205803201,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596466375
    },
    {
        "content": "<p>anyways, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.forall_range_iff\">docs#set.forall_range_iff</a> is what you want</p>",
        "id": 205803513,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596466511
    },
    {
        "content": "<p>also it's not a tactic</p>",
        "id": 205803597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596466558
    },
    {
        "content": "<p>tactics are things like <code>rw</code>, <code>intro</code></p>",
        "id": 205803646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596466566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/205803114\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298236\">aris zhu</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/205801335\">said</a>:</p>\n<blockquote>\n<p><code>f_range u</code> is just the range of function <code>u</code>.</p>\n</blockquote>\n<p>What does this mean? Is <code>f_range</code> something you defined?</p>\n</blockquote>\n<p>Yes I defined myself, very close to the definition in mathlib, because I realize that the name overlaps with the <code>range</code> used for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span>, so to avoid clashes in names, I defined another <code>f_range</code>,  with all its related types specifically being related to what I am proving</p>",
        "id": 205803814,
        "sender_full_name": "aris zhu",
        "timestamp": 1596466671
    },
    {
        "content": "<p>well if you want access to the many lemmas we have about ranges of functions, you should use the mathlib <code>range</code></p>",
        "id": 205803911,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596466702
    },
    {
        "content": "<p>in particular, reid points out the the thing you want to prove is already a lemma in the library about mathlib's <code>range</code></p>",
        "id": 205803962,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596466724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/205803513\">said</a>:</p>\n<blockquote>\n<p>anyways, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.forall_range_iff\">docs#set.forall_range_iff</a> is what you want</p>\n</blockquote>\n<p>yeah I got this from establishing a lemma like jalex suggested, and used <code>rw hM</code> and <code>suggest</code> to figure out <code>exact set.forall_range_iff</code></p>",
        "id": 205804114,
        "sender_full_name": "aris zhu",
        "timestamp": 1596466795
    },
    {
        "content": "<p>also, the typical way to deal with name collisions is namespaces. <code>set.range</code> is the thing we're talking about here, and <code>finset.range</code> is probably the one you've seen used with sums</p>",
        "id": 205804459,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596466919
    },
    {
        "content": "<p>i would typically not <code>open set</code> and instead just say <code>set.range</code> when I need it</p>",
        "id": 205804675,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596466985
    },
    {
        "content": "<p>what do you mean by <code>open set</code>?</p>",
        "id": 205804709,
        "sender_full_name": "aris zhu",
        "timestamp": 1596467003
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#namespaces\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#namespaces</a></p>",
        "id": 205805095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596467145
    },
    {
        "content": "<p>If you're not already using <code>open</code> then there is no danger of a name collision between <code>set.range</code> and <code>finset.range</code>.</p>",
        "id": 205805178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596467165
    },
    {
        "content": "<p>ok thanks so much</p>",
        "id": 205805266,
        "sender_full_name": "aris zhu",
        "timestamp": 1596467206
    },
    {
        "content": "<p>Say i have a proposition to be proven, but involves the discussion of comparison of two variables, say <code>a</code> and <code>b</code>. Is there a tactic which I can split the goal into three with different conditions, <code>a &gt; b</code>,<code>a &lt; b</code>, <code>a = b</code>, and then prove the proposition respectively?</p>",
        "id": 205811489,
        "sender_full_name": "aris zhu",
        "timestamp": 1596470075
    },
    {
        "content": "<p>i'm not sure why you ask for a tactic</p>",
        "id": 205812554,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596470568
    },
    {
        "content": "<p>i think what you want is the theorem that <code>a &lt; b \\or a = b \\or b &lt; a</code></p>",
        "id": 205812586,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596470589
    },
    {
        "content": "<p>and then you can use the <code>cases</code> tactic on that theorem</p>",
        "id": 205812636,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596470616
    },
    {
        "content": "<p>you should be able to find this theorem with <code>library_search</code></p>",
        "id": 205812663,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596470633
    },
    {
        "content": "<p>because <code>split</code> allows me to split the goal into two, if it can be split, so I thought there is a way to split inequalities as well</p>",
        "id": 205812743,
        "sender_full_name": "aris zhu",
        "timestamp": 1596470665
    },
    {
        "content": "<p>the thing you want to split on is not in the goal</p>",
        "id": 205812829,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596470725
    },
    {
        "content": "<p>Is this what you're asking for:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h1</span><span class=\"bp\">|</span><span class=\"n\">h2</span><span class=\"bp\">|</span><span class=\"n\">h3</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"298236\">@aris zhu</span></p>",
        "id": 205812900,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596470758
    },
    {
        "content": "<p>when we split on hypotheses, that's called <code>cases</code> instead of <code>split</code></p>",
        "id": 205813033,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596470820
    },
    {
        "content": "<p>ah yeah <code>cases</code> that is</p>",
        "id": 205813057,
        "sender_full_name": "aris zhu",
        "timestamp": 1596470839
    },
    {
        "content": "<p>if you just want to split on <code>p \\or \\not p</code> for some specific <code>p</code>, you can use <code>by_cases p</code></p>",
        "id": 205813076,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596470847
    },
    {
        "content": "<p>If I were to write <code>by_cases (M &gt; u 1)</code>, it gives me error on <code>&gt;</code>, saying that the inequality is not a <code>Prop</code>, I wonder why inequality is not considered Type <code>Prop</code>?</p>",
        "id": 205814075,
        "sender_full_name": "aris zhu",
        "timestamp": 1596471374
    },
    {
        "content": "<p>what is the whole error?</p>",
        "id": 205814125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596471415
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">M</span> <span class=\"bp\">&gt;</span> <span class=\"n\">u</span> <span class=\"mi\">1</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 205814175,
        "sender_full_name": "aris zhu",
        "timestamp": 1596471442
    },
    {
        "content": "<p>You've made some other error which is hard to guess without knowing what you've written</p>",
        "id": 205814341,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596471523
    },
    {
        "content": "<p>maybe a missing <code>,</code></p>",
        "id": 205814356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596471532
    },
    {
        "content": "<p>thanks so much, silly mistake...</p>",
        "id": 205814437,
        "sender_full_name": "aris zhu",
        "timestamp": 1596471595
    },
    {
        "content": "<p>Also, if you read the error message, you'll see it's telling you that <code>M &gt; u 1</code> <strong>is</strong> a <code>Prop</code></p>",
        "id": 205814540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596471641
    },
    {
        "content": "<p>but it was expecting a function--probably because you had something after <code>(M &gt; u 1)</code> which Lean interpreted as an argument to it.</p>",
        "id": 205814599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596471673
    },
    {
        "content": "<p>Error messages are helpful.</p>",
        "id": 205814617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596471680
    },
    {
        "content": "<p>but sometimes they take some puzzle solving to interpret--if Lean is confused, obviously it doesn't know why it's confused, so it's your job to guess why that might be</p>",
        "id": 205815094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596471923
    },
    {
        "content": "<p>Is there a lemma to convert <code>¬(A ↔ B)</code> to <code>¬A ↔ B</code>? I found something similar like <code>not_iff</code> but it doesn't seem to work</p>",
        "id": 205930863,
        "sender_full_name": "aris zhu",
        "timestamp": 1596559775
    },
    {
        "content": "<p>I'm not sure that's true constructively, so you'd need classical logic to prove that. Is there an error about type class instances?</p>\n<p>Putting <code>open_locale classical</code> in your file should allow you to use <code>not_iff</code>. (or if you can show that <code>B</code> is decidable that would work as well)</p>",
        "id": 205933171,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596560980
    },
    {
        "content": "<p>ah I didn't put <code>open_locale classical</code>.  What is the difference between <code>open</code> and <code>open_locale</code>? I searched in the mathlib and found <code>open_locale</code> used for declaring notation as local notation, but for me it seems like a redundant explanation since \"opening\" a namespace is to use the terms in the namespace in the current script. Also, is there a place describing this kind of dependencies, where I need to add <code>open</code> or  <code>open_locale</code> so that I can use the lemmas?</p>",
        "id": 205936516,
        "sender_full_name": "aris zhu",
        "timestamp": 1596562800
    },
    {
        "content": "<p><code>open</code> opens a namespace</p>",
        "id": 205937386,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596563256
    },
    {
        "content": "<p><code>open_locale</code> brings in local notations and local instances</p>",
        "id": 205937410,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596563271
    },
    {
        "content": "<p>anything you can do with <code>open</code> you can also do with dot notation</p>",
        "id": 205937507,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596563301
    },
    {
        "content": "<p>eg </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">card</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">card</span>\n</code></pre></div>",
        "id": 205937658,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596563380
    },
    {
        "content": "<p>Can I clarify with this theorem: <code>theorem exists_sup (S : set ℝ) : (∃ x, x ∈ S) → (∃ x, ∀ y ∈ S, y ≤ x) → ∃ x, ∀ y, x ≤ y ↔ ∀ z ∈ S, z ≤ y</code>. I believe that <code>(∃ x, x ∈ S)</code> means non-empty set <code>S</code>, <code>(∃ x, ∀ y ∈ S, y ≤ x)</code> means set <code>S</code> is bounded above by <code>x</code>. And what I am confused about is <code>∃ x, ∀ y, x ≤ y ↔ ∀ z ∈ S, z ≤ y</code>. At first I thought that <code>x</code> is the supremum, but then after some considerations, I feel that <code>x</code> is rather a lower bound of the set of upper bounds of <code>S</code>. As such the last sentence should add <code>z ≤ x</code> to show that <code>x</code> is also an upper bounds of <code>S</code> to make it a supremum?</p>",
        "id": 205962166,
        "sender_full_name": "aris zhu",
        "timestamp": 1596575902
    },
    {
        "content": "<p>I think you are confused by precedence issues.</p>",
        "id": 205962796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596576298
    },
    {
        "content": "<p>Try adding parentheses while checking that Lean still thinks this is the same definition.</p>",
        "id": 205962844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596576321
    },
    {
        "content": "<p>(x is indeed the supremum)</p>",
        "id": 205965041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596577622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/205962844\">said</a>:</p>\n<blockquote>\n<p>Try adding parentheses while checking that Lean still thinks this is the same definition.</p>\n</blockquote>\n<p>I am sorry but I still cannot figure out why. The reason I got confused about this, is because I want to use this theorem to identify the supremum, i.e. <code>x</code>, and then derive the conclusion <code>∀ ε &gt; 0, ∃ n₀, u n₀ ≥ x - ε</code>.  What I did is to set up the lemma <code>have lemma : ∃ x, ∀ y, x ≤ y ↔ ∀ z ∈ S, z ≤ y</code>, and used the theorem, together with non-emptiness and bounded above, to prove the lemma. Then when I want to use that lemma to prove <code>∀ ε &gt; 0, ∃ n₀, u n₀ ≥ x - ε</code>, I just cannot figure out a way, and I realize that it lacks some \"bounds\" to <code>x</code> in <code>∃ x, ∀ y, x ≤ y ↔ ∀ z ∈ S, z ≤ y</code>. In terms of precedence, I believe it is <code>∃ x, (∀ y, (x ≤ y ↔ ∀ z ∈ S, z ≤ y))</code>.</p>",
        "id": 206017223,
        "sender_full_name": "aris zhu",
        "timestamp": 1596631517
    },
    {
        "content": "<p>This is slightly tricky. Hint: the fact that <code>↔</code> is used is important.</p>",
        "id": 206017525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596631713
    },
    {
        "content": "<p>You're right about the precedence. If you let y=x then you see in particular that x is an upper bound.</p>",
        "id": 206021838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596634225
    },
    {
        "content": "<p>Thanks for helping me clarify the statement and tips for understanding why it is an upper bound. This actually helps  me to realize that my problem was to prematurely <code>specialize</code> a <code>∀</code> lemma, then I cannot properly use <code>contrapose</code> to prove the result.</p>",
        "id": 206028707,
        "sender_full_name": "aris zhu",
        "timestamp": 1596637809
    },
    {
        "content": "<p>I want to get from <code>n : ℕ, a n ≥ 0</code> to deduce <code>a n ^ n ≥ 0</code>? <code>suggest</code> doesn't give any useful hint. I think the name is probably related to <code>pos</code>, <code>pow</code>, and I found one that is closest to what I need, (at least I think it is), <code>exact nat.pos_pow_of_pos _ _</code>, but it is not working for me. The error gives </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">^</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>I don't understand the error message regarding <code>m_1</code>, <code>m_2</code>, what are those types? So that I can understand what is wrong with the expression and potentially fix it</p>",
        "id": 206462520,
        "sender_full_name": "aris zhu",
        "timestamp": 1597067525
    },
    {
        "content": "<p>What is <code>a</code>?</p>",
        "id": 206462805,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597067683
    },
    {
        "content": "<p><code>a</code> is a function, <code>a : ℕ → ℝ</code></p>",
        "id": 206462868,
        "sender_full_name": "aris zhu",
        "timestamp": 1597067740
    },
    {
        "content": "<p><code>pow_nonneg</code> should do it</p>",
        "id": 206463056,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597067828
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206463112,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597067858
    },
    {
        "content": "<p>thanks, it works!</p>",
        "id": 206463204,
        "sender_full_name": "aris zhu",
        "timestamp": 1597067896
    },
    {
        "content": "<p>could you just also explain to me what <code>m_2</code>, <code>m_1</code> are? are they some kind of general types? if so, how would I know if N or R is a \"sub-type\" of <code>m_2</code>, <code>m_1</code>?</p>",
        "id": 206463316,
        "sender_full_name": "aris zhu",
        "timestamp": 1597067969
    },
    {
        "content": "<p>They are placeholders</p>",
        "id": 206463648,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597068138
    },
    {
        "content": "<p><code>pow_pos</code> is for showing positive <code>  &lt; </code> while you have <code>\\le</code> so lean cant find things to put in the placeholders</p>",
        "id": 206463743,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597068197
    },
    {
        "content": "<p>oh i see, so I should use <code>nonneg</code> and <code>nonpos</code> when I see <code>≥ 0</code> and <code>≤ 0</code></p>",
        "id": 206463998,
        "sender_full_name": "aris zhu",
        "timestamp": 1597068338
    },
    {
        "content": "<p>Now I am stuck on this problem, from <code>h : ∀ (n : ℕ), a n ^ n ≥ 0</code> to deduce <code>0 ≤ ∑ (n : ℕ) in range m, a n ^ n - ∑ (n : ℕ) in range n, a n ^ n</code>, where <code>nm : ℕ</code>. In my mind I think what I need to do is to simplify the summation expression to something like <code>0 ≤ ∑ (n : ℕ) in (range m - range n), a n ^ n</code>, and then probably I can directly <code>exact h</code>. What can I do with the summation expression to simplify it?</p>",
        "id": 206464984,
        "sender_full_name": "aris zhu",
        "timestamp": 1597068825
    },
    {
        "content": "<p>I've done something similar before simplifying sum to <code>finset.Ico</code> before. Take a look at: <a href=\"https://github.com/JasonKYi/M4000x_LEAN_formalisation/blob/master/src/M40002/M40002_C4.lean#L148\">https://github.com/JasonKYi/M4000x_LEAN_formalisation/blob/master/src/M40002/M40002_C4.lean#L148</a> and see if it helps</p>",
        "id": 206466104,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597069376
    },
    {
        "content": "<p>or is there any place I can read more about <code>∑</code>?</p>",
        "id": 206466109,
        "sender_full_name": "aris zhu",
        "timestamp": 1597069379
    },
    {
        "content": "<p>Its a local definition <code>def partial_sum_to (a : ℕ → ℝ) (n : ℕ) := finset.sum (finset.range n) a</code></p>",
        "id": 206466202,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597069439
    },
    {
        "content": "<p>With <code>notation </code>∑<code> a := partial_sum_to a</code></p>",
        "id": 206466248,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597069450
    },
    {
        "content": "<p>ok I will take a look! Thanks</p>",
        "id": 206466482,
        "sender_full_name": "aris zhu",
        "timestamp": 1597069578
    },
    {
        "content": "<p>What would be the tactics to split <code>n ≤ m</code> into <code>n &lt; m</code> and <code>n = m</code>? I tried <code>by_cases n &lt; m</code> but they don't seem to work that well because it ignores the original condition</p>",
        "id": 206476547,
        "sender_full_name": "aris zhu",
        "timestamp": 1597074376
    },
    {
        "content": "<p><code>le_iff_eq_or_lt</code></p>",
        "id": 206477219,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597074787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> , regarding <code>(∑ a) m - (∑ a) n = finset.sum (finset.Ico n m) a</code>, why is  it <code>Ico</code> instead of <code>Ioc</code>? I thought that it should be <code>[n + 1, m]</code>, i.e. <code>(n, m]</code>?</p>",
        "id": 206506486,
        "sender_full_name": "aris zhu",
        "timestamp": 1597089695
    },
    {
        "content": "<p><code>(∑ a) m</code> is the sum of <code>a n</code> from <code>n = 0</code> to <code>a = m -1</code> and <code>finset.Ico n m</code> is the set of nats from <code>n</code> to <code>m -1</code>. The maths works out so I'm not sure whats the confusion</p>",
        "id": 206507607,
        "sender_full_name": "Jason KY.",
        "timestamp": 1597090284
    },
    {
        "content": "<p>oh I though that <code>(∑ a) m</code> is the sum of  <code>a n</code> to <code>n = m</code> instead of <code>n = m - 1</code>. Thanks for the clarification</p>",
        "id": 206569043,
        "sender_full_name": "aris zhu",
        "timestamp": 1597149503
    },
    {
        "content": "<p>It's a sum of m things</p>",
        "id": 206606480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597167793
    },
    {
        "content": "<p>How can I break an extremely long line into two lines in Lean?</p>",
        "id": 206706499,
        "sender_full_name": "aris zhu",
        "timestamp": 1597244968
    },
    {
        "content": "<p>Is it the same as what we do for <code>calc</code> environment, i.e. add <code>...</code> in front of the line?</p>",
        "id": 206706742,
        "sender_full_name": "aris zhu",
        "timestamp": 1597245055
    },
    {
        "content": "<p>You can just break the line and it should be fine. Lean (usually) ignores whitespace (including line breaks).</p>",
        "id": 206707039,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597245175
    },
    {
        "content": "<p>I am sorry that I cannot find it in library API but what is the theorem I can used to prove that if <code>n ≤ N</code> and <code>¬n = N</code>, then <code>n &lt; N</code>? I tried with something like  <code>le_not_eq</code>, but there doesn't seem to have any option related to this</p>",
        "id": 206713693,
        "sender_full_name": "aris zhu",
        "timestamp": 1597247984
    },
    {
        "content": "<p>You should be able to find it with library search</p>",
        "id": 206715022,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597248502
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/library_search\">docs#library_search</a></p>",
        "id": 206715050,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597248520
    },
    {
        "content": "<p>But also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic#linarith</a></p>",
        "id": 206715094,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597248547
    },
    {
        "content": "<p>I tried with <code>linarith</code> but it cannot be used in this situation</p>",
        "id": 206715581,
        "sender_full_name": "aris zhu",
        "timestamp": 1597248806
    },
    {
        "content": "<p>This works and I got it with <code>library_search</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 206716612,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597249361
    },
    {
        "content": "<p>ok I think my problem was that I didn't put <code>ne</code> in my search, instead I place <code>not_eq</code>. Thanks for the help</p>",
        "id": 206717472,
        "sender_full_name": "aris zhu",
        "timestamp": 1597249795
    },
    {
        "content": "<p>regarding <code>specialize</code> tactics, what is the way to retain the original hypothesis? I see in the documentation that it \"tries to clear the previous one\", can I choose not to do it?</p>",
        "id": 206946968,
        "sender_full_name": "aris zhu",
        "timestamp": 1597421713
    },
    {
        "content": "<p>you can just <code>let f2 := f x</code></p>",
        "id": 206947395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597421949
    },
    {
        "content": "<p>Is there a reason why for <code>nat.mul_div_mul</code>, that is <code>m &gt; 0 → m * n / (m * k) = n / k</code>, have the restriction <code>m &gt; 0</code>? Why is it not <code>m ≠ 0</code>?</p>",
        "id": 207167568,
        "sender_full_name": "aris zhu",
        "timestamp": 1597682935
    },
    {
        "content": "<p>they're equivalent of course, because it's a theorem about naturals, but probably there is some standard form, although I very much doubt the standard way to express this is m&gt;0 because &gt; is persona non grata usually.</p>",
        "id": 207172418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597685540
    },
    {
        "content": "<p>One of the reasons to use <code>0 &lt; m</code> instead of <code>m ≠ 0</code> is that <code>0 &lt; m</code> and <code>m ≤ n</code> immediately imply <code>0 &lt; n</code>.</p>",
        "id": 207202220,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597701869
    },
    {
        "content": "<p>Unfortunately, we have no \"normal form\" here; e.g., many theorems about <code>ennreal</code>s use <code>&lt; ∞</code> and many use <code>≠ ∞</code>.</p>",
        "id": 207202267,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597701914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/207172418\">said</a>:</p>\n<blockquote>\n<p>they're equivalent of course, because it's a theorem about naturals, but probably there is some standard form, although I very much doubt the standard way to express this is m&gt;0 because &gt; is persona non grata usually.</p>\n</blockquote>\n<p>What do you mean by \"&gt; is persona non grata usually\"?</p>",
        "id": 207267139,
        "sender_full_name": "aris zhu",
        "timestamp": 1597761461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/207202220\">said</a>:</p>\n<blockquote>\n<p>One of the reasons to use <code>0 &lt; m</code> instead of <code>m ≠ 0</code> is that <code>0 &lt; m</code> and <code>m ≤ n</code> immediately imply <code>0 &lt; n</code>.</p>\n</blockquote>\n<p>So is it a design choice so that other theorems/lemmas can derive results easier?</p>",
        "id": 207267275,
        "sender_full_name": "aris zhu",
        "timestamp": 1597761519
    },
    {
        "content": "<p>what is <code>ennreal</code>? I search on the mathlib and cannot figure what category it means..</p>",
        "id": 207267421,
        "sender_full_name": "aris zhu",
        "timestamp": 1597761592
    },
    {
        "content": "<p>mathlib prefers <code>&lt;</code> and <code>≤</code> over <code>&gt;</code> and <code>≥</code>, hence you'll see <code>m &gt; 0</code> written as <code>0 &lt; m</code> in mathlib.</p>",
        "id": 207267792,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1597761744
    },
    {
        "content": "<p><code>ennreal</code> is here <a href=\"https://leanprover-community.github.io/mathlib_docs/data/real/ennreal.html\">https://leanprover-community.github.io/mathlib_docs/data/real/ennreal.html</a></p>",
        "id": 207267834,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1597761765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/237759-Xena-Summer.20Projects/topic/2020.20Summer.20Projects/near/207267834\">said</a>:</p>\n<blockquote>\n<p><code>ennreal</code> is here <a href=\"https://leanprover-community.github.io/mathlib_docs/data/real/ennreal.html\">https://leanprover-community.github.io/mathlib_docs/data/real/ennreal.html</a></p>\n</blockquote>\n<p>yes I found the link, but I don't understand what <code>ennreal</code> means, so just curious if it stands for something?</p>",
        "id": 207268270,
        "sender_full_name": "aris zhu",
        "timestamp": 1597761969
    },
    {
        "content": "<p>extended (i.e. contains infinity) non-negative reals</p>",
        "id": 207269662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597762598
    },
    {
        "content": "<p>May I know what's wrong with the following?<br>\nI want to say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">l \\in [0, 1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, and after checking through mathlib I believe I should use <code>def Ico (a b : α) := {x | a ≤ x ∧ x &lt; b}</code> in <code>data.set.intervals.basic</code>, so I wrote <code>hl : l ∈ Ico 0 1</code>, but then error message <code>failed to synthesize type class instance for</code> is given. I did <code>import data.set.intervals.basic</code> at the top.</p>",
        "id": 207269867,
        "sender_full_name": "aris zhu",
        "timestamp": 1597762687
    },
    {
        "content": "<p>Try <code>l ∈ Ico (0:\\R) 1</code>.</p>",
        "id": 207271372,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1597763357
    },
    {
        "content": "<p>Hi all! I have finally finished proving my question in Lean! My personal goal for this UROP was to finish proving one question by the end of August, and I managed to do it, even one week faster haha. Thanks for everyone in this channel who has helped me along the way. It was a very different experience I had for proving using code instead of pen and paper. You can checkout my git repo at <a href=\"https://github.com/qsmy41/ICL-UROP---LeanProver\">https://github.com/qsmy41/ICL-UROP---LeanProver</a></p>\n<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> I used two of your lemmas, and in my repo I commented that the two lemmas are from you. I am not sure if this is the right way to do it, and not sure if you mind me using some of your work. Could you give me some suggestions?</p>",
        "id": 207625976,
        "sender_full_name": "aris zhu",
        "timestamp": 1598011327
    },
    {
        "content": "<p>Well done <span class=\"user-mention\" data-user-id=\"298236\">@aris zhu</span> , you can join the club of people who I have indoctrinated :D You should make a better README where you explain in maths terms what the theorem is and how you proved it.</p>",
        "id": 207633986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598016680
    },
    {
        "content": "<p>ok Let me update it!</p>",
        "id": 207634287,
        "sender_full_name": "aris zhu",
        "timestamp": 1598016866
    },
    {
        "content": "<p>I dont mind how you would like to credit.  The way you've done so far is perfectly fine by me :)</p>",
        "id": 207636755,
        "sender_full_name": "Jason KY.",
        "timestamp": 1598018176
    },
    {
        "content": "<p>The discord link is invalid. Is there a new one?</p>",
        "id": 239039173,
        "sender_full_name": "Ed",
        "timestamp": 1621232566
    },
    {
        "content": "<p>Who are you?</p>",
        "id": 239039749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621233007
    },
    {
        "content": "<p>A final year CS undergraduate from the university of Bath. I was speaking to a friend who graduated from maths at ICL last year about category theory and theorem provers. He mentioned lean and that you were welcoming of students from outside ICL. He also mentioned that there was a discord, sent me a link to this forum, and said I should join if I was interested. </p>\n<p>I looked up a few videos on  YouTube and decided I was interested. So, here I am!</p>",
        "id": 239042597,
        "sender_full_name": "Ed",
        "timestamp": 1621235105
    },
    {
        "content": "<p>Did you manage to get in since then?</p>",
        "id": 239570391,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621508188
    }
]