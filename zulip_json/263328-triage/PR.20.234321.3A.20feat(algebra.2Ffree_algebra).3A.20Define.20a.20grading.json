[
    {
        "content": "<p>Today I chose PR 4321 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/4321\">feat(algebra/free_algebra): Define a grading</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> (@eric-wieser) on 2020-09-29<br>\nLabels: awaiting-author</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 231317650,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1616422898
    },
    {
        "content": "<p>For reasons I don't understand, some <code>induction _ using _</code> tactics in that PR started breaking. Easy to fix by switching to <code>apply</code>, but annoying</p>",
        "id": 231322174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616424520
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> being a bit opposed to this approach, and not really liking the use of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra\">docs#add_monoid_algebra</a> for grading as the type doesn't really encode strict enough requirements.</p>\n<p>Since then, I made a bit of progress on making <code>direct_sum</code> viable (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.ring\">docs#direct_sum.ring</a>), but there's no <code>direct_sum.algebra</code> yet.</p>\n<p>At the same time, I've noticed that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.sum_homogeneous_component\">docs#mv_polynomial.sum_homogeneous_component</a> basically uses the same approach I've used in this PR anyway, so maybe <code>add_monoid_algebra</code> is fine as the return type after all.</p>",
        "id": 231322815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616424731
    },
    {
        "content": "<p>The thing which struck me as weird was using <code>polynomial</code> to store a list of elements of the ground ring which, to me, had no right to be being treated as a polynomial.</p>",
        "id": 231328262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616426437
    },
    {
        "content": "<p>That's why I used <code>add_monoid_algebra</code> and not <code>polynomial</code> :)</p>",
        "id": 231333793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616428150
    },
    {
        "content": "<p>The way a grading should work is that I should be able to grade over an arbitrary add_comm_monoid M (not just nat). An M-grading on A is a map from M to add_subgroup A satisfying some cool axioms which could probably be extremely nicely explained using dfinsupp</p>",
        "id": 231337052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616429160
    },
    {
        "content": "<p>I think a weaker version of what you're describing basically exists today as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.gcomm_monoid\">docs#direct_sum.gcomm_monoid</a> (where <code>ι</code> is your M)</p>",
        "id": 231342544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616430855
    },
    {
        "content": "<p>And the related definition <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.gcomm_monoid.of_add_submonoids\">docs#direct_sum.gcomm_monoid.of_add_submonoids</a></p>",
        "id": 231342653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616430898
    },
    {
        "content": "<p>Of course, the axioms like \"the subgroups are disjoint\" is missing, but you don't need that axiom to get a sane ring structure.</p>",
        "id": 231342748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616430938
    },
    {
        "content": "<p>My totally unsubstantiated claim would be for the case of the free algebra, the only interesting grading is the one over <code>nat</code> that that PR provides, or  one derived from that grading</p>",
        "id": 231343011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616431035
    },
    {
        "content": "<p>For a free algebra I can quite imagine that there's only one interesting grading. Looking at the <a href=\"https://en.wikipedia.org/wiki/Graded_ring\">Wikipedia article</a> it starts off with everything nat-graded, remarks that associativity is not needed ( :-) ), then goes on to M-graded things, and then some kind of twisted M-graded things :-/ One now has to make some kind of a decision about what generality to work in. For me, the main thing is that we get to do Proj of a graded ring (which only needs nat grading), and <a href=\"https://stacks.math.columbia.edu/tag/00JL\">in Stacks</a> they stick to nat gradings, so maybe nat grading is fine for now -- I don't have any killer apps for more general gradings.</p>",
        "id": 231362650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616438427
    },
    {
        "content": "<p>Oh, I've just noticed that \"graded modules\" on the stacks page index over <code>R i</code> and <code>M i</code>, which seems like it would be rather more of a headache than what I'd planned for with <code>direct_sum.gmonoid</code> etc</p>",
        "id": 231365347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616439534
    },
    {
        "content": "<p>Regarding associativity, I guess I need to add a <code>direct_sum.gmul_one_class</code> to match <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>'s new <code>mul_one_class</code> and put a <code>non_assoc_semiring</code> instance on <code>direct_sum</code>...</p>",
        "id": 231367007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616440129
    },
    {
        "content": "<p>If we are talking about gradings in general: I've definitely worked with nat^r-gradings, not only nat-gradings,  in my research. I'm not sure, how often gradings by non-commutative groups show up, I think many basic things should go through without assuming it.</p>",
        "id": 231367250,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1616440235
    },
    {
        "content": "<p>The natural example I could think of was that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\R[X_1,X_2,\\ldots,X_n]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> was graded by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\N^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 231368044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616440556
    },
    {
        "content": "<p><del>Yes, I think that's what <code>mv_polynomial.sum_homogeneous_component</code> hints at</del></p>",
        "id": 231370453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616441297
    },
    {
        "content": "<p>That might be a compelling test-case for the current <code>direct_sum</code> API</p>",
        "id": 231371068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616441449
    },
    {
        "content": "<p>That is, to show the direct sum of <code>span (monomial i)</code> gets a ring structure</p>",
        "id": 231371435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616441605
    },
    {
        "content": "<p>The context where I encountered  <code>int^r</code>-gradings was not too exotic either: Let <code>G</code> be a reductive algebraic group over a field of positive characteristic. Let <code>G_r</code> be its <code>r</code>-th Frobenius kernel. Then the category of <code>G_rT</code>-modules (where <code>T</code> is a maximal torus) is equivalent to the category of <code>X(T)</code>-graded <code>G_r</code>-modules where <code>X(T)</code> is the character group of <code>T</code>. Of course this is a little bit outside mathlib's current scope...</p>",
        "id": 231372941,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1616442221
    },
    {
        "content": "<p>I would love to see this sort of stuff in mathlib though. This looks like int^r-gradings?</p>",
        "id": 231375796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616443348
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 231375867,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1616443388
    },
    {
        "content": "<p>Also, my favourite computation of the cohomology of projective space uses Z^n-gradings:</p>\n<p><a href=\"https://stacks.math.columbia.edu/tag/01XS\">https://stacks.math.columbia.edu/tag/01XS</a></p>",
        "id": 231429692,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616483361
    },
    {
        "content": "<p>Maybe, gradings by non-commutative groups sometimes arise implicitly in representation theory: the regular representation is graded by the group itself, though in that case you usually outsource the grading to the choice of basis.</p>",
        "id": 231429783,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616483426
    },
    {
        "content": "<p>Ok so there are real world examples of int^n gradings</p>",
        "id": 231436001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616488085
    },
    {
        "content": "<p>Although as a reminder that's not really in scope for the PR that started this conversation, which is specifically about grading the free algebra</p>",
        "id": 231436961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616488644
    },
    {
        "content": "<p>But this conversation encouraged me to write the now-merged <a href=\"https://github.com/leanprover-community/mathlib/issues/6825\">#6825</a>, whixh added the first part of an N-grading for the multivariate polynomials (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.is_homogeneous.homogeneous_submodule.gcomm_monoid\">docs#mv_polynomial.is_homogeneous.homogeneous_submodule.gcomm_monoid</a>)</p>",
        "id": 231437107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616488726
    }
]