[
    {
        "content": "<p>Today I chose issue 2710 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2710\">More on quotients of categories</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> (@rwbarton) on 2020-05-17<br>\nLabels: feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 220377521,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1608301651
    },
    {
        "content": "<p>Today I chose issue 2710 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2710\">More on quotients of categories</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> (@rwbarton) on 2020-05-17<br>\nLabels: feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 229667883,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1615386241
    },
    {
        "content": "<p>Today I chose issue 2710 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2710\">More on quotients of categories</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> (@rwbarton) on 2020-05-17<br>\nLabels: feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 233084934,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1617547162
    },
    {
        "content": "<p>Today I chose issue 2710 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2710\">More on quotients of categories</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> (@rwbarton) on 2020-05-17<br>\nLabels: feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 255773829,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1633106973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360456\">Random Issue Bot</span> <a href=\"#narrow/stream/263328-triage/topic/issue.20.232710.3A.20More.20on.20quotients.20of.20categories/near/255773829\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2710\">More on quotients of categories</a></strong><br>\nCreated by <span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> (@rwbarton) on 2020-05-17<br>\nLabels: feature-request</p>\n</blockquote>\n<p>Just updating this issue (crossposted on github). The current state of mathlib, after @b-mehta's <a href=\"https://github.com/leanprover-community/mathlib/issues/7501\">#7501</a>, is that we have a class</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A `hom_rel` is a congruence when it's an equivalence on every hom-set, and it can be composed</span>\n<span class=\"sd\">from left and right. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">congruence</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">hom_rel</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">},</span> <span class=\"n\">is_equiv</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">comp_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g'</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">comp_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and a lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">functor_map_eq_iff</span> <span class=\"o\">[</span><span class=\"n\">congruence</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">functor</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">functor</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f'</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>This is not the API setup that @rwbarton proposed above: in particular we still only have <code>category.quotient</code> (which would be Reid's proposed <code>category.quot</code>), rather than having two separate constructions.</p>\n<p>I think this issue should remain open --- Reid's API is still an improvement over what we have. Happily, after the subsequent PRs, I think it would be quite easy to implement. It's just a bit of refactoring.</p>",
        "id": 255811314,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633124439
    },
    {
        "content": "<p>Today I chose issue 2710 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2710\">More on quotients of categories</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> (@rwbarton) on 2020-05-17<br>\nLabels: feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 273812590,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1646230412
    },
    {
        "content": "<p>Today I chose issue 2710 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2710\">More on quotients of categories</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> (@rwbarton) on 2020-05-17<br>\nLabels: feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 287197153,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1655993991
    },
    {
        "content": "<p>Today I chose issue 2710 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2710\">More on quotients of categories</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> (@rwbarton) on 2020-05-17<br>\nLabels: feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 313813655,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1670162891
    }
]