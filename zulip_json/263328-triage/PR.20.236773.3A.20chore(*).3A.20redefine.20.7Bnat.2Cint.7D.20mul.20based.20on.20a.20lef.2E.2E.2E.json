[
    {
        "content": "<p>Today I chose PR 6773 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/6773\">chore(*): redefine {nat,int} mul based on a left-smul</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> (@pechersky) on 2021-03-19<br>\nLabels: RFC, awaiting-review</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 233327278,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1617719089
    },
    {
        "content": "<p>Can I have a clarification about whether Sebastien's refactoring of add_comm_group bundling the nat and int actions will make this refactor redundant? I am concerned that this refactor makes Lean 3 and Lean 4 diverge.</p>",
        "id": 233342671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617723732
    },
    {
        "content": "<p>I have no idea!</p>",
        "id": 233343183,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617723941
    },
    {
        "content": "<p>My understanding was that both this refactor and the \"add the nat and int action to a group\" refactor have the goal of killing a diamond, but I am unclear about whether these are different diamonds, or related, or what.</p>",
        "id": 233343529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617724077
    },
    {
        "content": "<p>The \"add the nat and int action to a group\" refactor kills <del>all the diamonds</del> diamonds caused by composite types, this kills the diamond that the nat and int semimodules form with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.to_mul_action\">docs#monoid.to_mul_action</a></p>",
        "id": 233348889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617726132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you have any idea about this 2^17-1 business? <a href=\"https://github.com/leanprover-community/mathlib/pull/6773#discussion_r598949926\">https://github.com/leanprover-community/mathlib/pull/6773#discussion_r598949926</a> . </p>\n<p>I decided that I don't care if Lean 3 and Lean 4 diverge with their definitions of int. Am I right in thinking that if we don't like Lean 4 ints then we can just make our own? Leo hasn't even used <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> notation for Lean 4's Int.</p>",
        "id": 233554996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617826980
    },
    {
        "content": "<p>I think that Sebastien has made some real breakthroughs recently with his observations about the interaction of nat and int with our other types. All these actions have built up organically because mathematicians have needed them, but now he has seen a new way to do it. I'm a little surprised that these sorts of issues have not shown up in the other dependent type theory provers.</p>",
        "id": 233555268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617827107
    },
    {
        "content": "<p>There appears to be a change in the unfolding which is causing problems. Here's a MWE without using norm_num:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"c1\">-- set_option pp.numerals false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.type_context.is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.type_context.is_def_eq_detail</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">comm_semiring.mul</span> <span class=\"n\">nat</span> <span class=\"n\">nat.comm_semiring</span> <span class=\"mi\">31</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">nat.mul</span> <span class=\"mi\">31</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">comm_semiring.mul</span> <span class=\"n\">nat</span> <span class=\"n\">nat.comm_semiring</span> <span class=\"mi\">31</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">left</span><span class=\"o\">:</span> <span class=\"n\">nat.mul</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">comm_semiring.mul</span> <span class=\"n\">nat</span> <span class=\"n\">nat.comm_semiring</span> <span class=\"mi\">31</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">left</span><span class=\"o\">:</span> <span class=\"n\">nat.smul</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"mi\">1</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">comm_semiring.mul</span> <span class=\"n\">nat</span> <span class=\"n\">nat.comm_semiring</span> <span class=\"mi\">31</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">after</span> <span class=\"n\">whnf_core</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"mi\">1</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"mi\">1</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">comm_semiring.mul</span> <span class=\"n\">nat</span> <span class=\"n\">nat.comm_semiring</span> <span class=\"mi\">31</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]:</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"mi\">1</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"mi\">1</span> <span class=\"n\">rec</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">30</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n   <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n      <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n         <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n            <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n               <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n                  <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 233563573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617829964
    },
    {
        "content": "<p>A missing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/id_rhs\">docs#id_rhs</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/id_delta\">docs#id_delta</a>?</p>",
        "id": 233565904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617830636
    },
    {
        "content": "<p>The old definition inserted various markers as part of the equation compiler</p>",
        "id": 233566039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617830668
    }
]