[
    {
        "content": "<p>Today I chose PR 5521 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/5521\">feat(analysis/calculus/deriv): let simp compute deriv of <code>x⁻¹</code></a></strong><br>\nCreated by @<strong>None</strong> (@hrmacbeth) on 2020-12-29<br>\nLabels: awaiting-author</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 231029765,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1616163690
    },
    {
        "content": "<p>There is nothing really wrong with this PR.  It just has a long, ugly proof which should be golfed before it joins mathlib.  I'll post it here in case anyone is inspired.</p>",
        "id": 231070999,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616179286
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">normed_field.continuous_at_fpow_iff</span>\n  <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">continuous_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">lift</span> <span class=\"n\">m</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">continuous_pow</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">hm</span><span class=\"bp\">|</span><span class=\"n\">hm</span><span class=\"bp\">|</span><span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_le.mpr</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">or_false</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">],</span>\n    <span class=\"n\">lift</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">neg_pos.mpr</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hk'</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"bp\">-↑</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">eq_neg_of_eq_neg</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hk'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"k\">suffices</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">⁻¹∥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">]</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at_top</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">normed_field.punctured_nhds_ne_bot</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">),</span>\n        <span class=\"n\">apply</span> <span class=\"n\">not_tendsto_nhds_of_tendsto_at_top</span> <span class=\"n\">h'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">continuous_norm.continuous_at.comp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_within_at.tendsto</span> <span class=\"o\">},</span>\n      <span class=\"n\">refine</span> <span class=\"n\">normed_field.tendsto_norm_inverse_nhds_within_0_at_top.comp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"n\">tendsto</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">⊓</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">filter.tendsto_inf</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">tendsto_nhds_within_of_tendsto_nhds</span><span class=\"o\">,</span>\n        <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">continuous_pow</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at.tendsto</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">zero_pow</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">hk'</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n          <span class=\"n\">exact_mod_cast</span> <span class=\"n\">neg_lt_zero.mp</span> <span class=\"n\">hm</span> <span class=\"o\">},</span>\n        <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tendsto_principal</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">set.univ</span><span class=\"o\">,</span> <span class=\"n\">univ_mem_sets</span><span class=\"o\">,</span> <span class=\"o\">{(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">𝕜</span><span class=\"o\">)}</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set.univ_inter</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mt</span> <span class=\"n\">pow_eq_zero</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">continuous_at.comp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">continuous_pow</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">continuous_at_inv'</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pow_ne_zero</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">fpow_zero</span><span class=\"o\">,</span> <span class=\"n\">int.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">continuous_at_const</span><span class=\"o\">,</span> <span class=\"n\">rfl.ge</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 231071626,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616179549
    },
    {
        "content": "<p>Does this get any better with my <a href=\"https://github.com/leanprover-community/mathlib/issues/6757\">#6757</a> proving more things about <code>fpow</code> and having that be available via <code>norm_fpow</code>?</p>",
        "id": 231075074,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616180934
    },
    {
        "content": "<p>Or is that just covered by your <code>{ simp [hm, fpow_zero, int.cast_zero, zero_mul, continuous_at_const, rfl.ge] }</code>?</p>",
        "id": 231075134,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616180960
    },
    {
        "content": "<p>Today I chose PR 5521 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/5521\">feat(analysis/calculus/deriv): let simp compute deriv of <code>x⁻¹</code></a></strong><br>\nCreated by @<strong>None</strong> (@hrmacbeth) on 2020-12-29<br>\nLabels: awaiting-author, merge-conflict</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 264307662,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1639059630
    },
    {
        "content": "<p>Today I chose PR 5521 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/5521\">feat(analysis/calculus/deriv): let simp compute deriv of <code>x⁻¹</code></a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> (@hrmacbeth) on 2020-12-29<br>\nLabels: awaiting-author, merge-conflict</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 266690197,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1641219468
    }
]