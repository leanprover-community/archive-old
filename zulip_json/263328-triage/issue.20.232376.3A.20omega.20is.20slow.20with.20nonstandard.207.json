[
    {
        "content": "<p>Today I chose issue 2376 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2376\">omega is slow with nonstandard 7</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2020-04-10<br>\nLabels: meta</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 216731317,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1605363369
    },
    {
        "content": "<p>How about I close this issue and just copy the example into <a href=\"https://github.com/leanprover-community/mathlib/issues/1484\">#1484</a>?</p>",
        "id": 216733524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605366039
    },
    {
        "content": "<p>Oh -- Rob already mentions this issue in <a href=\"https://github.com/leanprover-community/mathlib/issues/1484\">#1484</a>. How about I close this issue? Presumably that won't make Rob's comment <a href=\"https://github.com/leanprover-community/mathlib/issues/1484#issuecomment-611962821\">https://github.com/leanprover-community/mathlib/issues/1484#issuecomment-611962821</a> magically disappear or be corrupted in any way? If someone with some github knowledge confirms closing <a href=\"https://github.com/leanprover-community/mathlib/issues/2376\">#2376</a> won't break that link, this issue can be closed.</p>",
        "id": 216733603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605366170
    },
    {
        "content": "<p>I don't think closing issues as part of other issues that are grab bags is really helpful</p>",
        "id": 216733694,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605366325
    },
    {
        "content": "<p>One argument for closing it is that the specific problem which the issue raises was one which had arisen in a slightly artificial situation (I think caused by <code>fin_cases</code>) and which might not show up much. Another argument for closing it is that we'll have one fewer issue. The issue with omega is unfortunately clear -- it needs to be rewritten. I cannot imagine anyone expending any energy in porting what we have to Lean 4.</p>",
        "id": 216733748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605366419
    },
    {
        "content": "<p>We could merge all open issues into one and that would reduce the number of issues too!</p>",
        "id": 216733763,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605366474
    },
    {
        "content": "<p>but maybe in the case of <code>omega</code> where we don't really expect anyone to fix the issues it's reasonable</p>",
        "id": 216733811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605366532
    },
    {
        "content": "<p>I see. So you're arguing that \"omega is broken\" is somehow not a good issue, because there is a chance that someone might come along and fix some subset of them.</p>",
        "id": 216733816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605366560
    },
    {
        "content": "<p>Right</p>",
        "id": 216733820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605366581
    },
    {
        "content": "<p>not sure if some kind of tagging organization would help</p>",
        "id": 216733870,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605366644
    },
    {
        "content": "<p>e.g. we could close all omega issues with wontfix, or maybe just mark them somehow?</p>",
        "id": 216733875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605366668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you had thoughts about reimplementing <code>omega</code> a while back, has that been set aside?</p>",
        "id": 216734415,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605367783
    },
    {
        "content": "<p>I'm not actively working on it but I haven't given up on the idea</p>",
        "id": 216743321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605379226
    },
    {
        "content": "<p>Today I chose issue 2376 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2376\">omega is slow with nonstandard 7</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2020-04-10<br>\nLabels: meta</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 265482185,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1639923427
    },
    {
        "content": "<p>My understanding is that this is wontfix</p>",
        "id": 265484074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639926013
    },
    {
        "content": "<p>Let's see if mathlib compiles without <code>tactic.omega</code>, see <a href=\"https://github.com/leanprover-community/mathlib/tree/YK-no-omega\">branch#YK-no-omega</a> (I only remove an import, not the actual tactic).</p>",
        "id": 265485537,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639928037
    },
    {
        "content": "<p>It should because we don't <code>import tactic</code> outside of <code>tests</code></p>",
        "id": 265485667,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639928188
    },
    {
        "content": "<p>There is a linter that checks against <code>import tactic.omega</code></p>",
        "id": 265485905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639928536
    },
    {
        "content": "<p>And also import <code>tactic</code> so there is no way to cheat it by importing <code>tactic</code> and getting omega transitively instead</p>",
        "id": 265486359,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639929302
    },
    {
        "content": "<p>Why do we have <code>tactic.default</code>? Is it for external projects?</p>",
        "id": 265486411,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639929386
    },
    {
        "content": "<p>So I don't really see the point of this, omega is a useful tactic still, even if it won't be ported any time I get to an annoying <code>a - 1 - b + 1 = a - b</code> in nat type goals I hit it with omega, even if I have to make a different proof if I PR to mathlib.</p>",
        "id": 265486412,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639929388
    },
    {
        "content": "<p>Its for development</p>",
        "id": 265486416,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639929398
    },
    {
        "content": "<p>I can just do <code>import tactic</code> then when I PR to mathlib the linter will complain and I'll minimize the imports</p>",
        "id": 265486425,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639929433
    },
    {
        "content": "<p>Then we should rewrite the comment at the top of <code>tactic.default</code>.</p>",
        "id": 265486441,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639929469
    },
    {
        "content": "<p>Closed <a href=\"https://github.com/leanprover-community/mathlib/pull/10909\">#10909</a></p>",
        "id": 265486488,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639929496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/263328-triage/topic/issue.20.232376.3A.20omega.20is.20slow.20with.20nonstandard.207/near/265486412\">said</a>:</p>\n<blockquote>\n<p>So I don't really see the point of this, omega is a useful tactic still, even if it won't be ported any time I get to an annoying <code>a - 1 - b + 1 = a - b</code> in nat type goals I hit it with omega, even if I have to make a different proof if I PR to mathlib.</p>\n</blockquote>\n<p>There's 0 hope of porting current <code>omega</code> to Lean 4, any Lean 4 version will be a full reimplementation and I don't know if that will happen before d-day.</p>",
        "id": 265486491,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639929502
    },
    {
        "content": "<p>I understand that</p>",
        "id": 265486497,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639929545
    },
    {
        "content": "<p>I'm just saying for the purpose of working on Lean 3 its still a useful way of checking is my goal true, or getting to a sorry free proof. Much like <code>tidy</code> or something where in many cases you replace it by a better proof before PRing</p>",
        "id": 265486585,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639929617
    },
    {
        "content": "<p>Oh, sure. I didn't see <a href=\"https://github.com/leanprover-community/mathlib/pull/10909\">#10909</a>, agreed that isn't necessary</p>",
        "id": 265486623,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639929655
    }
]