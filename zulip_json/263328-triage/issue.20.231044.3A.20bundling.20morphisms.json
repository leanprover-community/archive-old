[
    {
        "content": "<p>Today I chose issue 1044 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/1044\">bundling morphisms</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2019-05-17<br>\nLabels: needs-refactor</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 223381293,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1611153920
    },
    {
        "content": "<p>My current understanding is that we would like to retain <code>is_linear_map</code> and the nature of the refactor is that it should be changed from a structure to a class. Is this correct? To be frank I am confused about what we are tying to do with that <code>deprecated</code> directory. It would be nice to hear some advice from the maintainers about where the issue of bundling morphisms is going. Is it clear what is happening with Lean 4? Are we going back to unbundled morphisms and classes (like <code>is_linear_map</code>)? If so, what should we be doing with Lean 3?</p>",
        "id": 223381731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611154090
    },
    {
        "content": "<p>There was another proposal that <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> and I discussed somewhere <del>either</del> <a href=\"#narrow/stream/113488-general/topic/Typeclasses.20for.20morphisms/near/215428568\">here on Zulip</a> <del>or on Github</del> that suggested changing from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_whatever_map</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_add'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_whatever_map'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_add'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Which resolves the problem with <code>is_whatever_map.map_add'</code> being ineligible for <code>simp</code> (which I think is why they were deprecated in the first place)</p>",
        "id": 223390155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611157164
    },
    {
        "content": "<p>But still has the advantage that lemmas can say \"well obviously a linear_map is an add_monoid_hom\" in the same way we're used to saying \"well obviously a group is a monoid\", rather than having to play some horrible dance with <code>to_add_monoid_hom</code></p>",
        "id": 223390303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611157228
    },
    {
        "content": "<p>Today I chose issue 1044 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/1044\">bundling morphisms</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2019-05-17<br>\nLabels: needs-refactor</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 228416098,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1614694638
    },
    {
        "content": "<p>Good question. I opened this issue to make a note of the fact that we had two ways of doing the same thing. Now one is deprecated. I am not clear on the state of either this issue or the more general issue of what the heck is supposed to be happening with the <code>deprecated</code> stuff. I can ask my questions in the issue or I can ask them here. The questions are:</p>\n<p>1) Unbundled morphisms between algebraic structures. Example: <code>deprecated/group.lean</code> defines a class <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_monoid_hom\">docs#is_monoid_hom</a> . Is the general feeling of the community that this structure is useful but shouldn't be a class, so the action here is to do a refactor which makes it a structure not a class and then moves this file back to the group_theory directory with a module doc explaining what is going on? Or is the plan to remove this structure completely?</p>\n<p>2) Unbundled substructures. Example: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_subgroup\">docs#is_subgroup</a> defined in <code>deprecated/subgroup.lean</code>. Same question.</p>\n<p>3) What are the plans for Lean 4? What would be a good experiment?</p>",
        "id": 228422588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614696893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> ran into an interesting situation where simply using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">bundled_hom</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>means that we can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_add_monoid_hom</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bundled_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">is_add_monoid_hom.map_add</span>\n</code></pre></div>\n<p>and <code>simp</code> can actually fire on <code>map_add</code>, which I believe does not work with the current version of <code>is_add_monoid_hom</code></p>",
        "id": 228423095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614697081
    },
    {
        "content": "<p>With the key reason here being that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_add_monoid_hom.map_add\">docs#is_add_monoid_hom.map_add</a> has <code>f</code> as a head symbol, but the one in that snippet has <code>coe_fn</code> as the head symbol</p>",
        "id": 228423375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614697187
    },
    {
        "content": "<p>My intuition is saying that the typeclass <code>is_add_monoid_hom f</code>, rather than <code>add_monoid_hom A B</code>, may not be nice to work with since <code>f</code> will have various defeq-but-not-syntax-eq representations in practice. So finding the instance may depend on how much the term gets unfolded (or did <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span> solve this?), and there might be issues of the form \"motive is incorrect\" if you rewrite <code>f</code>.</p>",
        "id": 228426005,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614698031
    },
    {
        "content": "<p>With typeclasses that use types as a parameter, this is not such an issue since you don't want to deal with equality of types anyway.</p>",
        "id": 228426129,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1614698065
    },
    {
        "content": "<p>Today I chose issue 1044 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/1044\">bundling morphisms</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2019-05-17<br>\nLabels: needs-refactor</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 233829566,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1617978278
    },
    {
        "content": "<p>I don't have anything to add here. I would still be interested in hearing what the plan is with the deprecated <code>is_</code> predicates. Is the idea that we're supposed to be changing them from classes to structures and then marking them as undeprecated?</p>",
        "id": 233830572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617978648
    },
    {
        "content": "<p>Today I chose issue 1044 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/1044\">bundling morphisms</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2019-05-17<br>\nLabels: needs-refactor</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 256418885,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1633529926
    },
    {
        "content": "<p>Unbundled morphisms are now deprecated but the last comment by Eric on the issue might mean that there are still some interesting questions here. Maybe we could close this issue and open a new one? Very few non-deprecated files import deprecated files by the way, it would be a nice project to finish the job, I just got tired. There is not much left to do.</p>",
        "id": 256420556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633530555
    },
    {
        "content": "<p>Today I chose issue 1044 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/1044\">bundling morphisms</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2019-05-17<br>\nLabels: needs-refactor</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 259395158,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1635430772
    },
    {
        "content": "<p>This issue could be closed as far as I'm concerned -- but there is this comment from Eric in September which might be worth keeping around.</p>",
        "id": 259398337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635431944
    }
]