[
    {
        "content": "<p>Today I chose PR 5574 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/5574\">feat(archive/100-theorems-list): Ballot Problem</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> (@b-mehta) on 2021-01-02<br>\nLabels: WIP</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 223650831,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1611327190
    },
    {
        "content": "<p>I haven't really looked at this in a while - the primary sticking point is that it defines a probability on finsets in a naive way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `Prob s P` is the probability that a random element from `s` satisfies the predicate `P`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Prob</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">/</span> <span class=\"n\">s.card</span>\n</code></pre></div>\n<p>which is good enough to state and prove the ballot problem, but not really much else of any interest; and isn't linked to the measure theory library. I was thinking about extending it to non-uniform but finite sample spaces which would be enough to do a big portion of probabilistic combinatorics (in particular probabilistic graph theory) but it basically just was the same as weighted sums and center mass in mathlib already so I pretty quickly stopped. At some point I'd like to get back to this and create API for probabilistic combinatorics, possibly moving <code>finset.center_mass</code> out of <code>analysis/convex/basic</code> and adapting <code>measure_theory/probability_mass_function</code>. The sort of API I have in mind would have a structure <code>finite_probability_space</code> containing a finite sample space and a pmf on it, and functions to express the probability of an event and the expectation of a function on it. One of the important things it would need is a definition of the space <code>G(n,p)</code> of graphs with n vertices and each edge present independently with probability <code>p</code> - obviously this is just the product measure of <code>n choose 2</code> bernoulli variables but it's not obvious to me that you can build the resultant probability space to explicitly have its sample space as graphs on n vertices. Perhaps the people who've thought about measure theory and probability theory in Lean can weigh in?</p>",
        "id": 223685775,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1611343067
    },
    {
        "content": "<p>As a concrete example, let X be the number of triangles in a graph from G(n,p), then I'd like to show that E[X] is <code>(n choose 3) * p^3</code> and the variance of X is <code>&lt;= n^3 p^3 + n^4 p^5</code> (if it matters, specifically <code>(n choose 3) (p^3 - p^6) + (n choose 3) * 3 * (n - 3) * (p^5 - p^6)</code></p>",
        "id": 223686190,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1611343253
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>, who started probability theory in mathlib literally today (<a href=\"https://github.com/leanprover-community/mathlib/issues/5848\">#5848</a>), has some ideas.</p>",
        "id": 223686877,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611343579
    },
    {
        "content": "<p>(Maybe that's a slight exaggeration, <code>measure_theory/probability_mass_function</code> already exists as you noted.)</p>",
        "id": 223687137,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611343722
    },
    {
        "content": "<p>Is your sample space the same as <code>(size-2 subsets of fin n) → Prop</code>?  Can you use the product measure on this, from Floris' work? (if that's not overkill).</p>",
        "id": 223687446,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611343855
    },
    {
        "content": "<p>where the measure on <code>Prop</code> is <code>p</code> for true, <code>1 - p</code> for false.</p>",
        "id": 223687551,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611343898
    },
    {
        "content": "<p>I don't think this is overkill, but my concern is that doing it like that could be awkward to work with in practice - <code>(size-2 subsets of fin n) -&gt; Prop</code> is ultimately the same thing as the sample space I want, but doing the translation in Lean of probability spaces to one on <code>simple_graph (fin n)</code> feels like it could get painful?</p>",
        "id": 223689714,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1611344844
    },
    {
        "content": "<p>Maybe it works to make the structure \"internal\" ... here's one idea:  Define a measure on a finite Boolean algebra by giving each atom <code>i</code> a probability <code>p_i</code>, and then make the measure of any other element the product of <code>p_i</code> for each atom less than it with <code>(1 - p_i)</code> for each atom not less than it.  Then, put a Boolean algebra structure on <code>simple_graph (fin n)</code>, where <code>≤</code> means the edges of the first are contained in the edges of the second.</p>",
        "id": 223692026,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611345871
    },
    {
        "content": "<p>The math here is completely untested, but you get the idea.  Another way would be (if we have \"internal\" direct products yet) to put an internal direct product structure on <code>simple_graph (fin n)</code>, allowing you to realize the <code>(size-2 subsets of fin n) → Prop</code> idea \"from the inside\".</p>",
        "id": 223692250,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1611345967
    },
    {
        "content": "<p>Today I chose PR 5574 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/5574\">feat(archive/100-theorems-list): Ballot Problem</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> (@b-mehta) on 2021-01-02<br>\nLabels: WIP</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 232764920,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1617287054
    },
    {
        "content": "<p>Today I chose PR 5574 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/5574\">feat(archive/100-theorems-list): Ballot Problem</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> (@b-mehta) on 2021-01-02<br>\nLabels: WIP, please-adopt</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 272121226,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1645021056
    },
    {
        "content": "<p>Hmm, this has some probability stuff, like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `Prob s P` is the probability that a random element from `s` satisfies the predicate `P`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Prob</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">/</span> <span class=\"n\">s.card</span>\n</code></pre></div>\n<p>Do we have things like that in mathlib by now?</p>",
        "id": 272122061,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1645021406
    },
    {
        "content": "<p>Not that I know of, perhaps <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> or <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> will know better! As I mentioned in the past, the probability stuff which I did here in a <em>very</em> ad-hoc way is the primary objection to merging this (in my view, at least)</p>",
        "id": 272139363,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1645028858
    }
]