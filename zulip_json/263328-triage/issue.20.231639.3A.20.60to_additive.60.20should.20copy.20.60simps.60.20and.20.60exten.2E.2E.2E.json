[
    {
        "content": "<p>Today I chose issue 1639 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/1639\"><code>to_additive</code> should copy <code>simps</code> and <code>extensionality</code></a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> (@semorrison) on 2019-10-31<br>\nLabels: feature-request, meta</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 229856354,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1615472790
    },
    {
        "content": "<p>Today I chose issue 1639 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/1639\"><code>to_additive</code> should copy <code>simps</code> and <code>extensionality</code></a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> (@semorrison) on 2019-10-31<br>\nLabels: meta, feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 260662301,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1636381163
    },
    {
        "content": "<p>I think this is closed by <a href=\"https://github.com/leanprover-community/mathlib/issues/5487\">#5487</a> as <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> said there, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> is there anything else you can think of that <code>to_additive</code> should be able to do but can't right now?</p>",
        "id": 260678874,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636387900
    },
    {
        "content": "<p>I tried to <code>to_additive</code>-ize <code>has_continuous_smul</code> to <code>has_continuous_vadd</code> the other day and couldn't get anything working ... but I didn't investigate why it didn't work, nor do I know whether it's supposed to be in scope.</p>",
        "id": 260681827,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636389046
    },
    {
        "content": "<p>The definition of the class won't work as its a structure I think, but any subsequent lemmas should work.</p>",
        "id": 260682149,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636389176
    },
    {
        "content": "<p>In order to generate structures properly in a nice way I think lean core has to be modified to expose some more functions to tactics.</p>",
        "id": 260682224,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636389208
    },
    {
        "content": "<p>I did try it that way, and I believe it still failed.  Let me try to reconstruct.</p>",
        "id": 260682261,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636389225
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>@[to_additive] failed. Type mismatch in additive declaration.\nFor help, see the docstring of `to_additive.attr`, section `Troubleshooting`.\nFailed to add declaration\n&lt;theorem filter.tendsto.vadd : ‚àÄ {M : Type u_1} {Œ± : Type u_2} {Œ≤ : Type u_3} [_inst_1 : topological_space M]\n[_inst_2 : topological_space Œ±] [_inst_3 : has_vadd M Œ±] [_inst_4 : has_continuous_smul M Œ±] {f : Œ≤ ‚Üí M}\n{g : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {c : M} {a : Œ±},\n  tendsto f l (ùìù c) ‚Üí tendsto g l (ùìù a) ‚Üí tendsto (Œª (x : Œ≤), f x +·µ• g x) l (ùìù (c +·µ• a)) := Œª\n{M : Type u_1} {Œ± : Type u_2} {Œ≤ : Type u_3} [_inst_1 : topological_space M] [_inst_2 : topological_space Œ±]\n[_inst_3 : has_vadd M Œ±] [_inst_4 : has_continuous_smul M Œ±] {f : Œ≤ ‚Üí M} {g : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {c : M}\n{a : Œ±} (hf : tendsto f l (ùìù c)) (hg : tendsto g l (ùìù a)),\n  (continuous_smul.tendsto (c, a)).comp (hf.prod_mk_nhds hg)&gt;\n\nNested error message:\n\ntype mismatch at application\n  @has_continuous_smul M Œ± _inst_3\nterm\n  _inst_3\nhas type\n  has_vadd M Œ±\nbut is expected to have type\n  has_scalar M Œ±\n</code></pre></div>",
        "id": 260682838,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636389479
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/has_continuous_vadd\">branch#has_continuous_vadd</a></p>",
        "id": 260682972,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636389525
    },
    {
        "content": "<p>Let me know if I'm doing it wrong!</p>",
        "id": 260683005,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636389541
    },
    {
        "content": "<p>Ah  the problem is that <code>to_additive</code> doesn't know its meant to turn <code>has_continuous_smul</code> into <code>has_continuous_vadd</code>, if you add <code>attribute [to_additive has_continuous_vadd] has_continuous_smul</code> after you've manually defined has_continuous_vadd, I believe the filter lemma below will to_additive properly</p>",
        "id": 260683836,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636389861
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10227\">#10227</a></p>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>!</p>",
        "id": 260687662,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636391542
    },
    {
        "content": "<p>Yes, this issue is resolved, I closed it.</p>",
        "id": 260695187,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636394498
    }
]