[
    {
        "content": "<p>Today I chose issue 408 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/408\">transporting definitions and theorems along isomorphisms.</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2018-10-08<br>\nLabels: feature-request, meta</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 216876521,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1605536385
    },
    {
        "content": "<p>I think it is still relevant. I want to be able to prove that if a mathematical statement is true for one specific localisation of R at S then it's true for all of them. There no recent updates and nobody is making progress because Mario has suggested that the issue is too broad/ill-specified, and right now when I run into these issues I tend to deal with them by hand.</p>",
        "id": 216880268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605538089
    },
    {
        "content": "<p>I guess the issue is that I don't say what a \"mathematical statement\" is here. I could instead give ten examples.</p>",
        "id": 216880415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605538159
    },
    {
        "content": "<p>This issue was also discussed earlier at <a href=\"#narrow/stream/263328-triage/topic/random.20issue.3A.20transporting.20definitions.20and.20theorems.20along.2E.2E.2E/near/215193597\">https://leanprover.zulipchat.com/#narrow/stream/263328-triage/topic/random.20issue.3A.20transporting.20definitions.20and.20theorems.20along.2E.2E.2E/near/215193597</a></p>",
        "id": 216881192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605538469
    },
    {
        "content": "<p>(Random Issue Bot knows not to repeat itself now, that was from before the format change.)</p>",
        "id": 216881947,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605538778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> what happens when all the issues have been posted?</p>",
        "id": 216889644,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1605541918
    },
    {
        "content": "<p>I think it avoids reposting any issue where the corresponding Zulip thread has had activity in the past month, or something like that</p>",
        "id": 216890662,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605542326
    },
    {
        "content": "<p>If there are none the script presumably crashes</p>",
        "id": 216890701,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605542341
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/azure-scripts/blob/master/post_issue_on_zulip.py\">https://github.com/leanprover-community/azure-scripts/blob/master/post_issue_on_zulip.py</a></p>",
        "id": 216890702,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605542342
    },
    {
        "content": "<p>Yep, that'll give <code>IndexError: Cannot choose from an empty sequence</code></p>",
        "id": 216891540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605542642
    },
    {
        "content": "<p>Clearly <code>random.choice</code> should just <code>return 37</code> rather than being partial...</p>",
        "id": 216891634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605542663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/263328-triage/topic/issue.20.23408.3A.20transporting.20definitions.20and.20theorems.20along.20i.2E.2E.2E/near/216880415\">said</a>:</p>\n<blockquote>\n<p>I guess the issue is that I don't say what a \"mathematical statement\" is here. I could instead give ten examples.</p>\n</blockquote>\n<p>Isn't this a nontrivial question? It seems that \"mathematical statement\" is \"dependent prop which only depends on the R-algebra structure\" and I have no idea how to say this precisely. Unfortunately, I can't write \"I know it when I see it\" in lean :(</p>",
        "id": 216895544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605544207
    },
    {
        "content": "<p>It comes down to something like \"definable without using <code>choice</code> or equality between types\"--but the second condition is kind of subtle because the statement is likely to involve equality between elements of a ring (say), yet there's nothing preventing you from writing <code>ring Type</code></p>",
        "id": 216895997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544397
    },
    {
        "content": "<p>Yeah, exactly, it depends on the signature right?</p>",
        "id": 216896257,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605544511
    },
    {
        "content": "<p>For example if I name a few elements in the localization, things will break (unless the isomorphism is compatible with those elements)</p>",
        "id": 216896281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605544523
    },
    {
        "content": "<p>right, there might be multiple isomorphisms and/or compatibility conditions involved</p>",
        "id": 216896537,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605544628
    },
    {
        "content": "<p>I think the plan was to have a recursively defined <code>transportable</code> tag for, say, data and predicates on rings, meaning \"transportable along ring isomorphisms\"</p>",
        "id": 216906878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605549080
    },
    {
        "content": "<p>Would there be a different <code>transportable</code>flag for each algebraic structure?</p>",
        "id": 216915738,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605553090
    },
    {
        "content": "<p>E.g. <code>ring_transportable</code> <code>monoid_transportable</code>, etc.?</p>",
        "id": 216915843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605553128
    },
    {
        "content": "<p>I...guess?</p>",
        "id": 216916415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605553400
    },
    {
        "content": "<p>Scott is the person to talk to about this, I think he actually started throwing something together when I was whingeing about this years ago.</p>",
        "id": 216916473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605553433
    },
    {
        "content": "<p>I'm asking mostly because of all those discussions about universal algebra -- this would complicate things!</p>",
        "id": 216916480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605553436
    },
    {
        "content": "<p>Ideally you might have something like <code>transportable P</code> where <code>P : \\Pi (R : Type*) [ring R], Prop</code> and then it would tell you that if you plug in two rings and a ring isomorphism, you get an <code>iff</code></p>",
        "id": 216917390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605553909
    },
    {
        "content": "<p>Right! Or even <code>P : \\Pi (R : Type*) [ring R], Sort*</code> so that you can transport data too :)</p>",
        "id": 216917572,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605553988
    },
    {
        "content": "<p>I posted this in the last thread as well but my attempt at this is at <a href=\"https://github.com/rwbarton/scone/blob/master/src/scone/t2.lean\">https://github.com/rwbarton/scone/blob/master/src/scone/t2.lean</a></p>",
        "id": 216918016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605554223
    },
    {
        "content": "<p>where the \"transportable\" hypothesis is the guy <code>hF</code> on line 42</p>",
        "id": 216918047,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605554244
    },
    {
        "content": "<p>obviously it's not fit for consumption yet, but the idea is to have a tactic automatically produce the proof of transportability by induction on the term</p>",
        "id": 216918676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605554540
    },
    {
        "content": "<p>and then the other question is how to make it as usable as if it was <code>rw</code>... I know how to steal the type theory bits but I don't know if there is any system that really makes working with these transport operations pleasant, that's another matter.</p>",
        "id": 216918805,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605554616
    },
    {
        "content": "<p>Sounds like this is converging towards univalence...</p>",
        "id": 216919425,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605554891
    },
    {
        "content": "<p>By the way, the syntax highlighting seems to be broken here:<br>\n<a href=\"https://github.com/rwbarton/scone/blob/master/src/scone/edge.lean\">https://github.com/rwbarton/scone/blob/master/src/scone/edge.lean</a></p>",
        "id": 216919849,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605555100
    },
    {
        "content": "<p>Sort of, but univalence is an internal axiom... this is more like translating theorems about metatheoretic properties into Lean tactics</p>",
        "id": 216919990,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605555167
    },
    {
        "content": "<p>It's definitely related though</p>",
        "id": 216920025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605555184
    },
    {
        "content": "<p>and yeah, the syntax highlighting is a vscode-lean/markdown issue</p>",
        "id": 216920113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605555231
    },
    {
        "content": "<p>(GitHub uses the vs-code lean plugin's syntax definition)</p>",
        "id": 216942059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605565889
    },
    {
        "content": "<p>Today I chose issue 408 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/408\">transporting definitions and theorems along isomorphisms.</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2018-10-08<br>\nLabels: feature-request, meta</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 233958997,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1618064568
    },
    {
        "content": "<p>Nothing to add since the last discussion. Right now the issue is simply that this is a very broad problem and we haven't ever managed to converge on anything reasonable enough to be a useful target; in practice if someone wants to know that if X is profinite and homeomorphic to Y then Y is profinite then they just prove it themselves (as I believe Adam did the other day).</p>",
        "id": 233966881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618070482
    },
    {
        "content": "<p>I should have written up roadmap for my plans for <code>equiv_rw</code> before I ran out of energy for tactic writing... :-) I was part way to automating transporting compactness across a homeomorphism.</p>",
        "id": 234010155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618110486
    },
    {
        "content": "<p>Today I chose issue 408 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/408\">transporting definitions and theorems along isomorphisms.</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2018-10-08<br>\nLabels: meta, feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 261419565,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1636899536
    },
    {
        "content": "<p>We still don't seem to have a compelling use case for the tactic I proposed</p>",
        "id": 261425240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636906949
    },
    {
        "content": "<p>Shall I make some comments and close the issue? I think that until the question becomes well-defined there's no actual issue here</p>",
        "id": 261425823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636907879
    },
    {
        "content": "<p>Today I chose issue 408 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/408\">transporting definitions and theorems along isomorphisms.</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2018-10-08<br>\nLabels: meta, feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 273405752,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1645971163
    },
    {
        "content": "<p>Today I chose issue 408 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/408\">transporting definitions and theorems along isomorphisms.</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2018-10-08<br>\nLabels: meta, feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 289331247,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1657635809
    },
    {
        "content": "<p>Today I chose issue 408 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/408\">transporting definitions and theorems along isomorphisms.</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> (@kbuzzard) on 2018-10-08<br>\nLabels: t-meta, feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 300656021,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1664115506
    }
]