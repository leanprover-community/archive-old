[
    {
        "content": "<p>Today I chose PR 4273 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/4273\">feat(data/set/intervals/with_bot_top): lemmas about <code>I??</code> and <code>with_top/bot</code></a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> (@urkud) on 2020-09-26<br>\nLabels: awaiting-author, merge-conflict</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 215458232,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1604412898
    },
    {
        "content": "<p>For this PR we need to make <code>with_top</code> and <code>with_bot</code> irreducible.</p>",
        "id": 215461686,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604414491
    },
    {
        "content": "<p>If someone wants to help me with this refactor, tell me, please.</p>",
        "id": 215461739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604414518
    },
    {
        "content": "<p>I started this in a branch but didn't fix all failures yet.</p>",
        "id": 215461829,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604414550
    },
    {
        "content": "<p>Which branch? I did this for with_zero and with_one and found it quite fun.</p>",
        "id": 215465831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604416321
    },
    {
        "content": "<p>(I did a certain amount of cheating when I couldn't figure it out, e.g. making them locally reducible for a proof or two when I couldn't get to the bottom of a failure, but I'll try harder this time)</p>",
        "id": 215465982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604416375
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/irreducible-with-top\">https://github.com/leanprover-community/mathlib/tree/irreducible-with-top</a></p>",
        "id": 215467515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604417046
    },
    {
        "content": "<p>I'll merge master into this branch today</p>",
        "id": 215467572,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604417070
    },
    {
        "content": "<p>I have some time for this now. I got <code>conditionally_complete_lattice</code> compiling; you might want to take a look at this <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> just to check that you don't think my methods are too crude. Temporarily making with_top/with_bot reducible sometimes fixes some errors and creates others. If I can't do this, I can't do <code>cases</code> on <code>a : with_top X</code> so I brutally apply the <code>with_top.rec_top_coe</code> recursor. Am I missing a trick?</p>",
        "id": 215971581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604780395
    },
    {
        "content": "<p>Currently the main problem I see is that some algebraic instances don't work well unless I make both <code>with_top</code> and <code>with_bot</code> semireducible.</p>",
        "id": 215971663,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604780500
    },
    {
        "content": "<p>E.g., sometimes Lean can't unify two <code>has_add</code> instances on <code>with_bot</code>, one coming from <code>has_add α</code>, and another coming from <code>add_monoid α</code> via <code>add_monoid (with_bot α)</code>.</p>",
        "id": 215971718,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604780558
    },
    {
        "content": "<p>I think that this bad; we should make <code>with_top</code>/<code>with_bot</code> semireducible only if we want to use functions and theorems about <code>option</code>.</p>",
        "id": 215971740,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604780615
    },
    {
        "content": "<p>I am working on <code>ereal</code> and it seems that there are two non-defeq orders on it, one coming from <code>order_bot</code> and another from the linear order. I was seeing the same issues in <code>conditionally_complete_lattice</code>.</p>",
        "id": 215973712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604783507
    },
    {
        "content": "<p>I don't really understand what you're saying -- are you suggesting that this PR be abandoned? Do you think that we could do some clever priority changing to sort these issues out? (I think I'm seeing the same type of problem in the order hierarchy as you're seeing in the algebra hierarchy).</p>",
        "id": 215973779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604783620
    },
    {
        "content": "<p>Hmm. I've just solved my lattice nondefeq order issue by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [linear_order, order_bot, order_top,</span>\n<span class=\"kd\">  has_Sup, has_Inf, complete_lattice, has_add]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">ereal</span> <span class=\"o\">:=</span> <span class=\"n\">with_top</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">with_bot</span> <span class=\"n\">with_top</span>\n</code></pre></div>\n<p>instead of making them reducible before letting the derive handler run.</p>",
        "id": 215974194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604784338
    },
    {
        "content": "<p>We should change some instances so that Lean can match different <code>has_add</code>s without making <code>with_bot</code> and <code>with_top</code> locally <code>semireducible</code>.</p>",
        "id": 215979205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604792611
    },
    {
        "content": "<p>BTW, you should make them <code>semireducible</code>, not <code>reducible</code>.</p>",
        "id": 215979211,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604792637
    },
    {
        "content": "<p>Otherwise Lean treat both of them as <code>option α</code> for the purpose of instance search.</p>",
        "id": 215979254,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604792658
    },
    {
        "content": "<p>And it can apply <code>with_top</code> instance to <code>with_bot α</code>.</p>",
        "id": 215979262,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604792673
    },
    {
        "content": "<p>E.g., I added some <code>{ zero := 0, add := (+) }</code> to <code>with_bot.add_monoid</code> etc.</p>",
        "id": 215979281,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604792710
    },
    {
        "content": "<p>I thought that this will help but it doesn't. Probably we need to do the same with some <code>with_top</code> instances.</p>",
        "id": 215979287,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604792732
    },
    {
        "content": "<p>The semireducible (not reducible) trick has fixed the issues I was having with <code>ereal</code> -- thanks! I've also got <code>ennreal</code> compiling (by just making <code>with_top</code> semireducible at the top of the file and then irreducible at the bottom -- are you happy with this approach?).</p>\n<p>Can you point me to a specific issue with addition so I can try and understand the problem better? I'm sure I'll run into one soon enough but I may as well try and understand what you think the big problem is.</p>",
        "id": 215981125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604795965
    },
    {
        "content": "<p>I assume these types were <code>irreducible</code> before? If so, the instance resolution pain sounds like exactly the thing I was experiencing with ring instances on <code>tensor_algebra</code> (see the algebra.semiring_to_ring thread)</p>",
        "id": 215997433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604826374
    },
    {
        "content": "<p><code>with_bot</code> and <code>with_top</code> were defined as <code>option</code> and were probably the default reducibility setting which I think is <code>semireducible</code>. This enables people to abuse type equality (e.g. using <code>option.some</code>) which can cause problems later on (e.g. <code>option</code> leaking out). The idea is that if you make everything <code>irreducible</code> then people are forced to write more type correct code.</p>",
        "id": 216004353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604837321
    },
    {
        "content": "<p>I have a deadline today. I'll look into this tomorrow. BTW, you don't need <code>local attribute [irreducible]</code> at the bottom. Lean forgets about <code>local attribute [semireducible]</code> once it leaves the current section/namespace/file anyway.</p>",
        "id": 216017724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604858366
    },
    {
        "content": "<p>Oh of course! <code>local</code> :-)</p>",
        "id": 216018189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604859006
    },
    {
        "content": "<p>No hurry.</p>",
        "id": 216018195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604859025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/263328-triage/topic/PR.20.234273.3A.20feat(data.2Fset.2Fintervals.2Fwith_bot_top).3A.20lemmas.20a.2E.2E.2E/near/215971718\">said</a>:</p>\n<blockquote>\n<p>E.g., sometimes Lean can't unify two <code>has_add</code> instances on <code>with_bot</code>, one coming from <code>has_add α</code>, and another coming from <code>add_monoid α</code> via <code>add_monoid (with_bot α)</code>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I have now experienced this first hand with <code>data.polynomial.degree.basic</code>. The instances are defeq but things like <code>rw</code> would fail anyway. I changed some <code>rw</code> to <code>erw</code>, added some <code>refl</code>s etc and got the file compiling; see <a href=\"https://github.com/leanprover-community/mathlib/commit/8b8c6715be4596c343b8869cbb705f370984b339\">this commit</a> (sorry about the instance on line 509, I was debugging and forgot to remove it). Are you suggesting that I should not persevere with this approach? Do you understand why these defeq instances can't be unified by <code>rw</code>?</p>",
        "id": 216944700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605567491
    },
    {
        "content": "<p>The next file is <code>data.polynomial.degree.trailing_degree</code> which uses <code>some : ℕ → with_top ℕ</code>. I am a bit confused about what you want here. I had assumed we would make <code>with_top.some</code> but you didn't put it there. Do you have other plans? We have <code>with_top.some_eq_coe</code> and this is now \"ill-typed\" because it's <code>option.some</code>.</p>",
        "id": 216945635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605568031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> the file <code>trailing_degree</code> is one that I produced: I copied the <code>degree</code> file and did little more than <code>sed</code> to make the statements and proofs work.  In particular, I do not know how to work with <code>options</code>: let me know if I can help, but I am not understanding much of this thread...</p>",
        "id": 216967704,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605590567
    },
    {
        "content": "<p>Don't worry Damiano, this isn't your problem. It's all about a redesign of <code>with,_bot</code> so it breaks a bunch of code and the question is how best to fix it, it's a design decision.</p>",
        "id": 216974008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605599383
    },
    {
        "content": "<p>Today I chose PR 4273 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/4273\">feat(data/set/intervals/with_bot_top): lemmas about <code>I??</code> and <code>with_top/bot</code></a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> (@urkud) on 2020-09-26<br>\nLabels: awaiting-author, merge-conflict</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 225164645,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1612448384
    },
    {
        "content": "<p>Today I chose PR 4273 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/4273\">feat(data/set/intervals/with_bot_top): lemmas about <code>I??</code> and <code>with_top/bot</code></a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> (@urkud) on 2020-09-26<br>\nLabels: awaiting-author, merge-conflict</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 235075458,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1618755763
    },
    {
        "content": "<p>Today I chose PR 4273 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/4273\">feat(data/set/intervals/with_bot_top): lemmas about <code>I??</code> and <code>with_top/bot</code></a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> (@urkud) on 2020-09-26<br>\nLabels: awaiting-author</p>\n<p>Is this PR still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 262594290,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1637763580
    }
]