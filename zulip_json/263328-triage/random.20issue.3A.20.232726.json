[
    {
        "content": "<p>Today I chose issue 2726 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2726\">a multiplicative version of the <code>abel</code> tactic</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> (@semorrison) on 2020-05-18<br>\nLabels: feature-request, help wanted, meta</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 215139106,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1604085449
    },
    {
        "content": "<p>This is still relevant, I tried it at one point but got bogged down and then lost the branch <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span>. It seems there would be two approaches:<br>\n1) modify (duplicate) the codebase to match things like <code>a*b</code> in <code>eval</code>  as well as <code>a+b</code> which is already there and carry around typeclasses for comm_group in the <code>cache</code>  and a flag saying if we are multiplicative or not .<br>\n2) Or have some sort of pre and post processing steps that change goals in multiplicative groups into goals in additive groups, (maybe such things already exist as part of the <code>to_additive</code> machinery) then call the original abel and convert the goal back to multiplicative notation if needed.</p>\n<p>The second approach seems way better to me having tried the first.</p>",
        "id": 215140538,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604086217
    },
    {
        "content": "<p>The only proposed change is <code>+</code> to <code>*</code>, right? I think it would be simpler to generalize what exists now to be parametric over an operation and a list of lemma names. (I say this without looking at the implementation.)</p>",
        "id": 215140788,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604086398
    },
    {
        "content": "<p>Right, its quite doable, just work to add the matches, there are a couple of tiny difference between the additive and multiplicative cases like there being no exact analogue of <code>a-b</code>  in multiplicative land, but seeing as that isn't the abel normal form of that expression anyway it seems like just an inconvenience rather than requiring major changes.</p>",
        "id": 215141470,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604086794
    },
    {
        "content": "<p>The duplication of monoid and group based lemmas just means there is another factor of 2 in the number of lemmas needed.</p>",
        "id": 215141638,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604086868
    },
    {
        "content": "<p>I'm thinking that turning this into a tactic would be way easier than changing abel that much, I didn't yet find any issues with this approach.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.type_tags</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">additive</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"bp\">-</span><span class=\"n\">of_mul</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"n\">of_mul</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">of_mul</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">of_mul</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">of_mul</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">of_mul</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">of_mul</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">of_mul</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">of_mul</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">of_mul</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">of_mul</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">of_mul</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">of_mul</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">of_mul</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">of_mul</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215256304,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604256062
    },
    {
        "content": "<p>And another example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span><span class=\"n\">ℕ</span> <span class=\"n\">of_mul</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">•</span><span class=\"n\">ℕ</span> <span class=\"n\">of_mul</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">of_mul</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">of_mul</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">•</span><span class=\"n\">ℕ</span> <span class=\"n\">of_mul</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">•</span><span class=\"n\">ℕ</span> <span class=\"n\">of_mul</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215256450,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604256288
    }
]