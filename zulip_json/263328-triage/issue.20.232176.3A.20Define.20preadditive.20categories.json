[
    {
        "content": "<p>Today I chose issue 2176 for discussion!</p>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/issues/2176\">Define preadditive categories</a></strong><br>\nCreated by <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> (@TwoFX) on 2020-03-18<br>\nLabels: feature-request</p>\n<p>Is this issue still relevant? Any recent updates? Anyone making progress?</p>",
        "id": 234048642,
        "sender_full_name": "Random Issue Bot",
        "timestamp": 1618150981
    },
    {
        "content": "<p>Preadditive categories are defined in <code>category_theory.preadditive.default</code> so I'm guessing we can close this one.</p>",
        "id": 234064362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618164325
    },
    {
        "content": "<p>There is also this project: <a href=\"https://github.com/leanprover-community/mathlib/projects/2#card-34755971\">https://github.com/leanprover-community/mathlib/projects/2#card-34755971</a> which we might also be able to update.</p>",
        "id": 234064439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618164387
    },
    {
        "content": "<p>My understanding is that the current definition is just a \"temporary\" one while we wait for enriched categories</p>",
        "id": 234067457,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1618167519
    },
    {
        "content": "<p>I'm not sure how much progress there has been towards enriched categories. There is <a href=\"https://github.com/leanprover-community/mathlib/tree/enriched_reprise\">branch#enriched_reprise</a> which had some recent commits but I don't know what it does.</p>",
        "id": 234067721,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1618167734
    },
    {
        "content": "<p>Maybe someone should update the issue with these comments?</p>",
        "id": 234068457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618168370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> would be most helpful here, but my understanding from the last time I asked him was that there's a bunch of tricky questions to ask about how to go about setting up definitions in order to make them useful for concrete applications; and perhaps the right approach for the moment is to consider concrete enriched categories, ie ones where the hom-sets are sets with some extra structure (eg additive groups) rather than replacing hom-sets with objects from any monoidal category</p>",
        "id": 234069634,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618169461
    },
    {
        "content": "<p>Quoting from him so as to save him some typing:<br>\n\"We could just enrich over an arbitrary monoidal category V (not necessarily concrete), and then do base change along any lax monoidal functor, and then set up the equivance between Type-enriched categories and ordinary categories.  This is certainly the most \"principled\" approach. But I don't think it helps anyone who just wants to be able to multiply their morphisms by scalars (and know their functors commute with scalar multiplication, etc, etc\"</p>",
        "id": 234069731,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618169541
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/enriched_reprise\">branch#enriched_reprise</a> seemed like a promising start on <code>V</code>-enriched categories in the special case where the <code>V</code> is a concrete category <em>and moreover</em> is built using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bundled_hom/src\">src#bundled_hom</a>. While this works great for <code>V = Group</code> or <code>V = AddCommGroup</code>, it wouldn't work for <code>V = Module R</code>.</p>",
        "id": 234084015,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618183029
    },
    {
        "content": "<p>I'm not sure it's useful to have a setup where there is a different incantation to talk about an <code>AddCommGroup</code> enriched category and a <code>Module R</code> enriched category. :-(</p>",
        "id": 234084030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618183060
    },
    {
        "content": "<p>In any case I think there's going to be a certain amount of boilerplate for each different value of <code>V</code>(e.g. we can't set up instances which a polymorphic in the typeclass, so at the very least we're going to have to say for each separate <code>V</code> that the hom types actually carry the class).</p>",
        "id": 234084137,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618183184
    },
    {
        "content": "<p>Given that, it may actually just be fine to go the \"principled\" route.</p>",
        "id": 234084148,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618183200
    },
    {
        "content": "<p>I think this would consist of a class <code>enriched_category V C</code>, which is actually disconnected entirely from <code>category</code>, which provides an term of <code>V</code> between each <code>X Y : C</code>, even when <code>V</code> is not concrete. We'd further have change-of-enrichment along a lax monoidal functor <code>V тед W</code>. Finally there would be a typeclass <code>enriched_over V C</code>, which would be a mixin for <code>category C</code>, which would contain the data of a <code>enriched_category V C</code>, along with the equivalences that show that when you transport that one to <code>Type</code> you get the original <code>category C</code>.</p>",
        "id": 234084369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618183379
    },
    {
        "content": "<p>(When I say \"you get the original category\" here, you have to do it pretty gorily: the transported thing will be an <code>enriched_category (Type u) C</code>, and the original thing is a <code>category C</code>, and these are not the same gadget, just <code>equiv</code>.)</p>",
        "id": 234084446,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618183458
    },
    {
        "content": "<p>The problem with going this route is that you have to build a bunch of theory about <code>enriched_category</code>, before you ever get to find out if the design is actually usable in concrete cases like <code>V = Top</code> or <code>V = Module R</code>...</p>",
        "id": 234084517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618183537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/263328-triage/topic/issue.20.232176.3A.20Define.20preadditive.20categories/near/234084517\">said</a>:</p>\n<blockquote>\n<p>The problem with going this route is that you have to build a bunch of theory about <code>enriched_category</code>, before you ever get to find out if the design is actually usable in concrete cases like <code>V = Top</code> or <code>V = Module R</code>...</p>\n</blockquote>\n<p>This doesn't sound like a problem to someone like me who cares more about the theory than the concrete examples :D</p>",
        "id": 234096695,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618196502
    }
]