[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">Hd</span><span class=\"o\">,</span>\n<span class=\"c1\">-- Isabelle can now finish this with</span>\n<span class=\"c1\">-- apply(auto)</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">S</span> <span class=\"n\">Hd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</pre></div>\n\n\n<p>Looking at p8 of the book (p18 of the pdf). What is this <code>auto</code> wizardry?</p>",
        "id": 159740749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551467844
    },
    {
        "content": "<p><code>auto</code> is the main Isabelle tactic. It applies <code>simp</code>, but it also tries to apply recursively some rules named with the attribute <code>intro</code> in the library, to see if it proves the goal, with a controlled amount of backtracking (like the upcoming <code>back</code> in Lean, but more involved). And it is rather clever, trying to combine available facts to see what it can prove from them and if it helps solve the goal. I never really understood how it works (much more complicated than <code>simp</code>!), but most of the time it does what you would like <code>schoolkid</code> to do. For instance, there is a <code>linarith</code> tactic in Isabelle, but it is seldom used since <code>auto</code> will close your goal involving linear inequalities, say, 95% of the time.</p>",
        "id": 159741593,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551468544
    },
    {
        "content": "<p>is <code>auto</code> (and any of the features you just described) documented anywhere?</p>",
        "id": 159741893,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1551468829
    },
    {
        "content": "<p>i suppose for now, we have <code>tidy</code>, which is not as intelligent (but suffices to finish the lemma above with <code>by induction m; tidy</code>)</p>",
        "id": 159742003,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1551468911
    },
    {
        "content": "<p>Oh thanks Jesse! That's the first time I've ever used <code>tidy</code>! I tried all my usual suspects and none of them worked.</p>\n<p>Here are two statements: Isabelle has some cool tactics which Lean doesn't have; Isabelle only uses simple type theory and not dependent type theory. Are these things related in any way, or is it just a matter of time before Lean gets some cool tactics which are as intelligent as Isabelle's?</p>",
        "id": 159744164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551470499
    },
    {
        "content": "<p>My personal belief is that for the fragment of Lean code where you don't use dependent types, you should be able to get tactics as smart as those of Isabelle but I might be missing something important</p>",
        "id": 159744671,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1551470826
    },
    {
        "content": "<p>For documentation of Isabelle tactics, see for instance <a href=\"https://isabelle.in.tum.de/doc/isar-ref.pdf\" target=\"_blank\" title=\"https://isabelle.in.tum.de/doc/isar-ref.pdf\">https://isabelle.in.tum.de/doc/isar-ref.pdf</a>, page 232 (mainly <code>blast</code>, <code>auto</code> and <code>force</code>). Probably <a href=\"https://www.cl.cam.ac.uk/~lp15/papers/Isabelle/blast.pdf\" target=\"_blank\" title=\"https://www.cl.cam.ac.uk/~lp15/papers/Isabelle/blast.pdf\">https://www.cl.cam.ac.uk/~lp15/papers/Isabelle/blast.pdf</a> is also relevant.</p>",
        "id": 159744855,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1551470977
    },
    {
        "content": "<p>@Simon Hudon: Isabelle's inductive predicates correspond in Lean to inductive predicates, i.e. dependent inductive types. An inductive predicate like \"even\" is about as evil as \"vector\"-as-a-dependent-inductive-type. Same of course for big- and small-step operational semantics (in Concrete Semantics).</p>\n<p>I'm not sure what it means for automation of Lean, but my point is that unless you're willing to build your own inductive predicates using Knaster-Tarski in Lean, you're going to need dependent types where Isabelle remains simply typed.</p>",
        "id": 191744499,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585143224
    }
]