[
    {
        "content": "<p>(Migrating from 'Is there code for X?\" \"bidirectional maps?\" = <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/bidirectional.20maps.3F/near/212013731\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/bidirectional.20maps.3F/near/212013731</a>) <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 212017762,
        "sender_full_name": "SnowFox",
        "timestamp": 1601620723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can you explain why you're using inductive Props in your x86.lean?</p>",
        "id": 212039897,
        "sender_full_name": "SnowFox",
        "timestamp": 1601623086
    },
    {
        "content": "<p>because it's a spec</p>",
        "id": 212039906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601623103
    },
    {
        "content": "<p>it's not intended to be directly executable</p>",
        "id": 212039918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601623115
    },
    {
        "content": "<p>but the advantage is that you don't need separate encode/decode</p>",
        "id": 212039930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601623132
    },
    {
        "content": "<p>Hmm. Not something I can use then.</p>",
        "id": 212040466,
        "sender_full_name": "SnowFox",
        "timestamp": 1601623568
    },
    {
        "content": "<p>No, I don't expect that aspect will translate</p>",
        "id": 212040504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601623605
    },
    {
        "content": "<p>I wrote a proof producing disassembler for x86/ARM before which is closer to what you need, but it is at least for now closed source</p>",
        "id": 212040559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601623659
    },
    {
        "content": "<p>Okay.</p>",
        "id": 212040724,
        "sender_full_name": "SnowFox",
        "timestamp": 1601623786
    },
    {
        "content": "<p>I've heard good things about metaprogramming in Lean but ... the documentation doesn't demonstrate how. Do you have any reference I can use for implementing <code>make_defs</code>? <a href=\"https://leanprover.github.io/reference/metaprogramming.html\">https://leanprover.github.io/reference/metaprogramming.html</a></p>",
        "id": 212040886,
        "sender_full_name": "SnowFox",
        "timestamp": 1601623883
    },
    {
        "content": "<p>for the most part it's just functional programming</p>",
        "id": 212041186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601624044
    },
    {
        "content": "<p>you have to interact with the lean API to make definitions</p>",
        "id": 212041200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601624064
    },
    {
        "content": "<p>and the API is admittedly not so well documented</p>",
        "id": 212041236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601624089
    },
    {
        "content": "<p>Rob Lewis made a metaprogramming tutorial that is pretty good</p>",
        "id": 212041265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601624112
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2\">https://www.youtube.com/playlist?list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2</a></p>",
        "id": 212041303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601624145
    },
    {
        "content": "<p>Thanks. I'll watch the series.</p>",
        "id": 212041383,
        "sender_full_name": "SnowFox",
        "timestamp": 1601624184
    },
    {
        "content": "<p>There's also the metaprogramming section of the <a href=\"https://raw.githubusercontent.com/blanchette/logical_verification_2020/master/hitchhikers_guide.pdf\">Hitchhiker's guide</a> and, if I may be so bold, my <a href=\"https://limperg.de/posts/2020-08-19-lean-metaprogramming.html\">blog post</a> on some gotchas of the API (but that'll only make sense once you have a bit of an overview). Beyond that, you'll have to read <code>init/meta/expr.lean</code> and <code>init/meta/tactic.lean</code>, which are reasonably documented.</p>",
        "id": 212062203,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1601638311
    },
    {
        "content": "<p>Okay. I've watched the short series linked above and bookmarked the blog post. I've adjusted the python scripts to generate at least a decent mostly-correct subset of RISC-V instruction to format with embedded constants list. <code>add_inductive</code> and <code>add_defn_equations</code> appear to be my next steps, which look straight forward. Afterwards, I may open an issue in the riscv-opcode repo proposing an alternative format and a new code generator to make certain things cleaner and better reflect the specification.</p>\n<p>Thanks for all the links everyone. I'll resume this tomorrow morning. :)</p>",
        "id": 212070231,
        "sender_full_name": "SnowFox",
        "timestamp": 1601643432
    },
    {
        "content": "<p>Okay, I couldn't resist but... ouch. <code>add_inductive</code>, as the documentation for its sibling <code>add_ginductive</code> suggests, doesn't generate the auxiliary definitions necessary for matching against it... I couldn't figure out how to use <code>add_ginductive</code> however. Could someone correct this code?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">make_defs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.add_inductive</span> <span class=\"bp\">`</span><span class=\"n\">rvim</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">expr.const</span> <span class=\"bp\">`</span><span class=\"n\">rvim</span> <span class=\"o\">[]⟩))</span>\n</code></pre></div>",
        "id": 212077159,
        "sender_full_name": "SnowFox",
        "timestamp": 1601646770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Any insight on this issue?</p>",
        "id": 213000987,
        "sender_full_name": "SnowFox",
        "timestamp": 1602483118
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">make_defs'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">env'</span> <span class=\"bp\">←</span> <span class=\"n\">env.add_ginductive</span> <span class=\"n\">options.mk</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[((</span><span class=\"bp\">`</span><span class=\"n\">rvim'</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)),</span>\n      <span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩,</span>\n        <span class=\"o\">{</span> <span class=\"n\">constr</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">rvim'</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">expr.const</span> <span class=\"bp\">`</span><span class=\"n\">rvim'</span> <span class=\"o\">[]</span> <span class=\"o\">}))]</span>\n    <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.set_env</span> <span class=\"n\">env'</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">make_defs'</span> <span class=\"o\">[(</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">()),</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">())]</span>\n<span class=\"k\">#print</span> <span class=\"n\">rvim'</span>\n</code></pre></div>",
        "id": 213001421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602483645
    },
    {
        "content": "<p>There we go, thanks again!</p>",
        "id": 213001694,
        "sender_full_name": "SnowFox",
        "timestamp": 1602483939
    },
    {
        "content": "<p>Note that I changed your code a bit to prefix <code>rvim</code> on the names of the constructors. Lean will let you name the constructors something else, but the front end <code>inductive</code> command doesn't, so it seems ill-advised</p>",
        "id": 213001799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602484059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Noticed. Though now I'm stuck trying to control the types of the constructors. As these need the registers and immediate values. I was expecting something like <code>type := `(nat -&gt; `rvim)</code> to work. But that says \"invalid return type\". As it does with just <code> `(`rvim)</code>.</p>",
        "id": 213002765,
        "sender_full_name": "SnowFox",
        "timestamp": 1602485257
    },
    {
        "content": "<p><code>rvim</code> needs to be a local constant</p>",
        "id": 213002819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602485284
    },
    {
        "content": "<p>Like <code>let rvim := `rvim in `(rvim)</code>?</p>",
        "id": 213002871,
        "sender_full_name": "SnowFox",
        "timestamp": 1602485350
    },
    {
        "content": "<p>Or <code> let rvim := @expr.const ff `rvim [] in `(rvim) </code>? Neither worked.</p>",
        "id": 213002975,
        "sender_full_name": "SnowFox",
        "timestamp": 1602485446
    },
    {
        "content": "<p>The tricky part is that <code>rvim</code> doesn't exist yet, so <code>`(rvim)</code> isn't going to work</p>",
        "id": 213003000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602485479
    },
    {
        "content": "<p>You can use <code>let rvim : expr := expr.const `rvim' [],</code> and then splice it in</p>",
        "id": 213003014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602485497
    },
    {
        "content": "<p>i.e. <code>`((%%rvim : Type) → (%%rvim : Type))</code></p>",
        "id": 213003025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602485511
    },
    {
        "content": "<p>actually, it seems it should be a constant not a local constant</p>",
        "id": 213003100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602485574
    },
    {
        "content": "<p>which is extra tricky because that definitely doesn't typecheck</p>",
        "id": 213003109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602485589
    },
    {
        "content": "<p>Well, this worked. <code>let rvim : expr := expr.const `rvim [] in `(nat -&gt; (%%rvim : Type))</code></p>",
        "id": 213003124,
        "sender_full_name": "SnowFox",
        "timestamp": 1602485616
    },
    {
        "content": "<p>I think the usual approach if you need more advanced inference would be to create a new local constant with the appropriate type, and then substitute the constant for it at the end</p>",
        "id": 213003129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602485624
    },
    {
        "content": "<p>Okay, I have <code>rvim</code> expanded with the correct number of natural arguments for each instruction. :)</p>",
        "id": 213003701,
        "sender_full_name": "SnowFox",
        "timestamp": 1602486204
    },
    {
        "content": "<p>But it is getting slow... which is worrying considering how early this is still.</p>",
        "id": 213003718,
        "sender_full_name": "SnowFox",
        "timestamp": 1602486227
    },
    {
        "content": "<p>What is the vscodium trick to expand all the variants on a def? <code>def q : rvim -&gt; nat := _</code></p>",
        "id": 213003832,
        "sender_full_name": "SnowFox",
        "timestamp": 1602486343
    },
    {
        "content": "<p>I thought it was under ctrl+dot with the _ in focus. But that doesn't include the option for some reason.</p>",
        "id": 213003882,
        "sender_full_name": "SnowFox",
        "timestamp": 1602486374
    },
    {
        "content": "<p>I've seen a different method on a video</p>",
        "id": 213003922,
        "sender_full_name": "SnowFox",
        "timestamp": 1602486435
    },
    {
        "content": "<p>Video used <code>{! x -&gt; y}</code> and that worked. I guess the language server just has a hole..</p>",
        "id": 213004135,
        "sender_full_name": "SnowFox",
        "timestamp": 1602486671
    },
    {
        "content": "<p>processing new inductives is a little sluggish, especially if you are using nested or mutual inductives</p>",
        "id": 213004598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602487066
    },
    {
        "content": "<p>You can double check if you have accidentally defined a nested inductive because if you <code>#print rvim</code> it will say <code>def rvim := .. </code> instead of <code>inductive rvim ...</code></p>",
        "id": 213004739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602487176
    },
    {
        "content": "<p>It says inductive.</p>",
        "id": 213004812,
        "sender_full_name": "SnowFox",
        "timestamp": 1602487207
    },
    {
        "content": "<p>how many variants are we talking here?</p>",
        "id": 213004835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602487229
    },
    {
        "content": "<p>I have 63 instructions.</p>",
        "id": 213004917,
        "sender_full_name": "SnowFox",
        "timestamp": 1602487310
    },
    {
        "content": "<p>hm, I wonder whether <code>no_confusion</code> is as expensive as I suspected</p>",
        "id": 213005008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602487384
    },
    {
        "content": "<p>it's basically quadratic in size</p>",
        "id": 213005041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602487413
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">fmt</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">R</span>     <span class=\"o\">(</span><span class=\"n\">opcode7</span> <span class=\"n\">funct3</span> <span class=\"n\">funct7</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"c1\">-- (rd rs1 rs2     : nat)</span>\n<span class=\"bp\">|</span> <span class=\"n\">I</span>     <span class=\"o\">(</span><span class=\"n\">opcode7</span> <span class=\"n\">funct3</span>        <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"c1\">-- (rd rs1     imm : nat)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ISH</span>   <span class=\"o\">(</span><span class=\"n\">opcode7</span> <span class=\"n\">funct3</span> <span class=\"n\">funct7</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"c1\">-- (rd rs1     imm : nat)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ISHW</span>  <span class=\"o\">(</span><span class=\"n\">opcode7</span> <span class=\"n\">funct3</span> <span class=\"n\">funct7</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"c1\">-- (rd rs1     imm : nat)</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span>     <span class=\"o\">(</span><span class=\"n\">opcode7</span> <span class=\"n\">funct3</span>        <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"c1\">-- (   rs1 rs2 imm : nat)</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span>     <span class=\"o\">(</span><span class=\"n\">opcode7</span> <span class=\"n\">funct3</span>        <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"c1\">-- (   rs1 rs2 imm : nat)</span>\n<span class=\"bp\">|</span> <span class=\"n\">U</span>     <span class=\"o\">(</span><span class=\"n\">opcode7</span>               <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"c1\">-- (rd         imm : nat)</span>\n<span class=\"bp\">|</span> <span class=\"n\">J</span>     <span class=\"o\">(</span><span class=\"n\">opcode7</span>               <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"c1\">-- (rd         imm : nat)</span>\n<span class=\"bp\">|</span> <span class=\"n\">FENCE</span> <span class=\"o\">(</span><span class=\"n\">opcode7</span>               <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">make_defs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">fmt</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tactic.updateex_env</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">env.add_ginductive</span> <span class=\"n\">options.mk</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">[(</span>\n      <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">rvim</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)),</span>\n      <span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩,</span>\n        <span class=\"o\">{</span> <span class=\"n\">constr</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">rvim</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n          <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">expr.const</span> <span class=\"bp\">`</span><span class=\"n\">rvim</span> <span class=\"o\">[]</span> <span class=\"k\">in</span>\n                  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fmt.R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fmt.I</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fmt.ISH</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fmt.ISHW</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fmt.S</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fmt.B</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fmt.U</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fmt.J</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n                  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fmt.FENCE</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">%%</span><span class=\"n\">rvim</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">))</span>\n                  <span class=\"kd\">end</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">)</span>\n    <span class=\"o\">)]</span>\n  <span class=\"n\">ff</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fmt</span>\n\n<span class=\"c1\">-- rv{32,64}[im] sans pseudo instructions</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">make_defs</span> <span class=\"o\">[</span>\n<span class=\"c1\">--#eval list.length [</span>\n  <span class=\"c1\">-- rv32i</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">BEQ</span><span class=\"o\">,</span>        <span class=\"n\">B</span>    <span class=\"mi\">0b1100011</span> <span class=\"mi\">0b000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">BNE</span><span class=\"o\">,</span>        <span class=\"n\">B</span>    <span class=\"mi\">0b1100011</span> <span class=\"mi\">0b001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">BLT</span><span class=\"o\">,</span>        <span class=\"n\">B</span>    <span class=\"mi\">0b1100011</span> <span class=\"mi\">0b100</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">BGE</span><span class=\"o\">,</span>        <span class=\"n\">B</span>    <span class=\"mi\">0b1100011</span> <span class=\"mi\">0b101</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">BLTU</span><span class=\"o\">,</span>       <span class=\"n\">B</span>    <span class=\"mi\">0b1100011</span> <span class=\"mi\">0b110</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">BGEU</span><span class=\"o\">,</span>       <span class=\"n\">B</span>    <span class=\"mi\">0b1100011</span> <span class=\"mi\">0b111</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">JALR</span><span class=\"o\">,</span>       <span class=\"n\">I</span>    <span class=\"mi\">0b1100111</span> <span class=\"mi\">0b000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">JAL</span><span class=\"o\">,</span>        <span class=\"n\">J</span>    <span class=\"mi\">0b1101111</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">LUI</span><span class=\"o\">,</span>        <span class=\"n\">U</span>    <span class=\"mi\">0b0110111</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">AUIPC</span><span class=\"o\">,</span>      <span class=\"n\">U</span>    <span class=\"mi\">0b0010111</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">ADDI</span><span class=\"o\">,</span>       <span class=\"n\">I</span>    <span class=\"mi\">0b0010011</span> <span class=\"mi\">0b000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SLLI</span><span class=\"o\">,</span>       <span class=\"n\">ISH</span>  <span class=\"mi\">0b0010011</span> <span class=\"mi\">0b001</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SLTI</span><span class=\"o\">,</span>       <span class=\"n\">I</span>    <span class=\"mi\">0b0010011</span> <span class=\"mi\">0b010</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SLTIU</span><span class=\"o\">,</span>      <span class=\"n\">I</span>    <span class=\"mi\">0b0010011</span> <span class=\"mi\">0b011</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">XORI</span><span class=\"o\">,</span>       <span class=\"n\">I</span>    <span class=\"mi\">0b0010011</span> <span class=\"mi\">0b100</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SRLI</span><span class=\"o\">,</span>       <span class=\"n\">ISH</span>  <span class=\"mi\">0b0010011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SRAI</span><span class=\"o\">,</span>       <span class=\"n\">ISH</span>  <span class=\"mi\">0b0010011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0100000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">ORI</span><span class=\"o\">,</span>        <span class=\"n\">I</span>    <span class=\"mi\">0b0010011</span> <span class=\"mi\">0b110</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">ANDI</span><span class=\"o\">,</span>       <span class=\"n\">I</span>    <span class=\"mi\">0b0010011</span> <span class=\"mi\">0b111</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">ADD</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b000</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SUB</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b000</span> <span class=\"mi\">0b0100000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SLL</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b001</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SLT</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b010</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SLTU</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b011</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">XOR</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b100</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SRL</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SRA</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0100000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">OR</span><span class=\"o\">,</span>         <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b110</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">AND</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b111</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">LB</span><span class=\"o\">,</span>         <span class=\"n\">I</span>    <span class=\"mi\">0b0000011</span> <span class=\"mi\">0b000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">LH</span><span class=\"o\">,</span>         <span class=\"n\">I</span>    <span class=\"mi\">0b0000011</span> <span class=\"mi\">0b001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">LW</span><span class=\"o\">,</span>         <span class=\"n\">I</span>    <span class=\"mi\">0b0000011</span> <span class=\"mi\">0b010</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">LBU</span><span class=\"o\">,</span>        <span class=\"n\">I</span>    <span class=\"mi\">0b0000011</span> <span class=\"mi\">0b100</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">LHU</span><span class=\"o\">,</span>        <span class=\"n\">I</span>    <span class=\"mi\">0b0000011</span> <span class=\"mi\">0b101</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SB</span><span class=\"o\">,</span>         <span class=\"n\">S</span>    <span class=\"mi\">0b0100011</span> <span class=\"mi\">0b000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SH</span><span class=\"o\">,</span>         <span class=\"n\">S</span>    <span class=\"mi\">0b0100011</span> <span class=\"mi\">0b001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SW</span><span class=\"o\">,</span>         <span class=\"n\">S</span>    <span class=\"mi\">0b0100011</span> <span class=\"mi\">0b010</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">FENCE</span><span class=\"o\">,</span>      <span class=\"n\">I</span>    <span class=\"mi\">0b0001111</span> <span class=\"mi\">0b000</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- FENCEI belongs in Zifencei... why is it here?</span>\n  <span class=\"c1\">-- (`FENCE_I,    I    0b0001111 0b001),</span>\n  <span class=\"c1\">-- Shouldn't we have ECALL and EBREAK?</span>\n  <span class=\"c1\">-- rv32m</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">MUL</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b000</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">MULH</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b001</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">MULHSU</span><span class=\"o\">,</span>     <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b010</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">MULHU</span><span class=\"o\">,</span>      <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b011</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">DIV</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b100</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">DIVU</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">REM</span><span class=\"o\">,</span>        <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b110</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">REMU</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0110011</span> <span class=\"mi\">0b111</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- rv64i</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">ADDIW</span><span class=\"o\">,</span>      <span class=\"n\">I</span>    <span class=\"mi\">0b0011011</span> <span class=\"mi\">0b000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SLLIW</span><span class=\"o\">,</span>      <span class=\"n\">ISHW</span> <span class=\"mi\">0b0011011</span> <span class=\"mi\">0b001</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SRLIW</span><span class=\"o\">,</span>      <span class=\"n\">ISHW</span> <span class=\"mi\">0b0011011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SRAIW</span><span class=\"o\">,</span>      <span class=\"n\">ISHW</span> <span class=\"mi\">0b0011011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0100000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">ADDW</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b000</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SUBW</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b000</span> <span class=\"mi\">0b0100000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SLLW</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b001</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SRLW</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0000000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SRAW</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0100000</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">LD</span><span class=\"o\">,</span>         <span class=\"n\">I</span>    <span class=\"mi\">0b0000011</span> <span class=\"mi\">0b011</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">LWU</span><span class=\"o\">,</span>        <span class=\"n\">I</span>    <span class=\"mi\">0b0000011</span> <span class=\"mi\">0b110</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">SD</span><span class=\"o\">,</span>         <span class=\"n\">S</span>    <span class=\"mi\">0b0100011</span> <span class=\"mi\">0b011</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- rv64m</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">MULW</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b000</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">DIVW</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b100</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">DIVUW</span><span class=\"o\">,</span>      <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b101</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">REMW</span><span class=\"o\">,</span>       <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b110</span> <span class=\"mi\">0b0000001</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">REMUW</span><span class=\"o\">,</span>      <span class=\"n\">R</span>    <span class=\"mi\">0b0111011</span> <span class=\"mi\">0b111</span> <span class=\"mi\">0b0000001</span><span class=\"o\">)</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_16_bit_instruction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">n.land</span> <span class=\"mi\">0b11</span> <span class=\"bp\">≠</span> <span class=\"mi\">0b11</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_32_bit_instruction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">n.land</span> <span class=\"mi\">0b11</span> <span class=\"bp\">=</span> <span class=\"mi\">0b11</span> <span class=\"bp\">∧</span> <span class=\"n\">n.land</span> <span class=\"mi\">0b11100</span> <span class=\"bp\">≠</span> <span class=\"mi\">0b11100</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_valid_instruction</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_16_bit_instruction</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span>\n<span class=\"n\">is_32_bit_instruction</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 213005043,
        "sender_full_name": "SnowFox",
        "timestamp": 1602487417
    },
    {
        "content": "<p>one thing you can do to make the ISA easier to analyze is to bucket the instructions, for example putting all binops in one variant</p>",
        "id": 213005443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602487714
    },
    {
        "content": "<p>It wouldn't be hard to bucket these by type now, although that may not be exactly the layout you want</p>",
        "id": 213005484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602487770
    },
    {
        "content": "<p>RISC-V uses tri-ops generally; though compressed ops do include binary ops where the first source register is repeated as the destination. <code>ADD rd rs1 rs2</code> is <code>rd = rs1 + rs2</code>. I like the current order, ordered by XLEN and ISA extensions; because these are the units they are introduced. If I were to add more order, it'd probably be either (opcode, funct3, funct7)-order or format-shape order.</p>",
        "id": 213005805,
        "sender_full_name": "SnowFox",
        "timestamp": 1602488043
    },
    {
        "content": "<p><code>reg[rd] = reg[rs1] + reg[rs2]</code> **</p>",
        "id": 213005869,
        "sender_full_name": "SnowFox",
        "timestamp": 1602488091
    },
    {
        "content": "<p>Oh, you meant reduce the inductive variants and use defs to map the instructions to the fewer variants?</p>",
        "id": 213005937,
        "sender_full_name": "SnowFox",
        "timestamp": 1602488159
    },
    {
        "content": "<p>If you have an inductive type with 63 constructors, proving anything by <code>cases</code> on the type will be an exercise in patience (particularly if you have two variables, e.g. to prove determinism)</p>",
        "id": 213005998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602488183
    },
    {
        "content": "<p>I'm open to any way to reduce the complexity.</p>",
        "id": 213006072,
        "sender_full_name": "SnowFox",
        "timestamp": 1602488269
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">binop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ADD</span> <span class=\"bp\">|</span> <span class=\"n\">SUB</span> <span class=\"bp\">|</span> <span class=\"n\">SLL</span> <span class=\"c1\">-- | ...</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">loadop</span>\n<span class=\"bp\">|</span> <span class=\"n\">LUI</span> <span class=\"bp\">|</span> <span class=\"n\">LD</span> <span class=\"c1\">-- | ...</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">rvim</span>\n<span class=\"bp\">|</span> <span class=\"n\">binop</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">binop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rd</span> <span class=\"n\">rs</span> <span class=\"n\">rt</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rvim</span>\n<span class=\"bp\">|</span> <span class=\"n\">load</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">loadop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rd</span> <span class=\"n\">imm</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rvim</span>\n</code></pre></div>",
        "id": 213006169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602488342
    },
    {
        "content": "<p>Bucketing based on format shape is the obvious thing to do, but you should also separate out variants that treat their arguments significantly differently in the same format-shape, not sure if this is a major concern in riscv</p>",
        "id": 213006319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602488461
    },
    {
        "content": "<p>Note that proving <code>no_confusion</code> with a bucketed inductive like this is literally lower asymptotic complexity, since if you have a 7 * 7 bucketed inductive then proving that different variants are different is 8 * 7 ^ 2 large (8 inductives of 7 variants each) instead of 49 ^ 2 with a 49 variant inductive</p>",
        "id": 213006514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602488599
    },
    {
        "content": "<p>Note all of these instructions are either a pick-3 of rd, rs1, rs2, imm; or both rd, imm; or zero (in the single case of FENCE), so they could all be reduced to 3 cases (so far; though there are more variations with more ISA extensions active). The format constants (opcode7, funct3, funct7) could be flattened into a single natural of 17 bits. The opcode7 internally embeds the tag for the format variant.</p>",
        "id": 213007011,
        "sender_full_name": "SnowFox",
        "timestamp": 1602488981
    },
    {
        "content": "<p>Rather, it doesn't explicitly embed the tag but is sufficient to reconstruct it.</p>",
        "id": 213007113,
        "sender_full_name": "SnowFox",
        "timestamp": 1602489046
    },
    {
        "content": "<p>The pick-3 can be seen at the top, in the comments of the <code>inductive fmt</code> section.</p>",
        "id": 213007178,
        "sender_full_name": "SnowFox",
        "timestamp": 1602489108
    },
    {
        "content": "<p>One deviating hack I've considered is to allow the rd/rs1/rs2 to exceed their 5-bit limit to represent pseudo-registers a la SSA. But this adds a mode where assembly is illegal; which is fine. Assembly should happen only after register allocation anyway and these instructions are useful before register allocation.</p>",
        "id": 213007346,
        "sender_full_name": "SnowFox",
        "timestamp": 1602489215
    },
    {
        "content": "<p>and imm, for offset symbols.</p>",
        "id": 213007370,
        "sender_full_name": "SnowFox",
        "timestamp": 1602489236
    },
    {
        "content": "<blockquote>\n<p>The format constants (opcode7, funct3, funct7) could be flattened into a single natural of 17 bits.</p>\n</blockquote>\n<p>I would suggest translating these to variants as early as possible though, because lean's handling of 17 bit numbers will not be satisfactory to you</p>",
        "id": 213007594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602489369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> BTW: \"LUI\" is load upper-immediate; isn't a load involving memory so I wouldn't call it a \"load operation\". It only writes the immediate to the upper bits of a register.</p>",
        "id": 213007634,
        "sender_full_name": "SnowFox",
        "timestamp": 1602489401
    },
    {
        "content": "<p>yeah you can tell I'm mocking things quickly</p>",
        "id": 213007657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602489418
    },
    {
        "content": "<p>it's not actually about the type of operation that it does but rather it's \"mode of operation\", i.e. the way it handles its arguments</p>",
        "id": 213007700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602489452
    },
    {
        "content": "<p>just imagine you are doing a proof by cases on these variants, what is the most useful categorization?</p>",
        "id": 213007725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602489472
    },
    {
        "content": "<p>if some of these only interact with certain parts of the machine state (e.g. ALU ops vs memory ops) that's another possible categorization</p>",
        "id": 213007813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602489516
    },
    {
        "content": "<p>RISC-V is indeed a load-store architecture; which means that the ALU operations do not touch memory at all; and memory operations do no arithmetic (besides immediate offsets added to the register for the address)</p>",
        "id": 213007915,
        "sender_full_name": "SnowFox",
        "timestamp": 1602489590
    },
    {
        "content": "<blockquote>\n<p>One deviating hack I've considered is to allow the rd/rs1/rs2 to exceed their 5-bit limit to represent pseudo-registers a la SSA. But this adds a mode where assembly is illegal; which is fine. Assembly should happen only after register allocation anyway and these instructions are useful before register allocation.</p>\n</blockquote>\n<p>This should be fine; you can have an assembly function that turns an instruction into a bit pattern, and it can fail on some arguments</p>",
        "id": 213007981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602489607
    },
    {
        "content": "<p>although it sounds like you might need an extended semantics with a machine with infinite registers to make sense of the extra instructions</p>",
        "id": 213008201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602489740
    },
    {
        "content": "<p>unless they are just garbage instructions with no semantics</p>",
        "id": 213008233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602489764
    },
    {
        "content": "<p>I know some compilers use a v-code style approach, where you have the same instructions as the machine but with infinite registers; I prefer to just have an IR for that, where I get to pick a nicer set of high level instructions</p>",
        "id": 213008413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602489869
    },
    {
        "content": "<p>Regarding proofs; all will target the non-{pseudo,compressed} instructions. Pseudoinstructions won't exist in my compiler. Compressed instructions are only abbreviations of the larger instructions. Compression is applied when certain registers are used and when the destination is the first source register and in a few other cases. Currently all instructions are 32-bits. Compressed instructions are 16. Higher sizes exist in the specification but have no members and their format isn't frozen.</p>",
        "id": 213008780,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490125
    },
    {
        "content": "<p>v-code?</p>",
        "id": 213008827,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490167
    },
    {
        "content": "<p>My IR will be RVSDG-based enriched with equivalence graphs a la eqsat.</p>",
        "id": 213008918,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490224
    },
    {
        "content": "<p>RVSDG is very lambda calculus ish. My source language will be RDT based.</p>",
        "id": 213008966,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490270
    },
    {
        "content": "<p>well you also need a low level IR for doing register allocation</p>",
        "id": 213009007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602490299
    },
    {
        "content": "<p>unless you are going to go straight from there to machine code</p>",
        "id": 213009067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602490323
    },
    {
        "content": "<p>RVSDG = <a href=\"https://www.sintef.no/contentassets/11da6d67207348db98a30ddbdf3b0bba/reissmann_poster.pdf\">https://www.sintef.no/contentassets/11da6d67207348db98a30ddbdf3b0bba/reissmann_poster.pdf</a><br>\nEquality Saturation = <a href=\"https://www.cs.cornell.edu/~ross/publications/eqsat/\">https://www.cs.cornell.edu/~ross/publications/eqsat/</a><br>\nResourceful Dependent Types = <a href=\"http://www.cse.chalmers.se/~abela/talkTYPES18.pdf\">http://www.cse.chalmers.se/~abela/talkTYPES18.pdf</a> + <a href=\"http://www.cse.chalmers.se/~abela/types18.pdf\">http://www.cse.chalmers.se/~abela/types18.pdf</a></p>",
        "id": 213009085,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490338
    },
    {
        "content": "<p>I forget where I heard about v-code architecture, possibly <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/machinst/vcode.rs\">cranelift</a></p>",
        "id": 213009285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602490489
    },
    {
        "content": "<p>My understanding of RVSDG is that register colouring and instruction selection can be done straight from it without additional IRs.</p>",
        "id": 213009361,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490556
    },
    {
        "content": "<p>Is there a more complete reference for RVSDG than the poster?</p>",
        "id": 213009503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602490669
    },
    {
        "content": "<p>BTW: eqsat enriched here means that the RVSDG IR is non-destructively optimized by adding equivalent programs in an equivalence graph. All optimizations are applied in all orders until the resource bounds are reached.</p>",
        "id": 213009507,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490674
    },
    {
        "content": "<p>Yes.</p>",
        "id": 213009511,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490678
    },
    {
        "content": "<p>I thought it had a link at the bottom but it just says the reference.</p>",
        "id": 213009576,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490704
    },
    {
        "content": "<p>And that didn't seem to reference what I expected.. This is a great start. <a href=\"https://arxiv.org/abs/1912.05036\">https://arxiv.org/abs/1912.05036</a></p>",
        "id": 213009669,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490777
    },
    {
        "content": "<p>I also found <a href=\"https://www.sjalander.com/research/pdf/reissmann-PhD-thesis.pdf\">Reissmann's thesis</a></p>",
        "id": 213009760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602490813
    },
    {
        "content": "<p>Also a good resource. Though this arxiv paper is the GOTO reference IIUC. The poster is just a nice dense visual overview. :)</p>",
        "id": 213009955,
        "sender_full_name": "SnowFox",
        "timestamp": 1602490936
    },
    {
        "content": "<p>As an added bonus; with RDT as the source and RVSDG in the middle; I'll have linearity throughout the whole compiler. Which should have very good implications for memory usage.</p>",
        "id": 213010643,
        "sender_full_name": "SnowFox",
        "timestamp": 1602491443
    },
    {
        "content": "<p>Re splitting up <code>rvim</code>. If I split by these categories; the largest I have is 21. First by XLEN <code>{32, 64}</code>, then by ISA extension <code>{i, m}</code>, then into <code>{control flow (8), arithmetic (21), memory (8)}</code> with these numbers for rv32i. rv64i adds (0, 9, 3) respectively. rv32m +8 arith, rv64m +5 arith.</p>",
        "id": 213012077,
        "sender_full_name": "SnowFox",
        "timestamp": 1602492425
    },
    {
        "content": "<p>But this might be a bit too fine.. ?</p>",
        "id": 213012122,
        "sender_full_name": "SnowFox",
        "timestamp": 1602492456
    },
    {
        "content": "<p>The XLEN thing can hopefully be parameterized</p>",
        "id": 213012510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602492707
    },
    {
        "content": "<p>ISA extension is probably not worth it unless you intend to do something in particular with e.g. compiling to just rv64i</p>",
        "id": 213012588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602492744
    },
    {
        "content": "<p>For arithmetic ops in particular I would try my best to get uniform handling of a large number of those</p>",
        "id": 213012649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602492801
    },
    {
        "content": "<p>i.e. operations which differ only in the mathematical binary function being applied</p>",
        "id": 213012687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602492831
    },
    {
        "content": "<p>I will be compiling to restrictive configurations; but most extensions can be emulated so are safe to allow so long that they do get reduced to the target. I.e. multiplication without the M extension.</p>",
        "id": 213012742,
        "sender_full_name": "SnowFox",
        "timestamp": 1602492849
    },
    {
        "content": "<p>Another way to represent that is to have a predicate that tells you whether an instruction is in the configuration</p>",
        "id": 213012798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602492892
    },
    {
        "content": "<p>which seems like a good idea especially for risc-v because it has so many extensions</p>",
        "id": 213012872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602492935
    },
    {
        "content": "<p>You'll love the vector extension ;)</p>",
        "id": 213012891,
        "sender_full_name": "SnowFox",
        "timestamp": 1602492955
    },
    {
        "content": "<p>egh.. throw those all in one variant so they don't pollute the rest of the code</p>",
        "id": 213012973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602492989
    },
    {
        "content": "<p>Note these aren't all R, the format detection code I wrote in python to generate these doesn't yet understand the vectors. <a href=\"https://gist.github.com/4fd94ffef4917b2f42d9bdb48e72fa8b\">https://gist.github.com/4fd94ffef4917b2f42d9bdb48e72fa8b</a></p>",
        "id": 213013024,
        "sender_full_name": "SnowFox",
        "timestamp": 1602493035
    },
    {
        "content": "<p>441</p>",
        "id": 213013050,
        "sender_full_name": "SnowFox",
        "timestamp": 1602493059
    },
    {
        "content": "<p>I mean, this is just a bad representation, total abuse of the concept of an instruction</p>",
        "id": 213013128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493092
    },
    {
        "content": "<p>Certainly a lot more consumable than Intel's many many thousands of instructions.</p>",
        "id": 213013138,
        "sender_full_name": "SnowFox",
        "timestamp": 1602493101
    },
    {
        "content": "<p>see also <a href=\"https://www.sigarch.org/simd-instructions-considered-harmful/\">https://www.sigarch.org/simd-instructions-considered-harmful/</a></p>",
        "id": 213013141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493105
    },
    {
        "content": "<p>in lean you can at least separate those mostly into orthogonal representation pieces (like size + op)</p>",
        "id": 213013208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493155
    },
    {
        "content": "<p>there are 441 things you can do, in the same sense that there are 441 kinds of burgers I can get at the local burger shop</p>",
        "id": 213013258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493197
    },
    {
        "content": "<p>Very important note for RISC-V vectors; they are hardware configuration agnostic. I.e. unlike SSE, SSE3, AVX, AVX2, AVX512; RISC-V's V extension covers all of them generically. The vector lengths are user controlled and the hardware implements and optimizes however it wants to, if at all.</p>",
        "id": 213013322,
        "sender_full_name": "SnowFox",
        "timestamp": 1602493219
    },
    {
        "content": "<p>I find 37 occurrences of <code>ADD</code> in that list. clearly it's not orthogonal enough</p>",
        "id": 213013414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493287
    },
    {
        "content": "<p><a href=\"https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc\">https://github.com/riscv/riscv-v-spec/blob/master/v-spec.adoc</a></p>",
        "id": 213013726,
        "sender_full_name": "SnowFox",
        "timestamp": 1602493485
    },
    {
        "content": "<p>One thing I notice in the docs is that instructions are indeed grouped, and they even use \"dot notation\" for separating out the orthogonal parts, e.g. <code>vw(add|sub)(u?).{vw}{vx}</code> has some clear orthogonality going on</p>",
        "id": 213013954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493682
    },
    {
        "content": "<p>Note that many of these instructions really are just names for variants of the same instruction.</p>",
        "id": 213014019,
        "sender_full_name": "SnowFox",
        "timestamp": 1602493717
    },
    {
        "content": "<p>As you just pointed out. :)</p>",
        "id": 213014023,
        "sender_full_name": "SnowFox",
        "timestamp": 1602493723
    },
    {
        "content": "<p>I think it is very important that a formalization of the spec makes as much orthogonality explicit as possible</p>",
        "id": 213014068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493768
    },
    {
        "content": "<p>Agreed and this is the goal.</p>",
        "id": 213014085,
        "sender_full_name": "SnowFox",
        "timestamp": 1602493787
    },
    {
        "content": "<p>I still don't have a great grasp on how many instructions x86 has if you do this properly, but it's a lot less than 1500</p>",
        "id": 213014165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493823
    },
    {
        "content": "<p>Imagine how low that'd be for RISC-V ;)</p>",
        "id": 213014234,
        "sender_full_name": "SnowFox",
        "timestamp": 1602493888
    },
    {
        "content": "<p>it's just unfortunate that so many ISA specs \"case bash\" in their documentation</p>",
        "id": 213014236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493889
    },
    {
        "content": "<p>so it's not clear when something is one part of a family or a special exception until you read all the exponentially many doc strings to ensure they are all the same</p>",
        "id": 213014319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602493925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Not sure if you remember; but I started with only the \"opcode map\" and not the instructions themselves. Note that most opcodes are the same. The 32-bit instructions have 7 bits, where the low two are both high. Thus 5 bits, 32 opcodes. Note that SUB is really an ADD with one of its basically unused bits set high.</p>",
        "id": 213016483,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495239
    },
    {
        "content": "<p>See the top of page 129.  <a href=\"https://github.com/riscv/riscv-isa-manual/releases/download/draft-20200727-8088ba4/riscv-spec.pdf\">https://github.com/riscv/riscv-isa-manual/releases/download/draft-20200727-8088ba4/riscv-spec.pdf</a></p>",
        "id": 213016674,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495339
    },
    {
        "content": "<p>All the branch instructions have the BRANCH opcode, row = 11, column =  000, size = 11 (32-bit length). 1100011,</p>",
        "id": 213016843,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495435
    },
    {
        "content": "<p>For the most part the decoding is less important than the semantic classes of the instructions. It's not clear to me if the difference between <code>ADD</code> and <code>SUB</code> is any less/more than the difference between <code>ADD</code> and <code>XOR</code>, except in the encoding</p>",
        "id": 213016872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602495459
    },
    {
        "content": "<p>ADD and XOR have the same opcode, but are different functions. See their funct3 bits. ADD is 000, XOR is 100.</p>",
        "id": 213016990,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495514
    },
    {
        "content": "<p>I see that</p>",
        "id": 213017004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602495521
    },
    {
        "content": "<p>ADD and SUB have the same funct3 but differ in the extra bits</p>",
        "id": 213017054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602495560
    },
    {
        "content": "<p>Yes. Similarly for shifting left and right.</p>",
        "id": 213017084,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495581
    },
    {
        "content": "<p>but that seems like they just wanted 10 ALU ops and ran out of bits for the encoding</p>",
        "id": 213017085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602495583
    },
    {
        "content": "<p>Not quite; SUB is exactly the same hardware as ADD with one minor tweak. SUB is effectively a fused instruction to invert the sign, then add. Thus subtraction is an argument of addition.... ish</p>",
        "id": 213017289,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495684
    },
    {
        "content": "<p>hm, where's add-carry?</p>",
        "id": 213017412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602495732
    },
    {
        "content": "<p>Er, the left/right shifts use funct3. The right shifts logical vs arithmetic use the extra bit in funct7. Which just decides if it sign-extends or not.</p>",
        "id": 213017418,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495738
    },
    {
        "content": "<p>No add-carry because there are no carry flags or overflow exceptions ;)</p>",
        "id": 213017433,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495755
    },
    {
        "content": "<p>I guess a SUB is an ADC + NOT</p>",
        "id": 213017440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602495759
    },
    {
        "content": "<p>well I mean the operation x , y -&gt; x + y + 1</p>",
        "id": 213017465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602495777
    },
    {
        "content": "<p>or x + y + c if possible</p>",
        "id": 213017483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602495787
    },
    {
        "content": "<p>it's pretty important to have an op for that if you want to do e.g. bignum addition</p>",
        "id": 213017530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602495817
    },
    {
        "content": "<p>Right, not an instruction. Easy to emulate of course. Just as rv32i does multiplication and division without multiplication or division.</p>",
        "id": 213017596,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495845
    },
    {
        "content": "<p>Bignum implementations should defer carries anyway. Familiar with radix 2^51?</p>",
        "id": 213017646,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495888
    },
    {
        "content": "<p><a href=\"https://www.chosenplaintext.ca/articles/radix-2-51-trick.html\">https://www.chosenplaintext.ca/articles/radix-2-51-trick.html</a></p>",
        "id": 213017687,
        "sender_full_name": "SnowFox",
        "timestamp": 1602495920
    },
    {
        "content": "<p>RISC-V avoids exceptions and flags. There are no arithmetic flags. I.e. division by zero acts like it does in Lean, but in hardware! There are floating point flags, available in the control and status registers (CSR); fflags.</p>",
        "id": 213018369,
        "sender_full_name": "SnowFox",
        "timestamp": 1602496336
    },
    {
        "content": "<p>I don't object to that, but I hope there is still a way to perform a 65-bit addition</p>",
        "id": 213018658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602496544
    },
    {
        "content": "<p>Lets ask godbolt. <a href=\"https://godbolt.org/z/WPs5Mq\">https://godbolt.org/z/WPs5Mq</a></p>\n<p>Add then set less-than unsigned.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">widdening_add</span><span class=\"o\">:</span>                          <span class=\"bp\">#</span> <span class=\"bp\">@</span><span class=\"n\">widdening_add</span>\n        <span class=\"n\">add</span>     <span class=\"n\">a0</span><span class=\"o\">,</span> <span class=\"n\">a0</span><span class=\"o\">,</span> <span class=\"n\">a1</span>\n        <span class=\"n\">sltu</span>    <span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a0</span><span class=\"o\">,</span> <span class=\"n\">a1</span>\n        <span class=\"n\">ret</span>\n</code></pre></div>",
        "id": 213019289,
        "sender_full_name": "SnowFox",
        "timestamp": 1602496957
    },
    {
        "content": "<p>clever</p>",
        "id": 213019830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602497387
    },
    {
        "content": "<p>These are equivalent.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">uint128</span> <span class=\"nf\">widdening_add</span><span class=\"p\">(</span><span class=\"n\">uint64</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">uint64</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">uint128</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">uint128</span><span class=\"p\">)</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">uint128</span> <span class=\"nf\">widdening_add2</span><span class=\"p\">(</span><span class=\"n\">uint64</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">uint64</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">uint64</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">uint128</span><span class=\"p\">)</span> <span class=\"n\">c</span> <span class=\"o\">+</span>\n      <span class=\"p\">(((</span><span class=\"n\">uint128</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"p\">))</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">64</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 213019890,
        "sender_full_name": "SnowFox",
        "timestamp": 1602497405
    },
    {
        "content": "<p>To contrast to x86...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">widdening_add</span><span class=\"o\">:</span>\n        <span class=\"n\">mov</span>     <span class=\"n\">rax</span><span class=\"o\">,</span> <span class=\"n\">rdi</span>\n        <span class=\"n\">xor</span>     <span class=\"n\">edx</span><span class=\"o\">,</span> <span class=\"n\">edx</span>\n        <span class=\"n\">xor</span>     <span class=\"n\">edi</span><span class=\"o\">,</span> <span class=\"n\">edi</span>\n        <span class=\"n\">add</span>     <span class=\"n\">rax</span><span class=\"o\">,</span> <span class=\"n\">rsi</span>\n        <span class=\"n\">adc</span>     <span class=\"n\">rdx</span><span class=\"o\">,</span> <span class=\"n\">rdi</span>\n        <span class=\"n\">ret</span>\n<span class=\"n\">widdening_add2</span><span class=\"o\">:</span>\n        <span class=\"n\">add</span>     <span class=\"n\">rdi</span><span class=\"o\">,</span> <span class=\"n\">rsi</span>\n        <span class=\"n\">mov</span>     <span class=\"n\">edx</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n        <span class=\"n\">mov</span>     <span class=\"n\">rax</span><span class=\"o\">,</span> <span class=\"n\">rdi</span>\n        <span class=\"n\">jnc</span>     <span class=\"bp\">.</span><span class=\"n\">L3</span>\n        <span class=\"n\">add</span>     <span class=\"n\">rdx</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n<span class=\"bp\">.</span><span class=\"n\">L3</span><span class=\"o\">:</span>\n        <span class=\"n\">ret</span>\n</code></pre></div>",
        "id": 213020076,
        "sender_full_name": "SnowFox",
        "timestamp": 1602497555
    },
    {
        "content": "<p>Register movement noise and it doesn't even generate the same code.</p>",
        "id": 213020110,
        "sender_full_name": "SnowFox",
        "timestamp": 1602497595
    },
    {
        "content": "<p>I don't think that's optimal code though</p>",
        "id": 213020225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602497688
    },
    {
        "content": "<p>I'm pretty sure you can get it down to one instruction if you handcode the assembly</p>",
        "id": 213020275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602497725
    },
    {
        "content": "<p>BTW: I use RISC-V's assembly to debug my x86 code... I avoid x86. :D</p>",
        "id": 213020303,
        "sender_full_name": "SnowFox",
        "timestamp": 1602497757
    },
    {
        "content": "<p>I don't want to suggest that x86 is a good ISA by any stretch, but ADC looks like a useful instruction to me</p>",
        "id": 213020364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602497790
    },
    {
        "content": "<p>Aside: even <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/norm_num.lean#L115-L131\">norm_num</a> likes adc</p>",
        "id": 213020512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602497903
    },
    {
        "content": "<p>I believe that RISC-V is the best ISA option there is. It may not be perfect but the complaints are small and few. I think I can trim RISC-V down by using the real opcode map instead of the instruction list; then generalize over the formats and get something pretty small.</p>\n<p>With this, I guess I'm going to set aside our progress so far and start fresh. Focusing on keeping the inductives reasonable. An unfortunate reason to push towards this design, though I hope it'll work out better anyway.</p>",
        "id": 213020846,
        "sender_full_name": "SnowFox",
        "timestamp": 1602498182
    },
    {
        "content": "<p>The main reason I chose x86 instead of RISC-V for the MM0 project was because x86 hardware is more accessible</p>",
        "id": 213021197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602498441
    },
    {
        "content": "<p>I think that from a technical perspective RISC-V is an obvious improvement on all axes, because it was actually designed instead of accrued</p>",
        "id": 213021296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602498512
    },
    {
        "content": "<p>I don't know the implications on hardware demands for your project; but for mine, where there are sensitive security critical details involved... I'd really rather start with a well designed ISA I can memorize and reason with.</p>\n<p>I'm \"okay\" with running my code in an emulator or using a JIT to x86 recompiler to run my code. Simply because it will take time to implement my compiler and language, to implement what I want to in it, and verify the whole chain there. This is a project for the future, where I can only see success for RISC-V and x86 necessarily dying out.</p>\n<p>Worst case, someone else can just extend my compiler with an x86 backend. ;)</p>",
        "id": 213021689,
        "sender_full_name": "SnowFox",
        "timestamp": 1602498768
    },
    {
        "content": "<p>The emulator and JIT obviously ruin the security properties of the language and compiler; but are fine to just run code.</p>",
        "id": 213021797,
        "sender_full_name": "SnowFox",
        "timestamp": 1602498818
    },
    {
        "content": "<p>Well, as long as it can be soundly specified one ISA is as good as another</p>",
        "id": 213021817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602498828
    },
    {
        "content": "<p>but other arches are on the todo list, after the initial MVP is done</p>",
        "id": 213021974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602498922
    },
    {
        "content": "<p>What are your targets?</p>",
        "id": 213022063,
        "sender_full_name": "SnowFox",
        "timestamp": 1602498974
    },
    {
        "content": "<p>But for the purpose of minimizing the chain of trust, it's no good to emulate the hardware because then you have to trust the emulator <em>and</em> the x86 machine it's running on</p>",
        "id": 213022089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602498999
    },
    {
        "content": "<p>Right now, I target a simple subset of x86-64 + a simple subset of posix</p>",
        "id": 213022132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602499033
    },
    {
        "content": "<p>the output is an ELF executable file, and the spec describes how the bits of that file turn into operational behavior</p>",
        "id": 213022220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602499085
    },
    {
        "content": "<p>Right; I can't trust x86 at all and I certainly can't trust my RISC-V code when emulating it. The emulator is exclusively to just run it on legacy hardware until both all my code is ready, and RISC-V is cheap enough and has taken over the world. Yes, I'm calling all x86 legacy. :)</p>",
        "id": 213022292,
        "sender_full_name": "SnowFox",
        "timestamp": 1602499184
    },
    {
        "content": "<p>Kernel-wise; I'll target seL4 and will write a basic wrapper to run it on POSIX environments. OS-wise, I'll target Robigalia. Which is barely a thing so far.... but we're passionate to have a safe operating system. :)</p>",
        "id": 213022535,
        "sender_full_name": "SnowFox",
        "timestamp": 1602499377
    },
    {
        "content": "<p>I'm focusing on cryptography, capabilities, and verified distributed protocols.</p>",
        "id": 213022706,
        "sender_full_name": "SnowFox",
        "timestamp": 1602499527
    },
    {
        "content": "<p>Do you plan to implement all of x86?</p>",
        "id": 213022789,
        "sender_full_name": "SnowFox",
        "timestamp": 1602499588
    },
    {
        "content": "<p>I'd like to at least handle all of RV{32,64}IMCV. Note the lack of atomics and floats. Though they could come later.</p>",
        "id": 213022873,
        "sender_full_name": "SnowFox",
        "timestamp": 1602499644
    },
    {
        "content": "<p>Might throw in B too, the bit manipulation extension can be good for cryptography. But that is much less ready than V. V might even be stable soon.</p>",
        "id": 213022979,
        "sender_full_name": "SnowFox",
        "timestamp": 1602499700
    },
    {
        "content": "<p>I believe that SiFive is waiting on V to be stable before they offer a cheap Linux-ready SBC. Holding back with the expensive devboards until then.</p>",
        "id": 213023129,
        "sender_full_name": "SnowFox",
        "timestamp": 1602499804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328454\">SnowFox</span> <a href=\"#narrow/stream/236449-Program-verification/topic/RISC-V.20ISA.20in.20Lean/near/213022789\">said</a>:</p>\n<blockquote>\n<p>Do you plan to implement all of x86?</p>\n</blockquote>\n<p>Certainly not. x86 is the means not the end. I've got about 30 instructions and even that might have been more than needed</p>",
        "id": 213023165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602499826
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/mm0/blob/master/examples/x86.mm0\">https://github.com/digama0/mm0/blob/master/examples/x86.mm0</a> is about 1600 lines to specify x86 + linux enough to compile a C-like programming language</p>",
        "id": 213023325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602499931
    },
    {
        "content": "<p>The <a href=\"https://github.com/digama0/mm0/blob/master/examples/x86.mm0#L292-L331\">main inductive type for instructions</a> has 5+6+7+4=22 variants</p>",
        "id": 213023615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602500139
    },
    {
        "content": "<p>aside: My godbolt test was a widening addition with 2x 64 bit numbers, not two 65 bit numbers. Not sure which you intended. If you meant the 2x 65-bit addition, then it is equivalent to 2x 128-bit addition. 3x 64-bit adds + one sltu to extract the carry bit.</p>",
        "id": 213023635,
        "sender_full_name": "SnowFox",
        "timestamp": 1602500161
    },
    {
        "content": "<p>The unit of work in a bignum addition is 64 + 64 + 1 bit addition to produce a 65 bit result</p>",
        "id": 213023730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602500212
    },
    {
        "content": "<p>Then I guess that'd be 3x add + 2x sltu.</p>",
        "id": 213023962,
        "sender_full_name": "SnowFox",
        "timestamp": 1602500383
    },
    {
        "content": "<p>But I think that'd be a silly method. When working with lots of or large numbers, you really want to defer the carries. Carries are too slow to handle immediately.</p>",
        "id": 213024059,
        "sender_full_name": "SnowFox",
        "timestamp": 1602500436
    },
    {
        "content": "<p>Especially if you have lots of operations to do.</p>",
        "id": 213024125,
        "sender_full_name": "SnowFox",
        "timestamp": 1602500471
    },
    {
        "content": "<p>For verification though, with a single add loop, you probably don't want the complexity of deferred carries</p>",
        "id": 213024507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602500700
    },
    {
        "content": "<p>like in the norm_num example, I don't know if deferred carries help at all</p>",
        "id": 213024539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602500730
    },
    {
        "content": "<p>because it's serial</p>",
        "id": 213024564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602500755
    },
    {
        "content": "<p>The difference is when you do something like adding 50 numbers. With the smaller radix; you split each number into smaller parts and let them grow until they could overflow, and finally apply the carries all at once. For radix 2^51 with 64-bit words, you can add 2^13 pre-normalized numbers before you need to normalize the carries. Next with associativity, you can see how parallel you can make this go. Not serial.</p>",
        "id": 213024831,
        "sender_full_name": "SnowFox",
        "timestamp": 1602500972
    },
    {
        "content": "<p>No I mean proof checking is serial</p>",
        "id": 213024925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602501054
    },
    {
        "content": "<p>so something like <code>norm_num</code> has no advantage producing proofs of numerical facts with deferred carries</p>",
        "id": 213024951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602501084
    },
    {
        "content": "<p>/me shrugs; just not where you'd use either then :P</p>",
        "id": 213025134,
        "sender_full_name": "SnowFox",
        "timestamp": 1602501220
    },
    {
        "content": "<p>well, lean does addition in base 2 instead of 2^64 but the principle is the same</p>",
        "id": 213025213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602501255
    },
    {
        "content": "<p>amusingly, I've written norm_num three times now in three different proof systems and each time the base is different: lean's is base 2, metamath uses base 10, and MM0 uses base 16</p>",
        "id": 213025287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602501328
    },
    {
        "content": "<p>Heh</p>",
        "id": 213025306,
        "sender_full_name": "SnowFox",
        "timestamp": 1602501355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You mentioned \"nested inductives\" earlier, what does this mean? I understand mutually inductive types, haven't seen nested. Is there a syntax for it or just a thing you can do with the low level tools?</p>",
        "id": 213025560,
        "sender_full_name": "SnowFox",
        "timestamp": 1602501559
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 213025576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602501579
    },
    {
        "content": "<p>you use the inductive you are defining as a parameter to another inductive type</p>",
        "id": 213025634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602501604
    },
    {
        "content": "<p>Ah. Okay.</p>",
        "id": 213025648,
        "sender_full_name": "SnowFox",
        "timestamp": 1602501621
    },
    {
        "content": "<p>functions don't count - this is a regular inductive</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 213025665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602501635
    },
    {
        "content": "<p>Noted. What is special about the nested variant that makes it a def instead of an inductive; in so far as #print sees it?</p>",
        "id": 213025750,
        "sender_full_name": "SnowFox",
        "timestamp": 1602501717
    },
    {
        "content": "<p>lean's kernel doesn't actually support nested inductives, so instead it does some smoke and mirrors around a definition like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">list_foo</span>\n<span class=\"k\">with</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list_foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span>\n<span class=\"k\">with</span> <span class=\"n\">list_foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list_foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">list_foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">list_foo</span>\n</code></pre></div>\n\n<p>which is itself defined in terms of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"n\">tt</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo'</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"n\">ff</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo'</span> <span class=\"n\">tt</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo'</span> <span class=\"n\">tt</span>\n</code></pre></div>\n\n<p>which is a regular (indexed) inductive type that lean's kernel understands. Then you have to define all the maps from this type to the original type you wanted, and prove the recursion principle, and here the support is a little lacking, and you get a weak recursion principle that isn't good enough to prove all the facts you would like</p>",
        "id": 213026009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602501903
    },
    {
        "content": "<p>So I advise you to avoid the conditions under which lean triggers the nested/mutual compilation strategy, and write <code>foo'</code> directly if you need to</p>",
        "id": 213026214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602502068
    },
    {
        "content": "<p>Huh, sounds unfortunate.. Noted.</p>",
        "id": 213026283,
        "sender_full_name": "SnowFox",
        "timestamp": 1602502116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What do you think of this so far?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbreviation</span> <span class=\"n\">register</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">reg_imm</span>\n<span class=\"bp\">|</span> <span class=\"n\">reg</span> <span class=\"o\">(</span><span class=\"n\">reg</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">imm</span> <span class=\"o\">(</span><span class=\"n\">imm</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">compare</span> <span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"bp\">|</span> <span class=\"n\">ltu</span> <span class=\"bp\">|</span> <span class=\"n\">geu</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">operation</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">invert</span> <span class=\"o\">:</span> <span class=\"n\">opt_param</span> <span class=\"n\">bool</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"o\">:</span> <span class=\"n\">opt_param</span> <span class=\"n\">bool</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">xor</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ast</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">compare</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rs1</span> <span class=\"n\">rs2</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">jump</span> <span class=\"o\">(</span><span class=\"n\">reg</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">arith</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">operation</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rs2_imm</span> <span class=\"o\">:</span> <span class=\"n\">reg_imm</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">load</span> <span class=\"o\">(</span><span class=\"n\">dest</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">width</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">store</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">width</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213027910,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503458
    },
    {
        "content": "<p>is the shift amount always an immediate?</p>",
        "id": 213027961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602503503
    },
    {
        "content": "<p>Er, that amount shouldn't be in that position.</p>",
        "id": 213028024,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503530
    },
    {
        "content": "<p>But it is the only integer here, so replace that with direction : bool</p>",
        "id": 213028044,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503551
    },
    {
        "content": "<p>looks pretty good. Is this the whole thing?</p>",
        "id": 213028084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602503583
    },
    {
        "content": "<p>Or just two separate operations.</p>",
        "id": 213028087,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503584
    },
    {
        "content": "<p>This covers RV32I.</p>",
        "id": 213028126,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503618
    },
    {
        "content": "<p>if so it's a pretty massive reduction from the original</p>",
        "id": 213028133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602503626
    },
    {
        "content": "<p>Very!</p>",
        "id": 213028198,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503646
    },
    {
        "content": "<p>There is also what I started with; before we derailed with the raw instructions. Which I'll probably use this round.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">rv_base_opcode</span>\n<span class=\"bp\">|</span> <span class=\"n\">load</span>   <span class=\"bp\">|</span> <span class=\"n\">load_fp</span>  <span class=\"bp\">|</span> <span class=\"n\">custom_0</span>   <span class=\"bp\">|</span> <span class=\"n\">misc_mem</span> <span class=\"bp\">|</span> <span class=\"n\">op_imm</span> <span class=\"bp\">|</span> <span class=\"n\">auipc</span>      <span class=\"bp\">|</span> <span class=\"n\">op_imm_32</span>\n<span class=\"bp\">|</span> <span class=\"n\">store</span>  <span class=\"bp\">|</span> <span class=\"n\">store_fp</span> <span class=\"bp\">|</span> <span class=\"n\">custom_1</span>   <span class=\"bp\">|</span> <span class=\"n\">amo</span>      <span class=\"bp\">|</span> <span class=\"n\">op</span>     <span class=\"bp\">|</span> <span class=\"n\">lui</span>        <span class=\"bp\">|</span> <span class=\"n\">op_32</span>\n<span class=\"bp\">|</span> <span class=\"n\">madd</span>   <span class=\"bp\">|</span> <span class=\"n\">msub</span>     <span class=\"bp\">|</span> <span class=\"n\">nmsub</span>      <span class=\"bp\">|</span> <span class=\"n\">nmadd</span>    <span class=\"bp\">|</span> <span class=\"n\">op_fp</span>  <span class=\"bp\">|</span> <span class=\"n\">reserved_0</span> <span class=\"bp\">|</span> <span class=\"n\">custom_2</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"bp\">|</span> <span class=\"n\">jalr</span>     <span class=\"bp\">|</span> <span class=\"n\">reserved_1</span> <span class=\"bp\">|</span> <span class=\"n\">jal</span>      <span class=\"bp\">|</span> <span class=\"n\">system</span> <span class=\"bp\">|</span> <span class=\"n\">reserved_2</span> <span class=\"bp\">|</span> <span class=\"n\">custom_3</span>\n</code></pre></div>",
        "id": 213028389,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503776
    },
    {
        "content": "<p>This doesn't cover encoding though; hopefully these classes align well with the opcodes</p>",
        "id": 213028429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602503810
    },
    {
        "content": "<p>right, that</p>",
        "id": 213028436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602503819
    },
    {
        "content": "<p>They do. All operations over immediates are <code>rv_base_opcode.op_imm</code>. All operations over registers are <code>rv_base_opcode.op</code>. The specifics only map to <code>funct3</code> and <code>funct7</code> where <code>funct7</code> is basically one bit rarely set, occasionally a different bit. :P</p>",
        "id": 213028560,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503910
    },
    {
        "content": "<p>... mostly lots of zeros :)</p>",
        "id": 213028569,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503921
    },
    {
        "content": "<p>I mean <code>ast</code></p>",
        "id": 213028600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602503951
    },
    {
        "content": "<p>clearly <code>rv_base_opcode</code> maps well to the opcodes, AFAICT it's 1-1</p>",
        "id": 213028614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602503972
    },
    {
        "content": "<p>Right, I meant that <code>ast.arith</code> has only two opcodes.</p>",
        "id": 213028625,
        "sender_full_name": "SnowFox",
        "timestamp": 1602503983
    },
    {
        "content": "<p><code>ast.branch</code> maps to <code>opcodes.branch</code>, <code>ast.jump</code> with <code>jal</code> and <code>jalr</code>. load and store, are well, exactly those.</p>",
        "id": 213028722,
        "sender_full_name": "SnowFox",
        "timestamp": 1602504033
    },
    {
        "content": "<p>you should try writing the function <code>ast -&gt; (opc, funct3, funct7)</code>, hopefully you can pattern match your way to victory</p>",
        "id": 213028781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602504076
    },
    {
        "content": "<p>or I guess that could even map directly to <code>nat</code> (really <code>fin (2^32)</code>) using helper functions like <code>fmt_R (opcode7 funct3 funct7 rd rs1 rs2 : nat) : nat</code></p>",
        "id": 213028954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602504210
    },
    {
        "content": "<p>that seems like the cleanest way to write down all that encoding information on this <code>ast</code> basis</p>",
        "id": 213029049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602504279
    },
    {
        "content": "<p>Why does vscodium not always offer to expand case splits for you? o.o</p>",
        "id": 213029494,
        "sender_full_name": "SnowFox",
        "timestamp": 1602504627
    },
    {
        "content": "<p>Hmm. Does it make sense to expand these out or use \"modes\" of the base operation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">operation</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"bp\">|</span> <span class=\"n\">sub</span> <span class=\"bp\">|</span> <span class=\"n\">addw</span>\n<span class=\"bp\">|</span> <span class=\"n\">sll</span> <span class=\"bp\">|</span> <span class=\"n\">srl</span> <span class=\"bp\">|</span> <span class=\"n\">sra</span>\n<span class=\"bp\">|</span> <span class=\"n\">xor</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"bp\">|</span> <span class=\"n\">mulh</span> <span class=\"bp\">|</span> <span class=\"n\">mulhs</span> <span class=\"bp\">|</span> <span class=\"n\">mulhsu</span> <span class=\"bp\">|</span> <span class=\"n\">mulw</span>\n<span class=\"bp\">|</span> <span class=\"n\">div</span> <span class=\"bp\">|</span> <span class=\"n\">divu</span> <span class=\"bp\">|</span> <span class=\"n\">divw</span> <span class=\"bp\">|</span> <span class=\"n\">divuw</span>\n<span class=\"bp\">|</span> <span class=\"n\">rem</span> <span class=\"bp\">|</span> <span class=\"n\">remu</span> <span class=\"bp\">|</span> <span class=\"n\">remw</span> <span class=\"bp\">|</span> <span class=\"n\">remuw</span>\n</code></pre></div>",
        "id": 213036327,
        "sender_full_name": "SnowFox",
        "timestamp": 1602508606
    },
    {
        "content": "<p>how are they specified?</p>",
        "id": 213036422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602508648
    },
    {
        "content": "<p>rv64i adds <code>addw</code>. rvm adds the last 3 rows.</p>",
        "id": 213036436,
        "sender_full_name": "SnowFox",
        "timestamp": 1602508653
    },
    {
        "content": "<p>Eh, RV64I adds a few more.</p>",
        "id": 213036538,
        "sender_full_name": "SnowFox",
        "timestamp": 1602508690
    },
    {
        "content": "<p>The main question is whether you are always going to have to case split the subparts anyway</p>",
        "id": 213036577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602508714
    },
    {
        "content": "<p>Yes.</p>",
        "id": 213036629,
        "sender_full_name": "SnowFox",
        "timestamp": 1602508741
    },
    {
        "content": "<p>if there are functions where you can say <code>(mul _) := stuff</code> where <code>_</code> is the subop, then it's a win</p>",
        "id": 213036645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602508746
    },
    {
        "content": "<p>The Ws are operations over sign-extended 32-bits on 64-bit systems. the rest are XLEN-wise.</p>",
        "id": 213036703,
        "sender_full_name": "SnowFox",
        "timestamp": 1602508779
    },
    {
        "content": "<p>All but the logical operations have a W variant.</p>",
        "id": 213036824,
        "sender_full_name": "SnowFox",
        "timestamp": 1602508827
    },
    {
        "content": "<p>So I guess I should split arithmetic into two modes and split logic out.</p>",
        "id": 213036858,
        "sender_full_name": "SnowFox",
        "timestamp": 1602508844
    },
    {
        "content": "<p>I also forgot about set less than (unsigned) which I guess is logic.</p>",
        "id": 213036914,
        "sender_full_name": "SnowFox",
        "timestamp": 1602508876
    },
    {
        "content": "<p>However, there is no mul[h[[s]u]]w.</p>",
        "id": 213037161,
        "sender_full_name": "SnowFox",
        "timestamp": 1602509005
    },
    {
        "content": "<p>Only mulw, of all those options.</p>",
        "id": 213037186,
        "sender_full_name": "SnowFox",
        "timestamp": 1602509021
    },
    {
        "content": "<p>Which I guess is fine to \"allow\" and later mark as invalid.</p>",
        "id": 213037279,
        "sender_full_name": "SnowFox",
        "timestamp": 1602509052
    },
    {
        "content": "<p>As I'd do for subtraction with an immediate.</p>",
        "id": 213037319,
        "sender_full_name": "SnowFox",
        "timestamp": 1602509073
    },
    {
        "content": "<p>(Because addition with an immediate has signed immediates already)</p>",
        "id": 213037392,
        "sender_full_name": "SnowFox",
        "timestamp": 1602509102
    },
    {
        "content": "<p><code>RV{32,64}IM</code> with a few illegal cases, but easy to normalize (<code>subi -&gt; addi</code>) or mark as invalid (no <code>mulhw</code> et al).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbreviation</span> <span class=\"n\">register</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">reg_imm</span>\n<span class=\"bp\">|</span> <span class=\"n\">reg</span> <span class=\"o\">(</span><span class=\"n\">reg</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">imm</span> <span class=\"o\">(</span><span class=\"n\">imm</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">compare</span> <span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"bp\">|</span> <span class=\"n\">ltu</span> <span class=\"bp\">|</span> <span class=\"n\">geu</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">arithmetic</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"bp\">|</span> <span class=\"n\">sub</span>\n<span class=\"bp\">|</span> <span class=\"n\">sll</span> <span class=\"bp\">|</span> <span class=\"n\">srl</span> <span class=\"bp\">|</span> <span class=\"n\">sra</span>\n<span class=\"bp\">|</span> <span class=\"n\">slt</span> <span class=\"bp\">|</span> <span class=\"n\">sltu</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"bp\">|</span> <span class=\"n\">mulh</span> <span class=\"bp\">|</span> <span class=\"n\">mulhu</span> <span class=\"bp\">|</span> <span class=\"n\">mulhsu</span>\n<span class=\"bp\">|</span> <span class=\"n\">div</span> <span class=\"bp\">|</span> <span class=\"n\">divu</span>\n<span class=\"bp\">|</span> <span class=\"n\">rem</span> <span class=\"bp\">|</span> <span class=\"n\">remu</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">logical</span>\n<span class=\"bp\">|</span> <span class=\"n\">xor</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ast</span>\n<span class=\"bp\">|</span> <span class=\"n\">arith</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">arithmetic</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rs2_imm</span> <span class=\"o\">:</span> <span class=\"n\">reg_imm</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">logic</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">logical</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rs2_imm</span> <span class=\"o\">:</span> <span class=\"n\">reg_imm</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lui</span> <span class=\"o\">(</span><span class=\"n\">rd</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">auipc</span> <span class=\"o\">(</span><span class=\"n\">rd</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">jump</span> <span class=\"o\">(</span><span class=\"n\">reg</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">compare</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rs1</span> <span class=\"n\">rs2</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">load</span> <span class=\"o\">(</span><span class=\"n\">dest</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">width</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">store</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">width</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">register</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fence</span> <span class=\"o\">(</span><span class=\"n\">mode</span> <span class=\"n\">pred</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">call</span>\n<span class=\"bp\">|</span> <span class=\"n\">break</span>\n</code></pre></div>",
        "id": 213039151,
        "sender_full_name": "SnowFox",
        "timestamp": 1602509946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>get_opcode</code> and <code>get_funct</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">ast</span>\n  <span class=\"kd\">def</span> <span class=\"n\">get_opcode</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">opcode</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.branch</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">jump</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.jalr</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">jump</span> <span class=\"n\">_</span> <span class=\"n\">none</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.jal</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">_</span> <span class=\"n\">ff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">reg_imm.reg</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.op</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">_</span> <span class=\"n\">ff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">reg_imm.imm</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.op_imm</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">_</span> <span class=\"n\">tt</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">reg_imm.reg</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.op_32</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">_</span> <span class=\"n\">tt</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">reg_imm.imm</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.op_imm_32</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">logic</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">reg_imm.reg</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.op_32</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">logic</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">reg_imm.imm</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.op_imm_32</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lui</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.lui</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">auipc</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.auipc</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">load</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.load</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">store</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.store</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fence</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.misc_mem</span>\n  <span class=\"bp\">|</span> <span class=\"n\">call</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.system</span>\n  <span class=\"bp\">|</span> <span class=\"n\">break</span> <span class=\"o\">:=</span> <span class=\"n\">opcode.system</span>\n\n  <span class=\"kn\">open</span> <span class=\"n\">arithmetic</span>\n  <span class=\"kn\">open</span> <span class=\"n\">logical</span>\n  <span class=\"kn\">open</span> <span class=\"n\">compare</span>\n\n  <span class=\"c1\">-- funct7 &lt;&lt; 3 + funct3</span>\n  <span class=\"kd\">def</span> <span class=\"n\">get_funct</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span>\n  <span class=\"c1\">-- rvi</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"mi\">0b000</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"o\">:=</span> <span class=\"mi\">0b001</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"mi\">0b100</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"o\">:=</span> <span class=\"mi\">0b101</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ltu</span> <span class=\"o\">:=</span> <span class=\"mi\">0b110</span>\n    <span class=\"bp\">|</span> <span class=\"n\">gtu</span> <span class=\"o\">:=</span> <span class=\"mi\">0b111</span>\n    <span class=\"kd\">end</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">jump</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">add</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b000</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">sub</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b000</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0100000</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">sll</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b001</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">slt</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b010</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">sltu</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b011</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">srl</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b101</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0100000</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">sra</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b101</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">logic</span> <span class=\"n\">xor</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"mi\">0b100</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">logic</span> <span class=\"n\">or</span>   <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"mi\">0b110</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">logic</span> <span class=\"n\">and</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"mi\">0b111</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">load</span> <span class=\"n\">_</span> <span class=\"n\">width</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">width.val</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">store</span> <span class=\"n\">_</span> <span class=\"n\">width</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">width.val</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lui</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">auipc</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fence</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">call</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">break</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"c1\">-- rvm</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">mul</span>    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b000</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0000001</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">mulh</span>   <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b001</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0000001</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">mulhsu</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b010</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0000001</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">mulhu</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b011</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0000001</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">div</span>    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b100</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0000001</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">divu</span>   <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b101</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0000001</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">rem</span>    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b110</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0000001</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">remu</span>   <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0b111</span> <span class=\"bp\">+</span> <span class=\"n\">nat.shiftl</span> <span class=\"mi\">3</span> <span class=\"mi\">0b0000001</span>\n<span class=\"kd\">end</span> <span class=\"n\">ast</span>\n</code></pre></div>",
        "id": 213042236,
        "sender_full_name": "SnowFox",
        "timestamp": 1602511422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> How does this partitioning look?</p>",
        "id": 213042356,
        "sender_full_name": "SnowFox",
        "timestamp": 1602511459
    },
    {
        "content": "<p><code>s/ast/inst/g</code>. Not quite a tree...</p>",
        "id": 213043593,
        "sender_full_name": "SnowFox",
        "timestamp": 1602512085
    },
    {
        "content": "<p>why the <code>match</code> on branch conditions, instead of putting it in the top level?</p>",
        "id": 213043888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602512231
    },
    {
        "content": "<p>Unless <code>funct7</code> is actually 3 bits above <code>funct3</code>, you probably shouldn't mix them like that, and instead either return an inductive type (with a case for <code>funct3</code> and another for <code>funct3 + funct7</code>), or a precomposed <code>nat</code> containing the entire instruction (using auxiliary functions <code>type_1 : funct3 -&gt; nat</code> and <code>type_2 : funct3 -&gt; funct7 -&gt; nat</code>)</p>",
        "id": 213044198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602512389
    },
    {
        "content": "<p>Actually I should shift it more than 3, as they are a fixed distance across. This is consistent for all 32-bit instructions.</p>",
        "id": 213044356,
        "sender_full_name": "SnowFox",
        "timestamp": 1602512460
    },
    {
        "content": "<p>That match will be moved. I'm currently enumerating the opcodes of interest to map them to formats; then I'll write an encoder and decoder which masks appropriately.</p>",
        "id": 213044443,
        "sender_full_name": "SnowFox",
        "timestamp": 1602512519
    },
    {
        "content": "<p>I mean you have those instruction formats, right? you should keep them separate until you have all the fields</p>",
        "id": 213044520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602512551
    },
    {
        "content": "<p>The format only decides the layout of the immediates and which are present between <code>rd rs1 rs2 funct3 funct7</code>. <code>funct7</code> \"doesn't exist for immediates\" but there are a few immediates which effectively use it. Specifically the shift right arithmetic. So it \"acts\" half-way between I and R.</p>",
        "id": 213044854,
        "sender_full_name": "SnowFox",
        "timestamp": 1602512751
    },
    {
        "content": "<p>that is, you can define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fmt_R</span> <span class=\"o\">(</span><span class=\"n\">opcode7</span> <span class=\"n\">funct3</span> <span class=\"n\">funct7</span> <span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"n\">rs2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">opcode7</span> <span class=\"bp\">+</span> <span class=\"n\">rd.shiftl</span> <span class=\"mi\">7</span> <span class=\"bp\">+</span> <span class=\"n\">funct3.shiftl</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span>\n<span class=\"n\">rs1.shiftl</span> <span class=\"mi\">15</span> <span class=\"bp\">+</span> <span class=\"n\">rs2.shiftl</span> <span class=\"mi\">20</span> <span class=\"bp\">+</span> <span class=\"n\">funct7.shiftl</span> <span class=\"mi\">25</span>\n</code></pre></div>\n\n<p>and then write <code>encode : ast -&gt; nat</code> that calls <code>fmt_R</code> for R-type instructions</p>",
        "id": 213045093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602512866
    },
    {
        "content": "<p>and <code>fmt_I</code> doesn't have a <code>funct7</code> argument so there is no bad typing</p>",
        "id": 213045183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602512894
    },
    {
        "content": "<p>The format only influences decoding (as we need to know how to mask the correct values out); and for the immediate layout while encoding. The encoder can assume every instruction has an opcode, has all the registers, and has both function parts without caring about the format.</p>",
        "id": 213047137,
        "sender_full_name": "SnowFox",
        "timestamp": 1602513753
    },
    {
        "content": "<p>Only the immediate explosion depends on the format -- for encoding. Actually decoding could probably be pretty lazy too.</p>",
        "id": 213047315,
        "sender_full_name": "SnowFox",
        "timestamp": 1602513847
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">opcode.encode</span> <span class=\"o\">:</span> <span class=\"n\">opcode</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">branch_funct3</span> <span class=\"o\">:</span> <span class=\"n\">compare</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq</span> <span class=\"o\">:=</span> <span class=\"mi\">0b000</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ne</span> <span class=\"o\">:=</span> <span class=\"mi\">0b001</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"mi\">0b100</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ge</span> <span class=\"o\">:=</span> <span class=\"mi\">0b101</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ltu</span> <span class=\"o\">:=</span> <span class=\"mi\">0b110</span>\n  <span class=\"bp\">|</span> <span class=\"n\">gtu</span> <span class=\"o\">:=</span> <span class=\"mi\">0b111</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">B_type</span> <span class=\"o\">(</span><span class=\"n\">opcode</span> <span class=\"n\">funct3</span> <span class=\"n\">rs1</span> <span class=\"n\">rs2</span> <span class=\"n\">imm</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"kd\">def</span> <span class=\"n\">J_type</span> <span class=\"o\">(</span><span class=\"n\">opcode</span> <span class=\"n\">rd</span> <span class=\"n\">imm</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"kd\">def</span> <span class=\"n\">I_type</span> <span class=\"o\">(</span><span class=\"n\">opcode</span> <span class=\"n\">funct3</span> <span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"n\">imm</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n  <span class=\"kd\">def</span> <span class=\"n\">R_type</span> <span class=\"o\">(</span><span class=\"n\">opcode</span> <span class=\"n\">funct3</span> <span class=\"n\">funct7</span> <span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"n\">rs2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">encode_arith</span> <span class=\"o\">:</span> <span class=\"n\">arithmetic</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0b000</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0b000</span><span class=\"o\">,</span> <span class=\"mi\">0b0100000</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sll</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0b001</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">slt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0b010</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sltu</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0b011</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">srl</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0b101</span><span class=\"o\">,</span> <span class=\"mi\">0b0100000</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sra</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0b101</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">encode</span> <span class=\"o\">:</span> <span class=\"n\">ast</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">branch</span> <span class=\"n\">c</span> <span class=\"n\">rs1</span> <span class=\"n\">rs2</span> <span class=\"n\">off</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">B_type</span> <span class=\"n\">opcode.branch.encode</span> <span class=\"o\">(</span><span class=\"n\">branch_funct3</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">rs1</span> <span class=\"n\">rs2</span> <span class=\"n\">off</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">jump</span> <span class=\"n\">reg</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">rs1</span><span class=\"o\">)</span> <span class=\"n\">off</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">I_type</span> <span class=\"n\">opcode.jalr.encode</span> <span class=\"mi\">0b000</span> <span class=\"n\">reg</span> <span class=\"n\">rs1</span> <span class=\"n\">off</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">jump</span> <span class=\"n\">reg</span> <span class=\"n\">none</span> <span class=\"n\">off</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">J_type</span> <span class=\"n\">opcode.jal.encode</span> <span class=\"n\">reg</span> <span class=\"n\">off</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">op</span> <span class=\"n\">w</span> <span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"o\">(</span><span class=\"n\">reg_imm.reg</span> <span class=\"n\">rs2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">funct3</span><span class=\"o\">,</span> <span class=\"n\">funct7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">encode_arith</span> <span class=\"n\">op</span> <span class=\"k\">in</span>\n    <span class=\"n\">R_type</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"k\">then</span> <span class=\"n\">opcode.op_32</span> <span class=\"k\">else</span> <span class=\"n\">opcode.op</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">encode</span> <span class=\"n\">funct3</span> <span class=\"n\">funct7</span> <span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"n\">rs2</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">arith</span> <span class=\"n\">op</span> <span class=\"n\">w</span> <span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"o\">(</span><span class=\"n\">reg_imm.imm</span> <span class=\"n\">imm</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">funct3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">encode_arith</span> <span class=\"n\">op</span> <span class=\"k\">in</span>\n    <span class=\"n\">I_type</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"k\">then</span> <span class=\"n\">opcode.op_imm_32</span> <span class=\"k\">else</span> <span class=\"n\">opcode.op_imm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">encode</span> <span class=\"n\">funct3</span> <span class=\"n\">rd</span> <span class=\"n\">rs1</span> <span class=\"n\">imm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 213048663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602514494
    },
    {
        "content": "<p>I'm ignoring the funct7 field of arith with immediate here, I suppose that means that <code>subi</code> doesn't exist?</p>",
        "id": 213049016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602514671
    },
    {
        "content": "<p>Well, <code>subi</code> doesn't exist anyway.</p>",
        "id": 213049107,
        "sender_full_name": "SnowFox",
        "timestamp": 1602514705
    },
    {
        "content": "<p>yeah, the type of this function doesn't really allow for error handling so I guess it doesn't matter what it does in that case</p>",
        "id": 213049176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602514745
    },
    {
        "content": "<p>But <code>srli</code> does.</p>",
        "id": 213049183,
        "sender_full_name": "SnowFox",
        "timestamp": 1602514753
    },
    {
        "content": "<p>oh?</p>",
        "id": 213049204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602514764
    },
    {
        "content": "<p>Yes, the shifts are the exception to the format rule here; they don't fit in any of them. :P</p>",
        "id": 213049334,
        "sender_full_name": "SnowFox",
        "timestamp": 1602514805
    },
    {
        "content": "<p>no ISA is complete without a few exceptions to the rule</p>",
        "id": 213049389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602514833
    },
    {
        "content": "<p>Because you encode the shift amount in the lower bits of the immediate; the upper bits are all zeros except for the single bit which indicates if a right shift is arithmetic vs logical.</p>",
        "id": 213049399,
        "sender_full_name": "SnowFox",
        "timestamp": 1602514840
    },
    {
        "content": "<p>arithmetic means sign-extended shift.</p>",
        "id": 213049427,
        "sender_full_name": "SnowFox",
        "timestamp": 1602514852
    },
    {
        "content": "<p>ah, the funct7 bits are switched between <code>srl</code> and <code>sra</code></p>",
        "id": 213049784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602515003
    },
    {
        "content": "<p>Yeah I noticed that while splitting the funct7 out to its own function.</p>",
        "id": 213049961,
        "sender_full_name": "SnowFox",
        "timestamp": 1602515061
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">encode</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">inst</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">i.get_opcode.to_nat</span> <span class=\"bp\">+</span> <span class=\"n\">i.rd.shiftl</span> <span class=\"mi\">7</span> <span class=\"bp\">+</span> <span class=\"n\">i.funct3.shiftl</span> <span class=\"mi\">12</span>\n  <span class=\"bp\">+</span> <span class=\"n\">i.rs1.shiftl</span> <span class=\"mi\">15</span> <span class=\"bp\">+</span> <span class=\"n\">i.rs2.shiftl</span> <span class=\"mi\">20</span> <span class=\"bp\">+</span> <span class=\"n\">i.funct7.shiftl</span> <span class=\"mi\">25</span> <span class=\"bp\">+</span> <span class=\"n\">i.imm</span>\n</code></pre></div>",
        "id": 213051678,
        "sender_full_name": "SnowFox",
        "timestamp": 1602515909
    },
    {
        "content": "<p>This works for all 32-bit instructions.</p>",
        "id": 213051707,
        "sender_full_name": "SnowFox",
        "timestamp": 1602515926
    },
    {
        "content": "<p>The format only influences the positions of the immediates. :)</p>",
        "id": 213051785,
        "sender_full_name": "SnowFox",
        "timestamp": 1602515971
    },
    {
        "content": "<p>Returning to the magic metaprogramming we started with; implemented for all instructions. I'll adapt this to the opcode, funct3, and funct7 mapping to get bidirectional maps.</p>",
        "id": 213052123,
        "sender_full_name": "SnowFox",
        "timestamp": 1602516078
    },
    {
        "content": "<p>Actually. I may take it a step further regarding the opcode map. To actually use the rows/columns to encode them. :)  Which is basically just the binary count of the position +3 while skipping any where the lower 5 bits are all high.</p>",
        "id": 213052332,
        "sender_full_name": "SnowFox",
        "timestamp": 1602516202
    },
    {
        "content": "<p>The condition map is at least a direct count. Is there a <code>@[derive to_nat]</code> for inductives?</p>",
        "id": 213052399,
        "sender_full_name": "SnowFox",
        "timestamp": 1602516242
    },
    {
        "content": "<p>The point of the different functions is to make it easier to express which format a given instruction has, so that you have to pass 6 arguments vs 7 and such</p>",
        "id": 213052785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602516435
    },
    {
        "content": "<p>Regarding the opcode inductive, you could just skip it and put numbers in where I had things like <code>opcode.op.encode</code></p>",
        "id": 213052931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602516485
    },
    {
        "content": "<p>There is no <code>derive to_nat</code>, although it wouldn't be hard to autogenerate</p>",
        "id": 213053179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602516603
    },
    {
        "content": "<p>Could.</p>",
        "id": 213053187,
        "sender_full_name": "SnowFox",
        "timestamp": 1602516611
    },
    {
        "content": "<p>Probably will.</p>",
        "id": 213053206,
        "sender_full_name": "SnowFox",
        "timestamp": 1602516620
    },
    {
        "content": "<p>But it is nice to have the full list and to use them by-name to avoid mistakes. But this'll be verified eventually anyway... So it would be fine to just put the numbers.</p>",
        "id": 213053263,
        "sender_full_name": "SnowFox",
        "timestamp": 1602516665
    },
    {
        "content": "<p>You can also skip the inductive and instead do <code>def opcode.op := 0b0100011</code> or whatever</p>",
        "id": 213053312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602516708
    },
    {
        "content": "<p>True. Although the biggest detail for annoyance will be flipping the encoder to decode; ideally using the metaprogramming trick to avoid the duplication.</p>",
        "id": 213053476,
        "sender_full_name": "SnowFox",
        "timestamp": 1602516798
    },
    {
        "content": "<p>!! Lean's language server appears to have a memory leak?</p>",
        "id": 213055508,
        "sender_full_name": "SnowFox",
        "timestamp": 1602517894
    },
    {
        "content": "<p>Filled my ram to 100% started using emergency swap. o.o</p>",
        "id": 213055538,
        "sender_full_name": "SnowFox",
        "timestamp": 1602517914
    },
    {
        "content": "<p>keep your finger on the <code>Lean: Restart</code> button</p>",
        "id": 213066996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602524525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm stuck again with generating definitions. Is there anything stopping an interface for constructing these a la <code>`(«def» q := 3)</code> or just with <code>def</code> as it is obvious that we're inside an opened parenthesis so it mustn't be a command anyway. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"o\">[</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">load</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">load_fp</span><span class=\"o\">,</span>  <span class=\"bp\">`</span><span class=\"n\">custom_0</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">misc_mem</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">op_imm</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">auipc</span><span class=\"o\">,</span>      <span class=\"bp\">`</span><span class=\"n\">op_imm_32</span><span class=\"o\">],</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">store</span><span class=\"o\">,</span>  <span class=\"bp\">`</span><span class=\"n\">store_fp</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">custom_1</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">amo</span><span class=\"o\">,</span>      <span class=\"bp\">`</span><span class=\"n\">op</span><span class=\"o\">,</span>       <span class=\"bp\">`</span><span class=\"n\">lui</span><span class=\"o\">,</span>        <span class=\"bp\">`</span><span class=\"n\">op_32</span>    <span class=\"o\">],</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">madd</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">msub</span><span class=\"o\">,</span>     <span class=\"bp\">`</span><span class=\"n\">nmsub</span><span class=\"o\">,</span>    <span class=\"bp\">`</span><span class=\"n\">nmadd</span><span class=\"o\">,</span>    <span class=\"bp\">`</span><span class=\"n\">op_fp</span><span class=\"o\">,</span>    <span class=\"bp\">`</span><span class=\"n\">reserved_0</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">custom_2</span> <span class=\"o\">],</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">branch</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">jalr</span><span class=\"o\">,</span>     <span class=\"bp\">`</span><span class=\"n\">reserved</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">jal</span><span class=\"o\">,</span>      <span class=\"bp\">`</span><span class=\"n\">system</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">reserved_1</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">custom_3</span> <span class=\"o\">]</span>\n  <span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">enum</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span> <span class=\"n\">n.enum</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span> <span class=\"c\">/-</span><span class=\"cm\"> def n := 3 + j.shiftl 2 + i.shiftl 5 -/</span>\n</code></pre></div>",
        "id": 213150980,
        "sender_full_name": "SnowFox",
        "timestamp": 1602594512
    },
    {
        "content": "<p>well commands are not expressions, so  that doesn't work literally</p>",
        "id": 213151096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602594585
    },
    {
        "content": "<p>or any similar interface if not exactly using the expr-quotes.</p>",
        "id": 213151221,
        "sender_full_name": "SnowFox",
        "timestamp": 1602594649
    },
    {
        "content": "<p>I mean for the longest time there wasn't even an API to add defs at all (with all the bells and whistles)</p>",
        "id": 213151318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602594722
    },
    {
        "content": "<p>you can use <code>tactic.add_decl</code>, I think that might not add equation lemmas though</p>",
        "id": 213151565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602594828
    },
    {
        "content": "<p>there is also <code>environment.add_defn_eqns</code> for more advanced definitions</p>",
        "id": 213151775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602594918
    },
    {
        "content": "<p>Re reducing variations. I've arrived at embedding the width in the register and using an \"alt\" flag. Usually to distinguish between (un)signed operations, though also to select the high half of mults (which then respects source register (un)sign flags). This lines up well for tuning the operations.</p>",
        "id": 213151901,
        "sender_full_name": "SnowFox",
        "timestamp": 1602594965
    },
    {
        "content": "<p>Anyway lean 4 will add something a lot like you are proposing; quotation and antiquotation now works on every syntactic class</p>",
        "id": 213151921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602594972
    },
    {
        "content": "<p>Awesome. When I started with Lean, I dove into Lean 4's code ... then I found myself writing Lean 4 by mistake. :P</p>",
        "id": 213152273,
        "sender_full_name": "SnowFox",
        "timestamp": 1602595138
    },
    {
        "content": "<p>As in, while using lean3.</p>",
        "id": 213152315,
        "sender_full_name": "SnowFox",
        "timestamp": 1602595157
    },
    {
        "content": "<p>I was trying to use <code>tactic.add_defn_equations</code> before; though with <code>add_decl</code>, I feel much closer but have hit at least an issue with lists/tactics/monad switching... Not sure how to fix this in Lean...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">run_cmd</span> <span class=\"o\">[</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">load</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">load_fp</span><span class=\"o\">,</span>  <span class=\"bp\">`</span><span class=\"n\">custom_0</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">misc_mem</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">op_imm</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">auipc</span><span class=\"o\">,</span>      <span class=\"bp\">`</span><span class=\"n\">op_imm_32</span><span class=\"o\">],</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">store</span><span class=\"o\">,</span>  <span class=\"bp\">`</span><span class=\"n\">store_fp</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">custom_1</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">amo</span><span class=\"o\">,</span>      <span class=\"bp\">`</span><span class=\"n\">op</span><span class=\"o\">,</span>       <span class=\"bp\">`</span><span class=\"n\">lui</span><span class=\"o\">,</span>        <span class=\"bp\">`</span><span class=\"n\">op_32</span>    <span class=\"o\">],</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">madd</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">msub</span><span class=\"o\">,</span>     <span class=\"bp\">`</span><span class=\"n\">nmsub</span><span class=\"o\">,</span>    <span class=\"bp\">`</span><span class=\"n\">nmadd</span><span class=\"o\">,</span>    <span class=\"bp\">`</span><span class=\"n\">op_fp</span><span class=\"o\">,</span>    <span class=\"bp\">`</span><span class=\"n\">reserved_0</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">custom_2</span> <span class=\"o\">],</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">branch</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">jalr</span><span class=\"o\">,</span>     <span class=\"bp\">`</span><span class=\"n\">reserved</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">jal</span><span class=\"o\">,</span>      <span class=\"bp\">`</span><span class=\"n\">system</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">reserved_1</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">custom_3</span> <span class=\"o\">]</span>\n  <span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">enum</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span> <span class=\"n\">n.enum</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">tactic.add_decl</span> <span class=\"o\">(</span><span class=\"n\">declaration.defn</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">j.shiftl</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">i.shiftl</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n                     <span class=\"n\">reducibility_hints.abbrev</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213153151,
        "sender_full_name": "SnowFox",
        "timestamp": 1602595517
    },
    {
        "content": "<p>There we go. <code>.mmap</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">run_cmd</span> <span class=\"o\">[</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">load</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">load_fp</span><span class=\"o\">,</span>  <span class=\"bp\">`</span><span class=\"n\">custom_0</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">misc_mem</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">op_imm</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">auipc</span><span class=\"o\">,</span>      <span class=\"bp\">`</span><span class=\"n\">op_imm_32</span><span class=\"o\">],</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">store</span><span class=\"o\">,</span>  <span class=\"bp\">`</span><span class=\"n\">store_fp</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">custom_1</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">amo</span><span class=\"o\">,</span>      <span class=\"bp\">`</span><span class=\"n\">op</span><span class=\"o\">,</span>       <span class=\"bp\">`</span><span class=\"n\">lui</span><span class=\"o\">,</span>        <span class=\"bp\">`</span><span class=\"n\">op_32</span>    <span class=\"o\">],</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">madd</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">msub</span><span class=\"o\">,</span>     <span class=\"bp\">`</span><span class=\"n\">nmsub</span><span class=\"o\">,</span>    <span class=\"bp\">`</span><span class=\"n\">nmadd</span><span class=\"o\">,</span>    <span class=\"bp\">`</span><span class=\"n\">op_fp</span><span class=\"o\">,</span>    <span class=\"bp\">`</span><span class=\"n\">reserved_0</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">custom_2</span> <span class=\"o\">],</span>\n    <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">branch</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">jalr</span><span class=\"o\">,</span>     <span class=\"bp\">`</span><span class=\"n\">reserved</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">jal</span><span class=\"o\">,</span>      <span class=\"bp\">`</span><span class=\"n\">system</span><span class=\"o\">,</span>   <span class=\"bp\">`</span><span class=\"n\">reserved_1</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">custom_3</span> <span class=\"o\">]</span>\n  <span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">enum.mmap</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span> <span class=\"n\">n.enum.mmap</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">tactic.add_decl</span> <span class=\"o\">(</span><span class=\"n\">declaration.defn</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">j.shiftl</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">i.shiftl</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n                     <span class=\"n\">reducibility_hints.abbrev</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213153956,
        "sender_full_name": "SnowFox",
        "timestamp": 1602595905
    },
    {
        "content": "<p>you probably want <code>mmap'</code> there since you aren't returning anything</p>",
        "id": 213154060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602595939
    },
    {
        "content": "<p>you may or may not want to precompute those numbers btw, by using <code>let n := 3 + j.shiftl 2 + i.shiftl 5 in reflect n</code></p>",
        "id": 213154221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602596014
    },
    {
        "content": "<p>oh, actually what you have definitely won't work because you haven't antiquoted <code>i</code> and <code>j</code></p>",
        "id": 213154367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602596069
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid field notation, 'branch' is not a valid \"field\" because environment does not contain 'nat.branch'</span>\n<span class=\"cm\">  op</span>\n<span class=\"cm\">which has type</span>\n<span class=\"cm\">  ℕ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 213154368,
        "sender_full_name": "SnowFox",
        "timestamp": 1602596070
    },
    {
        "content": "<p>did you write <code>op.branch</code> somewhere?</p>",
        "id": 213154420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602596103
    },
    {
        "content": "<p>Yes. And I'm running the <code>run_cmd</code> inside the <code>op</code> namespace.</p>",
        "id": 213154467,
        "sender_full_name": "SnowFox",
        "timestamp": 1602596136
    },
    {
        "content": "<p>you might want to qualify those names, <code>op</code> is kind of general for an unqualified name</p>",
        "id": 213154584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602596179
    },
    {
        "content": "<p>It seems to be clobbering the namespace... does the <code>add_decl</code> bypass the namespace?</p>",
        "id": 213154630,
        "sender_full_name": "SnowFox",
        "timestamp": 1602596204
    },
    {
        "content": "<p>Seem so. <code>(`op ++ n) </code> worked.</p>",
        "id": 213154673,
        "sender_full_name": "SnowFox",
        "timestamp": 1602596235
    },
    {
        "content": "<p>Yeah, you said <code>add_decl `op</code> so it's making a definition called <code> `op</code></p>",
        "id": 213154691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602596244
    },
    {
        "content": "<p>you can sometimes use <code> ``op</code> to do name resolution but it won't work here because the thing doesn't exist yet</p>",
        "id": 213154790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602596288
    },
    {
        "content": "<p>Makes sense. I assumed the namespace would inject itself but I guess that only affects the commands. The tactic just bypasses it.</p>",
        "id": 213154840,
        "sender_full_name": "SnowFox",
        "timestamp": 1602596308
    },
    {
        "content": "<p>Current code -&gt; <a href=\"https://gist.github.com/4d56511885f5b44514b0fcf006a5546a\">https://gist.github.com/4d56511885f5b44514b0fcf006a5546a</a></p>",
        "id": 213154972,
        "sender_full_name": "SnowFox",
        "timestamp": 1602596382
    },
    {
        "content": "<p>Any more tips <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?</p>",
        "id": 213156504,
        "sender_full_name": "SnowFox",
        "timestamp": 1602597006
    },
    {
        "content": "<p>It seems a bit odd to put the alt flag in the register instead of the instruction</p>",
        "id": 213156775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602597124
    },
    {
        "content": "<p>The flag basically means that the register itself is treated as signed in most cases. The mul is the only deviation, where <code>rd.alt</code> means it acts on the high half of the result, but then the <code>rs1.alt</code> and <code>rs2.alt</code> represent their own signs.</p>",
        "id": 213157199,
        "sender_full_name": "SnowFox",
        "timestamp": 1602597293
    },
    {
        "content": "<p>I found one edge case with my approach with the type tagged registers (the alt flag). I can't encode one variant of the the SRAI hint, where the immediate is zero; because I use the sign of the immediate to differentiate between left and right shifts. The alt in this case applies to the destination, to distinguish logical vs signed arithmetic shifts. One minor edge case!</p>",
        "id": 213170555,
        "sender_full_name": "SnowFox",
        "timestamp": 1602602113
    },
    {
        "content": "<p>I could specially encode this with its own hack... but I'll leave it out for now.</p>",
        "id": 213170755,
        "sender_full_name": "SnowFox",
        "timestamp": 1602602201
    },
    {
        "content": "<p>Considering it is a single unused custom hint; which may never be used... pretty safe to ignore. :)</p>",
        "id": 213171953,
        "sender_full_name": "SnowFox",
        "timestamp": 1602602617
    },
    {
        "content": "<p>Actually... I just overconstrained it. I don't care about the direction in this position because it has already been declared that it is an arithmetic shift; which is only valid for right shifts.</p>",
        "id": 213172787,
        "sender_full_name": "SnowFox",
        "timestamp": 1602602913
    },
    {
        "content": "<p>Actually the hint issue does exist; <code>SRL</code> with <code>rd = x0</code> and <code>imm = 0</code> is inexpressible.</p>",
        "id": 213175521,
        "sender_full_name": "SnowFox",
        "timestamp": 1602603919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Major update. Still a lot left to do. Now the registers may only be legally composed for each of the instructions. This should cover all of <code>RV{32,64,128}IMFDQZicsr</code>, or soon. I need to do another pass over all the variations. The core instruction type unifies all these extensions well. Abstracting over int vs float, (un)signed, and all widths.  <a href=\"https://gist.github.com/4d56511885f5b44514b0fcf006a5546a\">https://gist.github.com/4d56511885f5b44514b0fcf006a5546a</a></p>",
        "id": 213397329,
        "sender_full_name": "SnowFox",
        "timestamp": 1602752698
    },
    {
        "content": "<p>I'm interested in getting RISC-V semantics in Lean to help with my STARK verification project. Sorry to resurrect a two-year old thread, but I thought I'd ask <span class=\"user-mention\" data-user-id=\"328454\">@SnowFox</span> , did you do any more work on this? Is there any repository you have that I could potentially use?</p>",
        "id": 295636743,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661630746
    },
    {
        "content": "<p>maybe useful for RISC-V specification: <a href=\"https://github.com/rems-project/sail\">https://github.com/rems-project/sail</a>  <a href=\"https://github.com/mit-plv/riscv-coq\">https://github.com/mit-plv/riscv-coq</a></p>",
        "id": 295637229,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1661631141
    },
    {
        "content": "<p>I have heard of this project, and in fact it's at the top of the list for what my team is considering using now. The only issue is that it's written in Coq, and I would prefer to use Lean.</p>",
        "id": 295637832,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661631667
    },
    {
        "content": "<p>you could add a Lean backend to Sail (possibly following the Coq backend for Sail)</p>",
        "id": 295637867,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1661631692
    },
    {
        "content": "<p>That sounds like it could be the path of least resistance. Thanks!</p>",
        "id": 295638043,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661631803
    },
    {
        "content": "<p>I would also be very interested in that (adding such a Lean backend to Sail)</p>",
        "id": 295713408,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1661695051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span>, <span class=\"user-mention\" data-user-id=\"198375\">@Karl Palmskog</span>, <span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span>: Yes, work continued, but along a few different dimensions, very incomplete and I've been meaning to get back to this. <a href=\"https://gist.github.com/sofia-snow/31b32cc03c433faedde58ef63db08b0e\">https://gist.github.com/sofia-snow/31b32cc03c433faedde58ef63db08b0e</a></p>\n<p>Notably this design focuses on dataflow operations and expressing all the variations with minimal explosion. All control flow is factored out and will be handled by an RVSDG based IR. Ex. Conditional branches will be encoded as <code>slt</code> simple nodes composed with gamma nodes, fused respectively when encoding.</p>\n<p>I've shifted focus towards other components of my compiler, notably the type theory, and optimizer. No repository yet. I welcome collaborating with others.</p>\n<p>I'd like to integrate it with sail, but I feel that sail is too low level and anything it generates promotes poor interfaces. I'm after a higher level specification which can generate all which sail does, and more, with appropriate abstractions. Thus can generate similar output to sail and cross-verify their consistency.</p>",
        "id": 295812164,
        "sender_full_name": "Sofia Snow",
        "timestamp": 1661766777
    },
    {
        "content": "<p>CSRs and memory accesses need state edges, RVSDG models partial orderings for states. A tweak to RVSDG I've applied is to make states linear and use an additional node which acts like gamma (generalized switch statement) to partition and join state rather than choice. Notably along with this, strict memory partitioning. My exact memory model isn't yet written down but it'll allow mutable sharing when explicitly stated as intentional.</p>",
        "id": 295815325,
        "sender_full_name": "Sofia Snow",
        "timestamp": 1661768161
    },
    {
        "content": "<p>Similar to Lean's totality checker, some uses can be proven eventually consistent for all orders, but others may require manual proofs, or you may explicitly allow divergence.</p>",
        "id": 295815981,
        "sender_full_name": "Sofia Snow",
        "timestamp": 1661768424
    },
    {
        "content": "<p>Also notable I'll be using an E-graph representation extending RVSDG to run equality saturation, using user-defined and user-proven rewrites. Meaning it'll represent an exponentially large set of equivalent programs, then use an SMT solver to select the optimal program per a cost function (for each dimension along the Pareto frontier of the cost function), and I want a full correctness proof from the source language (very Lean like syntax, with resource grades for exact or bounded usage and taint tracking (notably sensitive data may not be published or leaked through side channels)); to the machine code (at least RISC-V and WebAssembly; if successful, may consider SPIR-V or a tiny subset of x86_64 or arm64).</p>\n<p>RVSDG.</p>\n<p><a href=\"https://arxiv.org/abs/1912.05036\">https://arxiv.org/abs/1912.05036</a><br>\n<a href=\"https://www.sintef.no/contentassets/11da6d67207348db98a30ddbdf3b0bba/reissmann_poster.pdf\">https://www.sintef.no/contentassets/11da6d67207348db98a30ddbdf3b0bba/reissmann_poster.pdf</a></p>\n<p>Equality saturation.</p>\n<p><a href=\"https://arxiv.org/abs/1012.1802\">https://arxiv.org/abs/1012.1802</a><br>\n<a href=\"https://arxiv.org/abs/2004.03082\">https://arxiv.org/abs/2004.03082</a><br>\n<a href=\"https://arxiv.org/abs/2108.02290\">https://arxiv.org/abs/2108.02290</a></p>",
        "id": 295817790,
        "sender_full_name": "Sofia Snow",
        "timestamp": 1661769275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455721\">Sofia Snow</span><br>\nI wanted to work on a similar project for an optimizing compiler, but instead of assembly code it would optimize fpga netlists. In my mind it is very similat as working with a what you(and the literature) refer to as dataflow. In the fpga world (differently from cpus), every \"operation\" has a well defined and predictable \"runtime\" often referred to as latency in clock cycles. It would be interesting using equality saturation to optimize for latency. You could take it a step further and allow different possibly aproximative methods of calculation which have different accuracy (e.g. lookup table vs cordic for sin(x)) and pareto optimize for latency and accuracy.<br>\nDid not know the method of saturation equality. Those seem like nice background material.</p>",
        "id": 302398716,
        "sender_full_name": "Andrea Nardi",
        "timestamp": 1664953920
    },
    {
        "content": "<p>(Conversation continued in a private message.)</p>",
        "id": 302412501,
        "sender_full_name": "Sofia Snow",
        "timestamp": 1664959550
    }
]