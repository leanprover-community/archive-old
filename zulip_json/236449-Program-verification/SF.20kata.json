[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, I saw your solution to the \"Evaluating the type safety of a toy language\" kata using custom automation;<br>\nI found <code>solve_by_elim</code> was sufficient, once I realized it was running into its (very low) default depth limit in some cases</p>",
        "id": 200769621,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592059454
    },
    {
        "content": "<p>Is it easy to explain what the tactics you wrote do? I didn't look at them closely.</p>",
        "id": 200769773,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592059666
    },
    {
        "content": "<p>Actually, what I did was porting my Coq solution to Lean. And Ltac's pattern matching has an interesting backtracking behavior that I did not try to adopt to a more idiomatic Lean approach. I built a monad transformer that does unbounded backtracking so that I can search <br>\nmultiple assumptions that match each other precisely. I'm not sure that it's the best way to do it (it probably has a bunch of inefficiencies because of brute force searches) but I thought it conveyed the ideas well.</p>",
        "id": 200770039,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592060002
    },
    {
        "content": "<p>You could write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mvar</span><span class=\"o\">,</span>\n   <span class=\"n\">b</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mvar</span><span class=\"o\">,</span>\n   <span class=\"n\">c</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mvar</span><span class=\"o\">,</span>\n   <span class=\"n\">goal</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">),</span>\n   <span class=\"n\">h</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">hyp</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">),</span>\n   <span class=\"n\">h&#39;</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">hyp</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">),</span>\n   <span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"n\">do</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">intro1</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Then we iterate through the assumptions instantiating meta variables and, every time you try a solution, you can back track to the latest choice point to try something different, abandon meta variable assignments. I think it's a nice way of writing nested loops. Especially when consider that you could have a list of patterns that you iterate through using <code>mmap</code>. Then, each element of the list can make a choice point that you can jump back to.</p>",
        "id": 200770283,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592060360
    },
    {
        "content": "<p>As an exemplar for the kata, maybe your solution would be better than mine though</p>",
        "id": 200770379,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592060487
    },
    {
        "content": "<p>I see, interesting.</p>",
        "id": 200770709,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592060939
    },
    {
        "content": "<p>Is this baked into Ltac's equivalent of the <code>tactic</code> monad? (note: I know nothing about Ltac)</p>",
        "id": 200770820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061086
    },
    {
        "content": "<p>Yes, let me show you a comparison</p>",
        "id": 200771065,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061341
    },
    {
        "content": "<p>In Ltac, for this problem, I wrote the following tactic:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">Ltac</span> <span class=\"n\">value_type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">goal</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"o\">[</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nvalue</span> <span class=\"o\">?</span><span class=\"n\">v</span> <span class=\"o\">|-</span> <span class=\"o\">(|-</span> <span class=\"o\">?</span><span class=\"n\">v</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"o\">=&gt;</span> <span class=\"k\">apply</span> <span class=\"o\">(</span><span class=\"n\">nvalue_has_type</span> <span class=\"o\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"o\">|</span> <span class=\"o\">[</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lvalue</span> <span class=\"o\">?</span><span class=\"n\">v</span> <span class=\"o\">|-</span> <span class=\"o\">(|-</span> <span class=\"o\">?</span><span class=\"n\">v</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"n\">List</span><span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"o\">=&gt;</span> <span class=\"k\">apply</span> <span class=\"o\">(</span><span class=\"n\">lvalue_has_type</span> <span class=\"o\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"k\">end</span><span class=\"o\">.</span>\n</code></pre></div>\n\n\n<p>It tells you that if <code>v</code> is a term that is also natural number value <code>nvalue</code>, then, as a term, it has type <code>Nat</code>. <code>?v</code> is a meta variable that can coordinate the various components of the goal that you're matching on</p>",
        "id": 200771159,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061461
    },
    {
        "content": "<p>Does <code>value_type</code> have a type?</p>",
        "id": 200771248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061579
    },
    {
        "content": "<p>In Lean, I could have written (but did not):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">value_type</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">var</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">⊢</span> <span class=\"err\">%%</span><span class=\"n\">v</span> <span class=\"o\">:</span><span class=\"err\">∈</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">hyp</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nvalue</span> <span class=\"err\">%%</span><span class=\"n\">v</span><span class=\"o\">),</span>\n  <span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">nvalue_has_type</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">var</span><span class=\"o\">,</span>\n     <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">⊢</span> <span class=\"err\">%%</span><span class=\"n\">v</span> <span class=\"o\">:</span><span class=\"err\">∈</span> <span class=\"n\">List</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">h</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">hyp</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nvalue</span> <span class=\"err\">%%</span><span class=\"n\">v</span><span class=\"o\">),</span>\n     <span class=\"n\">lift</span> <span class=\"err\">$</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">nvalue_has_type</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">apply</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 200771295,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061616
    },
    {
        "content": "<p>So in Lean, we have failure baked in to <code>tactic</code> but not backtracking</p>",
        "id": 200771300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061634
    },
    {
        "content": "<p>Exactly</p>",
        "id": 200771306,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061647
    },
    {
        "content": "<p>Oh, I guess your <code>value_type</code> also exhibits backtracking because there could be multiple <code>nvalue</code> hypotheses in the context.</p>",
        "id": 200771326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061677
    },
    {
        "content": "<p>I mean, in this example, there's no way that backtracking can help.</p>",
        "id": 200771379,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/236449-Program-verification/topic/SF.20kata/near/200771248\">said</a>:</p>\n<blockquote>\n<p>Does <code>value_type</code> have a type?</p>\n</blockquote>\n<p>No, that's the alien thing for Lean user. In Lean, a tactic is a definition of type tactic. In Coq, a <code>Definition</code>is something in the logic, <code>Ltac</code> defines something completely different and uses a different notation too -- whereas Lean has different notations for tactic, it's only syntactic sugar on top of Lean terms.</p>",
        "id": 200771388,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061750
    },
    {
        "content": "<p>But in principle, this <code>| [ h : nvalue ?v |- (|- ?v \\in Nat) ]</code> would create a choice point that would try a second <code>h' : nvalue ?v</code>?</p>",
        "id": 200771390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061755
    },
    {
        "content": "<p>Can Ltac things return values?</p>",
        "id": 200771401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061777
    },
    {
        "content": "<p>Exactly</p>",
        "id": 200771409,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061785
    },
    {
        "content": "<p>Does Ltac give you some kind of cut to prevent this?</p>",
        "id": 200771421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061802
    },
    {
        "content": "<p>No. They have tricks to do computations in Ltac but it is a hack</p>",
        "id": 200771422,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061805
    },
    {
        "content": "<p>It probably does, I can't think of what it is though</p>",
        "id": 200771430,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061826
    },
    {
        "content": "<p>OK, thanks for the explanations. I have seen some bits of Ltac before, but never tried to understand what exactly was going on.</p>",
        "id": 200771474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061856
    },
    {
        "content": "<p>I assume the hacks are, like, stuff some state in the proof state somehow.</p>",
        "id": 200771487,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061895
    },
    {
        "content": "<p>I have recently spent more time with Software Foundations. It is truly a wonderful book. I'm currently in Programming Language Foundations. So much fun :)</p>",
        "id": 200771501,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061916
    },
    {
        "content": "<p>I mean all you really need is a stack of values, right? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 200771503,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061919
    },
    {
        "content": "<p>Yes and values are encoded as particular terms</p>",
        "id": 200771517,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592061950
    },
    {
        "content": "<p>And then just implement Forth in Ltac</p>",
        "id": 200771571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061972
    },
    {
        "content": "<p>That is one approach <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 200771629,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592062078
    },
    {
        "content": "<p>Maybe a continuation passing style would be a bit easier</p>",
        "id": 200771720,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592062188
    },
    {
        "content": "<p>Not very pretty still</p>",
        "id": 200771724,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592062193
    },
    {
        "content": "<p>It's interesting to take a closer look at Coq and, for me, see that the pain points are not necessarily what I thought they would be but also, how nice it can be to write proofs and automation. The experience is more enjoyable than I expected</p>",
        "id": 200771892,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592062365
    },
    {
        "content": "<p>Update: I just read up on <code>match</code> in <code>Ltac</code>. It turns out, by default, the scope of back tracking is one <code>match</code> statement: if the pattern of one branch matches then the other branches are attempted. If anything after the match fails, the next pattern will not be attempted. If you use <code>lazymatch</code> instead of <code>match</code>, when the body of a branch fails, the whole match fails. New branches are not attempted. If you use <code>multimatch</code>, you get full back tracking.</p>",
        "id": 200778075,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592071669
    }
]