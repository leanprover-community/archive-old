[
    {
        "content": "<p>I understand at some point there was a smt tactic in lean. Is there any documentation on how to use an smt solver (z3 would be ideal for me) from Lean?</p>",
        "id": 199617299,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1591189965
    },
    {
        "content": "<p>There is still a bunch of <code>smt</code> stuff in core</p>",
        "id": 199618896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591190839
    },
    {
        "content": "<p>I've never used it</p>",
        "id": 199618899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591190845
    },
    {
        "content": "<p>I remember Mario recently saying that nobody has ever used it.</p>\n<p>If you figure it out, please let us know!</p>",
        "id": 199619254,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591191035
    },
    {
        "content": "<p>There is just a tactic that provides debugging for seeing the SMT state. But as far as I know, SMT is only used inside the c++ core.</p>\n<p>-- This tactic is just a placeholder, designed to be modified for specific performance experiments</p>",
        "id": 199621216,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1591192059
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> uses it frequently</p>",
        "id": 199627251,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1591194926
    },
    {
        "content": "<p>There are two different questions here:</p>\n<ol>\n<li>About the internal SMT state (i.e. <code>begin[smt] ... end</code>, <code>by cc</code>): calling this SMT is a bit of a stretch.  There is no SAT solver, and it only knows about congruence closure (with AC) and heuristic instantiation.  At least <code>by cc</code> is used somewhat often in mathlib.</li>\n<li>Interfacing with external SMT solvers.  Jared had an unverified interface to Z3 at one point: <a href=\"https://github.com/leanprover/smt2_interface\">https://github.com/leanprover/smt2_interface</a>  This allows you to call Z3 on Lean goals (including some arithmetic), but it doesn't do proofs.</li>\n</ol>",
        "id": 199628109,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591195330
    },
    {
        "content": "<p>The Z3 interface is completely unused, AFAIK.</p>",
        "id": 199628148,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591195351
    },
    {
        "content": "<p>Thanks! I was looking for that second one!</p>",
        "id": 199632694,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1591197383
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1083\">#1083</a> is related, but uses Vampire, not Z3.</p>",
        "id": 199633141,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591197572
    },
    {
        "content": "<p>any invocation of <code>finish</code> dips into the internal SMT state (via heuristic instantiation + congruence closure)</p>",
        "id": 199659906,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1591209945
    },
    {
        "content": "<p>I used the lean3 SMT tactic for congruence-closure type-problems -- it worked fine, but as noted it's not really the same  as an SMT solver.</p>",
        "id": 201329018,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1592516268
    }
]