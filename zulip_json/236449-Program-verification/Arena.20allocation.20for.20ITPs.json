[
    {
        "content": "<p>Hi,<br>\nI've been working on a rewrite of the Rust version of Lean's kernel for a while; it uses arenas to manage the type checker items (instead of reference counting). All of the ITPs I'm familiar with are either GC'd or are Lean, so I thought this would be an interesting data point for the CS people here who might find themselves writing software in the same vein. I rewrote it this way just to see whether some new insights about how the kernel is laid out could yield a performance benefit, and it ended up being ~3-4x faster than the other checkers while having a smaller memory footprint. The arena API is completely type safe and uses phantom lifetimes to achieve memory safety (arenas can't be dropped if there are outstanding pointers into their contents, so pointers can't deref to bad data). <br>\nThere's some more information/stats in the readme. <a href=\"https://github.com/ammkrn/nanoda_lib\">https://github.com/ammkrn/nanoda_lib</a></p>",
        "id": 206617336,
        "sender_full_name": "Chris B",
        "timestamp": 1597172754
    },
    {
        "content": "<p>Nice! When you say \"better than other checkers\", does that include the C++ implementation?</p>",
        "id": 206617978,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597173103
    },
    {
        "content": "<p>Hey I only said 'faster' lol. The one that was in the lean3 repo is the only C++ I know of, but yeah those numbers are the same (3-4x), maybe a little bit more depending on how big the export file is. leanchecker, trepplein, and the RC version of the Rust one were all really close in terms of speed. Leanchecker had some issues with memory consumption spikes IIRC. The last time I asked about it lean4 didn't have a free-standing checker and there isn't an export format.</p>",
        "id": 206618608,
        "sender_full_name": "Chris B",
        "timestamp": 1597173426
    },
    {
        "content": "<p>I'm surprised that the speed up would be so consistent across the different checkers. I thought the Haskell checker was much much slower than the  C++ one</p>",
        "id": 206619007,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597173628
    },
    {
        "content": "<p>Oh yeah the Haskell one is way, way slower than the other ones. Do you know why that is?</p>",
        "id": 206619250,
        "sender_full_name": "Chris B",
        "timestamp": 1597173753
    },
    {
        "content": "<p>I assumed it was a Haskell thing about like unoptimized collections in the prelude or something.</p>",
        "id": 206619362,
        "sender_full_name": "Chris B",
        "timestamp": 1597173833
    },
    {
        "content": "<p>I haven't looked closely at it, I can't say</p>",
        "id": 206620184,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597174219
    },
    {
        "content": "<p>Does the arena guarantee some sort uniqueness property for the term nodes it stores?</p>",
        "id": 206620421,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597174349
    },
    {
        "content": "<p>Yeah, when you go to insert an item it checks whether it already exists in the collection. The underlying structure is from a rust library called indexmap that's like a hashmap with indices that preserve insertion order.</p>",
        "id": 206620923,
        "sender_full_name": "Chris B",
        "timestamp": 1597174602
    },
    {
        "content": "<p>The actual process is slightly more complicated since you have to check the persistent collection first then the temporary one.</p>",
        "id": 206621058,
        "sender_full_name": "Chris B",
        "timestamp": 1597174666
    },
    {
        "content": "<p>Cool. i like the analysis you make about temporary garbage. I wonder how it will apply to Lean 4 since Lean 4 uses destructive updates whenever possible instead of allocating more memory</p>",
        "id": 206621295,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597174782
    },
    {
        "content": "<p>Ah, this will be useful for isabelle proof generation. I wasn't sure how well this strategy would perform so it's good to hear the numbers bear it out</p>",
        "id": 206622069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597175180
    },
    {
        "content": "<p>Yeah neither was I lol. The one thing I'm worried about is someone managing to line up just the right tactic proof that produces like 100gb worth of garbage, but we'll see. The largest one a few months ago was 1.6 million nodes, now it's over 10 million.</p>",
        "id": 206622766,
        "sender_full_name": "Chris B",
        "timestamp": 1597175559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Arena.20allocation.20for.20ITPs/near/206621295\">said</a>:</p>\n<blockquote>\n<p>I wonder how it will apply to Lean 4 since Lean 4 uses destructive updates whenever possible instead of allocating more memory</p>\n</blockquote>\n<p>Yeah I'm interested to see this as well. If you roll your own RC stuff like they did you can avoid a lot of the small to medium sized performance hang-ups I ran into in the last version, and I know they've done a lot of thinking about how to make the most of their system.</p>",
        "id": 206623205,
        "sender_full_name": "Chris B",
        "timestamp": 1597175762
    },
    {
        "content": "<p>It might be good to collect statistics on what the largest proofs are from this point of view, because they could just be bad proofs</p>",
        "id": 206623269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597175791
    },
    {
        "content": "<p>That growth in proof size sounds more like a regression than an improvement</p>",
        "id": 206623357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597175833
    },
    {
        "content": "<p>Large proofs are clearly a problem but the other thing to consider is non-trivial kernel computations. The proof size could be moderate but you could be running ackerman's function for instance. That would produce a lot of trash that reference counting wouldn't keep around but arenas would</p>",
        "id": 206623598,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597175948
    },
    {
        "content": "<p>I made another thread earlier today in general to try and get some insight into that; the biggest one by far is <code>polynomial.monic.next_coeff_mul</code>, and the runner up is <code>finset.sum_range_sub_of_monotone</code></p>",
        "id": 206623663,
        "sender_full_name": "Chris B",
        "timestamp": 1597175981
    },
    {
        "content": "<p>one man's trash is another man's treasure :P</p>",
        "id": 206623854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597176052
    },
    {
        "content": "<p>Yeah, I would like to go back and address that more thoroughly in the future. I had an idea to do it where the arenas were telescoped out, so each arena had an Option&lt;&amp;mut Arena&gt; to a parent whose lifetime was longer, so when you finish one computation the thing's scope ends and you insert the result into the parent, effectively dropping all of the garbage. The problem is that searching for duplicates now forces you to check as many arenas as you have alive instead of just the two.</p>",
        "id": 206624556,
        "sender_full_name": "Chris B",
        "timestamp": 1597176386
    },
    {
        "content": "<p>The RC solution is much more general, so props to Lean.</p>",
        "id": 206624762,
        "sender_full_name": "Chris B",
        "timestamp": 1597176515
    },
    {
        "content": "<p>I'm pretty sure there would be people who would be interested in seeing a list of the 100 biggest proofs</p>",
        "id": 206630746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597179652
    },
    {
        "content": "<p>it's another way to play the -T50000 game</p>",
        "id": 206630806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597179683
    },
    {
        "content": "<p>It's a better way perhaps, because when I've played that game some lemma times out and then lots of other things break and you basically have to deal with the first problem.</p>",
        "id": 206632030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597180346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Arena.20allocation.20for.20ITPs/near/206630746\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure there would be people who would be interested in seeing a list of the 100 biggest proofs</p>\n</blockquote>\n<p>Mathlib high scores :<br>\n<a href=\"https://gist.github.com/ammkrn/dab311e0d2d27b3bcd15ec6c4a2b019d\">https://gist.github.com/ammkrn/dab311e0d2d27b3bcd15ec6c4a2b019d</a></p>",
        "id": 206635753,
        "sender_full_name": "Chris B",
        "timestamp": 1597182817
    },
    {
        "content": "<p>I'll add a command line flag for it or something.</p>",
        "id": 206635884,
        "sender_full_name": "Chris B",
        "timestamp": 1597182906
    },
    {
        "content": "<p>oh wow that escalated quickly</p>",
        "id": 206635898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597182923
    },
    {
        "content": "<p>where is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.monic.next_coeff_mul/src\">src#polynomial.monic.next_coeff_mul</a></p>",
        "id": 206635936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597182960
    },
    {
        "content": "<p>hm, perhaps it is the <code>omega</code> calls at the end?</p>",
        "id": 206636008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597182998
    },
    {
        "content": "<p>omega does seem to be a common thread between no.1 and no.2</p>",
        "id": 206636349,
        "sender_full_name": "Chris B",
        "timestamp": 1597183229
    },
    {
        "content": "<p>How does the length of this version of the proof stack up:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">next_coeff_mul_omega_1</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dp</span> <span class=\"bp\">≠</span> <span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">next_coeff_mul_omega_2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"n\">dq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dq</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span> <span class=\"bp\">+</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">dp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">dq</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">next_coeff_mul_omega_3</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"n\">dq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dq</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span> <span class=\"bp\">+</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">dp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≠</span> <span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">next_coeff_mul_omega_4</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"n\">dq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dq</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span> <span class=\"bp\">+</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span><span class=\"o\">,</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dq</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">dp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≠</span> <span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this_1</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≠</span> <span class=\"n\">dp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dq</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">next_coeff_mul</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">monic</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">monic</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">next_coeff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">next_coeff</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">next_coeff</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nontrivial_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">monic</span><span class=\"bp\">.</span><span class=\"n\">nat_degree_mul</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">next_coeff</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">degree_eq_zero_iff_eq_one</span><span class=\"o\">,</span> <span class=\"n\">add_eq_zero_iff</span><span class=\"o\">],</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tauto</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h_1</span><span class=\"o\">,</span> <span class=\"n\">h_2</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rename</span> <span class=\"n\">h_1</span> <span class=\"n\">hp0</span><span class=\"o\">,</span> <span class=\"n\">rename</span> <span class=\"n\">h_2</span> <span class=\"n\">hq0</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">degree_eq_zero_iff_eq_one</span> <span class=\"n\">at</span> <span class=\"n\">hp0</span> <span class=\"n\">hq0</span><span class=\"o\">,</span> <span class=\"n\">assumption&#39;</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- we&#39;ve reduced to the case where the degrees dp and dq are nonzero</span>\n  <span class=\"n\">set</span> <span class=\"n\">dp</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"n\">dq</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coeff_mul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{(</span><span class=\"n\">dp</span><span class=\"o\">,</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dq</span><span class=\"o\">)}</span> <span class=\"err\">⊆</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">antidiagonal</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"bp\">+</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">insert_subset</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mem_antidiagonal</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">singleton_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mem_antidiagonal</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_eq_add_sub</span> <span class=\"o\">},</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">sum_subset</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_insert</span><span class=\"o\">,</span> <span class=\"n\">sum_singleton</span><span class=\"o\">],</span> <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">coeff_nat_degree</span> <span class=\"o\">},</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">assumption&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">dp</span> <span class=\"bp\">≠</span> <span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span> <span class=\"n\">apply</span> <span class=\"n\">next_coeff_mul_omega_1</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hx1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mem_antidiagonal</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_insert</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx1</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">dp</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">∨</span> <span class=\"n\">dq</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>  <span class=\"n\">apply</span> <span class=\"n\">coeff_eq_zero_of_nat_degree_lt</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">coeff_eq_zero_of_nat_degree_lt</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dp</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≠</span> <span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">next_coeff_mul_omega_2</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≠</span> <span class=\"n\">dp</span><span class=\"o\">,</span>     <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span>  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">next_coeff_mul_omega_3</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">next_coeff_mul_omega_4</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206637584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597184065
    },
    {
        "content": "<p>(all I did was <code>extract_goal</code> on all of the <code>omega</code> calls)</p>",
        "id": 206637616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597184101
    },
    {
        "content": "<p>The new leaders are (1, 2, and 3) are the factored out omegas.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">garbage</span> <span class=\"n\">terms</span>\n<span class=\"mi\">6335962</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">monic</span><span class=\"bp\">.</span><span class=\"n\">next_coeff_mul_omega_3</span>\n<span class=\"mi\">2922613</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">monic</span><span class=\"bp\">.</span><span class=\"n\">next_coeff_mul_omega_4</span>\n<span class=\"mi\">1885162</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">monic</span><span class=\"bp\">.</span><span class=\"n\">next_coeff_mul_omega_2</span>\n<span class=\"mi\">1090313</span> <span class=\"o\">:</span> <span class=\"n\">composition_as_set_equiv</span><span class=\"bp\">._</span><span class=\"n\">proof_5</span>\n\n\n<span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">milliseconds</span><span class=\"o\">)</span>\n<span class=\"mi\">3998</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">monic</span><span class=\"bp\">.</span><span class=\"n\">next_coeff_mul_omega_3</span>\n<span class=\"mi\">1783</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">monic</span><span class=\"bp\">.</span><span class=\"n\">next_coeff_mul_omega_4</span>\n<span class=\"mi\">1091</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">monic</span><span class=\"bp\">.</span><span class=\"n\">next_coeff_mul_omega_2</span>\n<span class=\"mi\">680</span> <span class=\"o\">:</span> <span class=\"n\">composition_as_set_equiv</span><span class=\"bp\">._</span><span class=\"n\">proof_5</span>\n</code></pre></div>",
        "id": 206639047,
        "sender_full_name": "Chris B",
        "timestamp": 1597185177
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">next_coeff_mul_omega_3</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"n\">dq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dq</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span> <span class=\"bp\">+</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">dp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≠</span> <span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">dq</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hx1</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206641149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597186753
    },
    {
        "content": "<p>oh, are we playing this game?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">next_coeff_mul_omega_3</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dp</span> <span class=\"n\">dq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dp</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">dq</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span> <span class=\"bp\">+</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"n\">dp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≠</span> <span class=\"n\">dp</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">dp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">dq</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hx1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hq0</span><span class=\"o\">),</span> <span class=\"n\">add_right_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 206641775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597187054
    },
    {
        "content": "<p>I was just trying to make mathlib compile quicker!</p>",
        "id": 206641872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597187140
    },
    {
        "content": "<p>How many times has CI compiled that four second proof?</p>",
        "id": 206641964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597187185
    },
    {
        "content": "<p>More seriously, do we just have a rubbish omega, or is this the actual nature of omega -- I've heard that the algorithm is super-slow.</p>",
        "id": 206642069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597187273
    },
    {
        "content": "<p>probably a bit of both</p>",
        "id": 206642120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597187287
    },
    {
        "content": "<p>I looked at the proof terms and they are seriously bizarre</p>",
        "id": 206642129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597187299
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                                           <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                                              <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)))))))))</span><span class=\"bp\">.</span><span class=\"n\">and</span>\n                        <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">or</span>\n                           <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">and</span>\n                              <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">0</span><span class=\"o\">)))))</span><span class=\"bp\">.</span><span class=\"n\">and</span>\n                       <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n                           <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">5</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">or</span>\n                          <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">and</span>\n                             <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">0</span><span class=\"o\">)))))</span><span class=\"bp\">.</span><span class=\"n\">and</span>\n                      <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">or</span>\n                         <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">and</span>\n                            <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preform</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">preterm</span><span class=\"bp\">.</span><span class=\"n\">cst</span> <span class=\"mi\">0</span><span class=\"o\">)))))</span>\n                   <span class=\"bp\">⟨⟨⟨⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n                       <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span>\n                        <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span>\n                         <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span>\n                          <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n                           <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩⟩⟩⟩⟩⟩</span><span class=\"o\">,</span>\n                      <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩⟩</span><span class=\"o\">,</span>\n                     <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩⟩</span><span class=\"o\">,</span>\n                    <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩⟩</span>\n                   <span class=\"bp\">⟨⟨⟨⟨⟨⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n                       <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n                        <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n                         <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n                          <span class=\"bp\">⟨⟨⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n                           <span class=\"bp\">⟨⟨⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n                            <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n                             <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩⟩⟩⟩⟩⟩⟩</span><span class=\"o\">,</span>\n                      <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n                       <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩⟩⟩</span><span class=\"o\">,</span>\n                     <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n                      <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩⟩⟩</span><span class=\"o\">,</span>\n                    <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">trivial</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"bp\">⟩⟩⟩⟩</span>\n                   <span class=\"o\">(</span><span class=\"n\">clauses</span><span class=\"bp\">.</span><span class=\"n\">unsat_cons</span>\n                      <span class=\"o\">([(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span>\n                              <span class=\"mi\">1</span><span class=\"o\">])],</span>\n                       <span class=\"o\">[(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span>\n                              <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span>\n                              <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n                          <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                          <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">]]),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">]]),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n                          <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span>\n                              <span class=\"mi\">1</span><span class=\"o\">])])</span>\n                      <span class=\"o\">[</span><span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"o\">([</span><span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span>\n                              <span class=\"mi\">1</span><span class=\"o\">,</span>\n                            <span class=\"o\">[</span><span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"err\">…</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">])],</span>\n                         <span class=\"err\">…</span><span class=\"o\">),</span> <span class=\"o\">([(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                            <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                            <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                            <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">1</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 206642198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597187360
    },
    {
        "content": "<p>I think we will have to do something about <code>omega</code> soon. It has no maintainer and the author doesn't seem interested in maintenance</p>",
        "id": 206642398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597187507
    },
    {
        "content": "<p>I think Seul really wanted to have part of it running in the kernel</p>",
        "id": 206642465,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597187527
    },
    {
        "content": "<p>I'm guessing that's what the array of <code>trivial</code>ities are doing</p>",
        "id": 206642558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597187581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Arena.20allocation.20for.20ITPs/near/206642398\">said</a>:</p>\n<blockquote>\n<p>I think we will have to do something about <code>omega</code> soon. It has no maintainer and the author doesn't seem interested in maintenance</p>\n</blockquote>\n<p>I'm certain we'll have to do something about omega before the Lean 4 transition, because I can't imagine the current one getting ported.</p>",
        "id": 206642753,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597187717
    },
    {
        "content": "<p>I'm assuming that <code>213ms : real.pi_lt_31416 </code> is implied by <code>346ms : real.pi_lt_3141593</code>?</p>",
        "id": 206643105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597187995
    },
    {
        "content": "<p>How much work would it take to clean up <code>omega</code>? That sounds like something I can help out with, but I don't want to lick the cookie if I can't eat it.</p>",
        "id": 206676530,
        "sender_full_name": "Chris Wong",
        "timestamp": 1597226159
    },
    {
        "content": "<p><code>omega</code> is 3k lines of pretty intricate code with limited documentation. It's a good proof of concept for reflexive tactics in Lean but I'm not sure it's the right approach overall. Fixing some of the <a href=\"https://github.com/leanprover-community/mathlib/issues/1484\">open bugs</a> would be nice, but for serious improvements it might be easier to start from scratch.</p>",
        "id": 206676903,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597226420
    },
    {
        "content": "<p>For comparison, cloc says <code>linarith</code> is 711 code lines and 752 comment lines, <code>omega</code> is 2342 code and 367 comment.</p>",
        "id": 206677067,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597226568
    },
    {
        "content": "<p>A rewrite should probably take some inspiration from the <code>lra</code>/<code>lia</code> interaction in Coq and share some code with <code>linarith</code>.</p>",
        "id": 206677173,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1597226653
    }
]