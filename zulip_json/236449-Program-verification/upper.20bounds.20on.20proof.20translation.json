[
    {
        "content": "<p>Suppose we have a metamath proof that a particular theorem prover L is correctly implemented (whatever that means), and we know that it builds all the files in mathlib.<br>\nDoes this give us a way to extract a metamath statement and proof of each mathlib statement?<br>\nI asked <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> a related question in a place where such discussion was off-topic</p>",
        "id": 202616723,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593633406
    },
    {
        "content": "<p>I guess it doesn't make sense to talk about a reimplementation of Lean without reference to the lean source code</p>",
        "id": 202617294,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593633699
    },
    {
        "content": "<p>The two issues with that proposal are in the two assumptions: how is the theorem prover L being proven correct, and how is it running on mathlib? If you are running the theorem prover inside metamath then it would be far easier to just translate the proofs to metamath instead</p>",
        "id": 202617381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593633730
    },
    {
        "content": "<p>The proof translation is bounded by the runtime of the lean verified implementation (however it runs)</p>",
        "id": 202617548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593633827
    },
    {
        "content": "<p>There is a general theorem that asserts this but the constant is pretty terrible since you have to simulate a machine one state at a time using inference steps</p>",
        "id": 202617672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593633904
    },
    {
        "content": "<p>so in practice, the translation problems that have been attempted were easier to do \"directly\" rather than going through a reimplementation of the prover?</p>",
        "id": 202617812,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593633979
    },
    {
        "content": "<p>well, really the prover is being reimplemented but it is recognizable as the translation program itself</p>",
        "id": 202617876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593634023
    },
    {
        "content": "<p>okay, so you do translate all of the proofs with one program</p>",
        "id": 202617899,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593634049
    },
    {
        "content": "<p>the lean kernel is turned into a proof-producing kernel where the proofs are in a different language</p>",
        "id": 202617944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593634079
    },
    {
        "content": "<p>so you just directly replace trust in the lean kernel with trust in the base system</p>",
        "id": 202618051,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593634139
    },
    {
        "content": "<p>right</p>",
        "id": 202618070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593634150
    },
    {
        "content": "<p>do you envision metamath C to be a good language for reimplementing provers in?</p>",
        "id": 202618235,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593634215
    },
    {
        "content": "<p>Not really, it's mainly useful for programs that have to be trusted (provers or otherwise)</p>",
        "id": 202618309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593634259
    },
    {
        "content": "<p>that is, it produces programs that prove properties by virtue of their running on real machines</p>",
        "id": 202618361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593634293
    },
    {
        "content": "<p>okay, thanks</p>",
        "id": 202618443,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593634325
    },
    {
        "content": "<p>So you can write proof kernels in MMC, as well as things like fast trusted bignum arithmetic or other verified numeric computations</p>",
        "id": 202618576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593634393
    },
    {
        "content": "<p>there are several examples of big computer proofs being done with an interactive part plus a verified program part that is implemented in a language like C</p>",
        "id": 202618709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593634453
    },
    {
        "content": "<p>and MMC is trying to address the requirements of programs like these</p>",
        "id": 202618741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593634475
    }
]