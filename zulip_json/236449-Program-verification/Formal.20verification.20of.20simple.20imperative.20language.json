[
    {
        "content": "<p>Hello!</p>\n<p>I have done a translation of the correctness proof in Concrete Semantics with Isabelle/HOL to Lean (well, only the forward direction). I saw before that there was interest in having a similar proof in Mathlib's archive so I'm asking if there is interest in my formalization too. If so I'm willing to put up a PR  (it still depends on LoVelib from Hitchhiker's Guide). The language has addition, boolean expressions, if-statements and while-loops. I haven't put it up on Github yet though.</p>\n<p>Edit: I've \"removed\" the dependency on LoVe Library by copying over the definitions that are necessary. I'm not sure if this is the approach.</p>",
        "id": 244138523,
        "sender_full_name": "Leo Ericson",
        "timestamp": 1624884322
    },
    {
        "content": "<p>how about... uploading your code on github first? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 244141424,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624885732
    },
    {
        "content": "<p>Fair enough, here ya go: <a href=\"https://github.com/Zetagon/mathlib/blob/master/archive/whilecc.lean\">https://github.com/Zetagon/mathlib/blob/master/archive/whilecc.lean</a><br>\nI haven't made efforts to make  it conform to Mathlib's conventions yet</p>",
        "id": 244151159,
        "sender_full_name": "Leo Ericson",
        "timestamp": 1624889892
    },
    {
        "content": "<p><code>star</code> is <code>relation.trans_gen</code>. The lemmas about bool, le, and list should either exist or be placed where they should go in mathlib. For the rest, it looks good for the mathlib archive once it is adjusted to mathlib style, although I think you should think about how to turn this into something more reusable so that it can go into mathlib proper</p>",
        "id": 244171945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624898351
    },
    {
        "content": "<p>hmm I have mostly thought about this as an example others could study as it is quite specific to a particular compiler. I'm not quite sure in what way it would be reusable by others. What did you have in mind?</p>",
        "id": 244250551,
        "sender_full_name": "Leo Ericson",
        "timestamp": 1624956807
    },
    {
        "content": "<p>Maybe you should just modify your code to follow mathlib conventions and make a pull request. Because this code can't really be made reusable. But it is a very educational example. Be sure to add a docstring mentioning the Logical Verification course!</p>",
        "id": 244258837,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624961703
    },
    {
        "content": "<p>Oh, and Concrete Semantics too!</p>",
        "id": 244258904,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624961741
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> is interested in pull requests to <a href=\"https://github.com/blanchette/logical_verification_2020\">https://github.com/blanchette/logical_verification_2020</a> to update it to the latest mathlib, or whether it's better frozen in time</p>",
        "id": 244409628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625053106
    },
    {
        "content": "<p>It's frozen in time. I ported it already to 2021. See <a href=\"https://github.com/blanchette/logical_verification_2021\">https://github.com/blanchette/logical_verification_2021</a> . We don't use much of <code>mathlib</code>; it's easy to port.</p>",
        "id": 244411090,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1625054176
    },
    {
        "content": "<p>When will you port to Lean 4?</p>",
        "id": 244417633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625057414
    },
    {
        "content": "<p>Once mathlib has been ported. I'm a late adopter anyway. ;)</p>",
        "id": 244425610,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1625060771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> the repository you see is just a dump. It's not meant to be a development repository, and I don't expect pull requests there. The sources, including the master files that generate problem/solution pairs, are in a separate (private) repository. If you want to suggest a change, I'll be happy to discuss it.</p>\n<p>(Incidentally, if you know how to disable PRs on GitHub, I'm all ears.)</p>",
        "id": 244425964,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1625060935
    },
    {
        "content": "<p>Ah, my apologies - I think the best you can do is put a comment in the readme to that effect.</p>",
        "id": 244426511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625061168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121058\">Jasmin Blanchette</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Formal.20verification.20of.20simple.20imperative.20language/near/244425964\">said</a>:</p>\n<blockquote>\n<p>(Incidentally, if you know how to disable PRs on GitHub, I'm all ears.)</p>\n</blockquote>\n<p>You could maybe archive the Github repo.</p>",
        "id": 244427346,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1625061551
    },
    {
        "content": "<p>That doesn't let you push to the repo though</p>",
        "id": 244429552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625062486
    },
    {
        "content": "<p>You can set interaction limits. Settings &gt; Temporary interaction limits.</p>",
        "id": 244568703,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625147400
    }
]