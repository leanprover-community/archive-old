[
    {
        "content": "<p>Hi everyone,</p>\n<p>In my work, I have an interpreter for a lambda calculus-like language. The function application case looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"n\">exp.app</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">interpC</span> <span class=\"n\">fuel</span> <span class=\"n\">f</span> <span class=\"n\">environ</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">halt</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">halt</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"n\">fval</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">match</span> <span class=\"n\">interpC</span> <span class=\"n\">fuel</span> <span class=\"n\">a</span> <span class=\"n\">environ</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">halt</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">halt</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"n\">aval</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"k\">match</span> <span class=\"n\">fval</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">val.clos</span> <span class=\"n\">x</span> <span class=\"n\">body</span> <span class=\"n\">staticEnviron</span> <span class=\"o\">:=</span>\n          <span class=\"n\">interpC</span> <span class=\"n\">fuel</span> <span class=\"n\">body</span> <span class=\"o\">(</span><span class=\"n\">staticEnviron.update_nth</span> <span class=\"n\">x</span> <span class=\"n\">aval</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">err</span>\n        <span class=\"kd\">end</span>\n      <span class=\"kd\">end</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>\n<p>When I try to prove a theorem about this interpreter,  after <code>unfold</code> the definition of the interpreter itself (and a couple of other case analysis), I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"n\">interpC._match_3</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">aval</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">staticEnviron</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">val</span><span class=\"o\">),</span>\n         <span class=\"n\">interpC</span> <span class=\"n\">fuel_n</span> <span class=\"n\">body</span> <span class=\"o\">(</span><span class=\"n\">staticEnviron.update_nth</span> <span class=\"n\">x</span> <span class=\"n\">aval</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">result.ans</span> <span class=\"n\">v_a</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">result.ans</span> <span class=\"o\">(</span><span class=\"n\">val.clos</span> <span class=\"n\">the_var</span> <span class=\"n\">the_body</span> <span class=\"n\">the_env</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">some</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>How do I partially reduce <code>h</code> further? It's clear from the high-level reasoning that I want to <code>cases</code> on <code>interpC fuel_n the_body (the_env.update_nth the_var v_a)</code> and then call <code>injection h</code>, but <code>cases</code> on <code>interpC ...</code> doesn't correctly rewrite <code>h</code> since the term doesn't occur in <code>h</code>.</p>\n<p>I tried <code>simp at h</code> or even <code>unfold interpC._match_3 at h</code>, but none of them works.</p>\n<p>Thanks!</p>",
        "id": 215217561,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604188357
    },
    {
        "content": "<p>what does <code>rw interpC at h</code> do?</p>",
        "id": 215217737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604188694
    },
    {
        "content": "<p>Could you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 215217751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604188789
    },
    {
        "content": "<p>Yep, that works. I also just realized that <code>unfold interpC._match_3</code> works too, but it introduced <code>interpC._match_4</code> instead (which I mistook it as <code>interpC._match_3</code>). After a couple of <code>unfold</code>, I get exactly what I need. </p>\n<p>Thanks!</p>",
        "id": 215217814,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604188879
    },
    {
        "content": "<p><code>simp [interpC]</code> will probably work from the start</p>",
        "id": 215217860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604188929
    },
    {
        "content": "<p>you don't usually need to mention these <code>_match_n</code> functions explicitly</p>",
        "id": 215217866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604188951
    },
    {
        "content": "<p>Yep, you are totally right. Thanks for your help! :)</p>",
        "id": 215217930,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604189058
    }
]