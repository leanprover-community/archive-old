[
    {
        "content": "<p>I am interested in specifying properties of various basic data structures, such as priority queues, sorted enumerations, dictionaries, etc.  I see that there are some data structures, such as <code>Std.Data.PairingHeap</code>, <code>Mathlib.Data.BinaryHeap</code>, etc, but as far as I can tell, there are no interfaces defining the expected operations and their behavior.  For example, I would imagine something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PollableCollection</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Collection</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n    <span class=\"n\">peek</span>  <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n    <span class=\"n\">poll</span>  <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n    <span class=\"bp\">...</span>\n\n    <span class=\"n\">poll_correct</span> <span class=\"o\">(</span><span class=\"n\">pq</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pq</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">poll</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"bp\">∪</span> <span class=\"n\">snd</span> <span class=\"o\">(</span><span class=\"n\">poll</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"n\">peek_correct</span> <span class=\"o\">(</span><span class=\"n\">pq</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">peek</span> <span class=\"n\">pq</span> <span class=\"bp\">=</span> <span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">poll</span> <span class=\"n\">pq</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PollableCollection</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> PriorityQueue.lean -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">PriorityQueue</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">PollableCollection</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n    <span class=\"n\">peek_minimal</span> <span class=\"o\">(</span><span class=\"n\">pq</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">pq</span><span class=\"o\">,</span> <span class=\"n\">peek</span> <span class=\"n\">pq</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> PairingHeap.lean -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">PriorityQueue</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">PairingHeap</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> BinaryHeap.lean -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">PriorityQueue</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">BinomialHeap</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The details here are off, but the point is that I would like a concise definition of correctness for a priority queue which I could program against.</p>\n<p>I'm curious whether such a library exists, or if anyone has suggestions or pointers that would be helpful in the design.</p>",
        "id": 318762050,
        "sender_full_name": "Michael George",
        "timestamp": 1672505481
    },
    {
        "content": "<p>You probably want to talk to the <a class=\"stream\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4\">#std4</a> people about designing practical abstractions for verified data structures.</p>",
        "id": 318762299,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672505618
    },
    {
        "content": "<p>since people translate Coq&lt;-&gt;Lean all the time, maybe this is of interest:</p>\n<ul>\n<li><a href=\"https://softwarefoundations.cis.upenn.edu/vfa-current/Priqueue.html\">https://softwarefoundations.cis.upenn.edu/vfa-current/Priqueue.html</a></li>\n<li><a href=\"https://github.com/clayrat/fav-ssr/blob/trunk/src/priority.v\">https://github.com/clayrat/fav-ssr/blob/trunk/src/priority.v</a></li>\n</ul>",
        "id": 318762416,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1672505669
    },
    {
        "content": "<p>I've been trying to follow the model of the rust standard library where the data structures have a lot of operations and proved properties but it is relatively light on unifying abstractions (traits / typeclasses) over them. It should be relatively simple for a third party library like <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> 's <a href=\"https://github.com/JamesGallicchio/LeanColls/\">LeanColls</a> to add such a typeclass and wrap all existing relevant data structures with the operations and laws.</p>",
        "id": 318783768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672522099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198375\">Karl Palmskog</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Data.20structures/near/318762416\">said</a>:</p>\n<blockquote>\n<p>since people translate Coq&lt;-&gt;Lean all the time, maybe this is of interest:</p>\n<ul>\n<li><a href=\"https://softwarefoundations.cis.upenn.edu/vfa-current/Priqueue.html\">https://softwarefoundations.cis.upenn.edu/vfa-current/Priqueue.html</a></li>\n<li><a href=\"https://github.com/clayrat/fav-ssr/blob/trunk/src/priority.v\">https://github.com/clayrat/fav-ssr/blob/trunk/src/priority.v</a></li>\n</ul>\n</blockquote>\n<p>Do people really translate stuff between Coq and Lean on daily basis?</p>",
        "id": 318979046,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672660469
    },
    {
        "content": "<p>I was thinking of examples like  <a href=\"https://github.com/kaicho8636/GeoLean\">https://github.com/kaicho8636/GeoLean</a> and <a href=\"https://github.com/uncomputable/natural-number-game\">https://github.com/uncomputable/natural-number-game</a></p>",
        "id": 318979672,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1672660730
    },
    {
        "content": "<p>and not least <a href=\"https://coq.discourse.group/t/alpha-announcement-coq-is-a-lean-typechecker/581\">https://coq.discourse.group/t/alpha-announcement-coq-is-a-lean-typechecker/581</a></p>",
        "id": 318979878,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1672660819
    }
]