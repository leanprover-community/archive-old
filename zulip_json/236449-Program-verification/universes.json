[
    {
        "content": "<p>Naive newbie question: Lean has a hierarchy of universes. Do these ever show up in software development? Or is <code>Prop</code> + <code>Type</code> all you need?</p>",
        "id": 257489974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634195570
    },
    {
        "content": "<p>It comes up in some naive higher order programming, e.g. if you want a monad transformer with a coherence property that universally quantifies over all monads</p>",
        "id": 257490189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634195694
    },
    {
        "content": "<p>I remember struggling with a definition of <code>io</code> that didn't bump the universe, because it existentially quantifies over a monad satisfying some interface operations</p>",
        "id": 257490317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634195772
    },
    {
        "content": "<p>Existentials also come up in containers of (runtime) heterogeneous elements</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"c1\">-- list of printable things</span>\n</code></pre></div>",
        "id": 257490493,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634195896
    },
    {
        "content": "<p>If we wrote haskell code like the <a href=\"https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-Traversal.html#t:Traversal\">lens</a> library we would have universe bumps all over the place:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">type</span> <span class=\"kt\">Traversal</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">=</span> <span class=\"n\">forall</span> <span class=\"n\">f</span><span class=\"o\">.</span> <span class=\"kt\">Applicative</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">s</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 257490512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634195908
    },
    {
        "content": "<p><a href=\"https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Monad-ST.html#v:runST\"><code>runST</code></a> also has a higher order type quantification</p>",
        "id": 257490548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634195939
    },
    {
        "content": "<p>In practice though, for anything you ever want to stick in a monad, <code>Type</code> is the only viable kind <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> . Because <code>bind</code> requires alpha and beta to be in the same universe, you have to agree on a single \"monadic universe\" for the whole program.</p>",
        "id": 257490964,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1634196162
    },
    {
        "content": "<p>I rather think that all these examples <em>don't</em> want more universes, but instead system F (which can be summarized as <code>Type 1 = Type</code>)</p>",
        "id": 257491006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634196188
    },
    {
        "content": "<p>Aha, thanks for the replies!</p>",
        "id": 257492525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634197058
    },
    {
        "content": "<p>So the conclusion is that Lean has infinitely many universes only to make its type theory consistent, and neither mathematicians nor computer scientists need anything other than <code>Prop</code> or <code>Type</code>?? Given that universes sometimes cause issues, isn't this an argument for just being much less polymorphic? :-)</p>",
        "id": 257537492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634219176
    },
    {
        "content": "<p>Doesn't the problem usually manifest as trouble _writing new_ polymorphic lemmas, rather than _applying_ old ones? So there'd be no advantage to de-polymorphizing existing code.</p>",
        "id": 257575705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634233392
    },
    {
        "content": "<p>Why does <code>bind</code> require the universe to stay the same?</p>",
        "id": 257575756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634233417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/236449-Program-verification/topic/universes/near/257575756\">said</a>:</p>\n<blockquote>\n<p>Why does <code>bind</code> require the universe to stay the same?</p>\n</blockquote>\n<p>Iirc, it's because a monad is a particular functor, and you can't quantify over universe variables (you can say <code>F.{u}</code> for a specific level <code>u</code> is a monad, but you can't require that <code>F.{u}</code> is a monad for all <code>u</code>.)</p>",
        "id": 257579082,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634234694
    },
    {
        "content": "<p>The <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\">agitation</a> in Rust for type constructors associated to traits is a good sign for the pratical value for devs. (Please correct me if I am confused here.)</p>",
        "id": 257592957,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1634240300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> There is another solution, which is to not have universes at all, or only have one. You then have to deal with the fact that some types are \"small\" and others are \"large\" and the large ones don't have a type in the formal system. This is how ZFC works and IMO it's quite possible to make do with this</p>",
        "id": 257641208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634269093
    },
    {
        "content": "<p>What do you do when you want to make a statement about a large type? Are there any proof assistants that use this approach?</p>",
        "id": 257649633,
        "sender_full_name": "Chris B",
        "timestamp": 1634277218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <a href=\"#narrow/stream/236449-Program-verification/topic/universes/near/257649633\">said</a>:</p>\n<blockquote>\n<p>What do you do when you want to make a statement about a large type? Are there any proof assistants that use this approach?</p>\n</blockquote>\n<p>Maybe related is (at least one version of) Automath, which only had the <code>Prop</code> and <code>Type</code> type universes.  What happens is that not every theorem/definition has a type -- essentially it has two classes of functions, the usual lambda abstractions (which have types), and, not sure what to call them, metafunctions (which don't).</p>\n<p>Imagine a modification to Lean, where in place of explicit universe levels you can have other kinds of arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">id.</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The <code>id</code> function is too big to have a type itself in a two-universe system, but, for example, <code>id.(ℤ)</code> would have the type <code>ℤ → ℤ : Type</code>.</p>\n<p>(One annoyance is that this <code>id</code> cannot be used with <code>Prop</code>s, which is something the <code>Sort</code> hierarchy solves in Lean.)</p>",
        "id": 257651909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634279165
    },
    {
        "content": "<p>Just like how in Lean you can't have functions that take arguments that quantify over universe levels (and instead you have to specialize a given function with some specific universe levels, possibly universe variables), you can't have functions that take these metafunctions as arguments without specializing all of the metafunction arguments to specific values.  (I wonder how you'd deal with monads on <code>Type</code>?)</p>",
        "id": 257652097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634279401
    },
    {
        "content": "<p>Thanks, I'll check automath out. The metafunction/\"fixed at point of use\" idea is sort of what I figured it might be.</p>",
        "id": 257652302,
        "sender_full_name": "Chris B",
        "timestamp": 1634279535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> In metamath, the distinction I am making corresponds to sets versus classes. You can prove theorems about classes, but class quantification is always implicit and always a universal closure, similar to how universe parametric definitions in lean work. (You can't prove that there exists a class satisfying such and such, but you can construct a concrete class and prove it satisfies such and such.) In a type theory, it would probably work out that large types can appear in the context, and they can be substituted but not quantified over, and the typing judgment for large types would be something like <code>|- A type</code> instead of <code>A : Type</code> because <code>Type</code> is not an object in this language.</p>",
        "id": 257652941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634280064
    },
    {
        "content": "<p>Kyle's example is right on the money. The distinction between regular arguments and const-generic/type arguments in Rust (and early vs late bound lifetimes) is also of a similar flavor.</p>",
        "id": 257653094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634280222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/236449-Program-verification/topic/universes/near/257490964\">said</a>:</p>\n<blockquote>\n<p>In practice though, for anything you ever want to stick in a monad, <code>Type</code> is the only viable kind <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> . Because <code>bind</code> requires alpha and beta to be in the same universe, you have to agree on a single \"monadic universe\" for the whole program.</p>\n</blockquote>\n<p>Could this just be solved with a more general<code>HBind</code>? For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HBind</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u2</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hBind</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">@[defaultInstance]</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Bind</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HBind</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">bind</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Such a bind would also be useful for asynchronous programming (as its signature is compatible with  that of <code>bindAsync</code>).</p>",
        "id": 257719653,
        "sender_full_name": "Mac",
        "timestamp": 1634312945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<p>So it seems like it's along the lines of mm0's first/second order distinction, where first order would be small and second order is large. The strategy in peano.mm1 of using hand-rolled metaprograms to get ad-hoc polymorphism (ala <code>eqtac</code>) seems to work pretty well even in the absence of a fancier typeclass/resolution system.</p>\n<p>In an mm1 project where there are a large number of sorts,  can you use annotations to fake a <code>{A}, List A</code> that does monomorphization at points of use to get you <code>List &lt;concrete sort&gt;</code>, or would that blow up too quickly?</p>",
        "id": 257731587,
        "sender_full_name": "Chris B",
        "timestamp": 1634317636
    },
    {
        "content": "<p>You actually don't need metaprograms to get the required instantiations here; instantiation just directly works on a theorem with second order free variables (in fact, this is the preferred way to state lemmas). You would only need a metaprogram to simulate third order variables</p>",
        "id": 257731888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634317777
    },
    {
        "content": "<p>You would also need a metaprogram to get sort-polymorphism in MM0, this is not directly supported. That would be one (very much not recommended) way to implement a rich type system in the sorts, by just minting a new sort whenever you need a different type. I guess you could call that monomorphization</p>",
        "id": 257732207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634317916
    },
    {
        "content": "<p>It's not recommended though because a lot of the architecture assumes that the number of sorts is small finite (like, less than 128) so a scheme like that would quickly blow the implementation limits</p>",
        "id": 257732452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634317997
    },
    {
        "content": "<p>Boo. Thanks for humoring me.</p>",
        "id": 257733800,
        "sender_full_name": "Chris B",
        "timestamp": 1634318548
    },
    {
        "content": "<p>If users started pushing for that it wouldn't be that hard to increase the limit, but I'm trying to discourage that kind of use. It makes about as much sense as having thousands or tens of thousands of syntax categories</p>",
        "id": 257735151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634319100
    },
    {
        "content": "<p>Or <code>Type 10000</code> for that matter</p>",
        "id": 257735258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634319137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/universes/near/257735151\">said</a>:</p>\n<blockquote>\n<p>It makes about as much sense as having thousands or tens of thousands of syntax categories</p>\n</blockquote>\n<p>Personally, this makes a lot of sense to me. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  I am actually working on something privately that made do this kind of thing.</p>",
        "id": 257737374,
        "sender_full_name": "Mac",
        "timestamp": 1634320047
    },
    {
        "content": "<p>The library essentially uses syntax categories as a substitute for type classes (and inductives -- so types in general).</p>",
        "id": 257737636,
        "sender_full_name": "Mac",
        "timestamp": 1634320145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/universes/near/257735151\">said</a>:</p>\n<blockquote>\n<p>If users started pushing for that it wouldn't be that hard to increase the limit, but I'm trying to discourage that kind of use. It makes about as much sense as having thousands or tens of thousands of syntax categories</p>\n</blockquote>\n<p>This makes sense in the context of mm0 as a theorem prover prover. If you were to import something like mathlib or another large formalization from a different system, I assume you would keep their declarations as \"things that are stated in terms of the sorts set out in lean.mm1\".</p>",
        "id": 257740876,
        "sender_full_name": "Chris B",
        "timestamp": 1634321491
    },
    {
        "content": "<p>Right. Each importer might have a different set of sorts, but it is a function only of the formal system itself so it's usually actually a small number. For lean I think there are 3 sorts, for terms, levels and inductive specifications</p>",
        "id": 257743727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634322633
    }
]