[
    {
        "content": "<p>This may have been asked before, but I'm reading through Hitchhiker's Guide to Logical Verification, and I'm curious how I might define a state that's more generic than the natural numbers. It seems like one approach would be something like <code>def state: Type := string -&gt; Type</code>. I've also considered <code>def state {t : Type} : Type := string -&gt; t</code> if that's possible. Has anyone approached this problem?</p>",
        "id": 312764165,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669695313
    },
    {
        "content": "<p>What do you mean by \"state\" in this context?<br>\nPerhaps you're looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma\">docs#sigma</a>?</p>",
        "id": 312778978,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1669705212
    },
    {
        "content": "<p>I assume you're referring to a state in the semantics of the While language, right? Then indeed <code>def state := string → Σ (t : Type), t</code> could work. Each variable has its own type at each point in time.</p>",
        "id": 312797206,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1669713210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Generic.20State/near/312778978\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"state\" in this context?<br>\nPerhaps you're looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma\">docs#sigma</a>?</p>\n</blockquote>\n<p>In the guide, state is used as a definition to reason over the values of program variables. The book defines state as ‘def state : Type := string -&gt; Nat’ so variables can only be given unsigned int values or enums. I was hoping to define state so that I could reason over variables having any type as their assigned value even to the point of being able to assign structured types or inductive types.</p>",
        "id": 312868240,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669735816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Generic.20State/near/312797206\">said</a>:</p>\n<blockquote>\n<p>I assume you're referring to a state in the semantics of the While language, right? Then indeed <code>def state := string → Σ (t : Type), t</code> could work. Each variable has its own type at each point in time.</p>\n</blockquote>\n<p>That’s right. So what does the sigma do in this context? Edit: is it just shorthand for creating a dependent type with one arg?</p>",
        "id": 312869084,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669736034
    },
    {
        "content": "<p>The Sigma type contains dependent pairs: <code>(x : α, y : β x)</code> where the type of <code>y</code> is allowed to depend on <code>x</code>. In this case, the type of <code>y</code> is exactly equal to <code>x</code>.</p>",
        "id": 312870345,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1669736381
    },
    {
        "content": "<p>So it is indeed shorthand for a specific dependent type, but there are many more dependent types available, such as Pi types (dependent functions).</p>",
        "id": 312870739,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1669736499
    },
    {
        "content": "<p>I’ve read about sigma and pi in Lean 3. I assume that they still work the same in lean 4? In lean 3, they always seemed about the same to me. If sigma is generalizing over Cartesian products and pi over functions, then couldn’t any product be rewritten as an equivalent function? So couldn’t any sigma just be a pi?</p>",
        "id": 312872227,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669736924
    },
    {
        "content": "<p>Yes, sigma and pi are core to Lean's type theory and should work the same in Lean 3 and 4 except for minor syntactical changes.</p>",
        "id": 312872887,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1669737119
    },
    {
        "content": "<p>One way you can intuitively distinguish sigma and pi is that an element of <code>Σ (x : α), β x</code> gives only one tuple, while an element of <code>Π (x : α), β x</code> gives one tuple per element of <code>α</code>. So if <code>α</code> is nonempty and <code>β x</code> is empty for some <code>x</code>, we still have elements of <code>Σ (x : α), β x</code> but there can't be an element of <code>Π (x : α), β x</code>.</p>",
        "id": 312873531,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1669737283
    },
    {
        "content": "<p>Conversely, if <code>α</code> is empty then there is no element of <code>Σ (x : α), β x</code> while <code>Π (x : α), β x</code> has exactly one element, that maps nothing to doesn't matter.</p>",
        "id": 312873641,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1669737322
    },
    {
        "content": "<p>It's nice how it works out that <code>card (Σ (x : α), β x) = Σ (x : α), card (β x)</code> and <code>card (Π (x : α), β x) = Π (x : α), card (β x)</code>, where on the left-hand sides you have cardinalities of sigma/pi types, and on the right you have sums/products of cardinalies.</p>\n<p>One thing to watch out for is that sigma types are a sort of generalization of the cartesian product of a pair of types in a specific order (so the second can depend on the first), but the pi type is the cartesian family of an indexed family of types (and none can depend on one another). I found it to be useful to think about how when you have a non-dependent sigma type, <code>card (Σ (x : α), β) = card α * card β</code> since you're summing up <code>card α</code> copies of <code>card β</code>.</p>",
        "id": 312876465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669738057
    },
    {
        "content": "<p>Many basic combinatorial situations you'd find in an introductory combinatorics class can be modeled with sigma types and pi types. Sigma types are for making sequential choices (\"choose an element <code>x</code> of <code>α</code> and then choose an element of <code>β x</code>\"), and pi types are for making parallel choices (\"for every <code>x</code> in <code>α</code>, choose an element of <code>β x</code>).</p>",
        "id": 312878299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669738553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Generic.20State/near/312873531\">said</a>:</p>\n<blockquote>\n<p>One way you can intuitively distinguish sigma and pi is that an element of <code>Σ (x : α), β x</code> gives only one tuple, while an element of <code>Π (x : α), β x</code> gives one tuple per element of <code>α</code>. So if <code>α</code> is nonempty and <code>β x</code> is empty for some <code>x</code>, we still have elements of <code>Σ (x : α), β x</code> but there can't be an element of <code>Π (x : α), β x</code>.</p>\n</blockquote>\n<p>And this is because Pi being a generalization over functions in lean also means that it's a generalization over <em>total</em> functions?</p>",
        "id": 312912364,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669748141
    },
    {
        "content": "<p>The state notation with Sigma is actually quite nice. <code>example (s : State) : s{\"x\" ↦ ⟨Nat, 0⟩} \"x\" = ⟨Nat, 0⟩ := by state_apply</code> The constructor for the Sigma type makes for very clean examples.</p>",
        "id": 312987838,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669785036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568708\">Ian Riley</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Generic.20State/near/312912364\">said</a>:</p>\n<blockquote>\n<p>And this is because Pi being a generalization over functions in lean also means that it's a generalization over <em>total</em> functions?</p>\n</blockquote>\n<p>Yes, precisely! I've become so used to it that I forget that there are non-total functions :)</p>",
        "id": 313028447,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1669804568
    },
    {
        "content": "<p>Thanks! That's been really helpful :)</p>",
        "id": 313129265,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669833960
    }
]