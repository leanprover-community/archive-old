[
    {
        "content": "<p>I'd love to poll people  and see what they're working on. Myself, I'm implementing a (co)inductive compiler and an equation compiler in Lean to implement the data type package described in <a href=\"https://drops.dagstuhl.de/opus/frontdoor.php?source_opus=11061\">https://drops.dagstuhl.de/opus/frontdoor.php?source_opus=11061</a>.</p>\n<p>One of my goal is to formalize the Haskell <a href=\"https://hackage.haskell.org/package/pipes\">Pipes</a> library and, separately, enter the <a href=\"https://github.com/lemmy/lets-prove-blocking-queue\">lets-prove-blocking-queue</a> challenge</p>",
        "id": 197949787,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1589815122
    },
    {
        "content": "<p>Yay for the QPF implementation!</p>",
        "id": 197950138,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589815271
    },
    {
        "content": "<p>Are we still missing any features in core to make this happen?</p>",
        "id": 197950205,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589815308
    },
    {
        "content": "<p>:) Yes, I've been playing around to hook it up into the inductive compiler and equation compiler. That's what I've been busy at in the last month or so</p>",
        "id": 197951203,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1589815730
    },
    {
        "content": "<p>My latest idea is to expose the machinery that mutual inductive declaration uses to translate it into basic inductive types</p>",
        "id": 197951344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1589815797
    },
    {
        "content": "<p>I feel pretty close to having the hooks that I need</p>",
        "id": 197951543,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1589815858
    },
    {
        "content": "<p>I'm new here, but I'm interested in using Lean for program verification. I primarily use Coq for work but am hoping to one day use Lean for my research. I'm still very much in the learning phase. I'm working through Software Foundations with a few of my friends. They'll be doing the exercises in Coq while I try to port them to Lean.</p>",
        "id": 198027619,
        "sender_full_name": "John Hui",
        "timestamp": 1589871401
    },
    {
        "content": "<p>I learnt a lot about lean by doing exactly that (porting SF)</p>",
        "id": 198038082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589878533
    },
    {
        "content": "<p>Glad I found this stream! I'm pretty new but my current work project is building a lean-based tool for assurance engineering, much in the spirit of <a href=\"https://www.researchgate.net/publication/336240618_IsabelleSACM_Computer-Assisted_Assurance_Cases_with_Integrated_Formal_Methods\">this paper</a>.  Hoping to find other ways to use lean in verification and FM.</p>",
        "id": 207076183,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1597592181
    },
    {
        "content": "<p>Nice project! What made you choose Lean for it?</p>",
        "id": 207076429,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597592574
    },
    {
        "content": "<p>Mostly just because one of the guys in my research group has been doing some related work with Lean, I should probably ask him why he chose it initially! Although I do find Lean more fun to play around with than Coq</p>",
        "id": 207077157,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1597593898
    },
    {
        "content": "<p>I hope it proves useful.</p>",
        "id": 207079492,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597597538
    },
    {
        "content": "<p>Or asking for help</p>",
        "id": 207079593,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597597688
    },
    {
        "content": "<p>I'm working on adding support for z3 for lean. It's done in a way that anyone who wants to add support for another SMTLib-based smt solver should not have any trouble adding support as the z3-specific code is quite isolated and most of it is in terms of SMTLib.</p>\n<p>Currently, I don't quite know how far I'll push it before making a PR. I see at least 4 levels of maturity all of which could be useful, so in case I get stuck, I'll make a PR with the last \"successful\" level of maturity.</p>\n<ul>\n<li>Issue commands and get responses in SMTLib style.</li>\n<li>Have an embedded DSL in the style of Z3Py for issuing commands.</li>\n<li>Encode (a subset of) lean expressions directly to SMTLib format.</li>\n<li>Solve whole theorems (encode goal and hypotheses, run z3, and then replay proof in lean).</li>\n</ul>\n<p>Even the lowest level of maturity would be useful, as that certainly would be useful for finding witnesses or for building tactics. Tactics don't need to be sound, so they don't need to prove that z3's answer was correct. </p>\n<p>The overall goal is for Lean to have access to z3 magic in some shape or form, so I definitely want to PR the work at some point.</p>",
        "id": 207137493,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1597667835
    },
    {
        "content": "<p>Just to check that you know Lean and Z3 were both written by the same guy :-) I've always been surprised that there hasn't been a more robust link.</p>",
        "id": 207137803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597668055
    },
    {
        "content": "<p>Of course I know. I spoke to Leo about it, in fact. And he explained what specifically does not work too well w.r.t. connecting lean to z3. So I made sure that the goals I'm formulating are a strict subset of lean that should be feasible.</p>",
        "id": 207138197,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1597668321
    },
    {
        "content": "<p>As a fork of the type checker I posted last week, I wrote a thing that reads Lean export files and produces a trace of the steps taken during inference and type checking. I think the idea is to pipe the output into the mm0 spec of Lean's type theory so that Lean stuff can be checked in Metamath Zero (Mario Carneiro's project : <a href=\"https://github.com/digama0/mm0\">https://github.com/digama0/mm0</a>).</p>\n<p>I also thought the specification of the Lean kernel I included in that would end up being more palatable for the average Lean user, but it ended up getting  a lot more verbose the more I adapted it to the task at hand, so I started writing a much more minimal (and executable) version of the Lean kernel in Lean3 that the average user here will be able to use if they want to see IE what the process is for type inference, or how the universe levels are checked on inductives, or whatever. <br>\nIt's almost done but I'm really terrible with transformer stacks and wallpapered over those parts with pseudo-Lean. I'll post it when I'm finished, but if anyone with more expertise in that area can fill those parts in it would be a huge help.</p>",
        "id": 207167622,
        "sender_full_name": "Chris B",
        "timestamp": 1597682969
    },
    {
        "content": "<p>Hey everyone! I'm a graduate student in computer science who studies program verification and validation. I'm also new to Lean and am interested in researching what applications Lean might have in that space. Specifically, I have a set of model programs to be implemented on IoT devices. Each device has a set of safety and progress properties. I would like to investigate how Lean might be used to (a) verify that each target property is satisfied by the subject program or vice versa, and/or (b) verify the correctness of a proof that shows that the subject program satisfies a target property. We've previously been doing all of our work in the KIV theorem prover.</p>",
        "id": 208600060,
        "sender_full_name": "Ian Riley",
        "timestamp": 1598899908
    },
    {
        "content": "<p>Hi Ian! Welcome to Lean! One thing that transpires is that you might need some temporal reasoning. I have a temporal logic package (with emphasis on TLA+ style refinement) and I'm overdue for updating it. It contains a special proof mode to manipulate temporal modalities in their own rights and they've been useful to me. Otherwise, I'm also working on a separation logic package which would be useful if you have an imperative implementation. In general, we need more CS libraries so anything you want to contribute will be welcome</p>",
        "id": 208601881,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598900773
    },
    {
        "content": "<p>I presented the temporal logic package at Lean Together 2019: <a href=\"https://av-media.vu.nl/mediasite/Play/fff2ff4ccf134dbc9ccebffcd03d917c1d\">https://av-media.vu.nl/mediasite/Play/fff2ff4ccf134dbc9ccebffcd03d917c1d</a> (it starts at 2:00:00)</p>",
        "id": 208602418,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598901039
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  I'll definitely check this out, and I'd love to help contribute in any way that I can. I'll for sure be needing to use temporal reasoning. All of our properties are specified in LTL, and it is necessary for our publications that they be in LTL. That was actually the main reason why we've been using the KIV theorem prover. It has an extensive TL library. It's just time for us to move away from KIV, and we would like to include other theorem provers for comparative purposes.</p>\n<p>I can a specific example as well. One of our simpler examples involves a program for a Bluetooth headset. The Bluetooth headset has a boolean flag that's set to True whenever the user presses the 'play' button. There is a function playMusic, which we can assume is valid (for now). We have a requirement, always (when play is set to true, then playMusic is eventually called). Again, that's just a simple example, but I'm trying to start small since I have very limited experience with Lean.</p>",
        "id": 208604792,
        "sender_full_name": "Ian Riley",
        "timestamp": 1598902335
    },
    {
        "content": "<p>It's certainly a good idea to start small. I'm afraid the package is not very well documented but I'll be happy to answer questions or add explanations as it becomes useful</p>",
        "id": 208605686,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598902735
    },
    {
        "content": "<p>Thank you so much <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> . I'll check it out and let you know if I have any questions. I really appreciate it.</p>",
        "id": 208606538,
        "sender_full_name": "Ian Riley",
        "timestamp": 1598903203
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>. In the presentation it was mentioned that similar work is being done with SMT. Is that work still being continued? Do you know where that work still is? I've been reading over your temporal logic package, and I was thinking that I might be able to better understand what you're doing if i had similar work to compare it to.</p>",
        "id": 208694007,
        "sender_full_name": "Ian Riley",
        "timestamp": 1598970273
    },
    {
        "content": "<p>The work I was referring to is a verifier that I wrote in Haskell and with Z3. I haven't touched it in a while and it wasn't particularly user friendly. It encodes a specific refinement method based on <a href=\"https://link.springer.com/article/10.1007/s10270-015-0456-2\">https://link.springer.com/article/10.1007/s10270-015-0456-2</a></p>\n<p>Here is the repo: <a href=\"https://github.com/unitb/literate-unitb-complete\">https://github.com/unitb/literate-unitb-complete</a>. It might be hard to get it to compile again unfortunately.</p>",
        "id": 208705553,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598974666
    },
    {
        "content": "<p>I've been trying to port the approach to Lean because then I can have a mechanized proof of soundness of the proof rules and I can access mathematical libraries in proofs. I think that can make a more extendible verifier</p>",
        "id": 208705758,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598974738
    },
    {
        "content": "<p>Gotcha. Thanks <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> . I have both the temporal logic and lean-lib library installed next to each other in my workspace. I'm on Lean version 3.4.1. I'm getting errors when I run 'make all'. Some of the errors refer to LEAN_PATH. What branches should I be using for temporal logic and lean-lib and how should LEAN_PATH be configured?</p>",
        "id": 208717294,
        "sender_full_name": "Ian Riley",
        "timestamp": 1598979722
    },
    {
        "content": "<p>The setup shouldn't be complicated. Let me just update it to the recent ecosystem and add it to the project archive. That will be easier to use this way</p>",
        "id": 208718364,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598980266
    },
    {
        "content": "<p>It's been overdue for a long time</p>",
        "id": 208718519,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1598980337
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>",
        "id": 208721909,
        "sender_full_name": "Ian Riley",
        "timestamp": 1598982047
    },
    {
        "content": "<p>Out of curiosity, what support is their currently for using Hoare logic to perform program verification? Also, do we know what the main goals are for Lean 4? Is it just improving performance? Is it providing new logics? etc.</p>",
        "id": 208850112,
        "sender_full_name": "Ian Riley",
        "timestamp": 1599063592
    },
    {
        "content": "<p>For hoare logic, I have an implementation of separation logic that is under construction and Jasmin Blanchette's book has a section on Hoare logic.</p>",
        "id": 208851841,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599064350
    },
    {
        "content": "<p>Lean 4 will be a very similar prover but with better automation. It will also be a better programming language than Lean 3 and it will have a FFI which will make it easier to develop tools with it and link with existing tools and libraries.</p>",
        "id": 208852090,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599064475
    },
    {
        "content": "<p>Here's the link: <a href=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\">https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf</a><br>\nThere's a chapter on Hoare Logic.</p>",
        "id": 208852562,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1599064702
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> and <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span>. I really appreciate it. This is, hopefully, my final school year as a PhD student, and I would really like to work Lean into my dissertation proposal.</p>",
        "id": 208853853,
        "sender_full_name": "Ian Riley",
        "timestamp": 1599065315
    },
    {
        "content": "<p>Given that I have the following goal,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">exists</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>I know exactly which prop t should be. But how do I eliminate the existential quantifier?</p>",
        "id": 209320488,
        "sender_full_name": "Ian Riley",
        "timestamp": 1599504400
    },
    {
        "content": "<p><code>existsi my_t</code></p>",
        "id": 209320621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599504505
    },
    {
        "content": "<p>also your parens are wrong</p>",
        "id": 209320629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599504519
    },
    {
        "content": "<p>it is <code>\\ex (t : Prop), ...</code></p>",
        "id": 209320644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599504537
    },
    {
        "content": "<p>constructor tactic failed, target is not an inductive datatype</p>",
        "id": 209320920,
        "sender_full_name": "Ian Riley",
        "timestamp": 1599504831
    },
    {
        "content": "<p>I haven't been able to get existsi or use or tactic.interactive.use to work with Prop</p>",
        "id": 209321105,
        "sender_full_name": "Ian Riley",
        "timestamp": 1599505046
    },
    {
        "content": "<p>We can't diagnose this without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . <code>existsi</code> should work.</p>",
        "id": 209321299,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599505269
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>constructor tactic failed, target is not an inductive datatype</p>",
        "id": 209321493,
        "sender_full_name": "Ian Riley",
        "timestamp": 1599505456
    },
    {
        "content": "<p>Your goal isn't an exists, it's an implication.</p>",
        "id": 209321512,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599505486
    },
    {
        "content": "<p>Gotcha. So a more accurate example to what I'm trying to solve is the following.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 209322212,
        "sender_full_name": "Ian Riley",
        "timestamp": 1599506280
    },
    {
        "content": "<p>it's still not an exists</p>",
        "id": 209322256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599506302
    },
    {
        "content": "<p>you should start with <code>intro</code> because your goal is an implication</p>",
        "id": 209322268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599506318
    },
    {
        "content": "<p>I started with an intro. Then the question was how to reach the goal. On a whim, I tried cases on the new hypothesis formed from intro and that seems to work. Is that the general approach?</p>",
        "id": 209322765,
        "sender_full_name": "Ian Riley",
        "timestamp": 1599506836
    },
    {
        "content": "<p>yes, when you have an exists in the hypothesis use <code>cases</code> (or <code>rcases</code>), when it is in the goal use <code>existsi</code> (or <code>use</code>)</p>",
        "id": 209322915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599506998
    },
    {
        "content": "<p>Gotcha. I apologize for seemingly obfuscating the problem. The exact lemma that I'm working with has an extremely large goal, and I'm running into hiccups that I hadn't expected. Thanks for your help. I was able to prove the lemma :)</p>",
        "id": 209323692,
        "sender_full_name": "Ian Riley",
        "timestamp": 1599507775
    },
    {
        "content": "<p>\"Do not worry about your difficulties in Mathematics. I can assure you mine are still greater.\"</p>",
        "id": 209323710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599507823
    },
    {
        "content": "<p>I'm beginning a graduate course on quantum computation/information/complexity, and my professor mentioned that formalizing/verifying some of the topics we're discussing in a language like Lean would be a great term project. I know that some promising work of this nature has been done over in Coq-world, so I'll see what I can do with Lean. If anyone is interested in what comes out of it, I'll be happy to share anything I come up with.</p>\n<p>Would be interesting to see how useful parts of mathlib are for something  like this, I think</p>",
        "id": 209457041,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1599608367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> Yes please share your results, I'd love to see what you come up with</p>",
        "id": 209457197,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599608517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> Hi, I started learning Lean and formalizing quantum computing, using Qwire in Coq as a motivation. I'd love to know how your working is going.</p>",
        "id": 212936947,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1602367790
    },
    {
        "content": "<p>Hi Duckki, I haven’t begun anything serious in Lean yet, but I worked through this textbook <a href=\"https://www.cs.umd.edu/~rrand/vqc/\">https://www.cs.umd.edu/~rrand/vqc/</a> and I am beginning to look at porting it to lean. Nothing tangible yet though, sorry.</p>",
        "id": 212937090,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1602368025
    },
    {
        "content": "<p>Thanks for reply. I haven't read the book. I just started head first :) I'll let you know once my code is somewhat sharable :)</p>",
        "id": 212937903,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1602369334
    },
    {
        "content": "<p>My first huddle was dealing with \"fin\".  Qwire used matrix with plain nat, while Lean mathlib matrix uses fin. Lean's matrix is more well defined, but somewhat more difficult to use.</p>",
        "id": 212938091,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1602369695
    },
    {
        "content": "<p>Yeah, I know what you mean about the linear algebra library. I believe Frederic Dupuis and others have been working on developing an API which should be very helpful for quantum information related topics. In any case, glad to hear about your experience going forward!</p>",
        "id": 212938813,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1602371006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Projects/near/208601881\">said</a>:</p>\n<blockquote>\n<p>Hi Ian! Welcome to Lean! One thing that transpires is that you might need some temporal reasoning. I have a temporal logic package (with emphasis on TLA+ style refinement) and I'm overdue for updating it. It contains a special proof mode to manipulate temporal modalities in their own rights and they've been useful to me. Otherwise, I'm also working on a separation logic package which would be useful if you have an imperative implementation. In general, we need more CS libraries so anything you want to contribute will be welcome</p>\n</blockquote>\n<p>Hi Simon, as part of my project we will be reasoning about LTL statements. I've already started a <a href=\"https://github.com/loganrjmurphy/lean-strategies\">very basic theory here</a>, but we would like to know what Lean users have already done for temporal logics. It looks like your package you mention is probably the most sophisticated temporal logic-related work I've come across for Lean, do you know of anyone else who's been working on this topic?</p>\n<p>In any case, your project looks pretty nifty so I'll be trying it out! It might be a helpful framework for what we're trying to do.</p>",
        "id": 215110872,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604072125
    },
    {
        "content": "<p>Hi Logan! I'll be happy to hear what your feedback. I still need to update to code to make it build on recent versions of Lean / mathlib so it might be hard to get started but I'm slowly working on it.</p>\n<p>I know Galois did related work here: <a href=\"https://github.com/GaloisInc/lean-protocol-support\">https://github.com/GaloisInc/lean-protocol-support</a> (that was actually my first Lean project) but I believe it is unmaintained.</p>",
        "id": 215121189,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604076656
    },
    {
        "content": "<p>In temporal logic, people often choose between focusing on events vs focusing on states. Have you thought about which one works best for you?</p>",
        "id": 215121286,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604076710
    },
    {
        "content": "<p>We'll be focusing on states , we're basically using claims about LTL satisfiability of Transition Systems as the objects of our more general claim-decomposition framework. So the temporal logic is in a sense tangential to the main work, but is an important use case in practice.</p>",
        "id": 215121883,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604077002
    },
    {
        "content": "<p>My framework is also focusing on state whereas the Galois framework focuses on events. So far, my framework is only a shallow embedding but I'm considering making it a deep embedding. That's not the next thing to happen but it would be one way of making it more reusable</p>",
        "id": 215124456,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604078200
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> and <span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span>, the Galois LTL work has almost certainly bitrotted a bit, but the main LTL formalization is <a href=\"https://github.com/GaloisInc/lean-protocol-support/tree/master/galois/temporal\">here</a>.  It's all Apache licensed so feel free to repurpose if you'd like.<br>\nWe formalized LTL and used it to verify a model of a distributed hash-based timestamping system  under some fairness conditions.  The proof just used Lean tactics and didn't use a model checker or any related technologies associated with LTL.</p>",
        "id": 215764510,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1604605568
    },
    {
        "content": "<p>Hi Everyone,</p>\n<p>I thought I would share some slides <a href=\"http://www.cs.toronto.edu/~lmurphy/nov6Lean.pdf\">here</a> from a short, casual presentation I did for my current WIP with Lean. Nothing particularly impressive from a theorem-proving or formalization perspective, but I thought some here might be interested in seeing Lean used in other, more applied contexts. Note that the audience was not assumed to be familiar with languages like Lean.  Of course, I welcome any comments!</p>",
        "id": 215903040,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604696344
    },
    {
        "content": "<p>In case you'd be interested in giving your short casual presentation again in a couple months, I should point out <a href=\"#narrow/stream/113488-general/topic/Lean.20Together.202021\">Lean Together 2021</a> again :) it would be great to hear about this project then</p>",
        "id": 215903649,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604696612
    },
    {
        "content": "<p>I'm definitely interested! Things are advancing well so it should be a bit more interesting by then. </p>\n<p>By the way Rob, I should thank you for the Lftcm videos, they were indispensable in getting this project started (as were <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> on several occasions)</p>",
        "id": 215904225,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1604696883
    },
    {
        "content": "<p>Great! Glad to hear they helped.</p>",
        "id": 215904901,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604697240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Projects/near/198038082\">said</a>:</p>\n<blockquote>\n<p>I learnt a lot about lean by doing exactly that (porting SF)</p>\n</blockquote>\n<p>Do you have that code available? If not, would you consider it?</p>\n<p>It might be useful for educational purposes (and save me a lot of time!)</p>",
        "id": 220695764,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1608648306
    },
    {
        "content": "<p>No it's all lost in time.</p>",
        "id": 220735284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608671935
    },
    {
        "content": "<p>I did it in 2017 and just picked and chose. I regarded as a supplement to TPIL. I got through most of the first book but never touched the other two.</p>",
        "id": 220735338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608671982
    }
]