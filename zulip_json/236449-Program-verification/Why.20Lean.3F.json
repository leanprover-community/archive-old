[
    {
        "content": "<p>So as some may know I'm sort of beginning my first real research project by trying to use Lean for some assurance case verification. I'm at the point in the project where I have to decide whether I want to keep investing more time in Lean, or migrate to something like Coq, and to be able to defend my choice.</p>\n<p>I'm still new to verification/FM, and my experience in Coq is limited to the first volume of SF, so I'm hoping I might be able to get some input from people with more experience in using theorem provers for verification. Does Lean have any advantages compared to Coq for this purpose? Does it have any technical disadvantages, aside from simply being a much younger system? What else would I probably want to consider in choosing between the two?</p>",
        "id": 210527879,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1600440004
    },
    {
        "content": "<p>If you are not planning to use an existing verification library or work with a team that already has a codebase, I think it's a pretty free choice. There is not any feature in either Coq or Lean which is specifically tuned for program verification</p>",
        "id": 210529533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600440622
    },
    {
        "content": "<p>but you can just do it like regular mathematics, with possibly a bit more inductive types than would be common in mathematics</p>",
        "id": 210529652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600440670
    },
    {
        "content": "<p>As Mario says, the libraries can be a big factor. A lot of verification work has been done in Coq so the ecosystem there is richer. On my side, I prefer the tooling and language of Lean. The language, as you say, is younger. Whereas Coq got to explore the design space more (e.g. with canonical structures vs modules vs type classes), Lean committed right away to a design with type classes. I find that libraries are easier to write and use in Lean. You might want to discover for yourself how comfortable you are with the tooling and language and try solving the SF problems in Lean for comparison. (unfortunately, there's no complete draft of SF in Lean yet, it's still in progress)</p>",
        "id": 210535090,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600442692
    },
    {
        "content": "<p>where is that draft?</p>",
        "id": 210535237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600442757
    },
    {
        "content": "<p><a href=\"https://github.com/alashworth/sf-lean/\">https://github.com/alashworth/sf-lean/</a></p>",
        "id": 210535895,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600443007
    },
    {
        "content": "<p>Lean's primary advantages, in my eyes, are much less idiosyncratic metaprogramming, mathlib and this chatroom. There are a few other differences (syntax, tooling, dependent pattern matching, definitional propositional extensionality, definitional reduction for quotients, pervasive use of classical logic, the handling of universes), but none of them strike me as particularly important.</p>\n<p>So unless you plan to write complicated tactics or need the mathematics in mathlib, I'd go with Coq. It has less bugs, better reference and tutorial documentation, more libraries, more tactics and is generally much more polished. Lean is still very much in the research phase; particularly Lean 3, which will hopefully be obsolete soon.</p>",
        "id": 210615373,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1600522298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Why.20Lean.3F/near/210615373\">said</a>:</p>\n<blockquote>\n<p>Lean is still very much in the research phase; particularly Lean 3, which will hopefully be obsolete soon.</p>\n</blockquote>\n<p>Indeed, as soon as Lean 4 is released, we hope to continue our research phase there (-;</p>",
        "id": 210615804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600522821
    },
    {
        "content": "<p>The strengths of Lean for me have been easy metaprogramming, relatively easy to understand implementation, and C interop.</p>",
        "id": 210801965,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1600723431
    }
]