[
    {
        "content": "<p>Hi,</p>\n<p>We have been working on a formal verification tool for the BPF just-in-time (JIT) compilers in the Linux kernel [1].  The tool is based on SMT solving, but axiomatizes a set of expensive bitvector operations (mul/udiv/urem) to scale verification.  We prove the axiomatization separately in Lean.  For example, The tool decomposes 64-bit multiplication using 32-bit operations (e.g., for JIT compilers on 32-bit architectures), and we have a theorem <code>mul_decomp</code> for that axiomatization [2].</p>\n<p>Just wanted to share the bitvector definitions and lemmas we have so far, and see if there's interest in providing a general bitvector library in mathlib.</p>\n<p>The current implementation is:</p>\n<p><a href=\"https://github.com/uw-unsat/serval-bpf/tree/master/lean/src/bv\">https://github.com/uw-unsat/serval-bpf/tree/master/lean/src/bv</a></p>\n<p>It largely follows the SMT-LIB standard.</p>\n<p>We have also tried three other implementations before switching to the current one:</p>\n<ul>\n<li>\n<p>representing a bitvector as <code>nat</code> plus a range proof:<br>\n<a href=\"https://github.com/uw-unsat/serval-bpf/blob/master/lean/attic/bitvec-nat.lean\">https://github.com/uw-unsat/serval-bpf/blob/master/lean/attic/bitvec-nat.lean</a></p>\n</li>\n<li>\n<p>using <code>data.bitvec</code>:<br>\n<a href=\"https://github.com/uw-unsat/serval-bpf/blob/master/lean/attic/bitvec-vector.lean\">https://github.com/uw-unsat/serval-bpf/blob/master/lean/attic/bitvec-vector.lean</a></p>\n</li>\n<li>\n<p>representing a bitvector as an inductive type:<br>\n<a href=\"https://github.com/uw-unsat/serval-bpf/tree/master/lean/attic/bitvec-ind/bv\">https://github.com/uw-unsat/serval-bpf/tree/master/lean/attic/bitvec-ind/bv</a></p>\n</li>\n</ul>\n<p>[1] <a href=\"https://github.com/uw-unsat/serval-bpf\">https://github.com/uw-unsat/serval-bpf</a><br>\n[2] <a href=\"https://github.com/uw-unsat/serval-bpf/blob/master/lean/src/bvaxioms.lean\">https://github.com/uw-unsat/serval-bpf/blob/master/lean/src/bvaxioms.lean</a></p>",
        "id": 207095239,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597620603
    },
    {
        "content": "<p>What would you say were the main pain points with <code>data.bitvec</code>?</p>",
        "id": 207098891,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1597627291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Bitvector/near/207098891\">said</a>:</p>\n<blockquote>\n<p>What would you say were the main pain points with <code>data.bitvec</code>?</p>\n</blockquote>\n<p>The main reason is for specification: <code>data.bitvec</code> defines operations using circuits, while we prefer the definitions to match those in the SMT-LIB standard:</p>\n<p><a href=\"http://smtlib.cs.uiowa.edu/theories-FixedSizeBitVectors.shtml\">http://smtlib.cs.uiowa.edu/theories-FixedSizeBitVectors.shtml</a></p>\n<p>For example, <code>add</code> in <code>data.bitvec</code> is defined as an adder:</p>\n<p><a href=\"https://github.com/leanprover-community/lean/blob/master/library/data/bitvec.lean#L90\">https://github.com/leanprover-community/lean/blob/master/library/data/bitvec.lean#L90</a></p>\n<p>The SMT-LIB defines it as: <code>[[(bvadd s t)]] := nat2bv[m](bv2nat([[s]]) + bv2nat([[t]]))</code></p>\n<p><a href=\"https://github.com/uw-unsat/serval-bpf/blob/master/lean/src/bv/basic.lean#L164\">https://github.com/uw-unsat/serval-bpf/blob/master/lean/src/bv/basic.lean#L164</a></p>\n<p>For proof, the current implementation represents a bitvector as <code>fin n → bool</code>, which makes induction a bit simpler than using <code>data.bitvec</code>, but not fundamentally different (e.g., we prove ring for bitvector neg, add, mul for both representations).  For example,  <code>data.bitvec</code> stores the most significant bit at position 0 (rather than the least significant bit), and some proofs need to append a bit to the end of a vector for induction.  Maybe reverse induction could simplify it.</p>",
        "id": 207104838,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597636741
    },
    {
        "content": "<p>I have an implementation of bitvectors as well, which I needed for a project. I took the definition to be <code>vector bool n</code>, but with the bits in the opposite order from <code>data.bitvec</code>, and with operations defined via nat like you indicated</p>",
        "id": 207104994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597636988
    },
    {
        "content": "<p>Nice!  We did exactly that in one version first (vector bool with the opposite order, defined over nat).</p>\n<p>To further simplify induction (esp. to do induction over both n and the list of bits at the same time), we tweaked that into this inductive type (similar to vector in Coq):</p>\n<p><a href=\"https://github.com/uw-unsat/serval-bpf/blob/master/lean/attic/bitvec-ind/bv/basic.lean#L32\">https://github.com/uw-unsat/serval-bpf/blob/master/lean/attic/bitvec-ind/bv/basic.lean#L32</a></p>",
        "id": 207105180,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597637312
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/mm0/blob/master/mm0-lean/x86/bits.lean\">https://github.com/digama0/mm0/blob/master/mm0-lean/x86/bits.lean</a></p>",
        "id": 207105198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597637369
    },
    {
        "content": "<p>lemmas in <a href=\"https://github.com/digama0/mm0/blob/master/mm0-lean/x86/lemmas.lean\">https://github.com/digama0/mm0/blob/master/mm0-lean/x86/lemmas.lean</a></p>",
        "id": 207105279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597637406
    },
    {
        "content": "<p>I think you can do better if you avoid doing induction at all, and instead use <code>zmod</code> to get all the properties. The dependent type approach means that you have to do induction for everything</p>",
        "id": 207105436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597637663
    },
    {
        "content": "<p>But I think this indicates that it is worthwhile to get a bitvector library into mathlib, and <code>data.bitvec</code> is not an appropriate basis</p>",
        "id": 207105510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597637770
    },
    {
        "content": "<p>One thing we are still not sure is whether to use <code>nat</code> or <code>num</code> for the underlying representation.</p>\n<p>For example, if we use <code>num</code> for definitions:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">bv</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bv</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"n\">bv</span><span class=\"bp\">.</span><span class=\"n\">of_num</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">v₁</span><span class=\"bp\">.</span><span class=\"n\">to_num</span> <span class=\"bp\">+</span> <span class=\"n\">v₂</span><span class=\"bp\">.</span><span class=\"n\">to_num</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Then we could do computational proofs:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x1234</span> <span class=\"o\">:</span> <span class=\"n\">bv</span> <span class=\"mi\">16</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x5678</span> <span class=\"o\">:</span> <span class=\"n\">bv</span> <span class=\"mi\">16</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"n\">x60</span> <span class=\"o\">:</span> <span class=\"n\">bv</span> <span class=\"mi\">16</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>Using <code>nat</code> feels simpler for definitions, but computational proofs using <code>rfl</code>/<code>dec_trivial</code> won't work anymore.  Ideally one could extend <code>norm_num</code> to support it I guess?  I vaguely remember someone was asking about zmod a while back.</p>",
        "id": 207105516,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597637790
    },
    {
        "content": "<p>You shouldn't rely on <code>rfl</code> for this. I actually do a decent amount of computation on concrete bitvectors in that file I linked, but I use typeclasses to transfer the problems to a more easily evaluated setup (see the <code>reify</code> function in <code>x86/lemmas.lean</code>)</p>",
        "id": 207105686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597637962
    },
    {
        "content": "<p>Basically, you can take a number like <code>0x1234 : bv 16</code> and reflect on the syntax to turn it into a list of bools, which can then be evaluated in the kernel</p>",
        "id": 207105743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597638050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Bitvector/near/207105436\">said</a>:</p>\n<blockquote>\n<p>I think you can do better if you avoid doing induction at all, and instead use <code>zmod</code> to get all the properties. The dependent type approach means that you have to do induction for everything</p>\n</blockquote>\n<p>Right, we thought about using <code>zmod</code>.  The issue here is there are two types of bitvector operations: arithmetic ones (add, sub, mul, etc.) could be replaced using existing operations over <code>zmod</code>, but that's less clear for bit operations (concat, extract), as they manipulate bits directly.  So we are stuck with <code>fin n → bool</code> for now.</p>",
        "id": 207105746,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597638060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Bitvector/near/207105510\">said</a>:</p>\n<blockquote>\n<p>But I think this indicates that it is worthwhile to get a bitvector library into mathlib, and <code>data.bitvec</code> is not an appropriate basis</p>\n</blockquote>\n<p>Agreed!  That would be great.</p>",
        "id": 207105768,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597638091
    },
    {
        "content": "<p>Even better would be to extend <code>norm_num</code>, but that's tricky to do in a third party project</p>",
        "id": 207105812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597638124
    },
    {
        "content": "<p>Note that <code>nat</code> already has bit operations on it</p>",
        "id": 207105817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597638154
    },
    {
        "content": "<p>concat is pretty natural, it is the function <code>2^m * a + b</code>, and extract is <code>test_bit i a</code> using the <code>nat.test_bit</code> function</p>",
        "id": 207105828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597638225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Bitvector/near/207105686\">said</a>:</p>\n<blockquote>\n<p>You shouldn't rely on <code>rfl</code> for this. I actually do a decent amount of computation on concrete bitvectors in that file I linked, but I use typeclasses to transfer the problems to a more easily evaluated setup (see the <code>reify</code> function in <code>x86/lemmas.lean</code>)</p>\n</blockquote>\n<p>Thanks for the pointer!  Will take a look.  We don't really need to evaluate concrete bitvectors in this project, but we might in the next one.  That's why it's not urgent for us now, but I'm definitely interested.</p>",
        "id": 207105834,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597638241
    },
    {
        "content": "<p>actually I didn't need to compute with bitvectors exactly, I needed to prove that e.g. <code>0x67</code> does not match the pattern <code>[0,1,x,y,0,z,0,0]</code></p>",
        "id": 207105918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597638327
    },
    {
        "content": "<p>doing that naively in the kernel is a complete non-starter, at least with the representation I used</p>",
        "id": 207105996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597638387
    },
    {
        "content": "<p>Right, <code>nat</code> has bit operations.  But they are quite different from the SMT-LIB definitions (and may have subtle differences in semantics).  Since we are modeling SMT operations in this project in Lean, it's easier to keep our definitions closer to the SMT-LIB ones.</p>",
        "id": 207106002,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597638395
    },
    {
        "content": "<p>The usual mathlib way is to prove that the singular definition matches the expected semantics. Do you actually have reason to believe that they are different?</p>",
        "id": 207106023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597638471
    },
    {
        "content": "<p>Aha, I've been curious about this high-level question.  I notice some style differences in Coq and Lean/mathlib code.  For example, Coq's Z is defined using a representation efficient for kernel computation.  Lean prefers to use a simpler definition (based on nat) and one can use things like <code>norm_num</code> if kernel computation is needed.</p>\n<p>For bitvector, one approach is to take circuit-based definitions (tweaking <code>data.bitvec</code>) or <code>num</code>-based definitions, and prove these definitions match the SMT-LIB semantics.  Another approach is to define operations using <code>nat</code> following SMT-LIB, and extend <code>norm_num</code> to support kernel computation, etc.  Any thoughts?</p>",
        "id": 207106274,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597638758
    },
    {
        "content": "<p>My inclination would be to make all the definitions mathematically as simple as possible. So e.g. addition is <code>bitvec.add x y := of_nat (to_nat a + to_nat b)</code>, there are maps to <code>nat</code> and <code>int</code> for signed and unsigned values and slt, ult are defined by pulling back <code>&lt;</code> on these types</p>",
        "id": 207106342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597638948
    },
    {
        "content": "<p>this is the kind of definition that is best situated to answer the correctness question, and it's also the easiest to prove properties about</p>",
        "id": 207106402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597639041
    },
    {
        "content": "<p>Then the existence of an algorithm to compute the values (the circuit definition) becomes a real theorem</p>",
        "id": 207106419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597639080
    },
    {
        "content": "<p>The current bitvec defs seem to match your description? <a href=\"https://github.com/uw-unsat/serval-bpf/blob/master/lean/src/bv/basic.lean\">https://github.com/uw-unsat/serval-bpf/blob/master/lean/src/bv/basic.lean</a></p>",
        "id": 207106700,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597639446
    },
    {
        "content": "<p>Yes, pretty much. I would argue that the definition of <code>slt</code> isn't great though</p>",
        "id": 207106853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597639755
    },
    {
        "content": "<p>also <code>ashr</code></p>",
        "id": 207106857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597639774
    },
    {
        "content": "<p><code>udiv</code> and <code>urem</code> look a little weird but I'm sure you got the special cases from smt-lib</p>",
        "id": 207106906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597639814
    },
    {
        "content": "<p>lol agreed - <code>slt</code> and <code>ashr</code> are directly copied from the SMT-LIB standard.</p>",
        "id": 207106910,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597639834
    },
    {
        "content": "<p>We do prove something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">slt_to_int</span> <span class=\"o\">(</span><span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">:</span> <span class=\"n\">bv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">v₁</span><span class=\"bp\">.</span><span class=\"n\">to_int</span> <span class=\"bp\">&lt;</span> <span class=\"n\">v₂</span><span class=\"bp\">.</span><span class=\"n\">to_int</span> <span class=\"bp\">=</span> <span class=\"n\">v₁</span><span class=\"bp\">.</span><span class=\"n\">slt</span> <span class=\"n\">v₂</span>\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/uw-unsat/serval-bpf/blob/master/lean/src/bv/lemmas.lean#L651\">https://github.com/uw-unsat/serval-bpf/blob/master/lean/src/bv/lemmas.lean#L651</a></p>",
        "id": 207106923,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597639877
    },
    {
        "content": "<p>I meant this part from SMT-LIB <a href=\"http://smtlib.cs.uiowa.edu/Logics/QF_BV.smt2\">http://smtlib.cs.uiowa.edu/Logics/QF_BV.smt2</a></p>",
        "id": 207107000,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597640015
    },
    {
        "content": "<p>well in a file like that, I would guess that the version <code>v₁.to_int &lt; v₂.to_int = v₁.slt v₂</code> isn't available in the lexicon</p>",
        "id": 207107054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597640122
    },
    {
        "content": "<p>If I were being really rigorous about the translation, I would take that file and put it directly in lean, using an automated translation (with different possible levels of rigor here) to turn it into a lean theorem, that can then be proven from the lean definitions</p>",
        "id": 207107119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597640272
    },
    {
        "content": "<p>that way it decouples the lean definitions from the smt-lib definitions without losing on correctness</p>",
        "id": 207107167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597640315
    },
    {
        "content": "<p>Yeah that would be cool. :)</p>",
        "id": 207107184,
        "sender_full_name": "Xi Wang",
        "timestamp": 1597640385
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> is working on an SMT-lib parser, which could make it possible to even read that file directly into a lean data structure</p>",
        "id": 207107229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597640408
    },
    {
        "content": "<p>That's right, as of now, I have an s-expression parser and serializer, a z3 interface and am working adding higher-level constructs of smtlib like commands. </p>\n<p>One could use the current thing as is and even call z3 with it (I have test files doing that); the communication would then have to be in terms of s-expressions for now. Once I get further in the development, I certainly envision an interface in terms of \"commands\" and \"responses\" which would be lean inductive types.</p>",
        "id": 207135626,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1597666522
    }
]