[
    {
        "content": "<p>Hi All, I posted my initial release of Quantum Computing in Lean. <a href=\"https://github.com/duckki/lean-quantum\">https://github.com/duckki/lean-quantum</a><br>\nI had a lot of fun and learned a lot. But, I don't think I'm using Lean right, yet. :)</p>",
        "id": 217784006,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1606237752
    },
    {
        "content": "<p>I managed to prove 3 versions no-clone theorems like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">no_clone_1</span>\n    <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"mi\">4</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">U.unitary</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊗</span> <span class=\"bp\">|</span><span class=\"mi\">0</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">⊗</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">no_clone_3</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span>\n    <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Square</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">))</span>\n         <span class=\"o\">,</span> <span class=\"n\">U.unitary</span>\n         <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">s.unit</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"mi\">0</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)⟩))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)))))</span>\n</code></pre></div>",
        "id": 217784406,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1606237921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> Here's my promised post <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 217784653,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1606238020
    },
    {
        "content": "<p>Congrats! Note that one way to get good feedback on your Lean code is to PR the re-usable bits of your code to mathlib <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 217785555,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606238369
    },
    {
        "content": "<p>Thanks. PR to mathlib will be my next step :)</p>",
        "id": 217785794,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1606238470
    },
    {
        "content": "<p>You might like data/matrix/notation for notation like <code>vector.of_fn ![/√2]</code> instead of <code>(/√2 ::ᵥ vector.nil)</code></p>",
        "id": 217786602,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606238839
    },
    {
        "content": "<p>Or write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Matrix</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 217786785,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606238906
    },
    {
        "content": "<p>Don't forget to turn <a href=\"https://github.com/leanprover-contrib/lean-build-action\">https://github.com/leanprover-contrib/lean-build-action</a> on in your repo :)</p>",
        "id": 217791842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606241225
    },
    {
        "content": "<p>One other tip - Your <code>adjoint</code> function was recently generalized by Scott to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star\">docs#star</a> (and the instance it uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.star_ring\">docs#matrix.star_ring</a>), which gives you a bunch of lemmas for free that might replace your lemmas. You'll still need to introduce the dagger notation yourself though.</p>",
        "id": 217792450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606241466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Thanks. I'm updating my code with the notation you suggested, right now.</p>",
        "id": 217822570,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1606257103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>star</code> sounds good. I'll update my mathlib.</p>",
        "id": 217822757,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1606257241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , one issue with \"star\" is that it expects to return the same type as the input.  That works for ℂ. But, for matrix, it needs to be <code>matrix m n a -&gt; matrix n m a</code>.</p>",
        "id": 217833894,
        "sender_full_name": "Duckki Oe",
        "timestamp": 1606265900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"344552\">Duckki Oe</span> <a href=\"#narrow/stream/236449-Program-verification/topic/Quantum.20Computing/near/217833894\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> , one issue with \"star\" is that it expects to return the same type as the input.  That works for ℂ. But, for matrix, it needs to be <code>matrix m n a -&gt; matrix n m a</code>.</p>\n</blockquote>\n<p>Perhaps part of the definition of <code>[has_star R] </code> should be a defined type R* which is the target of * (I guess you have a function on types R -&gt; R<em>, then, and you want it to be involutive, so R</em>* = R?)</p>",
        "id": 219464618,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1607602928
    },
    {
        "content": "<p>I think this is a general problem in the same way that you can't define <code>has_mul</code> on non-square matrices</p>",
        "id": 219468812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607605681
    },
    {
        "content": "<p>Which means you wouldn't be able to state things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_mul\">docs#star_mul</a> anyway</p>",
        "id": 219468860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607605694
    }
]