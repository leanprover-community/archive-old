[
    {
        "content": "<p>Hey! Is there code dealing with non-empty intersection of connected subgraphs being connected, and related facts? E.g. the support of a walk is connected, and two \"adjacent\" connected subgraphs are connected?<br>\nIf not, would that have its place somewhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">connected.union</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hconn</span> <span class=\"o\">:</span> <span class=\"n\">H.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Kconn</span> <span class=\"o\">:</span> <span class=\"n\">K.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HinterK</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H.inter</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts.nonempty</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,⟨</span><span class=\"n\">vH</span><span class=\"o\">,</span><span class=\"n\">vK</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">HinterK</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">vHK</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">vH</span><span class=\"o\">,},</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">nempty</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">vHK</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">simple_graph.connected.mk</span><span class=\"o\">,</span>\n\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coe.reachable</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">vHK</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xH</span><span class=\"bp\">|</span><span class=\"n\">xK</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">xv</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Hconn</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xH</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">vH</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">xv.map</span> <span class=\"o\">(</span><span class=\"n\">subgraph.inclusion</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">xv</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Kconn</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xK</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">vK</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">xv.map</span> <span class=\"o\">(</span><span class=\"n\">subgraph.inclusion</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.adj_pair</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G.induce</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">simple_graph.connected.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,(</span><span class=\"n\">xe</span><span class=\"bp\">|</span><span class=\"n\">xe</span><span class=\"o\">)⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,(</span><span class=\"n\">ye</span><span class=\"bp\">|</span><span class=\"n\">ye</span><span class=\"o\">)⟩,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">induction</span> <span class=\"n\">xe</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">ye</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">reachable.rfl</span><span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nonempty.intro</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">walk.cons</span> <span class=\"n\">_</span> <span class=\"n\">walk.nil</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comap_adj</span><span class=\"o\">,</span> <span class=\"n\">function.embedding.coe_subtype</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.adj_union</span>  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hconn</span> <span class=\"o\">:</span> <span class=\"n\">H.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Kconn</span> <span class=\"o\">:</span> <span class=\"n\">K.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">uH</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vK</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">K.verts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">H.union</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">G.induce</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">union</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">union</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 294615118,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661151052
    },
    {
        "content": "<p>And a related question: There is <code>delete_verts</code>, but not <code>keep_verts</code>, so that I don't see a direct way to construct a subgraph induced by a set of vertices. What should I use?</p>",
        "id": 294615372,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661151173
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.subgraph.induce\">docs#simple_graph.subgraph.induce</a></p>",
        "id": 294615443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661151203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Union.20of.20connected.20subgraphs/near/294615443\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.subgraph.induce\">docs#simple_graph.subgraph.induce</a></p>\n</blockquote>\n<p>Ah, right: <code>(⊤ : G.subgraph).induce</code> works, though it looks a bit clumsy. Thanks!</p>",
        "id": 294615708,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661151304
    },
    {
        "content": "<p>I've tried proving some relatively elementary facts about induced subgraphs, but it feels like I'm fighting the API:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.connectivity</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.subgraph</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">simple_graph</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.singleton</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">({</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">coe.connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">coe.connected</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">connected_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">rotate</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subgraph.induce_verts</span><span class=\"o\">,</span> <span class=\"n\">set.nonempty_coe_sort</span><span class=\"o\">,</span> <span class=\"n\">set.singleton_nonempty</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xe</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">ye</span><span class=\"o\">⟩,</span>\n   <span class=\"n\">induction</span> <span class=\"n\">xe</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">ye</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">walk.nil</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.edges_mono</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hconn</span> <span class=\"o\">:</span> <span class=\"n\">H.connected</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Veq</span> <span class=\"o\">:</span> <span class=\"n\">H.verts</span> <span class=\"bp\">=</span> <span class=\"n\">K.verts</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K.connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">K.coe.connected</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">H.coe.connected</span> <span class=\"n\">at</span> <span class=\"n\">Hconn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">connected_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">rotate</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">Veq</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">connected_iff</span> <span class=\"n\">at</span> <span class=\"n\">Hconn</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Hconn.2</span><span class=\"o\">,},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xK</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">yK</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">Veq</span> <span class=\"n\">at</span> <span class=\"n\">xK</span> <span class=\"n\">yK</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">xy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Hconn</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xK</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">yK</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">xy.map</span> <span class=\"o\">(</span><span class=\"n\">subgraph.inclusion</span> <span class=\"n\">sub</span><span class=\"o\">),}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.union</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hconn</span> <span class=\"o\">:</span> <span class=\"n\">H.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Kconn</span> <span class=\"o\">:</span> <span class=\"n\">K.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HinterK</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H.inter</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts.nonempty</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coe.connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,⟨</span><span class=\"n\">vH</span><span class=\"o\">,</span><span class=\"n\">vK</span><span class=\"o\">⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">HinterK</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">vHK</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">vH</span><span class=\"o\">,},</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">nempty</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">vHK</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">change</span> <span class=\"n\">connected</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">simple_graph.connected.mk</span><span class=\"o\">,</span>\n\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coe.reachable</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">vHK</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xH</span><span class=\"bp\">|</span><span class=\"n\">xK</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">xv</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Hconn</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xH</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">vH</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">xv.map</span> <span class=\"o\">(</span><span class=\"n\">subgraph.inclusion</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">xv</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Kconn</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">xK</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">vK</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">xv.map</span> <span class=\"o\">(</span><span class=\"n\">subgraph.inclusion</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">H.union</span> <span class=\"n\">K</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.adj_pair</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">coe.connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">coe.connected</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">connected_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">rotate</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">set.has_insert.insert.nonempty</span> <span class=\"n\">u</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,(</span><span class=\"n\">xe</span><span class=\"bp\">|</span><span class=\"n\">xe</span><span class=\"o\">)⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,(</span><span class=\"n\">ye</span><span class=\"bp\">|</span><span class=\"n\">ye</span><span class=\"o\">)⟩,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">induction</span> <span class=\"n\">xe</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">ye</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">any_goals</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">reachable.rfl</span><span class=\"o\">},</span>\n    <span class=\"n\">all_goals</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">nonempty.intro</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">walk.cons</span> <span class=\"n\">_</span> <span class=\"n\">walk.nil</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subgraph.coe_adj</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">subgraph.induce_adj</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">,</span>\n                 <span class=\"n\">set.mem_singleton</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">,</span> <span class=\"n\">subgraph.top_adj_iff</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">a.symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.adj_union</span>  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hconn</span> <span class=\"o\">:</span> <span class=\"n\">H.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Kconn</span> <span class=\"o\">:</span> <span class=\"n\">K.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">uH</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vK</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">K.verts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">(</span><span class=\"n\">H.verts</span> <span class=\"bp\">∪</span> <span class=\"n\">K.verts</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">coe.connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">union</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">union</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">(</span><span class=\"n\">H.verts</span> <span class=\"bp\">∪</span> <span class=\"n\">K.verts</span><span class=\"o\">)),</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">connected.edges_mono</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">connected.union</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">connected.union</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">connected.adj_pair</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">Hconn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span><span class=\"n\">use</span> <span class=\"n\">uH</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">Kconn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">use</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">vK</span><span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">subgraph.induce</span><span class=\"o\">,</span><span class=\"n\">subgraph.union</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set.eq_of_subset_of_subset</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set.union_assoc</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set.union_subset</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">xu</span><span class=\"bp\">|</span><span class=\"n\">xv</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">xu</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">uH</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">xv</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">xv</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">vK</span><span class=\"o\">}},</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">set.union_assoc</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set.subset_union_right</span><span class=\"o\">,}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.walk_support</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">(</span><span class=\"n\">p.support.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">coe.connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">(</span><span class=\"n\">p.support.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">coe.connected</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">walk.support_nil</span><span class=\"o\">,</span> <span class=\"n\">list.to_finset_cons</span><span class=\"o\">,</span> <span class=\"n\">list.to_finset_nil</span><span class=\"o\">],</span>  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">connected.singleton</span> <span class=\"n\">V</span> <span class=\"n\">G</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">connected_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">p_ih</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>",
        "id": 294630672,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661158193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@Rémi Bottinelli</span> Here are some refinements to the lemmas up through <code>connected.adj_union</code> along with some supporting lemmas and constructions. There are still many opportunities for further refinement here since a number of proofs each contain a handful of useful lemmas.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.connectivity</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.subgraph</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">simple_graph</span>\n<span class=\"kn\">open</span> <span class=\"n\">simple_graph.walk</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n\n<span class=\"sd\">/-- See Note [range copy pattern] -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">copy</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">V'</span> <span class=\"bp\">=</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">G.adj</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">h</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">copy_rfl</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">G.copy</span> <span class=\"n\">rfl</span> <span class=\"bp\">=</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">copy_copy</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"n\">V''</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">V'</span> <span class=\"bp\">=</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">V''</span> <span class=\"bp\">=</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">G.copy</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">copy</span> <span class=\"n\">h'</span> <span class=\"bp\">=</span> <span class=\"n\">G.copy</span> <span class=\"o\">(</span><span class=\"n\">h'.trans</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The graphs `G.copy h` and `G` are isomorphic using `cast h` on vertices. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">copy_iso</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">V'</span> <span class=\"bp\">=</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.copy</span> <span class=\"n\">h</span> <span class=\"bp\">≃</span><span class=\"n\">g</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_rel_iff'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"bp\">..</span> <span class=\"n\">equiv.cast</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">subgraph.adj_copy_coe</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">H.verts</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hu</span> <span class=\"n\">hv</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">H.coe.copy</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">adj</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">H.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subgraph.connected_iff</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">H.connected</span> <span class=\"bp\">↔</span> <span class=\"n\">H.coe.preconnected</span> <span class=\"bp\">∧</span> <span class=\"n\">H.verts.nonempty</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">H.coe.connected</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">connected_iff</span><span class=\"o\">,</span> <span class=\"n\">set.nonempty_coe_sort</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subgraph.induce_singleton_connected</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">({</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subgraph.connected_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xe</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ye</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">walk.nil</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subgraph.induce_verts</span><span class=\"o\">,</span> <span class=\"n\">set.singleton_nonempty</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[mono]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.mono</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≤</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">G.connected</span> <span class=\"bp\">→</span> <span class=\"n\">G'.connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">connected_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">hom.map_spanning_subgraphs</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subgraph.connected.edges_mono</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Veq</span> <span class=\"o\">:</span> <span class=\"n\">H.verts</span> <span class=\"bp\">=</span> <span class=\"n\">K.verts</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H.connected</span> <span class=\"bp\">→</span> <span class=\"n\">K.connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">H.coe</span> <span class=\"bp\">≤</span> <span class=\"n\">K.coe.copy</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Veq</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subgraph.coe_adj</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">subgraph.adj_copy_coe</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sub.2</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hc.mono</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">copy_iso</span> <span class=\"n\">K.coe</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">connected_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.union</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hconn</span> <span class=\"o\">:</span> <span class=\"n\">H.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Kconn</span> <span class=\"o\">:</span> <span class=\"n\">K.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HinterK</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">⊓</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts.nonempty</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">⊔</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">huH</span><span class=\"o\">,</span> <span class=\"n\">huK</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">HinterK</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">⊔</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts</span> <span class=\"o\">:=</span> <span class=\"n\">or.inl</span> <span class=\"n\">huH</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subgraph.connected_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">⊔</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">verts</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">⊔</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coe.reachable</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"bp\">|</span><span class=\"n\">hv</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Hconn</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">huH</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">subgraph.inclusion</span> <span class=\"n\">le_sup_left</span> <span class=\"o\">:</span> <span class=\"n\">H.coe</span> <span class=\"bp\">→</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">⊔</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">),</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">subgraph.inclusion</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">Kconn</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">huK</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">p.map</span> <span class=\"o\">(</span><span class=\"n\">subgraph.inclusion</span> <span class=\"n\">le_sup_right</span> <span class=\"o\">:</span> <span class=\"n\">K.coe</span> <span class=\"bp\">→</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">⊔</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">),</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">subgraph.inclusion</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">reachable.trans</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subgraph.induce_pair_connected</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subgraph.connected_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subgraph.induce_verts</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span><span class=\"bp\">;</span> <span class=\"n\">obtain</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span><span class=\"bp\">;</span>\n    <span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">walk.cons</span> <span class=\"n\">_</span> <span class=\"n\">walk.nil</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"n\">huv.symm</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">connected.adj_union</span>  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">Hconn</span> <span class=\"o\">:</span> <span class=\"n\">H.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Kconn</span> <span class=\"o\">:</span> <span class=\"n\">K.connected</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">uH</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vK</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">K.verts</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">⊔</span> <span class=\"n\">H</span> <span class=\"bp\">⊔</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">connected</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">connected.union</span> <span class=\"n\">_</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">connected.union</span> <span class=\"o\">(</span><span class=\"n\">subgraph.induce_pair_connected</span> <span class=\"n\">huv</span><span class=\"o\">)</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"c1\">-- TODO add simp lemmas for (inf/sup).verts</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"c1\">-- TODO add simp lemmas for (inf/sup).verts</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>",
        "id": 294753836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661196524
    },
    {
        "content": "<p>I haven't been bold enough to commit the following coercions, which seem like they would be useful here: <a href=\"https://github.com/leanprover-community/mathlib/blob/walks_and_trees/src/combinatorics/simple_graph/subgraph.lean#L338-L348\">https://github.com/leanprover-community/mathlib/blob/walks_and_trees/src/combinatorics/simple_graph/subgraph.lean#L338-L348</a></p>\n<p>They let you use <code>h : G.adj u v</code> as if it were a two-vertex subgraph. Now that we have <code>induce</code>, if we were to decide to introduce the coercion we'd define the coercion as <code>(⊤ : G.subgraph).induce {u, v}</code> (which doesn't strictly need <code>h</code>) and have some supporting lemmas that make use of <code>h</code>.</p>",
        "id": 294754405,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661196775
    },
    {
        "content": "<p>By the way, there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.induce\">docs#simple_graph.induce</a></p>\n<p>This might a reasonable formulation of mapping a walk into an induced graph:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">walk.to_induced</span>  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">G.induce</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>However, we should have a function that pulls walks back along injective graph homomorpisms under the condition that the walk's support lies inside the image. Then <code>walk.to_induced</code> can be defined in terms of this. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.walk.to_delete_edges\">docs#simple_graph.walk.to_delete_edges</a> probably should be redefined in terms of this function too.</p>",
        "id": 294755736,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661197400
    },
    {
        "content": "<p>Thanks! Where should the <code>copy</code> part live?</p>",
        "id": 294809104,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661235484
    },
    {
        "content": "<p>Mmh, continuing on your “However” remark, shouldn't it be further decomposed into:</p>\n<ul>\n<li>An injective morphism of graph induces an image subgraph and restricts to an isomorphism between domain and image.</li>\n<li>A walk can be “contained” in a subgraph, in which case there is a restriction of the walk to the subgraph.</li>\n</ul>\n<p>And then we can combine those two?</p>",
        "id": 294815613,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661239413
    },
    {
        "content": "<p>I'm thinking of something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">walk.contained</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p.edges.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">$</span> <span class=\"n\">sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">H.edge_set</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_cons_iff</span>  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">walk.cons</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contained</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">H.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_verts</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p.support.to_finset</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">H.verts</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_append_left</span>  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.append</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contained</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_append_right</span>  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.append</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contained</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk.contained.to_subgraph</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">H.verts</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pcon</span> <span class=\"o\">:</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H.coe.walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">u</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">uu</span><span class=\"o\">,</span><span class=\"n\">hu</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ww</span><span class=\"o\">,</span><span class=\"n\">hw</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">uav</span> <span class=\"n\">vpw</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">walk.nil</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">walk.contained_cons_iff</span> <span class=\"n\">at</span> <span class=\"n\">pcon</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span> <span class=\"o\">:=</span> <span class=\"n\">H.edge_vert</span> <span class=\"o\">(</span><span class=\"n\">pcon.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">walk.cons'</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">hv</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subgraph.coe_adj</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pcon.1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">hv</span> <span class=\"n\">hw</span> <span class=\"n\">pcon.2</span><span class=\"o\">,},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk.contained.to_subgraph_map_eq</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">H.verts</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pcon</span> <span class=\"o\">:</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">walk.contained.to_subgraph</span> <span class=\"n\">H</span> <span class=\"n\">p</span> <span class=\"n\">pcon</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">H.hom</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">u</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">uu</span><span class=\"o\">,</span><span class=\"n\">hu</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ww</span><span class=\"o\">,</span><span class=\"n\">hw</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">uav</span> <span class=\"n\">vpw</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">subgraph.hom</span><span class=\"o\">,</span><span class=\"n\">walk.contained.to_subgraph</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">congr_arg2</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 294819488,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661241406
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 294820282,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661241757
    },
    {
        "content": "<p>If this is an acceptable path, I think we don't actually need the “pull back along a morphism” part for the specific instance of an induced subgraph. I'm not sure which path is best.</p>",
        "id": 294821737,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661242460
    },
    {
        "content": "<p>As for “An injective morphism of graph induces an image subgraph and restricts to an isomorphism between domain and image.”: does that already exist in some form somewhere? I couldn't find anything like that.</p>",
        "id": 294822266,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661242723
    },
    {
        "content": "<p>Mmh, that's actually a wrong definition for <code>walk.contained</code> since <code>nil</code> will be contained no matter what…</p>",
        "id": 294837323,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661249436
    },
    {
        "content": "<p>A corrected version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">walk.contained</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">),</span>  <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">walk.nil'</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">walk.cons'</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">H.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span>  <span class=\"bp\">∧</span> <span class=\"n\">walk.contained</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_cons_iff</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">walk.cons</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contained</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">H.adj</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_nil_iff</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">walk.nil'</span> <span class=\"n\">u</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contained</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_verts</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">p_ih</span> <span class=\"n\">h.2</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">wsup</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">walk.support_cons</span><span class=\"o\">,</span><span class=\"n\">list.mem_cons_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">wsup</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">wsup</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">wsup</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H.edge_vert</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">p_ih</span> <span class=\"n\">w</span> <span class=\"n\">wsup</span><span class=\"o\">,</span> <span class=\"o\">},}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_induced_iff</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p.contained</span> <span class=\"o\">((</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">induce</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">walk.contained_verts</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">walk.contained</span><span class=\"o\">],</span>\n    <span class=\"n\">induction</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">p_h</span><span class=\"o\">⟩,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span>\n      <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,},</span>\n      <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,},</span>\n      <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">p_ih</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"n\">w</span> <span class=\"n\">ws</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ws</span><span class=\"o\">,},</span>\n    <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_append_left</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.append</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contained</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">walk.contained_append_right</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p.append</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contained</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk.contained.to_subgraph</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">H.verts</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pcon</span> <span class=\"o\">:</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H.coe.walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">u</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">uu</span><span class=\"o\">,</span><span class=\"n\">hu</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ww</span><span class=\"o\">,</span><span class=\"n\">hw</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">uav</span> <span class=\"n\">vpw</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">walk.nil</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">walk.contained_cons_iff</span> <span class=\"n\">at</span> <span class=\"n\">pcon</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">H.verts</span> <span class=\"o\">:=</span> <span class=\"n\">H.edge_vert</span> <span class=\"o\">(</span><span class=\"n\">pcon.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">walk.cons'</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">hv</span><span class=\"o\">⟩</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subgraph.coe_adj</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pcon.1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">hv</span> <span class=\"n\">hw</span> <span class=\"n\">pcon.2</span><span class=\"o\">,},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">walk.contained.to_subgraph_map_eq</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">G.subgraph</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">H.verts</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pcon</span> <span class=\"o\">:</span> <span class=\"n\">p.contained</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">walk.contained.to_subgraph</span> <span class=\"n\">H</span> <span class=\"n\">p</span> <span class=\"n\">pcon</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">H.hom</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">u</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">uu</span><span class=\"o\">,</span><span class=\"n\">hu</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ww</span><span class=\"o\">,</span><span class=\"n\">hw</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">uav</span> <span class=\"n\">vpw</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">subgraph.hom</span><span class=\"o\">,</span><span class=\"n\">walk.contained.to_subgraph</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">congr_arg2</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,}</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">walk.to_induced</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G.induce</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">induce_eq_coe_induce_top</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">walk.contained.to_subgraph</span><span class=\"o\">,</span> <span class=\"n\">rotate</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">walk.contained_induced_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 294845806,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661253781
    },
    {
        "content": "<p>OK, I've put it all in a <a href=\"https://github.com/leanprover-community/mathlib/compare/bottine/simple_graph_connectivity_in_subgraphs\">new branch</a>. I think a PR is not in order yet, but hopefully we can get that in shape to get included?</p>",
        "id": 294856596,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661258378
    }
]