[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392901\">Joanna Choules</span> <a href=\"#narrow/stream/116395-maths/topic/graph.20theory/near/260483206\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/graph.20theory/near/260452323\">said</a>:</p>\n<blockquote>\n<p>I guess there's a more general result, which is if <code>G'</code> is a finite graph and if every finite subgraph of <code>G</code> has a homomorphism to <code>G'</code>, then there is a homomorphism from <code>G</code> to <code>G'</code>.</p>\n</blockquote>\n<p>Do you happen to know if this is already being worked on currently? I thought I would try the proof myself out of curiosity, and I've been making reasonable headway, but I'm conscious of not duplicating effort.</p>\n</blockquote>\n<p>After a substantial hiatus, I've picked this up again, but there are certain parts of the Hall theorem proof whose type-correctness I don't quite understand (and which, perhaps more importantly, I can't seem to replicate in my own proof). </p>\n<p>In particular, at <a href=\"https://github.com/leanprover-community/mathlib/blob/b490ab4ac99873a41a6fc5731cb548728d6df9d5/src/combinatorics/hall/basic.lean#L156\">https://github.com/leanprover-community/mathlib/blob/b490ab4ac99873a41a6fc5731cb548728d6df9d5/src/combinatorics/hall/basic.lean#L156</a>, why does Lean let us apply the injectivity of <code>uii'</code> directly to an equality of type <code>((hall_matchings_functor t).map _ uii').val ⟨i, _⟩ = ((hall_matchings_functor t).map _ uii').val ⟨i', _⟩</code>, especially considering that the morphisms passed to <code>map</code> (underscored here for brevity) are different on the LHS and RHS (and, indeed, not even of the same type)?</p>",
        "id": 296010171,
        "sender_full_name": "Joanna Choules",
        "timestamp": 1661812219
    },
    {
        "content": "<p>By unfolding the definitions I see that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">hall_matchings_functor</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">x</span> <span class=\"n\">uii'</span>\n</code></pre></div>\n<p>is by definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hall_matchings_on.restrict</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">category_theory.le_of_hom</span> <span class=\"n\">x.unop</span><span class=\"o\">)</span> <span class=\"n\">uii'</span>\n</code></pre></div>\n<p>which is by definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">uii'.val</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i.property</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">hall_matchings_functor</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">_</span> <span class=\"n\">uii'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>is defeq to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uii'.val</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>So <code>uii'.property.1 h</code> is a proof of <code>⟨i, _⟩ = ⟨i', _⟩</code> and<br>\n<code>subtype.mk_eq_mk.mp (uii'.property.1 h)</code> is a proof of <code>i = i'</code>.</p>",
        "id": 296016004,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661816169
    },
    {
        "content": "<p>Ah ok, so I have to make sure that the type checker can reach through to the restriction function - I'll see what I can do about that. Thanks!</p>",
        "id": 296063513,
        "sender_full_name": "Joanna Choules",
        "timestamp": 1661850956
    },
    {
        "content": "<p>The proof is finished now; I'll submit a PR for it within the next day or two.<br>\n[cc. <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> - I should (fingers crossed) be able to knock out the specialisation to colorings without too much trouble, assuming it doesn't already exist as its own lemma?]</p>",
        "id": 297046626,
        "sender_full_name": "Joanna Choules",
        "timestamp": 1662251953
    },
    {
        "content": "<p>The PR is up - I added <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> as a potential reviewer but I'd be glad of anyone's eyes who'd like to look it over.</p>",
        "id": 297209796,
        "sender_full_name": "Joanna Choules",
        "timestamp": 1662377320
    },
    {
        "content": "<p>It's <a href=\"https://github.com/leanprover-community/mathlib/pull/16382\">#16382</a></p>",
        "id": 297210366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662377577
    }
]