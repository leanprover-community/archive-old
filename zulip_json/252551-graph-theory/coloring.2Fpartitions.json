[
    {
        "content": "<p>I've created this definition of <code>partitionable</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Whether a graph can be partitioned in at most `n` parts. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">partitionable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G.partition</span><span class=\"o\">),</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">P.parts</span> <span class=\"bp\">↪</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>To prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">partitionable_iff_colorable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">G.partitionable</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">G.colorable</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">P</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">partition.to_coloring'</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">G.recolor_of_embedding</span> <span class=\"n\">f</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">partition.from_coloring</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">P.from_coloring_to_embedding</span> <span class=\"n\">C</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Now I need to define this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An embedding from the parts of a partition to the colors of a coloring -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">from_coloring_to_embedding</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">G.coloring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P.parts</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Is it possible to do so?</p>",
        "id": 261999575,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637273779
    },
    {
        "content": "<p>That definition of <code>partitionable</code> seems like a reasonable way to encode the idea.  I wonder though if it'd be easier to work with down the line if it used the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> interface:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">partitionable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G.partition</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P.parts.finite</span><span class=\"o\">),</span> <span class=\"n\">h.to_finset.card</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I'm not really sure, though, what's the most common way in mathlib of saying \"this is a set with at most <code>n</code> elements.\"</p>",
        "id": 262001869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637275092
    },
    {
        "content": "<p>For <code>from_coloring_to_embedding</code>, I think you need additional hypotheses on what <code>P</code> is.</p>",
        "id": 262001903,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637275110
    },
    {
        "content": "<p><code>P</code> might have more independent sets than the number of color classes for <code>C</code>, and they might not me mergeable.</p>",
        "id": 262002088,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637275211
    },
    {
        "content": "<p>Right, I had the impression that I lost important information with the abstraction</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Creates a partition from a coloring. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">from_coloring</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">G.coloring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.partition</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C.color_classes</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">is_partition</span> <span class=\"o\">:</span> <span class=\"n\">setoid.is_partition</span> <span class=\"n\">parts</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">coloring.color_classes_is_partition</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">independent</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">parts</span><span class=\"o\">),</span> <span class=\"n\">is_antichain</span> <span class=\"n\">G.adj</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">coloring.color_classes_is_independent</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">partition.mk</span> <span class=\"n\">parts</span> <span class=\"n\">is_partition</span> <span class=\"n\">independent</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262002561,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637275504
    },
    {
        "content": "<p>I want <code>P.parts</code> to be exactly the color classes themselves</p>",
        "id": 262002775,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637275616
    },
    {
        "content": "<p>Are you wanting this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">from_coloring_to_embedding</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">G.coloring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">from_coloring</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">parts</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 262002910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637275688
    },
    {
        "content": "<p>Hm, I think so. Lemme try to plug that in</p>",
        "id": 262003008,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637275771
    },
    {
        "content": "<p><code>use [P, P.from_coloring_to_embedding C]</code> is no longer accepted tho</p>",
        "id": 262003586,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637276155
    },
    {
        "content": "<p>Also, here's something that still needs design: how to express \"this is a partition with at most <code>n</code> parts.\"  There's not really a way to say \"let <code>P</code> be a bipartition\" directly.</p>\n<p>I'd thought about making <code>P.parts</code> be a <code>finset</code>, so it could be <code>(P : G.partition) (h : P.parts.card &lt;= 2)</code>, but that seems unnecessarily restrictive.</p>\n<p>Leaving it as a <code>set</code>, another option is a predicate (not sure what to call it) like <code>P.parts_card_le 2</code></p>",
        "id": 262003587,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637276156
    },
    {
        "content": "<p>I like the predicate idea more because it's more symmetrical with the idea of a coloring (no restrictions on the number of colors)</p>",
        "id": 262004208,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637276457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Alright I think I've iterated on all of your comments, but there are some unfortunate sorrys in the way (I'm a bit exhaust)</p>",
        "id": 262021697,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637290984
    },
    {
        "content": "<p>here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coloring.mem_color_classes</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">C.color_class</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">C.color_classes</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">aa</span> <span class=\"o\">:=</span> <span class=\"n\">C.mem_color_class</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coloring.color_classes_is_independent</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">C.color_classes</span><span class=\"o\">),</span> <span class=\"n\">is_antichain</span> <span class=\"n\">G.adj</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">v</span> <span class=\"n\">hv</span> <span class=\"n\">w</span> <span class=\"n\">hw</span> <span class=\"n\">hnvw</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262021730,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637291008
    },
    {
        "content": "<p>And I couldn't make the conversation from earlier come true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">from_coloring_to_embedding</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">G.coloring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P.parts</span> <span class=\"bp\">↪</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 262021748,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637291039
    },
    {
        "content": "<p>This version is useful because it's exactly what's expected in a proof in the context of partitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coloring.color_classes_is_independent</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">C.color_classes</span><span class=\"o\">),</span> <span class=\"n\">is_antichain</span> <span class=\"n\">G.adj</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 262021908,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637291211
    },
    {
        "content": "<p>but I couldn't prove it after changing the definition of <code>color_classes</code> to <code>(setoid.ker C).classes</code></p>",
        "id": 262021926,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637291252
    },
    {
        "content": "<p>The branch is updated with my latest commit</p>",
        "id": 262022019,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637291361
    },
    {
        "content": "<p>Please feel free to adjust those last details <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 262022873,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637292393
    },
    {
        "content": "<p>Arthur, you can't computably eliminate from Prop into data. You only have the Prop that such an embedding exists (nonempty _), but you can't unwrap that nonempty hypothesis directly into data on its own. Of course, inside a proof, you can use tactic like <code>rcases</code> or <code>obtain</code> to retrieve a possible such embedding, so you might not need an explicit definition of <code>from_coloring_to_embedding</code>.</p>",
        "id": 262026957,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637297406
    },
    {
        "content": "<p>Sorries are gone</p>",
        "id": 262027115,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637297624
    },
    {
        "content": "<p>I'm not sure how <code>from_coloring_to_embedding</code> was supposed to work, so I deleted it. (It still lives on in a git commit and in this conversation.)</p>",
        "id": 262027207,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637297716
    },
    {
        "content": "<p>If anyone wants to figure out where they should go, what they should be called, or how to write them better, there are some lemmas about cardinalities about <code>setoid.ker</code> and <code>set.range</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/70b66747bd72293939b22546215808d1f72c508f/src/combinatorics/simple_graph/coloring.lean#L103-L147\">https://github.com/leanprover-community/mathlib/blob/70b66747bd72293939b22546215808d1f72c508f/src/combinatorics/simple_graph/coloring.lean#L103-L147</a> (pr: <a href=\"https://github.com/leanprover-community/mathlib/issues/10287\">#10287</a>)</p>",
        "id": 262027377,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637297911
    },
    {
        "content": "<p>Some syntax clean-up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">C.to_partition</span><span class=\"o\">,</span> <span class=\"n\">C.color_classes_finite_of_fintype</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_fin</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">generalize_proofs</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">C.color_classes</span> <span class=\"o\">:=</span> <span class=\"n\">C.color_classes_finite_of_fintype.fintype</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h.card_to_finset</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">C.card_color_classes_le</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 262027404,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637297965
    },
    {
        "content": "<p>Is something like this more general?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fintype.card_le_of_surjective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">):</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y.2.some</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hx.some_spec</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">hx'.some_spec</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.fintype</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fintype.card_le_of_injective</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fintype.card_congr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">equiv.subtype_univ_equiv</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- TODO move to correct place</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fintype.card_range_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.card_le_of_surjective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 262027927,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637298555
    },
    {
        "content": "<p>Oh, I should have looked for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_le_of_surjective\">docs#fintype.card_le_of_surjective</a></p>",
        "id": 262028262,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637298997
    },
    {
        "content": "<p>Amazing! I'm going to backtrack your guys' ideas and try to wrap my head around them. My learning is skyrocketing. Thanks a lot</p>",
        "id": 262066617,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637328896
    },
    {
        "content": "<p>Amazing! I'm going to backtrack your guys' ideas and try to wrap my head around them. My learning is skyrocketing. Thanks a lot</p>",
        "id": 262066656,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637328920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I've pushed <a href=\"https://github.com/leanprover-community/mathlib/pull/10287/commits/f646e62b52646b346577270c18a3e3a6fd75bc22\">this commit</a> to the branch</p>",
        "id": 262099794,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637343078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> doesn't <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20nat.2Efind/near/268465247\">this definition</a> bother you a bit though? It bugs me because the chromatic number is something we want to minimize</p>",
        "id": 268466496,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642545625
    },
    {
        "content": "<p>It seems to me that it should be applied to finite graphs, only</p>",
        "id": 268466605,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642545690
    },
    {
        "content": "<p>There's theory about colorability of infinite graphs with finitely many colors</p>",
        "id": 268466711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642545740
    },
    {
        "content": "<p>So is it consistent with the literature that infinite graphs that can't be colored with a finite number of colors have chromatic number equal to zero?</p>",
        "id": 268466805,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642545813
    },
    {
        "content": "<p>Like an infinite clique, for instance</p>",
        "id": 268466834,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642545831
    },
    {
        "content": "<p>Oh, no, <code>0</code> is junk data I'm pretty sure.</p>",
        "id": 268466961,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642545906
    },
    {
        "content": "<p>But then are we currently able to prove that the chromatic number of an infinite clique is 0? (I think I've finally formulated my question properly)</p>",
        "id": 268467105,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642546000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Excellent question. It's possible, but it takes some missing lemmas (want to PR them? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.coloring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">colorable_of_zero_le_chromatic_number</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G.chromatic_number</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">G.colorable</span> <span class=\"n\">G.chromatic_number</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.nonempty_of_pos_Inf</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">colorable_chromatic_number</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">colorable_of_embedding</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">↪</span><span class=\"n\">g</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G'.colorable</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.colorable</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G'.coloring</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h.to_coloring</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">c.comp</span> <span class=\"n\">f</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> replace chromatic_number_le_of_forall_imp with this -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">chromatic_number_le_of_forall_imp'</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">G'.colorable</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">G'.colorable</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">G.colorable</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">G.chromatic_number</span> <span class=\"bp\">≤</span> <span class=\"n\">G'.chromatic_number</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cInf_le</span> <span class=\"n\">chromatic_number_bdd_below</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">colorable_chromatic_number</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chromatic_number_le_of_embedding</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">↪</span><span class=\"n\">g</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G'.colorable</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">G.chromatic_number</span> <span class=\"bp\">≤</span> <span class=\"n\">G'.chromatic_number</span> <span class=\"o\">:=</span>\n<span class=\"n\">chromatic_number_le_of_forall_imp'</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">colorable_of_embedding</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">chromatic_number_top_eq_zero_of_infinite</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">chromatic_number</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">chromatic_number</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">chromatic_number</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert_to</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">chromatic_number</span> <span class=\"bp\">≤</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">chromatic_number_complete_graph</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">chromatic_number_le_of_embedding</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">colorable_of_zero_le_chromatic_number</span> <span class=\"n\">hc</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">embedding.complete_graph.of_embedding</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">function.embedding.subtype</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">infinite.nat_embedding</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.not_succ_le_self</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>",
        "id": 268471939,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642548780
    },
    {
        "content": "<p>I didn't simplify the last lemma's proof.</p>",
        "id": 268471983,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642548811
    },
    {
        "content": "<p>Wait, isn't this a hole? Shouldn't we tweak the definition of chromatic number to forbid this strangeness?</p>",
        "id": 268472107,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642548878
    },
    {
        "content": "<p>this is pretty common in mathlib. <code>order_of (2 : ℤ) = 0</code>. <code>nat.card ℕ = 0</code>. it's a nice throw-away value</p>",
        "id": 268472201,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642548954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/coloring.2Fpartitions/near/268471939\">said</a>:</p>\n<blockquote>\n<p>(want to PR them? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>\n</blockquote>\n<p>Sure, np</p>",
        "id": 268472674,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642549330
    },
    {
        "content": "<p>and because this is so widespread, it works well together, too; the <code>monoid.exponent</code> of a cyclic group is equal to its <code>nat.card</code>, same with the <code>chromatic_number</code> of a complete graph</p>",
        "id": 268472778,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642549422
    },
    {
        "content": "<p>(although usually we end up stating the results in terms of <code>fintype</code>/<code>infinite</code> anways because the proof ends up being fairly different, as you can see above &amp; also in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_cyclic.exponent_eq_card\">docs#is_cyclic.exponent_eq_card</a>)</p>",
        "id": 268472901,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642549501
    },
    {
        "content": "<p>Now I'm curious to see how this concept (hack?) first got into mathlib <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> <br>\nOr is it a common practice in formalized mathematics?</p>",
        "id": 268473060,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642549643
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I replaced the proof for <code>chromatic_number_top_eq_zero_of_infinite</code> with something a bit shorter.)</p>",
        "id": 268473405,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642549920
    },
    {
        "content": "<p>I feel a bit awkward PR'ing something you authored 100%, but babysitting PRs is something I don't mind if you don't enjoy it very much</p>",
        "id": 268473837,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642550256
    },
    {
        "content": "<p>Will do in a few minutes <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 268474046,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642550394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/252551-graph-theory/topic/coloring.2Fpartitions/near/268473060\">said</a>:</p>\n<blockquote>\n<p>Now I'm curious to see how this concept (hack?) first got into mathlib <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> <br>\nOr is it a common practice in formalized mathematics?</p>\n</blockquote>\n<p>Related: <a href=\"https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/\">https://xenaproject.wordpress.com/2020/07/05/division-by-zero-in-type-theory-a-faq/</a></p>",
        "id": 268475870,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1642551611
    },
    {
        "content": "<p>(Oops, sorry about that Arthur. I'll PR it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>)</p>",
        "id": 268475876,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642551619
    }
]