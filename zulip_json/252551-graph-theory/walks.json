[
    {
        "content": "<blockquote>\n<p>Why not define walks as lists with a chain constraint? Then you get lots of defns and lemmas for free</p>\n</blockquote>",
        "id": 227359088,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614037569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> what do you mean by this exactly?</p>",
        "id": 227359168,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614037628
    },
    {
        "content": "<p>Something like a structure that takes a g : graph V, start : V, seq : list V, with the constraint that seq.chain start g.adj</p>",
        "id": 227359479,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614037809
    },
    {
        "content": "<p>Then for a path, you say nodup (start :: seq) or something like that</p>",
        "id": 227359568,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614037866
    },
    {
        "content": "<p>I just started reading Bollobas (Bhavik suggested it), so these could be very naive questions</p>",
        "id": 227359663,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614037915
    },
    {
        "content": "<p>I haven't tried using the chain API so I'm not really sure! I'll have to try it at some point</p>",
        "id": 227360702,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614038497
    },
    {
        "content": "<p><del>Didn't know it existed tbh</del></p>",
        "id": 227360809,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614038542
    },
    {
        "content": "<p>Then cycles are a constraint that is like <code>(∀ h : seq ≠ []), seq.last h ≠ start</code></p>",
        "id": 227361917,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614039158
    },
    {
        "content": "<p>That would be <code>is_cycle</code></p>",
        "id": 227361946,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614039184
    },
    {
        "content": "<p>Could also take advantage of list defs too, like count</p>",
        "id": 227362150,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614039297
    },
    {
        "content": "<p>Which is super convenient</p>",
        "id": 227362170,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614039308
    },
    {
        "content": "<p>Ah I mentioned this a while ago - iirc the problem with that is that it doesn't generalise nicely to labelled graphs</p>",
        "id": 227362435,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614039465
    },
    {
        "content": "<p>Probably <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> can be more helpful</p>",
        "id": 227362521,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614039505
    },
    {
        "content": "<p>Wacky idea but what if we also used chains to describe walks in labelled graphs where incidence between edges is the relation instead of adjacency</p>",
        "id": 227362715,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614039637
    },
    {
        "content": "<p>That would fit into the design choice of treating edges as their own objects (useful for matroids)</p>",
        "id": 227362793,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614039699
    },
    {
        "content": "<p>Suppose edges are defined as sets of vertices, that would allow for things like hypergraphs eventually too</p>",
        "id": 227363762,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614040313
    },
    {
        "content": "<p>Can't labeled graphs be done with sigma types?</p>",
        "id": 227365499,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614041332
    },
    {
        "content": "<p>But for labelled multigraphs, you'll end up with some heterogeneous list type, at which point you might as well use the inductive type Kyle suggested in the first place</p>",
        "id": 227366198,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614041734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> If you think that structure would be better, I'd suggest trying to prove that if two vertices are connected by a walk, then they are also connected by a path.  That module I wrote was primarily to work out how to do that in as clean a way as I knew how.</p>\n<p>There are a couple nice properties about that definition.  The first is that it gives a category of walks on the graph.  The second is that the definition of a path involves defining the support, which seems like it would be a useful finset to have around anyway.</p>",
        "id": 227368554,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1614043247
    },
    {
        "content": "<p>It seems like it could be useful taking the inductive type I wrote and generalize it to arbitrary relations, then specialize it for simple graphs.  I think there's still a walk-&gt;path result in the general case.</p>",
        "id": 227368749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1614043388
    },
    {
        "content": "<p>Actually, rather than generalizing it to relations, it might be nice to generalize it to directed multigraphs (i.e., \"relations\" of type <code>a -&gt; a -&gt; Sort*</code>)</p>",
        "id": 227369369,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1614043813
    },
    {
        "content": "<p>I haven't tried using the chain API so I'm not really sure! I'll have to try it at some point</p>",
        "id": 227371728,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1614045749
    },
    {
        "content": "<p>I forgot to mention that my code for walks was mostly based on <a href=\"https://github.com/leanprover-community/mathlib/blob/hedetniemi/src/graph_theory/paths.lean\">https://github.com/leanprover-community/mathlib/blob/hedetniemi/src/graph_theory/paths.lean</a></p>",
        "id": 227655038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1614193991
    },
    {
        "content": "<p>I'm testing it out right now, adding a lot of <code>walk</code> API that probably isn't really needed. There's missing <code>list.chain</code> API to do so that would be nice to have anyway. Thanks for the pointer.</p>",
        "id": 227655234,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614194074
    },
    {
        "content": "<p>An example of what I have right now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">last_coe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 227655424,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614194152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I saw you had some good stuff in <code>simple_graph_walks2</code>. Are you okay with me PRing it soon-ish?</p>",
        "id": 243406235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624292116
    },
    {
        "content": "<p>I've forgotten the exact state of the branch, but here's my last message about it: <a href=\"#narrow/stream/252551-graph-theory/topic/Construct.20path.20from.20walk.3F/near/219804780\">https://leanprover.zulipchat.com/#narrow/stream/252551-graph-theory/topic/Construct.20path.20from.20walk.3F/near/219804780</a></p>\n<p>I think <span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> might have made use of some of it in another branch -- pinging her in case.</p>\n<p>Anyway, it would be great if you PR'd it!</p>",
        "id": 243406871,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624292423
    },
    {
        "content": "<p>Me offering that was actually from talking to her <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 243406970,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624292474
    },
    {
        "content": "<p>I'm actually interested in multigraphs, so I will try to generalise your file.</p>",
        "id": 243407129,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624292546
    },
    {
        "content": "<p><code>simple-graph</code> doesn't seem like a great fit for multigraphs honestly</p>",
        "id": 243407212,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624292593
    },
    {
        "content": "<p>You may be better off looking at quivers although you may have some struggles</p>",
        "id": 243407229,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624292605
    },
    {
        "content": "<p>Yeah of course</p>",
        "id": 243407248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624292612
    },
    {
        "content": "<p>I was trying to prove Koningsberg using them and ran into so many issues, but I did actually manage to get some small amounts of code for paths there that typechecked</p>",
        "id": 243407294,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624292636
    },
    {
        "content": "<p>How are you formalizing multigraphs? There are some discussions in this stream about the many ways that are possible.</p>",
        "id": 243407304,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624292640
    },
    {
        "content": "<p>But I think one can abstract away even from multigraphs, and instead defining walks and paths on an arbitrary relation.</p>",
        "id": 243407371,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624292662
    },
    {
        "content": "<p>For defining multigraph, I was thinking about a N-weighing of the complete graph. But Alena tells me this might not fit her matroid edges labelling needs.</p>",
        "id": 243407456,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624292712
    },
    {
        "content": "<p>I think there's discussion about that, too -- it would be nice having the category generated by a relation if it doesn't already exist</p>",
        "id": 243407458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624292713
    },
    {
        "content": "<p>What's that?</p>",
        "id": 243407489,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624292728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  <a href=\"https://gist.github.com/ericrbg/c2025ecbd87e161f1d4eba4604178336\">https://gist.github.com/ericrbg/c2025ecbd87e161f1d4eba4604178336</a> is what I've got so far with quivesr</p>",
        "id": 243407716,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624292840
    },
    {
        "content": "<p>Oh so <code>quiver</code> is actually already a generalisation of <code>multigraph</code>.</p>",
        "id": 243407965,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624292963
    },
    {
        "content": "<p>Yeah, this is what I was trying to say</p>",
        "id": 243407997,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624292984
    },
    {
        "content": "<p>undirected things are quite annoying in it though</p>",
        "id": 243408004,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624292990
    },
    {
        "content": "<p>and it's almost too-strongly type theoretic so it can be very frustrating working with it sometimes</p>",
        "id": 243408070,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624293006
    },
    {
        "content": "<p>Oh</p>",
        "id": 243408086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624293013
    },
    {
        "content": "<p>So is there any advantage in having <code>multigraph</code>?</p>",
        "id": 243408114,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624293031
    },
    {
        "content": "<p>I'd probably think so? But I think we should take some more care with the API</p>",
        "id": 243408180,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624293066
    },
    {
        "content": "<p>The \"path category\" (not sure if this is the canonical name) would be a category on a type <code>α</code> with a distinguished relation, where the morphism sets are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">path</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>The \"walk category\" of a simple graph would come from this.</p>",
        "id": 243408390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624293163
    },
    {
        "content": "<p>Here I think we can generalise <code>r</code> to <code>Sort u</code>. In my mind this would allow paths on multigraphs.</p>",
        "id": 243408516,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624293232
    },
    {
        "content": "<p>Yeah, I was about to mention that.  Then you could also apply it to quivers.</p>",
        "id": 243408576,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624293254
    },
    {
        "content": "<p>graph things on <code>Sort</code> are very nice too, because <code>Prop</code>-valued multigraphs ↔ graphs</p>",
        "id": 243408596,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624293273
    },
    {
        "content": "<p>Oh yeah, that's great!</p>",
        "id": 243408628,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624293292
    },
    {
        "content": "<p>Although shall we allow loops in multigraphs? Alena says so?</p>",
        "id": 243408659,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624293309
    },
    {
        "content": "<p>The reason simple graphs are special is that they are \"simplicial\": each edge is identified by its endpoints</p>",
        "id": 243408663,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624293312
    },
    {
        "content": "<p>Multigraphs should allow loops.</p>",
        "id": 243408706,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624293338
    },
    {
        "content": "<p>So we would have</p>\n<ul>\n<li><code>simple_graph</code>: loopless, undirected, simple</li>\n<li><code>multigraph</code>: undirected</li>\n<li>\n<p><code>quiver</code>: directed<br>\nas a nice hierarchy and, standing out,</p>\n</li>\n<li>\n<p><code>hypergraph</code>: loopless, undirected, but hyperedges</p>\n</li>\n</ul>",
        "id": 243408887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624293439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/walks/near/243408390\">said</a>:</p>\n<blockquote>\n<p>The \"path category\" (not sure if this is the canonical name) would be a category on a type <code>α</code> with a distinguished relation, where the morphism sets are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">path</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>The \"walk category\" of a simple graph would come from this.</p>\n</blockquote>\n<p>what's the difference between this and a poset category?</p>",
        "id": 243408902,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624293447
    },
    {
        "content": "<p>Key constructions multigraphs should support is (1) a type of subgraphs and (2) a type of minors (or at least being able to contract and delete subsets of edges, and have the right algebraic relations on these constructions)</p>",
        "id": 243409046,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624293515
    },
    {
        "content": "<p>And when we contract an edge, we don't want the other same-end edges to disappear, right?</p>",
        "id": 243409131,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624293577
    },
    {
        "content": "<p>Indeed (they become loop edges)</p>",
        "id": 243409266,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624293637
    },
    {
        "content": "<p>It seems that us graph-theorists here spend most of our time discussing and writing code, but are always unsure about it so nothing ever gets PRed <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 243409777,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624293891
    },
    {
        "content": "<p>There's a couple in the queue! Alena has one which I reviewed ages ago, and <span class=\"user-mention\" data-user-id=\"366674\">@Gabriel Moise</span>  (who just finished exams <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span>) was doing once on incidence matrices</p>",
        "id": 243409955,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624293966
    },
    {
        "content": "<p>(I've been busy with the whole finishing my degree thing, and unfortunately it has nothing to do with Lean.)</p>\n<p>With graphs I've felt there were some unsolved issues that, while I could PR the multigraph code I've written (I'm not sure where the branch is though...), it would be good to do some more research to nail down what would work well in the long term.  This is less true now than when he said it, but de Bruijn observed that the more abstract a piece of mathematics, the smaller the gaps, but \"less abstract fields, like combinatorics, can be hard since they may contain simple intuitive ideas for which there is no tradition of formalization.\"  (from \"Checking mathematics with computer assistance\" in Notices of the AMS, Jan 1991)</p>\n<p>One issue is ergonomics.  I spent a while trying to get subgraphs to \"be\" graphs, like how subgroups \"are\" groups, but the tricks used there don't apply, and the tricks I came up with don't seem to be worth the hassle.  There are </p>\n<p>In addition to the key constructions, another issue is making sure multigraphs will play well with a corresponding directed graph type.  You'd want to be able to forget orientations of edges, but also be able to prove things about multigraphs given an arbitrary directed graph representative.  There's also the conversion from a multigraph to a simple graph, and you want to relate their connected components somehow.</p>\n<p>Testing out implementations for the different possible definitions should show a good way forward.</p>",
        "id": 243413290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624295545
    },
    {
        "content": "<p>I don't have answers to those design questions, but I think we can adopt a more PR-friendly approach. Look out for the multigraph PR <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 243561695,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624387611
    },
    {
        "content": "<p>Just thought about something. If we later want to talk about random walks, we should allow infinite walks.</p>",
        "id": 243869291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624588012
    },
    {
        "content": "<p>Infinite walks might be a different kind of object, and the type of all finite walks is useful in itself (for example, to define connected components).  There are a couple ways you might formalize an infinite walk.  One is as a function <code>f : nat -&gt; V</code> such that <code>G.adj (f n) (f (n + 1))</code> for all <code>n</code>.  The other is as a kind of limit of finite walks, maybe formalized as a dependent pair <code>w : nat -&gt; V</code> and <code>f : (n : nat) -&gt; G.walk v (w n)</code> such that <code>f n</code> is the restriction of <code>f (n + 1)</code> for each <code>n</code>.</p>\n<p>Alena and I had tried formalizing walks as graph homomorphisms from path graphs, but it was very painful defining all the operations you'd want to do with walks.  Though, this is another way you could define an infinite walk, as a graph homomorphism from the infinite ray graph.</p>",
        "id": 243870412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624589643
    },
    {
        "content": "<p>Should we then have something like <code>walk</code> and <code>finwalk</code>?</p>",
        "id": 243870543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624589784
    }
]