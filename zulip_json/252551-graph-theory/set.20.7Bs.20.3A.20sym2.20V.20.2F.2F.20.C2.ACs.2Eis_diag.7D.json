[
    {
        "content": "<p>Do we have something like this anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Every set of non-diagonal edges is a simple graph -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">iso_set_sym2</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">s.is_diag</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">g.edge_set</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">sym</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sym2.eq_swap</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n    <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.image_preimage_eq_inter_range</span><span class=\"o\">,</span> <span class=\"n\">set.mem_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">subtype.range_coe_subtype</span><span class=\"o\">,</span>\n      <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">sym2.is_diag_iff_proj_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_edge_set</span><span class=\"o\">,</span> <span class=\"n\">and_iff_left_iff_imp</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ne_of_adj</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">e</span> <span class=\"n\">using</span> <span class=\"n\">quotient.induction_on</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">subtype.exists</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_and_distrib_right</span><span class=\"o\">,</span> <span class=\"n\">exists_eq_right</span><span class=\"o\">,</span> <span class=\"n\">mem_edge_set</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">exists_prop_of_true</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246238379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626449336
    },
    {
        "content": "<p>i'd be super surprised if we did</p>",
        "id": 246240623,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626450330
    },
    {
        "content": "<p>searching for <code>≃</code> in <code>combinatorics/simple_graph</code> makes me pretty sure the answer is no</p>",
        "id": 246241157,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626450575
    },
    {
        "content": "<p>I was able to golf it a little using <code>ne_of_adj</code> and  <code>edge_set</code></p>",
        "id": 246242165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626451080
    },
    {
        "content": "<p>I think we should have this, if it's not there already</p>",
        "id": 246242206,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626451084
    },
    {
        "content": "<p>The idea here is that you could use this to get the boolean algebra structure, although I'm not sure if it is definitionally nice</p>",
        "id": 246242285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626451117
    },
    {
        "content": "<p>Right I think this is exactly the right idea, and we can use copy to get nice definitional properties if needed</p>",
        "id": 246242920,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1626451335
    },
    {
        "content": "<p>Eric, no need for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">boolean_algebra</span> <span class=\"o\">(</span><span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">boolean_algebra.of_core</span> <span class=\"bp\">$</span>\n<span class=\"o\">{</span> <span class=\"n\">compl</span> <span class=\"o\">:=</span> <span class=\"n\">compl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_sup_inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">⟨</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hac</span><span class=\"o\">⟩,</span> <span class=\"n\">or.dcases_on</span> <span class=\"n\">hac</span> <span class=\"n\">or.inl</span> <span class=\"bp\">$</span>\n    <span class=\"n\">or.dcases_on</span> <span class=\"n\">hab</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inf_compl_le_bot</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"n\">h.2.2</span> <span class=\"n\">h.1</span><span class=\"o\">,</span>\n  <span class=\"n\">top_le_sup_compl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">by_cases</span> <span class=\"n\">a.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩},</span>\n  <span class=\"bp\">..</span><span class=\"n\">simple_graph.bounded_lattice</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246246391,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626452991
    },
    {
        "content": "<p>Sure, but my approach would give you the bounded_lattice too</p>",
        "id": 246249275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626454385
    },
    {
        "content": "<p>i feel like with this approach it's more of a pain to get the right definitional properties than just writing it by hand (I'm currently rewriting without <code>of_core</code> to get a better <code>sdiff</code>), but it'd certainly be good to have a lift for various levels of lattices</p>",
        "id": 246250987,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626455170
    },
    {
        "content": "<p>Maybe it's worth adding in <code>sym2.to_rel</code> as an inverse to <code>sym2.from_rel</code>, defining an equivalence</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">irreflexive</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">s.is_diag</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>in <code>sym2</code>, and then using this to define the equivalence.  (Whether or not this is how the <code>boolean_algebra</code> is defined.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">sym2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_rel</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">sym2</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">to_rel_def</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">sym2</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_rel</span> <span class=\"n\">s</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">↔</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_rel.symmetric</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">sym2</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"o\">(</span><span class=\"n\">to_rel</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">to_rel</span><span class=\"o\">,</span> <span class=\"n\">sym2.eq_swap</span><span class=\"o\">]</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">to_rel_of_from_rel</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_rel</span> <span class=\"o\">(</span><span class=\"n\">from_rel</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">from_rel_of_to_rel</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">sym2</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">from_rel</span> <span class=\"o\">(</span><span class=\"n\">to_rel.symmetric</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">quotient.ind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">sym2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rel_iso_sym2</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">irreflexive</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">s.is_diag</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">sym2.from_rel</span> <span class=\"n\">x.property.1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">sym2.to_rel</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">sym2.to_rel.symmetric</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.image_preimage_coe</span><span class=\"o\">,</span> <span class=\"n\">set.mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">and_iff_left_iff_imp</span><span class=\"o\">,</span>\n      <span class=\"n\">sym2.to_rel_def</span><span class=\"o\">,</span> <span class=\"n\">sym2.from_rel_prop</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c1\">--  change ¬sym2.is_diag ⟦(v, w)⟧,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sym2.from_rel_irreflexive</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iso_set_rel</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"bp\">≃</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">irreflexive</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">G.adj</span><span class=\"o\">,</span> <span class=\"n\">G.sym</span><span class=\"o\">,</span> <span class=\"n\">G.loopless</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.property.1</span><span class=\"o\">,</span> <span class=\"n\">x.property.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246256411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626457660
    },
    {
        "content": "<p>By the way, something goes weird at the <code>simp</code> right before the commented out <code>change</code>.  Something causes the expression to leave the set API, and I didn't track down what.</p>",
        "id": 246256511,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626457706
    },
    {
        "content": "<p>This is just factoring <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s definition into two parts -- I think it's generally useful to have an equivalence to a type made up of the \"standard\" inductive types. (I'm hoping that eventually there will be an attribute to automatically create these.)</p>\n<p>There should probably also be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">//</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246256754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626457837
    },
    {
        "content": "<p>I think theres a <code>sym2.lift</code> hiding in your idea there, I'll try to PR it</p>",
        "id": 246266796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626463080
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8358\">#8358</a></p>",
        "id": 246383645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626620973
    }
]