[
    {
        "content": "<p>I have a question related to graph theory formalization. I'm looking to prove that given a directed graph and a walk from vertices x to y, one can construct a path from x to y. I am formalizing my walk as a list of vertices that satisfy <code>list.chain'</code> on some binary relation. The path would satisfy the <code>nodup</code> property.</p>\n<p>I imagine some kind of proof inducting on the number of duplicate elements in the list, however the natural human intuition seems quite hand-wavy. Does anyone here have any advice or an example of a similar proof in the WIP mathlib addition? Thanks.</p>",
        "id": 219041776,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607316462
    },
    {
        "content": "<p>I have tried proving it and it is insanely obnoxious</p>",
        "id": 219041822,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316507
    },
    {
        "content": "<p>My attempt was also based on the idea of duplicate elements</p>",
        "id": 219041831,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316529
    },
    {
        "content": "<p>simple_graphs2 is the last branch I saw with an attempt but it's a couple of months behind mathlib, I've been slowly trying to slice it off into its own PRs</p>",
        "id": 219041906,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316624
    },
    {
        "content": "<p>But I'm not convinced the definitions of path/walk there lend themselves to an easy proof of that lemma</p>",
        "id": 219041938,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316670
    },
    {
        "content": "<p>Oh also simple_graphs2 doesn't have any directed graph stuff, you'd have to repurpose it a bit</p>",
        "id": 219041954,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316703
    },
    {
        "content": "<p>would it be in walks.lean? How far did you get in the attempt?</p>",
        "id": 219042008,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607316744
    },
    {
        "content": "<p>I think it's there yeah</p>",
        "id": 219042012,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316757
    },
    {
        "content": "<p>I don't recall, it's one of the sorry'd proofs though (I think)</p>",
        "id": 219042014,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316776
    },
    {
        "content": "<p>I have the obvious direction down, path -&gt; walk</p>",
        "id": 219042020,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316789
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_path_eq_exists_walk</span> <span class=\"o\">:</span> <span class=\"n\">exists_path</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">exists_walk</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219042077,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607316864
    },
    {
        "content": "<p>Ah yeah that must be it</p>",
        "id": 219042084,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316899
    },
    {
        "content": "<p>Oh I guess I didn't prove the obvious direction lol, oops</p>",
        "id": 219042089,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607316916
    },
    {
        "content": "<p>Why is graph theory related work in combinatorics, if I may ask.</p>",
        "id": 219042143,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607316970
    },
    {
        "content": "<p>I've always seen graph theory and combinatorics linked together</p>",
        "id": 219042163,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1607317005
    },
    {
        "content": "<p>It might actually be easier to show that both <code>exists_path</code> and <code>exists_walk</code> are equivalent to connectedness as defined with <code>eqv_gen</code></p>",
        "id": 219042166,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1607317021
    },
    {
        "content": "<p>Is this the transitive closure? <code>eqv_gen</code>?</p>",
        "id": 219042416,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607317373
    },
    {
        "content": "<p>Yes</p>",
        "id": 219042429,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1607317391
    },
    {
        "content": "<p>I'm not sure how smooth the API for it is</p>",
        "id": 219042441,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1607317418
    },
    {
        "content": "<p>I feel like this just kicks the can down the road. I still feel like it would be hard to prove that there exists a path between two connected vertices.</p>",
        "id": 219042713,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607317810
    },
    {
        "content": "<p>Prove it by induction on finsets: if every pair of elements in S is <code>eqv_gen</code>, then every pair or elements in S has a path</p>",
        "id": 219046803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607323727
    },
    {
        "content": "<p>sounds like a walk</p>",
        "id": 219046903,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607323864
    },
    {
        "content": "<p>Because when you induct on finsets every new element is known to be disjoint from all the others</p>",
        "id": 219046971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607323953
    },
    {
        "content": "<p>I feel like this question has come up before on zulip</p>",
        "id": 219047033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607324063
    },
    {
        "content": "<p>Could you help me find this? Also I'm still misunderstanding you. If you induct on (I'm presuming) the length of the path, it's still possible you include a path that contains a node previously in the list. This would make the induction fail, as it creates a walk. Where does my logic fail?</p>",
        "id": 219047339,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607324488
    },
    {
        "content": "<p>you aren't inducting on the length of the path</p>",
        "id": 219047384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607324533
    },
    {
        "content": "<p>you are inducting on the size of the set from which to select the vertices in the path</p>",
        "id": 219047390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607324559
    },
    {
        "content": "<p>Actually I think instead of S is pairwise <code>eqv_gen</code> in the hypothesis you might want every pair of elements in S has a walk in S</p>",
        "id": 219047478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607324650
    },
    {
        "content": "<p>oh, actually even better, to avoid having to find connected components: IH(S) = \"for all x,y in S, if there is a walk from x to y in S then there is a path from x to y in S\"</p>",
        "id": 219047555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607324784
    },
    {
        "content": "<p>So if x and y are the only vertices, the result is the walk is the path. n=2</p>",
        "id": 219047624,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607324903
    },
    {
        "content": "<p>the base case is of course |S| = 0</p>",
        "id": 219047637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607324951
    },
    {
        "content": "<p>how would we restrict <code>|S|</code> when doing the inductive step? We would still need all the vertices to be options, right?</p>",
        "id": 219047644,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607324964
    },
    {
        "content": "<p>?</p>",
        "id": 219047649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607324984
    },
    {
        "content": "<p>We just add an arbitrary vertex to S</p>",
        "id": 219047698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607325009
    },
    {
        "content": "<p>Are you saying: if there's a path that contains the added vertex s, you're done. If not, then find the path from x to s and s to y?</p>",
        "id": 219047757,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607325121
    },
    {
        "content": "<p>What elements could we restrict from those paths so that we could use the IH?</p>",
        "id": 219047805,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607325143
    },
    {
        "content": "<p>I feel like I'm missing some obvious step.</p>",
        "id": 219047809,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607325156
    },
    {
        "content": "<p>hm, you're right</p>",
        "id": 219047944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607325345
    },
    {
        "content": "<p>I'm sure there is a simple inductive proof of this that does not need you to construct the whole vertex removing algorithm, and I'm pretty sure I posted it once on zulip but I can't find it :(</p>",
        "id": 219048025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607325410
    },
    {
        "content": "<p>I think the sketch I’d do is</p>\n<ul>\n<li>path -&gt; walk (straightforward)</li>\n<li>walk -&gt; connected (probably the hardest, but induction on the length of the walk should work)</li>\n<li>connected -&gt; path (follows from path being an equivalence relation)</li>\n</ul>",
        "id": 219048196,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1607325639
    },
    {
        "content": "<p>what is the formal definition of connected in your view?</p>",
        "id": 219048209,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607325667
    },
    {
        "content": "<p>eqv_gen?</p>",
        "id": 219048218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607325683
    },
    {
        "content": "<p><code>eqv_gen G.adj</code></p>",
        "id": 219048220,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1607325685
    },
    {
        "content": "<p>The transitive closure of adjacency</p>",
        "id": 219048227,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1607325719
    },
    {
        "content": "<p>walk -&gt; connected is easy</p>",
        "id": 219048268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607325731
    },
    {
        "content": "<p>yeah don't you just do that from transitivity? What I'm not understanding is how equivalence relation helps.</p>",
        "id": 219048282,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607325768
    },
    {
        "content": "<p>I think the hard step in this proof is showing that path is an equivalence relation</p>",
        "id": 219048283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607325774
    },
    {
        "content": "<p>Yeah for sure. Because you can form a walk out of paths, so knowing that path is an equivalence relation is enough to do the whole proof!</p>",
        "id": 219048296,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607325829
    },
    {
        "content": "<p>How about: IH(y,w) = \"if w is a walk from x to y, then there is a path from x to every point z in w\"</p>",
        "id": 219048349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607325876
    },
    {
        "content": "<p>induction on walks</p>",
        "id": 219048353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607325882
    },
    {
        "content": "<p>In the inductive step, you have x -- a - y, and if y is in x..a then you are done by the IH, and if it is not then there is a path x..a by the IH which extends to a path x..y</p>",
        "id": 219048551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607326146
    },
    {
        "content": "<p>That's more like it. That sounds powerful enough.</p>",
        "id": 219048870,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607326526
    },
    {
        "content": "<p>I just ported over some of the definitions from <code>simple_graphs2</code> to use mathlib's simple graphs library, and I added a function to turn walks into paths between the same endpoints: <a href=\"https://github.com/leanprover-community/mathlib/blob/simple_graph_walks2/src/combinatorics/simple_graph/walks.lean#L127\">https://github.com/leanprover-community/mathlib/blob/simple_graph_walks2/src/combinatorics/simple_graph/walks.lean#L127</a></p>\n<p>This then proves that walks and paths generate the same relations: <a href=\"https://github.com/leanprover-community/mathlib/blob/simple_graph_walks2/src/combinatorics/simple_graph/walks.lean#L337\">https://github.com/leanprover-community/mathlib/blob/simple_graph_walks2/src/combinatorics/simple_graph/walks.lean#L337</a> (I'm not sure the best way to encode relations from types -- is <code>nonempty</code> right?)</p>",
        "id": 219069392,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1607340979
    },
    {
        "content": "<p>Where can I learn more about the types of inductive definitions you used in <code>to_path</code>? The syntax does not make sense to me and seems very powerful. Thanks for your help!</p>",
        "id": 219117669,
        "sender_full_name": "Chase Norman",
        "timestamp": 1607365450
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/declarations.html#the-equation-compiler\">https://leanprover.github.io/reference/declarations.html#the-equation-compiler</a> I think</p>",
        "id": 219130556,
        "sender_full_name": "Julian Berman",
        "timestamp": 1607371225
    },
    {
        "content": "<p>I've added some more to the branch and cleaned it up somewhat: <a href=\"https://github.com/leanprover-community/mathlib/blob/simple_graph_walks2/src/combinatorics/simple_graph/walks.lean\">https://github.com/leanprover-community/mathlib/blob/simple_graph_walks2/src/combinatorics/simple_graph/walks.lean</a> (this now includes, for example, that <code>eqv_gen G.adj</code> is equal to <code>G.exists_walk</code>).</p>\n<p>It still needs some work before it's ready for a PR, but the interface seems more-or-less fine (and it includes most of hedetniemi's <code>walk</code> module, specialized to simple graphs).  Some lemmas could stand to have more attention paid to their proofs (<code>is_path_iff.aux</code> for example), and a number of things could be named better.</p>",
        "id": 219804780,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1607927390
    }
]