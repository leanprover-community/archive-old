[
    {
        "content": "<p>out of curiosity, why wasn't the traditional notation of <code>G(V, E)</code>, being <code>E</code> a series of elements of type <code>V x V</code> adopted?</p>",
        "id": 266212170,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640645750
    },
    {
        "content": "<p>if you uncurry <code>V -&gt; V -&gt; Prop</code>, you get <code>V \\times V -&gt; Prop</code>, which is defeq to <code>set (V \\times V)</code>.</p>",
        "id": 266212249,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640645800
    },
    {
        "content": "<p>In functional programming, curried things tend to be better, and also then this fits into the <code>rel</code> API, which <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> had been developing.</p>",
        "id": 266212283,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640645837
    },
    {
        "content": "<p>I guess you're also asking about notation: we never considered it at all (I'm also mildly against custom notation of any kind -- that might be the Lisp/Scheme programming background in me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 266212364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640645893
    },
    {
        "content": "<p>Alright, thanks!<br>\nI still haven't adapted myself to the functional way of doing things. Been doing everything imperatively for almost two decades <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 266212715,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640646171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 266212817,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640646256
    },
    {
        "content": "<p>Also, a simple graph is \"just\" a symmetric irreflexive relation, so may as well represent it as one.</p>\n<p>An idea of mine that thankfully didn't make it through code review was having <code>neighbor_set</code> and <code>adj</code> being identical, with <code>adj : V -&gt; set V</code>.  This would have broken the set API contract though when you wrote <code>G.adj v w</code>.</p>\n<p>They still managed to be identical, just with different names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.neighbor_set</span> <span class=\"bp\">=</span> <span class=\"n\">G.adj</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 266213029,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640646473
    }
]