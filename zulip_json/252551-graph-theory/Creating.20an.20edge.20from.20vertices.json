[
    {
        "content": "<p>Hello!<br>\nI was trying some proofs and lemmas about the incidence matrix of a graph, and I would find it useful if I could have a definition of an edge from the 2 given vertices, knowing the fact that they are adjacent in the graph. I tried something like this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">matrix</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">matrix</span> <span class=\"n\">simple_graph</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">edge_from_vertices</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_adj</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.edge_set</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>\n<p>However, there is a problem because Lean can't coerce the  ⟦(i,j)⟧ into a member of the G.edge_set. Has anyone encountered this and has a solution? I would like to have something like, the edge_from_vertices i j H_adj would be <br>\ne   such that e.val =  ⟦(i,j)⟧, but I don't know how to define that.</p>",
        "id": 232876263,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1617353522
    },
    {
        "content": "<p>I'm confused what you mean; isn't <code>G.adj i j</code> evidence that <code>i j</code> is an edge? Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> explaining what you need it for?</p>",
        "id": 232880383,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617356666
    },
    {
        "content": "<p>I'm pretty sure there's a lemma stating that there exists an edge iff adjacent, you might be able to use that?</p>",
        "id": 232881476,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1617357436
    },
    {
        "content": "<p>I wasn't talking about the evidence that (i,j) represents an edge, I was talking about having the edge as an object and using it for calculations, for instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">filter_edge_card_one</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H_adj</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G.edge_set</span><span class=\"o\">)),</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">G.edge_from_vertices</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">H_adj</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232881480,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1617357442
    },
    {
        "content": "<p>I think you can use the existence lemma to create the edge but I'm not currently able to test it (it's like 6 am where I am sorry lol)</p>",
        "id": 232881769,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1617357645
    },
    {
        "content": "<p>I think I get what you're saying though - G.edge_set isn't a type, so you can't say def etc : G.edge_set := ...</p>",
        "id": 232881901,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1617357732
    },
    {
        "content": "<p>Sure you can, because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_coe_to_sort\">docs#set.has_coe_to_sort</a> exists? (although you probably shouldn't!)</p>",
        "id": 232881931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617357762
    },
    {
        "content": "<p>You can do def etc : sym2 V := ... because that's the type of edges</p>",
        "id": 232881933,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1617357762
    },
    {
        "content": "<p><code>filter (λ (x : (G.edge_set)), ↑x = ⟦(i, j)⟧) univ</code> should be the same as <code>filter (λ (x : sym2 V), x = ⟦(i, j)⟧) G.edge_set</code>, and the latter will be easier to work with</p>",
        "id": 232882008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617357811
    },
    {
        "content": "<p>Well, I am sure that there is a possibility, but I am not very accustomed to working with coercions, although I stumble upon them a lot, so I wanted to see an example so that I can understand more.</p>",
        "id": 232882071,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1617357854
    },
    {
        "content": "<p>At a guess you're looking for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">edge_from_vertices</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_adj</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.edge_set</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">,</span> <span class=\"n\">H_adj</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 232882131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617357908
    },
    {
        "content": "<p>Or another way to write it, without exploiting that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sym2.from_rel_prop\">docs#sym2.from_rel_prop</a> is true by <code>rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">edge_from_vertices</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_adj</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.edge_set</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sym2.from_rel_prop.mpr</span> <span class=\"n\">H_adj</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 232882417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617358088
    },
    {
        "content": "<p>Can you explain a little how does the construction work (⟨⟦(i,j)⟧, H_adj⟩) ?</p>",
        "id": 232882475,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1617358144
    },
    {
        "content": "<p><code>↥G.edge_set</code> is short for <code>{x // x ∈ G.edge_set}</code> aka <code>subtype (∈ G.edge_set)</code>. <code>subtype x</code> is just a pair of <code>x</code> and <code>p x</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a>)</p>",
        "id": 232882627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617358234
    },
    {
        "content": "<p>Conveniently, it turns out the statements <code>⟦(i,j)⟧ ∈ G.edge_set</code> and <code>G.adj i j</code> are defeq, so as long as lean already knows what type it's looking for, you can supply a proof of the latter (<code>H_adj</code>) where the former is expected.</p>",
        "id": 232882697,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617358314
    },
    {
        "content": "<p>Oh, I think I see what you mean. Thank you very much! I am currently working on proving more lemmas and I might have more questions, I will use this topic for that, if that's ok <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 232882837,
        "sender_full_name": "Gabriel Moise",
        "timestamp": 1617358412
    }
]