[
    {
        "content": "<p>Hi! (new user to the stream and mostly in general). I want to exhibit a (finite) directed graph and prove it's a cycle, and then prove a thing or two about  paths on it. Is this possibly a reasonable thing to attempt given any of the graph theory code that's been written? I see most of the code is likely on graph-theory-related branches of mathlib right?</p>",
        "id": 214395854,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603494588
    },
    {
        "content": "<p>Oh, also -- I should mention by \"exhibit\" I mean \"I have a function from X \\to (set X)\", so I want to get my graph by inducing it from that function.</p>",
        "id": 214396032,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603494778
    },
    {
        "content": "<p>We don't have directed graphs yet -- most energy has been put into simple graphs because of some basic complications to them that needed solving.</p>\n<p>One thing about directed graphs without multiedges is that they're essentially just relations (indeed, <code>X -&gt; set X</code> is equivalent to <code>X -&gt; X -&gt; Prop</code>), so you might get a lot of mileage out of what mathlib already has about those. For example, paths correspond the transitive closure of the relation.</p>",
        "id": 214401467,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603501519
    },
    {
        "content": "<p>Because of this, directed graphs will probably be with multiple edges, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">dgraph_on</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214401532,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603501603
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/logic/relation.html#relation.refl_trans_gen\">https://leanprover-community.github.io/mathlib_docs/logic/relation.html#relation.refl_trans_gen</a></p>",
        "id": 214401837,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603501954
    },
    {
        "content": "<p>Aha, thanks! That looks like a great breadcrumb, will have a look.</p>",
        "id": 214404879,
        "sender_full_name": "Julian Berman",
        "timestamp": 1603506678
    }
]