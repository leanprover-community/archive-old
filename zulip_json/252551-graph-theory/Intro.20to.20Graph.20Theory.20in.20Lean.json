[
    {
        "content": "<p>Hi guys! Can someone recommend some resources to start theorem proving in graph theory in Lean. Some basic topics like defining the graph and simple theorems related to that, some tactics made for graphs etc.</p>",
        "id": 258042516,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634569277
    },
    {
        "content": "<p>I know <span class=\"user-mention\" data-user-id=\"429543\">@Barrie Cooper</span> made a game for multigraphs here <a href=\"https://barriecooper.github.io/html/index.html\">https://barriecooper.github.io/html/index.html</a></p>\n<p>I'm not aware of any pre-written resources about learning Lean graph theory yet -- there really isn't that much of it.  You can read the source code for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph\">docs#simple_graph</a>, which is all in <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/combinatorics/simple_graph\">this directory</a>, starting with <code>basic.lean</code> (just ignore <code>. obviously</code> if you're not familiar with it).  There's also the <a href=\"https://github.com/leanprover-community/mathlib/blob/master/archive/100-theorems-list/83_friendship_graphs.lean\">friendship theorem</a> as well as a few things in the <a href=\"https://github.com/leanprover-community/mathlib/pulls?q=is%3Apr+is%3Aopen+simple_graph\">PR queue</a>, especially incidence matrices and paths/connectivity.</p>\n<p>If there's some theorem you might be interested in formalizing, you can mention it here in the <a class=\"stream\" data-stream-id=\"252551\" href=\"/#narrow/stream/252551-graph-theory\">#graph theory</a> stream and we can help plan it out.</p>",
        "id": 258044530,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634569999
    },
    {
        "content": "<p>There are definitely no graph theory specific tactics right now.  (Maybe the closest, which is a stretch, is in <a href=\"https://github.com/leanprover-community/mathlib/issues/8737\">#8737</a> when I tried to prove there was no Eulerian trail in the seven bridges of Konigsberg problem using <code>dec_trivial</code>, but it fails to work for a mysterious reason.)</p>",
        "id": 258046148,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634570535
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> . I'll look into these and get back!</p>",
        "id": 258048619,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634571424
    },
    {
        "content": "<p>Do u also have solutions for this game <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> ?</p>",
        "id": 258050471,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634572142
    },
    {
        "content": "<p>I don't (and I've only read through its source code before -- I haven't tried it myself).</p>\n<p>Note that it's about multigraphs, but mathlib only has simple graphs right now.</p>",
        "id": 258050827,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634572268
    },
    {
        "content": "<p>Btw Kyle what's the status of <a href=\"https://github.com/leanprover-community/mathlib/issues/8737\">#8737</a>? I would love to help out but I'm already quite taken with SRL and the tripos.</p>",
        "id": 258052705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634572901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> The status is that I've got some deadlines I need to meet for non-Lean things <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 258053568,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634573245
    },
    {
        "content": "<p>It would be great if u could provide a snippet of how one would initialise a simple graph (eg a triangle ) using a <code>simple_graph</code> structure. It might make things more clearer for me regarding Lean also :)</p>",
        "id": 258091258,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634587554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439607\">@Ayush Agrawal</span> A triangle happens to be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_graph\">docs#complete_graph</a> given a type with three terms, for example <code>complete_graph (fin 3)</code> will do.</p>",
        "id": 258092890,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634588167
    },
    {
        "content": "<p>Nice! I was asking for some very trivial graph that could be formed using <code>simple_graph</code> structure</p>",
        "id": 258093088,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634588273
    },
    {
        "content": "<p>and using the three definitions we have for the structure</p>",
        "id": 258093183,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634588304
    },
    {
        "content": "<p><code>complete_graph</code> defines a graph using the structure. It's able to skip <code>sym</code> and <code>loopless</code> because the <code>tidy</code> tactic is able to automatically fill in those proofs.</p>",
        "id": 258093256,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634588340
    },
    {
        "content": "<p>(This is the function of <code>. obviously</code> in the <code>structure</code> definition. It tells Lean to try the <code>tidy</code> tactic if that field is missing.)</p>",
        "id": 258093325,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634588376
    },
    {
        "content": "<p>You might also take a look at <a href=\"#narrow/stream/252551-graph-theory/topic/concrete.20simple.20graph/near/216417031\">this topic</a> which has some concrete simple graphs</p>",
        "id": 258093498,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634588452
    }
]