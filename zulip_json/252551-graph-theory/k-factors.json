[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, how hard do you think it is to prove that the number of k-factors of a graph is the product over its connected components of their number of k-factors?</p>",
        "id": 259980358,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635851212
    },
    {
        "content": "<p>And is there a higher generality I'm missing?</p>",
        "id": 259980376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635851232
    },
    {
        "content": "<p>In particular, should we define k-factors of a graph or of a subgraph? And how do you plan on modelling connected components? For this latter question, I think defining them as a set of subgraphs is the way to go.</p>",
        "id": 259980574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635851359
    },
    {
        "content": "<p>Connected components are not very developed in the <code>walks_and_trees</code> branch yet.  So far it's just the quotient of <code>V</code> by <code>G.reachable</code>, so it's more like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi_0(G)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>The set of connected components as subgraphs I think is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">connected_components</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"bp\">|</span> <span class=\"n\">G'.coe.connected</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">G''</span><span class=\"o\">,</span> <span class=\"n\">G'</span> <span class=\"bp\">≤</span> <span class=\"n\">G''</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">G'.coe.connected</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and it would be good having a theorem that says these correspond to <code>quot G.reachable</code>, with each connected component being the induced subgraph from an equivalence class of vertices.  (And that the union of these graphs is <code>G</code> and that they're disjoint.)</p>\n<p>There also ought to be facts like every <code>G.walk u v</code> can be written as a walk in an element of <code>connected_components</code>. The code for reinterpreting walks as walks in subgraphs is very underdeveloped at the moment, though there's not nothing.</p>",
        "id": 260072797,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635896287
    },
    {
        "content": "<p>Another aspect of formalization is writing <code>G</code> specifically as a disjoint union of connected subgraphs.  In a way, the stuff about <code>quot G.reachable</code> and induced subgraphs is just a way to show it's possible.</p>",
        "id": 260072991,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635896437
    },
    {
        "content": "<p>I don't know very much about k-factors. My ignorant answer is that it seems ok defining them for graphs, then for subgraphs you have k-factors of <code>G'.coe</code>.</p>",
        "id": 260073101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635896539
    },
    {
        "content": "<p>So you mean I should rather prove that the number of k-factors of a sum of graphs is their product? Then the connected component version will be a special case.</p>",
        "id": 260073149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635896601
    },
    {
        "content": "<p>Do we have the sum of <code>simple_graph</code>s?</p>",
        "id": 260073180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635896627
    },
    {
        "content": "<p>I mean write a graph as a disjoint union of connected subgraphs, then relate k-factors of subgraphs (as k-factors of subgraphs coerced to simple graphs) to the original graph.</p>",
        "id": 260073415,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635896822
    },
    {
        "content": "<p>Then again, it's probably fine defining k-factors with respect to a subgraph, since k-factors of the top subgraph is a special case.</p>",
        "id": 260073672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635897036
    },
    {
        "content": "<p>Ah okay, so what about (warning, doesn't compile as is) <code>simple_graph.pi (s : set ι) (G : Π i, simple_graph (α i)) : simple_graph (Π i, α i) := s.pi G</code>? And then you can show <code>number_k_factors (imple_graph.pi s G) = ∏ i, number_k_factors (G i)</code>?</p>",
        "id": 260073731,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635897098
    },
    {
        "content": "<p>Then you can transfer this result to connected components using the equivalence between a graph and the sum of its connected compoents.</p>",
        "id": 260073808,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635897139
    },
    {
        "content": "<p>We'll want that equivalence eventually anyway.</p>",
        "id": 260074006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635897207
    },
    {
        "content": "<p>I'm not sure it'll make the proof easier though.  I think it might be less awkward staying in the realm of subgraphs of a given graph, though it'd take setting things up right.</p>",
        "id": 260074075,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635897251
    },
    {
        "content": "<p>(I'm imagining wrangling all the vertex types, versus having just one vertex type.)</p>",
        "id": 260074145,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635897333
    },
    {
        "content": "<p>Yeah, I totally get that. Which way sounds the more mathlib-like to you?</p>",
        "id": 260074280,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635897468
    },
    {
        "content": "<p>I think the statements in the end will be the same (and will involve creating similar theory), so whichever way to get there that's simpler <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Here's some start for some pseudocode.  The idea is that <code>mk_k_factor</code> is actually defining an equivalence between the product of the sets of k-factors of the connected components and the k-factors of G, which would be explicitly constructed next from it, and then you apply the lemmas for <code>fintype.card</code> of an equivalence and extract the result you want.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">connected_components</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"bp\">|</span> <span class=\"n\">G'.coe.connected</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">G''</span><span class=\"o\">,</span> <span class=\"n\">G'</span> <span class=\"bp\">≤</span> <span class=\"n\">G''</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">G'.coe.connected</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subgraph.k_factors</span> <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">G''</span> <span class=\"bp\">|</span> <span class=\"n\">G'.verts</span> <span class=\"bp\">=</span> <span class=\"n\">G''.verts</span> <span class=\"bp\">∧</span> <span class=\"n\">G''.coe.is_regular_of_degree</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk_k_factor</span> <span class=\"o\">[</span><span class=\"n\">locally_finite</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">G'</span> <span class=\"o\">(</span><span class=\"n\">hG'</span> <span class=\"o\">:</span> <span class=\"n\">G'</span> <span class=\"bp\">∈</span> <span class=\"n\">G.connected_components</span><span class=\"o\">),</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">G'</span> <span class=\"n\">hG'</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">G'</span> <span class=\"n\">hG'</span> <span class=\"bp\">∈</span> <span class=\"n\">G'.k_factors</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">G'</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">k_factors</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 260075277,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635898209
    },
    {
        "content": "<p>(The inverse of <code>mk_k_factor</code> would be from intersecting the k-factor <code>G'</code> with each connected component.)</p>",
        "id": 260075635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635898560
    },
    {
        "content": "<p>I like the idea! But I'm not convinced we should rely on <code>connected_components</code> to even <em>define</em> <code>mk_k_factor</code></p>",
        "id": 260075704,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635898595
    },
    {
        "content": "<p>You could develop a theory of disjoint unions of \"locally complete\" subgraphs (maybe subgraphs that contain their incidence sets) and define <code>mk_k_factor</code> in terms of choosing a k-factor for each subgraph in the disjoint union.</p>\n<p>Then as a special case, the connected components (as defined above) form such a system.</p>",
        "id": 260076623,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635899425
    },
    {
        "content": "<p>Yeah that's what I was describing above.</p>",
        "id": 260076649,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635899464
    },
    {
        "content": "<p>Where?</p>",
        "id": 260076687,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635899506
    },
    {
        "content": "<p>Here<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/k-factors/near/260073149\">said</a>:</p>\n<blockquote>\n<p>So you mean I should rather prove that the number of k-factors of a sum of graphs is their product? Then the connected component version will be a special case.</p>\n</blockquote>\n<p>and there<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/k-factors/near/260073731\">said</a>:</p>\n<blockquote>\n<p>Ah okay, so what about (warning, doesn't compile as is) <code>simple_graph.pi (s : set ι) (G : Π i, simple_graph (α i)) : simple_graph (Π i, α i) := s.pi G</code>? And then you can show <code>number_k_factors (imple_graph.pi s G) = ∏ i, number_k_factors (G i)</code>?</p>\n</blockquote>",
        "id": 260076744,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635899537
    },
    {
        "content": "<p>Well, I wasn't talking about the ismorphism, but counting kind of implies having the isomorphism under the rug. Sorry if that was unclear.</p>",
        "id": 260076798,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635899590
    },
    {
        "content": "<p>I for some reason thought you meant for the components of the sum to be connected, so I missed that.</p>\n<p>I guess it's the difference between doing in synthetically (like yours) or analytically (like mine).  The only way to know which is \"better\" is to implement it both ways.</p>",
        "id": 260076904,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635899686
    },
    {
        "content": "<p>But we still would want both points of view in the end.</p>",
        "id": 260076921,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635899703
    },
    {
        "content": "<p>It's like the whole thing about direct sums of vector spaces vs internal direct sums of subspaces.</p>",
        "id": 260076942,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635899725
    },
    {
        "content": "<p>Oh yeah, I guess.</p>",
        "id": 260077042,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635899820
    },
    {
        "content": "<p>So k-factors over subgraphs but isomorphism over disjoint graphs sounds like the most general setting?</p>",
        "id": 260077063,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635899848
    },
    {
        "content": "<p>What's the application?  (Also, I'm having trouble parsing your suggestion.)</p>",
        "id": 260077170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635899954
    },
    {
        "content": "<p>Mario's formalization project. In particular, the bit that asks that the graph is connected if there are at least two perfect matchings and each edge is forced.</p>",
        "id": 260077287,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635900046
    },
    {
        "content": "<p>Yes, what I'm asking for is overpowered.</p>",
        "id": 260077304,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635900068
    }
]