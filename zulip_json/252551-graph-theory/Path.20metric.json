[
    {
        "content": "<p>Hey! I need to use the notion of path metric on a graph, and was wondering if:<br>\n1) This would be fit for <code>combinatorics/graph_theory</code><br>\n2) If so, anyone would coach me through mergeable code? I'm starting lean and feeling quite overwhelmed by it all, so some quidance would be welcome.<br>\n3) Whether it would be better to have a code for a \"path metric\" associated to any type with a notion of paths that have well-behaved a length. This way, say the path metric of an arbitrary metric space could also be defined more easily.</p>",
        "id": 269272623,
        "sender_full_name": "bottine",
        "timestamp": 1643124428
    },
    {
        "content": "<p>Have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/8737\">#8737</a> to see what we're on about with paths <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 269272910,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643124525
    },
    {
        "content": "<p>mmh, is that different from what's in the main branch? I think I can already use <code>G.walks x y</code> etc.</p>",
        "id": 269273267,
        "sender_full_name": "bottine",
        "timestamp": 1643124677
    },
    {
        "content": "<p>I'm in the process of merging it</p>",
        "id": 269273295,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643124691
    },
    {
        "content": "<p>I've only gotten through about 1/3-1/2 of it, I think</p>",
        "id": 269273374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643124715
    },
    {
        "content": "<p>ah, so <code>G.walks</code> is recent?</p>",
        "id": 269273431,
        "sender_full_name": "bottine",
        "timestamp": 1643124728
    },
    {
        "content": "<p>Yeah, recent to mathlib</p>",
        "id": 269273510,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643124765
    },
    {
        "content": "<p>For path metrics, I don't have a good sense of how it should be designed. What sort of theorems do you want to prove?</p>",
        "id": 269273605,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643124805
    },
    {
        "content": "<p>Well, I mostly want to be able to get the metric space associated to a graph, so no particular theorem. But I feel like having an <code>emetric</code> space would be nice, and I guess something about the distance being realized by some path.</p>",
        "id": 269273810,
        "sender_full_name": "bottine",
        "timestamp": 1643124883
    },
    {
        "content": "<p>I had the idea that (probably using quivers?) we could define a structure of \"paths between two points\" + concatenation, inversion, and empty path, and construct the path metric abstractly with this data only. Then the specific graph construction would follow easily, I guess, from what's already there. But I can't even write proofs now, so it's all hot air</p>",
        "id": 269274145,
        "sender_full_name": "bottine",
        "timestamp": 1643125032
    },
    {
        "content": "<p>Is there something you're wanting to get to, though? Knowing what you (eventually) want to prove can help guide what will be good as a notion of a metric of a graph. (And guide what kind of graph.)</p>",
        "id": 269274150,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643125033
    },
    {
        "content": "<p>I'm aiming at formalizing geometric group theory, or at least the basics.</p>",
        "id": 269274248,
        "sender_full_name": "bottine",
        "timestamp": 1643125076
    },
    {
        "content": "<p>Also have a look at <a href=\"https://github.com/leanprover-community/mathlib/tree/hedetniemi\">branch#hedetniemi</a>. A lot of cool stuff too.</p>",
        "id": 269274368,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643125114
    },
    {
        "content": "<p>Is there something like if you choose a metric space structure for a group, then it's unique up to quasi-isometry?</p>",
        "id": 269274417,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643125134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  what's that about?</p>",
        "id": 269274575,
        "sender_full_name": "bottine",
        "timestamp": 1643125180
    },
    {
        "content": "<p>Shitov's counterexample to Hedetniemi's conjecture.</p>",
        "id": 269274670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643125205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> hum, it's a good question actually. the usual thing is \"no matter the choice of finitely many generators\", the result is quasi-isometric, but you know that already, I gues</p>",
        "id": 269274750,
        "sender_full_name": "bottine",
        "timestamp": 1643125239
    },
    {
        "content": "<p>where is that question coming from?</p>",
        "id": 269275063,
        "sender_full_name": "bottine",
        "timestamp": 1643125360
    },
    {
        "content": "<p>Because then you might consider using quivers for groups, and have a typeclass to associate some finite generating set for a group, and use all that to give a <code>metric_space</code> on the underyling type of the group, since any other choices lead to something that's quasi-isometric anyway.</p>",
        "id": 269275073,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643125363
    },
    {
        "content": "<p>In another topic you brought up Stalling's theorem on ends, right? That seems like a nice sort of theorem to come up a plan for things to formalize. Or maybe even trying to prove subgroups of free groups are free by considering actions on trees?</p>",
        "id": 269276025,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643125698
    },
    {
        "content": "<p>Indeed for Stalling (that's the long-term goal), but I  want to try and cover some general constructs of geometric group theory. So, on one hand, I'd like to have code for coarse Lipschitz maps and quasi-isometries, quasi-isometry groups, etc, eventually leading to a notion of ends for metric spaces. And on the other, I need Cayley graphs, and I'm not sure whether it's better to go directly from finitely generated groups to metric spaces, or first to define the Cayley graph, and the the metric associated to it.</p>",
        "id": 269286849,
        "sender_full_name": "bottine",
        "timestamp": 1643129837
    },
    {
        "content": "<p>I'll also need to deal with HNN and amalgamated products,… for which I think defining Bass-Serre would perhaps be best, although complicated.</p>",
        "id": 269287107,
        "sender_full_name": "bottine",
        "timestamp": 1643129919
    },
    {
        "content": "<p>I mean, it's all a bit fuzzy for now… my goals here are probably quite lofty, and for now it's very far away (still can't prove basic things) but we'll see how it fares.</p>",
        "id": 269287745,
        "sender_full_name": "bottine",
        "timestamp": 1643130096
    },
    {
        "content": "<blockquote>\n<p>Is there something like if you choose a metric space structure for a group, then it's unique up to quasi-isometry?</p>\n</blockquote>\n<p>I got confused by this question, which I interpreted as \"is any metric on G preserved by G (acting on itself by multiplication) quasi-isometric to a metric given by a Cayley graph of a finite generating set\", but taking, say, \\delta_{x,y} as your metric clearly says this is false.  I wonder now under what conditions a transitive metric is QI to a word metric.</p>",
        "id": 269288735,
        "sender_full_name": "bottine",
        "timestamp": 1643130427
    },
    {
        "content": "<p>Let's try to keep some of these lofty goals in mind since we'd want all that work leading up to it to actually be able to support the big theorems <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 269288802,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643130453
    },
    {
        "content": "<p>fair enough :)</p>",
        "id": 269288947,
        "sender_full_name": "bottine",
        "timestamp": 1643130496
    },
    {
        "content": "<p>Maybe you could start trying to formalize something in the realm of Bass-Serre theory? Maybe this is too challenging right now, but I think that'd give some ideas of what you'd need to be able to set things up correctly?</p>",
        "id": 269289385,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643130666
    },
    {
        "content": "<p>(And full disclosure: I merely have colleagues who are geometric group theorists, and I went through part of Office Hours with a Geometric Group Theorist with one of my DRP students. I've seen some of Stallings's work because of its applications to 3-manifolds, which are more my interest.)</p>",
        "id": 269289625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643130758
    },
    {
        "content": "<p>The problem with Basse-Serre is that I'm really not familiar with it, and it's not \"elementary\", as say the Cayley graph is, so I fear I'd get lost trying to work both fronts (math + formalization), but maybe not. What makes you think Bass-Serre is a good place to start?</p>",
        "id": 269289812,
        "sender_full_name": "bottine",
        "timestamp": 1643130822
    },
    {
        "content": "<p>I'm afraid that Cayley graphs might be <em>too</em> elementary to see what problems there might be in formalization</p>",
        "id": 269289940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643130862
    },
    {
        "content": "<p>Can you remind me how ends work with respect to groups and group actions in geometric group theory?</p>",
        "id": 269290208,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643130967
    },
    {
        "content": "<p>mmh, I see. Say I start with B-S, then I stumble upon problems-in-factorization. What kind of problems should I expect, or more to the point, what kind of scenario \"problem-reaction\" can come up?</p>",
        "id": 269290255,
        "sender_full_name": "bottine",
        "timestamp": 1643130988
    },
    {
        "content": "<p>Isn't there something where you study groups acting by quasiisometries on spaces? And then there's a map from ends of the group to ends of the space? (Is this where you need Cayley graphs, to be able to define the right kind of action here?</p>",
        "id": 269290450,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643131068
    },
    {
        "content": "<p>huh, well, ends are \"directions at infinity\", and you can see that they are QI-invariant. Then by an argument that I tried to do in my head this night but didn't manage, you can see that in the case of finitely generated groups you have 0,1,2 or infinitely many ends.</p>",
        "id": 269290562,
        "sender_full_name": "bottine",
        "timestamp": 1643131103
    },
    {
        "content": "<p>I don't know about that, but that sounds like a reasonable path to Stalling actually (I think you're not less knowledgeable about this than I am)</p>",
        "id": 269290644,
        "sender_full_name": "bottine",
        "timestamp": 1643131145
    },
    {
        "content": "<p>What I was thinking with Bass-Serre is sort of simple: you've got this graph of groups, and you want to make a group out of it. There's a question of just how do you represent all this data. Ideally so that you can easily represent HNN extensions and amalgamated products.</p>",
        "id": 269290718,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643131180
    },
    {
        "content": "<p>there is this Svarc-Milnor result about your group acting on a space and getting its geometry out of that.</p>",
        "id": 269290732,
        "sender_full_name": "bottine",
        "timestamp": 1643131187
    },
    {
        "content": "<p>right: I recently saw a paper dealing only with groupoids, which removes some arbitrary choices</p>",
        "id": 269290872,
        "sender_full_name": "bottine",
        "timestamp": 1643131222
    },
    {
        "content": "<p>then you have the \"fundamental groupoid\" instead of the fundamental group, and \"action on a forest\" instead of \"action on a tree\"</p>",
        "id": 269290931,
        "sender_full_name": "bottine",
        "timestamp": 1643131256
    },
    {
        "content": "<p>The nice thing with B-S is that then you get Nielsen-Schreier and Kurosh and Grushko almost for free I believe.</p>",
        "id": 269291018,
        "sender_full_name": "bottine",
        "timestamp": 1643131300
    },
    {
        "content": "<p>Another nice checkpoint that's come to mind is being able to show different basic groups are hyperbolic (esp. the free group of course)</p>",
        "id": 269291043,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643131310
    },
    {
        "content": "<p>yeah, lots of things :) which is a bit overwhelming</p>",
        "id": 269291154,
        "sender_full_name": "bottine",
        "timestamp": 1643131345
    },
    {
        "content": "<p>also amenability, but I figured having a robust base involving Cayley graphs, the metric, and all the basic quasi-isometry vocabulary is a good place to start (also allowing to learn the language)</p>",
        "id": 269291272,
        "sender_full_name": "bottine",
        "timestamp": 1643131392
    },
    {
        "content": "<p>It's sounding like using <code>quiver</code> to model a Cayley graph on a group <code>G</code> will be a good plan (and if not, sorry ahead of time <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 269291339,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643131423
    },
    {
        "content": "<p>I'm not sure how you'd go about giving a group a metric structure, but you can always start by doing it for <code>presented_group</code> and see how that goes</p>",
        "id": 269291639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643131544
    },
    {
        "content": "<p>alright, thanks for the insights !</p>",
        "id": 269292379,
        "sender_full_name": "bottine",
        "timestamp": 1643131835
    },
    {
        "content": "<p>You can also ask <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> about path metrics in quivers, maybe when you get to that point, creating a post in <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> and pinging him by invoking his name like I did. He's not subscribed to this stream so he won't see this one.</p>",
        "id": 269292440,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643131861
    },
    {
        "content": "<p>I don't really know what he's doing with quivers, other than I noticed a PR or two in the past month.</p>",
        "id": 269292494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643131882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461830\">@bottine</span> having big goals seems to work really well here. Even if you don't make it there, the process of trying to figure out how to get there makes mathlib grow in what are \"clearly the right directions\". And then later on if someone else enthusiastic comes along with similar goals they start where you stopped. The key is to aim for theorems which should be feasible, even if they're a long way away. Geometric group theory would be a brilliant thing to work towards in Lean and we certainly get passers-by who express an interest in this area. You'll certainly find people here who are happy to help if you make a start, and working on a project is by far the best way to learn Lean.</p>",
        "id": 269318681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643142321
    },
    {
        "content": "<p>That's a motivating thought :)</p>",
        "id": 269373276,
        "sender_full_name": "bottine",
        "timestamp": 1643183374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I was wondering what the status was for a metric on a simple graph. I see <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> has working code. What do you think would be needed to get something merged?</p>",
        "id": 274842606,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646922898
    },
    {
        "content": "<p>As far as I understand, there is a big design question about whether <code>connected_graph</code> should be a class or an assumption, and minor questions that I still have about using <code>well_founded.min</code> on the range of the distance function or <code>nat.find</code>, and I was waiting on that before sending a PR, but if it is something you are interested in right now I could clean up the code a little and submit, see what happens</p>",
        "id": 274843688,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646923368
    },
    {
        "content": "<p>If it is a class, then it makes it possible for typeclass inference to find the metric space structure on the graph. Which looks like a good idea to me!</p>",
        "id": 274843904,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1646923449
    },
    {
        "content": "<p>Right now it is</p>",
        "id": 274843960,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646923474
    },
    {
        "content": "<p>Gladly, yeah. Is <code>nat.find</code> maybe preferred for computability reasons?</p>\n<p>I'd like to give a try at formalizing ends of a graph, and it seems a good idea to have the metric at hand for this.</p>",
        "id": 274844000,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646923489
    },
    {
        "content": "<p><code>nat.find</code> has a nicer API, but I had trouble with it because \"the smallest int such that there exists something\" made it difficult for lean to infer implicit arguments. <code>well_founded.min</code> is closer to the metal</p>",
        "id": 274844299,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646923618
    },
    {
        "content": "<p>The graph structure itself OTOH is not a class at the moment</p>",
        "id": 274844396,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646923675
    },
    {
        "content": "<p>Also I had a question about whether connectivity in a graph should be defined as <code>refl_trans_gen G.adj x y</code> or as <code>nonempty (G.walk x y)</code>, but these are equivalent modulo computability issues on which I understand very little - though the definition would need to be in mathlib before that of the distance</p>",
        "id": 274844988,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646923948
    },
    {
        "content": "<p>(although now I would choose the <code>nonempty</code> version because it feels more general wrt other types of graph-like objects)</p>",
        "id": 274845202,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646924010
    },
    {
        "content": "<p>fwiw, I feel like <code>nonempty (…)</code> at least has the advantage of readability: it's immediately clear that it's says what it should</p>",
        "id": 274845730,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1646924204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Path.20metric/near/274844988\">said</a>:</p>\n<blockquote>\n<p>these are equivalent modulo computability issues</p>\n</blockquote>\n<p>(what are the computability issues?)</p>",
        "id": 274852001,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1646926749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> Is <a href=\"https://github.com/vbeffara/lean/blob/main/src/graph_theory/metric.lean\">your branch</a> up to date? I have a PR with basic definitions but not metrics, and I can merge in what you have here to check that it's compatible.</p>\n<p>Regarding classes, I hesitate to make <code>connected_graph</code> a class, and I'm not sure it would help the problem of making graphs be metric spaces since they're not types so they can't be metric spaces anyway (it would make sense to me for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> to have a connected class if it doesn't already have one).  I tend to think of classes being used for values whose representations you think will remain fixed, and simple graphs can potentially change, similar to morphisms being rewritten.</p>",
        "id": 274876754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646937199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Path.20metric/near/274844396\">said</a>:</p>\n<blockquote>\n<p>The graph structure itself OTOH is not a class at the moment</p>\n</blockquote>\n<p>Just to clarify, graphs will always be terms. Any classes we have will just be about having an interface to get things like the graph's <code>adj</code> relation, which will, generally speaking, ultimately have to be stored within the graph term.</p>",
        "id": 274877023,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646937335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Path.20metric/near/274844988\">said</a>:</p>\n<blockquote>\n<p><code>refl_trans_gen G.adj x y</code> or as <code>nonempty (G.walk x y)</code>, but these are equivalent modulo computability issues</p>\n</blockquote>\n<p>I believe you can strengthen your equivalence relation there and just say they're equivalent. Anything that's <code>Prop</code>-valued is going to be computationally irrelevant, and to use them in computation you need to use <code>decidable_rel</code> instances.</p>",
        "id": 274877373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646937484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Path.20metric/near/274876754\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> Is <a href=\"https://github.com/vbeffara/lean/blob/main/src/graph_theory/metric.lean\">your branch</a> up to date? I have a PR with basic definitions but not metrics, and I can merge in what you have here to check that it's compatible.</p>\n</blockquote>\n<p>My branch is up to date, I merged mathlib on March 8 after your updates to simple_graph and it builds fine. In <code>path.lean</code> I put basic definitions about connectivity, hopefully they match yours :-)</p>",
        "id": 274885036,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646941098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> I took another chunk of one of my branches and mixed in a chunk of your branch: <a href=\"https://github.com/leanprover-community/mathlib/pull/12574\">#12574</a></p>\n<p>I think it's best to just go with a noncomputable graph metric for now. We can add a computable algorithm later, but <code>Inf</code> is mathematically more convenient.</p>\n<p>This is still a draft, but it shouldn't be too much more work. Please let me know what you think!</p>",
        "id": 274887986,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646942575
    },
    {
        "content": "<p>Nice, I just had a look.</p>\n<p>I still have trouble with the whole junk value thing, especially since here we use <code>nat.Inf_eq_zero</code> where the garbage value is explicitly <code>0</code> and not something like <code>42</code>. I would feel better defining an <code>edist</code> with infinite value when the vertices are not connected. That's a minor issue anyway.</p>\n<p>How about a <code>metric_space</code> instance then?</p>",
        "id": 274891216,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646944343
    },
    {
        "content": "<p>Yeah, some <code>enat</code>-valued metric would be good for the case of disconnected graphs. I figured that we can define that once there's a need for it (probably most things will be about connected graphs).</p>\n<p>We can't have that <code>metric_space</code> instance, unfortunately, because if both <code>G</code> and <code>G'</code> are connected simple graphs on vertex type <code>V</code>, they'd give conflicting <code>metric_space V</code> instances.</p>",
        "id": 274897826,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646947992
    },
    {
        "content": "<p>You mean <code>enat</code>-valued, not <code>pnat</code>-valued, right?</p>",
        "id": 274897956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646948055
    },
    {
        "content": "<p>Potentially in the future we might have <code>G.V</code> being the vertex type, and it would be safe to do <code>metric_space G.V</code>, but that would probably cause difficulties with <code>simple_graph V</code> because <code>V</code> and <code>G.V</code> wouldn't syntactically be the same.</p>\n<p>For <code>metric_space</code>, I still think you'd rather be dealing with <code>quiver</code>, since that's attaching a graph structure to a particular type. There could be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">G.quiver</span> <span class=\"o\">:=</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"n\">G.quiver</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>or something like that if you do want to work with the graph type.</p>",
        "id": 274898985,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646948592
    },
    {
        "content": "<p>Wait, can't we just define the instance and use <code>letI</code>? It would be unfortunate to define a graph metric and then not be able to use the whole metric space API with it</p>",
        "id": 274899479,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646948739
    },
    {
        "content": "<p>That's what we were going for <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 274899663,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646948774
    },
    {
        "content": "<p>But it's not an \"instance\" anymore. That's the point.</p>",
        "id": 274899714,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646948790
    },
    {
        "content": "<p>I don't get your point. Isn't it an instance that is not discovered by typeclass inference?</p>",
        "id": 274899799,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646948845
    },
    {
        "content": "<p>What we call instances are precisely the definitions which are discoverable by typeclass inference.</p>",
        "id": 274899901,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646948893
    },
    {
        "content": "<p><code>instance = @[instance] def</code></p>",
        "id": 274899918,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646948908
    },
    {
        "content": "<p>A rule of thumb for typeclasses: <code>metric_space V</code> should be a function of <code>V</code>. Things can get very difficult when you violate this, even with <code>letI</code>.</p>",
        "id": 274899924,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646948912
    },
    {
        "content": "<p>This is why I keep suggesting that you use <code>quiver</code>, since it's designed in such a way that this rule won't be violated.</p>",
        "id": 274899987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646948955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Path.20metric/near/274899924\">said</a>:</p>\n<blockquote>\n<p>Things can get very difficult when you violate this, even with <code>letI</code>.</p>\n</blockquote>\n<p>Really? I would like an example because I really can't see would go wrong if you endow <code>V</code> with the metric coming from <strong>one</strong> graph.</p>",
        "id": 274900105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646949030
    },
    {
        "content": "<p>Ah but we want to endow <code>V</code> with the metrics coming from different graphs sometimes (e.g. two Cayley graphs on the same group are quasi-isometric)</p>",
        "id": 274900369,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646949194
    },
    {
        "content": "<p>Yeah, I was going to answer Yael by mentioning Cayley graphs.</p>",
        "id": 274900542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646949301
    },
    {
        "content": "<p>If I can ask, what exactly is solved by using <code>quiver</code>? Can't there be two different quivers on the same Type like for a <code>simple_graph</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">quiver</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">graph_like</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>these look identical to me ...</p>",
        "id": 274900670,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646949364
    },
    {
        "content": "<p>If you want several metrics then yeah you're screwed.</p>",
        "id": 274900792,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646949442
    },
    {
        "content": "<p>Just passing by, but the Cayley graph of a group <code>G</code> associated to a generating set <code>S</code> should probably be a type synonym <code>cayley G S</code>, which can be endowed with a canonical metric.</p>",
        "id": 274901183,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1646949603
    },
    {
        "content": "<p>Yes, but <code>quiver</code> is a class, meaning that we vow not to ever declare twice <code>quiver α</code> for any <code>α</code>.</p>",
        "id": 274901632,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646949762
    },
    {
        "content": "<p>(or rather declare as an instance)</p>",
        "id": 274901662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646949780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Path.20metric/near/274901632\">said</a>:</p>\n<blockquote>\n<p>Yes, but <code>quiver</code> is a class, meaning that we vow not to ever declare twice <code>quiver α</code> for any <code>α</code>.</p>\n</blockquote>\n<p>I'm not ready to vow not to ever define different graphs on the same vertex set (especially given that I would rather define a probability measure on the set of all those graphs on the same vertex set).</p>",
        "id": 274902056,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646949995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> That's exactly what I had in mind with my suggestion</p>",
        "id": 274902182,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646950055
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/bottine/near/269141053\">Here's a link</a> to an example implementation, not to say it's how it should go.</p>",
        "id": 274902422,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646950145
    },
    {
        "content": "<p>I think I get it now, I had completely missed the implication about multiple definitions being prohibited and was scratching my head trying to figure out how replacing <code>Prop</code> with <code>Sort v</code> was helping in any way. Thanks for the clarification!</p>",
        "id": 274902916,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1646950381
    },
    {
        "content": "<p><code>topological_space</code> is a class and yet we still manage to do things like define (and use) a lattice structure on the type of topological space structures on a type</p>",
        "id": 274904950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646951337
    }
]