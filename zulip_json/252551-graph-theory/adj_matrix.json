[
    {
        "content": "<p>I have written more things about adjacency matrices as a part of my project mentioned here:  <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Contribute.20a.20project</a>, including an adjacency matrix induces a graph,<br>\nand I am going to PR them.<br>\nWhen I was writing those stuff, I was thinking, should we change the condition <code>[semiring R]</code> for <code>simple_graph.adj_matrix</code> to <code>[mul_zero_one_class α] [nontrivial α]</code> or a weaker one <code>[mul_zero_one_class α] </code>(or even <code>[has_zero α] [has_one α]</code>), as the essence of an adjacency matrix is it has two distinguishable elements called  0 and 1 (or true and false).</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/combinatorics/simple_graph/adj_matrix.html#simple_graph.adj_matrix\">https://leanprover-community.github.io/mathlib_docs/combinatorics/simple_graph/adj_matrix.html#simple_graph.adj_matrix</a></p>",
        "id": 252096395,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630869935
    },
    {
        "content": "<p>Is the code you're PRing available anywhere yet? I'd like to take a look</p>",
        "id": 252096509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630870074
    },
    {
        "content": "<p>Seems reasonable generalizing <code>adj_matrix</code> to the weakest condition needed to define it.</p>",
        "id": 252096563,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630870107
    },
    {
        "content": "<p>I can give you the link to my project. Please see the file <code>srg.lean</code>(some parts are still under construction, but which are all about srg).</p>",
        "id": 252096585,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630870128
    },
    {
        "content": "<p><a href=\"https://github.com/l534zhan/my_project\">https://github.com/l534zhan/my_project</a> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 252096688,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630870248
    },
    {
        "content": "<p>Please let me know if you have any thoughts!</p>",
        "id": 252096779,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630870348
    },
    {
        "content": "<p>I think it might be reasonable to PR my code after we can determine what the conditions are we want to have for <code>simple_graph.adj_matrix</code>.</p>",
        "id": 252097139,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630870775
    },
    {
        "content": "<p>I'd recommend that <code>adj_matrix</code> be a <code>structure</code>, not a <code>class</code>.  Rewriting tends to make Lean \"forget\" the association between a term and a class, and in practice you'll probably want to rewrite matrices</p>",
        "id": 252097228,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630870857
    },
    {
        "content": "<p>I think I see a typo in <code>compl</code>.  That should be <code>i = j</code>, right?</p>",
        "id": 252097253,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630870902
    },
    {
        "content": "<p>Thanks for pointing the typo out! <br>\nAs <code>adj_matrix</code> is a proposition and because of \"proof-irrelevant\", won't it be better to make it a class just like other algebraic structures <code>group</code> etc.?</p>",
        "id": 252097453,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630871129
    },
    {
        "content": "<p>Regarding classes: there was a time when things like subgroups were sets that had an associated <code>is_subgroup</code> class. I wasn't around then, but it seems that it caused many complications, and what happened is, eventually, subgroups were \"bundled\"</p>",
        "id": 252097534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871195
    },
    {
        "content": "<p><code>adj_matrix</code> is more of a subtype of matrices, so more like a subgroup than a group</p>",
        "id": 252097571,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871251
    },
    {
        "content": "<p>but it's not an algebraic structure, so it's not that good of a comparison</p>",
        "id": 252097583,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871274
    },
    {
        "content": "<p>Here's how it would look bundled (mostly untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">adj_matrix</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_zero_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_or_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">A.is_sym</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 252097740,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871405
    },
    {
        "content": "<p>Yeah, it's more like a \"subgroup\" than a \"group\".</p>",
        "id": 252097779,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630871453
    },
    {
        "content": "<p>The downside is you'd need to write a lot of boilerplate to use this as a matrix, so it seems easier to me to just have a <code>Prop</code>-valued structure</p>",
        "id": 252097791,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871469
    },
    {
        "content": "<p>The downside of defining as a \"class\" or a \"structure\"?</p>",
        "id": 252097830,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630871513
    },
    {
        "content": "<p>The downside of the definition I just gave</p>",
        "id": 252097874,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871526
    },
    {
        "content": "<p>Yeah. I guess I don't want the matrix itself to be a field...</p>",
        "id": 252097912,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630871581
    },
    {
        "content": "<p>You can make it work with coercions, but I expect it wouldn't be so nice to work with</p>",
        "id": 252097958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871637
    },
    {
        "content": "<p>How about just using my original definition or merely change \"class\" to \"structure\" both are just a proposition?</p>",
        "id": 252098029,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630871683
    },
    {
        "content": "<p>Yeah, my original suggestion was to change <code>class</code> to <code>structure</code> (and remove the <code>[]</code>'s).  Maybe go for <code>has_one</code> and <code>has_zero</code> for the typeclasses, too.</p>",
        "id": 252098156,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871792
    },
    {
        "content": "<p>Sorry, what do you mean by \"Maybe go for has_one and has_zero for the typeclasses, too\"?</p>",
        "id": 252098189,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630871849
    },
    {
        "content": "<p>Instead of <code>[mul_zero_one_class α] [nontrivial α]</code>, perhaps do <code>[has_zero α] [has_one α]</code></p>",
        "id": 252098198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871875
    },
    {
        "content": "<p>Ah, right!</p>",
        "id": 252098241,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630871886
    },
    {
        "content": "<p>Why do you suggest removing <code>[]</code>?</p>",
        "id": 252098253,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630871907
    },
    {
        "content": "<p>I don't expect them to be useful once it's a structure, that's all.</p>",
        "id": 252098267,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630871939
    },
    {
        "content": "<p>OK. I will have a look to see if they are useful.</p>",
        "id": 252098343,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630872008
    },
    {
        "content": "<p>I didn't quite get why we want to change \"class\" to \"structure\", could you please explain a little bit more?</p>",
        "id": 252098425,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630872066
    },
    {
        "content": "<p>I checked, the <code>[]</code>'s had no effect.  This is what I'd recommend (along with renaming <code>sym</code> to <code>symm</code> -- eventually <code>simple_graph</code> will use <code>symm</code> too):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">adj_matrix</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_or_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">A.is_symm</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 252098498,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630872153
    },
    {
        "content": "<p>The issue with using a class is that it depends on the typeclass search system.  Let's say <code>A = B</code> and you have an instance <code>[adj_matrix A]</code>. If you rewrite all <code>A</code>'s in an expression with <code>B</code>, then <code>B</code> is no longer an <code>adj_matrix</code> since <code>[adj_matrix B]</code> is likely not an instance.</p>",
        "id": 252098590,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630872249
    },
    {
        "content": "<p>I thought \"class\" can be applied to all \"bundled propositions\" to avoid use \"and\".</p>",
        "id": 252098655,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630872348
    },
    {
        "content": "<p>It can, but that doesn't mean it's the correct design decision. The same is true for structures.</p>",
        "id": 252098710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630872379
    },
    {
        "content": "<p>My rule of thumb: use typeclasses when the things aren't going to be rewritten, use structures when they are.  You're going to be doing calculations with matrices (that is, they're going to be rewritten) so use structures.</p>",
        "id": 252098718,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630872389
    },
    {
        "content": "<p>By the way, <code>class</code> is short for <code>@[class] structure</code>.  They're both structures, it's just a matter of whether they're going to participate in this automatic typeclass system.</p>",
        "id": 252098755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630872442
    },
    {
        "content": "<p>Do you think I should PR to week the definition of  <code>simple_graph.adj_matrix</code> first?</p>",
        "id": 252098770,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630872463
    },
    {
        "content": "<p>I will try to see if we can use <code>has_zero α] [has_one α]</code> there.</p>",
        "id": 252098820,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630872489
    },
    {
        "content": "<p>I think it's fine to do it in one PR (relax the typeclass constraints, introduce <code>matrix.adj_matrix</code>, and define <code>to_graph</code>), but feel free to break it up into two PRs if you want.</p>",
        "id": 252098846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630872537
    },
    {
        "content": "<p>I think I might do one (as I am very lazy).</p>",
        "id": 252098870,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630872570
    },
    {
        "content": "<p>I'm saying this because it's probably ~50 lines, and I at least know what you're up to, so I'll be expecting it (make sure to add me as a reviewer)</p>",
        "id": 252098942,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630872621
    },
    {
        "content": "<p>Sure, I will add you as a reviewer. Should I create a new file for <code>matrix.adj_matrix</code>? <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 252098980,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630872687
    },
    {
        "content": "<p>or add in the file <a href=\"https://leanprover-community.github.io/mathlib_docs/combinatorics/simple_graph/adj_matrix.html\">https://leanprover-community.github.io/mathlib_docs/combinatorics/simple_graph/adj_matrix.html</a>?</p>",
        "id": 252099050,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630872734
    },
    {
        "content": "<p>Hmm, good question. The lazy option is to put it in <code>combinatorics/simple_graph/adj_matrix.lean</code> in the <code>matrix</code> namespace.  That seems thematically appropriate</p>",
        "id": 252099077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630872760
    },
    {
        "content": "<p>Sounds good, <del>Staring now</del>!</p>",
        "id": 252099103,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630872790
    },
    {
        "content": "<p>(Here's another case study: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> could have used the typeclass system, similar to how <code>fintype</code> works, but because sets are rewritten all the time it works out better to have it not use typeclasses.)</p>",
        "id": 252099310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630873038
    },
    {
        "content": "<p>Suggestion: for <code>to_graph</code> make sure to have it be <code>matrix.adj_matrix.to_graph</code>, and make the matrix argument be implicit.</p>\n<p>That way, if <code>h : adj_matrix A</code>, you can write <code>h.to_graph</code> to get the corresponding simple graph.</p>",
        "id": 252099373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630873086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/adj_matrix/near/252099310\">said</a>:</p>\n<blockquote>\n<p>(Here's another case study: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> could have used the typeclass system, similar to how <code>fintype</code> works, but because sets are rewritten all the time it works out better to have it not use typeclasses.)</p>\n</blockquote>\n<p>Yeah but in that case <code>finset</code> kind of is the bundled version of <code>set.finite</code>.</p>",
        "id": 252099395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630873132
    },
    {
        "content": "<p>Indeed, that's how I've tended to think about <code>finset</code>, but amusingly everything is all backwards since <code>set.finite</code> goes through <code>nonempty (fintype s)</code>, which goes through <code>finset set.univ</code>!</p>",
        "id": 252099429,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630873195
    },
    {
        "content": "<p>Do we really often want to rewrite a specific adjacency matrix? I can't think of such a case immediately.</p>",
        "id": 252099537,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630873303
    },
    {
        "content": "<p>If only <code>finset</code> was the bundled version of <code>set.finite</code> -- then it would be nonconstructive and I'd be able to use it :-)</p>",
        "id": 252099702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630873446
    },
    {
        "content": "<p>One example: you have a graph written as an edge-disjoint-union of subgraphs, and you want to relate the adjacency matrix of the graph to the sum of the adjacency matrices of the subgraphs.</p>",
        "id": 252099729,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630873495
    },
    {
        "content": "<p>It's frustrating that \"typeclass inference\" isn't \"rewrite\" compatible.</p>",
        "id": 252099864,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630873665
    },
    {
        "content": "<p>There are many things in mathlib that depend on this exact quality.</p>",
        "id": 252099920,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630873702
    },
    {
        "content": "<p><code>def foo (a : Type*) := a</code> is a technique to make mathlib forget all the typeclasses associated with a type, since by default it can't see through even this basic level of indirection</p>",
        "id": 252099944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630873749
    },
    {
        "content": "<p>Here's one: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite\">docs#opposite</a></p>",
        "id": 252099976,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630873801
    },
    {
        "content": "<p>However, even if a <code>adj_matrix</code> class could survive rewrites, it seems to be more useful in practice to have either bundled objects (so a <code>structure</code> containing the matrix along with the proof it's an adjacency matrix) or having explicit proof objects that you pass around (the <code>Prop</code>-valued <code>structure</code>).  It seems to be easier to write proofs because you can more easily refer to specific subterms in a formula without needing to write them out in full.</p>",
        "id": 252100178,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630874008
    },
    {
        "content": "<p>Yeah. I think we can only do things manually like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">test</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 252101112,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630875120
    },
    {
        "content": "<p>[In this particular case you can get away with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">test</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>]</p>",
        "id": 252102199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630876296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  I have PRed and invited you to review. <a href=\"https://github.com/leanprover-community/mathlib/issues/9021\">#9021</a><br>\nIs there any maintainer who I should invite to be a reviewer?</p>",
        "id": 252111491,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630887190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Do you have any thoughts about this definition for an adjacency matrix?</p>\n<p>It's specialized to just simple graphs (more general would be symmetric matrices with non-negative integer entries), so I'm wondering if <code>matrix.is_adj_matrix</code> isn't the right name -- I don't have any good ideas for alternatives, so I'm willing to go with it for now.</p>",
        "id": 252201790,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630948157
    },
    {
        "content": "<p>I think using this definition is fine for now - I agree a more general version would be better, but I'd prefer to have a special case than no case. For <code>to_graph</code>, it feels tempting to me to not make it partial; ie construct a graph from any matrix (eg <del>by saying there's an edge iff the vertices are different and the entry is nonzero</del>, on second thoughts this might not be symmetric, so maybe not) and have the <code>is_adj_matrix</code> condition on the relevant lemmas. This is more consistent with the usual pattern of definitions in mathlib, and we can have a docstring saying the <em>intended</em> case is where the matrix is an adjacency matrix</p>",
        "id": 252202602,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1630948563
    },
    {
        "content": "<p>Yeah, <code>to_graph</code> could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.from_rel\">docs#simple_graph.from_rel</a></p>\n<p>Though, it's pleasing that you can write <code>h.to_graph</code> to get the graph for the adjacency matrix.</p>",
        "id": 252202879,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630948740
    }
]