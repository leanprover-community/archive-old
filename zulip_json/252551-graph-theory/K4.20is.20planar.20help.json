[
    {
        "content": "<p>Hello all! I'm still learning the in's and outs's of lean and it's community, so if this isn't the right place to post this then let me know. I recently set myself the challenge to try to prove a simple statement in lean3, namely that the complete graph on 4 vertices is planar. This is based off of <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> 's definition of planar that I found in an PR linked in this group.</p>\n<p>Despite the triviality of the statement, the resulting proof was much longer (and harder) than I expected and it's current form is plagued by deterministic timeout and memory issues. As far as I can tell, the issues stem from my frequent usage of <code>fin_cases</code>, but I am not able to figure out a way around them.</p>\n<p>I was wondering if anyone here had any ideas for how to reduce the load on lean?<br>\nThe proof in it's current form can be found <a href=\"https://github.com/IEavan/planar-lean/blob/k4/src/graph_theory/k4.lean\">here</a>.<br>\nThanks in advance!</p>",
        "id": 299349533,
        "sender_full_name": "Eavan Pattie",
        "timestamp": 1663437665
    },
    {
        "content": "<p>Where is the <code>graph_theory.planar</code> import? It's not on <code>master</code>.</p>",
        "id": 299350642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663438335
    },
    {
        "content": "<p>I think your life would be a bit easier with <code>def K4 := complete_graph (fin 4)</code> rather than <code>def K4 := complete_graph (finset.range 4)</code>; <code>complete_graph</code> is expecting to eat a type and you're giving it a quite a complex term which is then being coerced to a type, so you're already doomed to a bit of superfluous jumping through hoops.</p>",
        "id": 299350843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663438508
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">K4_to_plane</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>might be a less painful definition; then a lot of your identities are definitional.</p>",
        "id": 299351086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663438718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It's <a href=\"https://github.com/IEavan/planar-lean/blob/k4/src/graph_theory/planar.lean\">here</a> in the same branch. If I'm following it right, it's that there exists a subdivision of the graph that embeds in the infinite square lattice graph.</p>\n<p>This doesn't seem to be the right definition for graphs that have vertices with degree greater than four.</p>",
        "id": 299351630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663439159
    },
    {
        "content": "<p>The definition of planar and the machinery around it are in the rest of the repo which is a fork of Vincent's work <a href=\"https://github.com/vbeffara/lean/tree/main/src/graph_theory\">here</a>. As Kyle mentions the definition of planar is that graph G is planar if  there exists an embedding of G's vertices into the infinite square lattice and an embedding of G's edges into paths in the infinite square lattice such that paths don't intersect.<br>\nAlthough reconsidering this definition now, it is clear that this definition doesn't work for planar graphs with vertices with degree 5 or more.</p>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> for the improved definition for the mapping to the plane :)<br>\nI'm still a little unclear on the benefit of using <code>fin 4</code> versus <code>finset.range 4</code> as both seem to represent the same idea of <code>{0,1,2,3}</code>?</p>",
        "id": 299364967,
        "sender_full_name": "Eavan Pattie",
        "timestamp": 1663450292
    },
    {
        "content": "<p>One is a (definitionally simple) type and one is a (definitionally complex) term. The function expects a type so why not give it a type, as opposed to be something which was designed to be a term and then is being promoted by you to a type via a coercion (the up-arrow which you will no doubt have seen everywhere in your approach and which isn't there in mine). In short \"the canonical type with four elements is <code>fin 4</code>\". This is just my opinion though and there are plenty of people here who understand definitional issues in lean 3 better than I do.</p>",
        "id": 299369990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663454889
    },
    {
        "content": "<p>Yes the definition of planar in that repo is definitely wrong for graphs with degree larger than 4. I was going for saying that planar meant being a minor of Z^2, but the path embedding definition was quicker to write so I used it temporarily then spent a lot of time defining minors, and forgot to  update the definition afterwards. And then I let the code rot, I would actually be surprised if it still compiled with recent mathlib.</p>",
        "id": 299372938,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663458462
    },
    {
        "content": "<p>I kind of lost track of where the graph API of mathlib is now, but maybe some of the contents of that repo would still be of value ...</p>",
        "id": 299373230,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663458793
    },
    {
        "content": "<p>I don't know of a purely combinatorial definition of planar graph (but I don't know the area at all). What does Gonthier do? I just remember the combinatorial hypermaps.</p>",
        "id": 299398040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663486287
    },
    {
        "content": "<p>I think he goes the triple of permutations way but I am not sure. Minor of Z2 felt like a natural choice but there might be issues for non locally finite graphs or such abominations. The most common definition I found used continuous paths in the plane and that certainly doesn't sound like something we want to use as a definition when formalizing ...</p>",
        "id": 299401352,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663488090
    },
    {
        "content": "<p>Or we could sidestep the issue and say that a planar graph is a graph that has neither K5 nor K33 as a minor, and prove that such a graph has an embedding in the plane. (That was meant as a joke but not completely.)</p>",
        "id": 299401881,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663488319
    },
    {
        "content": "<p>In any case, settling on a combinatorial definition feels like a good goal</p>",
        "id": 299401982,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663488366
    },
    {
        "content": "<p>Is this related to flag algebras somehow?</p>",
        "id": 299403047,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663488979
    },
    {
        "content": "<p>I am no specialist but flag algebras sound like they relate to forbidden subgraphs while planarity and such are more related to forbidden minors</p>",
        "id": 299403792,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663489251
    },
    {
        "content": "<p>Hmm, you're probably right</p>",
        "id": 299403867,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663489287
    },
    {
        "content": "<p>BTW, the statement of Kuratowski if planarity is defined as being a minor of Z2 is kind of cute</p>",
        "id": 299404013,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663489352
    },
    {
        "content": "<p>Is it possible to have graphs that are non-planar because the cardinality is too high to embed them in R^2? For example, aleph_2 discrete points should almost certainly be planar by a combinatorial definition but you can't embed it in the plane if \"without crossings\" also implies that no points are coincident</p>",
        "id": 299406042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663490636
    },
    {
        "content": "<p>Personally I would be inclined to take a definition which makes these things planar, using the Kuratowski theorem as a guide if not a definition</p>",
        "id": 299406208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663490735
    },
    {
        "content": "<p>You can even build a connected abomination by adding a point that is connected to all your aleph_2 leaves to get an \"oursin\". I agree that this is should be accepted as a planar connected graph.</p>",
        "id": 299406457,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663490936
    },
    {
        "content": "<p>Diestel's work might be of interest, e.g. <a href=\"https://www.math.uni-hamburg.de/home/diestel/papers/Universal_planar.pdf\">this</a> ?</p>",
        "id": 299407781,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1663491620
    },
    {
        "content": "<p>It could, although his graphs are all countable so it will not solve all our issues</p>",
        "id": 299410380,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663493753
    },
    {
        "content": "<p>OK, this might be a stupid idea, but isn't an infinite graph planar iff all its finite subgraphs are?</p>",
        "id": 299410812,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1663494057
    },
    {
        "content": "<p>Depends on your definition of planar ... It is true for locally finite and countable graphs, but if your graph has more vertices than R2 has points you need to be careful</p>",
        "id": 299413035,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663495447
    },
    {
        "content": "<p>Otoh, all finite subgraphs being planar (and for finite graphs there is no definitional issue for planarity) might well be a workable definition of planarity in the general case.</p>",
        "id": 299413257,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663495579
    },
    {
        "content": "<p>As far as I understand, if the graph is not countable/locally finite, we're out of the standard definitions anyway, and on kind of terra incognita, no?</p>",
        "id": 299413670,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1663495815
    },
    {
        "content": "<p>&lt;s&gt;Finite subgraph definition isn't compatible with the Kuratowski definition: consider K5 with each edge replaced by an infinite path.&lt;/s&gt; Edit: no such thing as an infinite path.<br>\nPerhaps consider all finite minors instead?<br>\nEdit: finite subgraph definition and finite minor definition is equivalent if minor is defined by paths (not sure if any other definition exists) if I'm not wrong.</p>",
        "id": 299416312,
        "sender_full_name": "pcpthm",
        "timestamp": 1663497361
    },
    {
        "content": "<p>(that is equivalent to the Kuratowski definition)</p>",
        "id": 299416422,
        "sender_full_name": "pcpthm",
        "timestamp": 1663497442
    },
    {
        "content": "<p>Here's an old implementation of combinatorial maps: <a href=\"https://github.com/kmill/lean-graphs/blob/master/src/maps.lean\">https://github.com/kmill/lean-graphs/blob/master/src/maps.lean</a></p>\n<p>Planar graphs correspond to combinatorial maps whose euler characteristic (line 257) is equal to the number of connected components.</p>\n<p>I think I have another implementation somewhere -- I thought I had started to write a statement of Sperner's lemma for combinatorial maps.</p>",
        "id": 299461290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663523855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347012\">pcpthm</span> <a href=\"#narrow/stream/252551-graph-theory/topic/K4.20is.20planar.20help/near/299416312\">said</a>:</p>\n<blockquote>\n<p>finite subgraph definition and finite minor definition should be equivalent: for every finite minor G' of G, there exists a finite subgraph G'' of G such that  G' is a minor of G''.</p>\n</blockquote>\n<p>That sounds both true and reassuring :-)</p>",
        "id": 299525117,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1663577408
    }
]