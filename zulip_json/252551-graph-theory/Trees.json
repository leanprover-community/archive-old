[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, what's your opinion on defining trees and forests? We need trees for an Oxford Invariants problem before next Monday. We also need the fact that they are 2-colorable and that there's a unique avoiding path between any two points.</p>",
        "id": 249710978,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629203505
    },
    {
        "content": "<p>I think we could define the typeclasses <code>is_forest G</code> and <code>is_connected G</code> somehow (wink wink your path definition) and then let <code>is_tree G</code> extend them both.</p>",
        "id": 249711151,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629203605
    },
    {
        "content": "<p>Why not just make an invariants repo?</p>",
        "id": 249711551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629203804
    },
    {
        "content": "<p>We definitely could, but I ought to silently push graphs things a little <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 249715921,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629205930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Ok, here you go <a href=\"https://github.com/leanprover-community/mathlib/issues/8737\">#8737</a></p>",
        "id": 249824792,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629278384
    },
    {
        "content": "<p>You should be able to get your 2-coloring with <code>G.tree_dist</code>. (Though colorings don't exist yet per se.)</p>",
        "id": 249824875,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629278427
    },
    {
        "content": "<p>I can't work on this anymore for now, but it can certainly stand to have some cleanup!  Feel free to help refactor it or fill in missing functionality (ideally the kind that simplifies things).</p>\n<p>My main goal was just to show that all the definitions work together to reasonably prove a few characterizations of acyclic graphs.  My proofs aren't always locally so reasonable -- I just wanted to get to the end.</p>",
        "id": 249825175,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629278664
    },
    {
        "content": "<p>For now, I think it's better to use structures for <code>is_tree</code> and such instead of typeclasses.  I'm not convinced it won't go through cycles of (un)bundling</p>",
        "id": 249825410,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629278837
    },
    {
        "content": "<p>Kyle, when are you moving in? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 249832031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629283459
    },
    {
        "content": "<p>This is like... amazing. I really wish this gets in mathlib.</p>",
        "id": 249832114,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629283525
    },
    {
        "content": "<p>One thing though, with your definition of path, eulerian paths are trails, but <strong>not</strong> paths. Is that on purpose?</p>",
        "id": 249832227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629283599
    },
    {
        "content": "<p>It's a bit of a monster PR...</p>",
        "id": 249832713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629283983
    },
    {
        "content": "<p>Do you think this can be cut into pieces?</p>",
        "id": 249832725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629283992
    },
    {
        "content": "<p>Do you mind if I try to port walks to a list based defn? I think you wouldn't have to copy the API as much. And then cycles would be based on the cycle data structure.</p>",
        "id": 249837686,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629287600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Trees/near/249832227\">said</a>:</p>\n<blockquote>\n<p>One thing though, with your definition of path, eulerian paths are trails, but <strong>not</strong> paths. Is that on purpose?</p>\n</blockquote>\n<p>All I did was choose some pre-existing convention, and it seems every choice is awkward somewhere.  Wikipedia says that an <a href=\"https://en.wikipedia.org/wiki/Eulerian_path\">Eulerian path</a> is also known as an Eulerian trail at least.  Another awkward naming thing is Eulerian cycle, which would be called an Eulerian circuit (a circuit only has the no-repeating-edges condition -- I forgot to define them) though Wikipedia also mentions both names.</p>",
        "id": 249873950,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629303461
    },
    {
        "content": "<p>Another convention could be to have paths and simple paths instead of walks and paths. I suppose trails remain trails?  With this, maybe it would be <code>walk.is_path</code> -&gt; <code>walk.is_simple</code> and <code>path</code> -&gt; <code>simple_path</code>.</p>",
        "id": 249873958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629303465
    },
    {
        "content": "<p>Okay sure <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span> I'm not against having more words than the usual mathspeak to disambiguate notions.</p>",
        "id": 249874521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629303729
    },
    {
        "content": "<p>I think \"path\" and \"simple path\" is more popular in CS, while \"walk\" and \"path\" is more popular in mathematics (not that it matters, but I prefer \"walk\" and \"path\"). What people do in Combinatorics articles, I think, is to pick a book (for example, the introductory textbooks by Bollobás, Bondy and Murty or Harary) and use the basic definitions from the chosen book consistently.</p>",
        "id": 249874949,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1629303926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Trees/near/249832713\">said</a>:</p>\n<blockquote>\n<p>It's a bit of a monster PR...</p>\n</blockquote>\n<p>As the saying goes, \"I apologize for such a long letter -- I didn't have time to write a short one.\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  I think it can be shorter purely from being more careful about what's going on.</p>\n<p>But also, yeah, it can (and probably should) be cut up.  I just wanted to get to a point that would show everything actually fits together and proves useful basic theorems about acyclic graphs.  (Fun fact: it's also going through the new subgraph module to define bridge edges.  An edge is a <em>bridge</em> if when you remove it there is no longer a path between the vertices the edge was incident to.  This is later characterized in a lemma as \"an edge is a bridge if every walk between its incident vertices contains the edge.\")</p>",
        "id": 249875150,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629304007
    },
    {
        "content": "<p>One thing I think I made a mistake with is defining <code>walk.edges</code> as taking values in <code>G.edge_set</code>, but I'm not completely sure.  It could have easily been <code>sym2 V</code> along with a lemma to prove the edges like in <code>G.edge_set</code>.  The reason it's a possible mistake is that it means you have to write <code>(⟨⟦(v, w)⟧, h⟩ : G.edge_set)</code> too frequently, even if you don't care about it specifically being an element of the edge set.</p>",
        "id": 249875488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629304177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Trees/near/249837686\">said</a>:</p>\n<blockquote>\n<p>Do you mind if I try to port walks to a list based defn? I think you wouldn't have to copy the API as much. And then cycles would be based on the cycle data structure.</p>\n</blockquote>\n<p>It seems like it's very important having \"categorical lists\" instead of plain lists, at least for me to have gotten to the end.  A \"categorical list\" is a list-like structure where each end has a type, and you can only concatenate lists with compatible ends -- in other words they can be regarded as paths in a category.  Plain lists are categorical lists with only a single type (so they're paths in a monoidal category).</p>\n<p>I'm wondering whether it would make sense to define a <code>clist</code> type instead.  It would be like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.refl_trans_gen\">docs#relation.refl_trans_gen</a> but be Type-valued.  Not sure I got the universes right:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">clist</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">clist</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">clist</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">clist</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>Reverse could look something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">clist</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">reverse_aux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">clist</span> <span class=\"n\">r</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">clist</span> <span class=\"n\">r</span> <span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">clist</span> <span class=\"n\">r</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">nil</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">reverse_aux</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">clist</span> <span class=\"n\">r</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">clist</span> <span class=\"n\">r</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">w.reverse_aux</span> <span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"n\">nil</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">clist</span>\n</code></pre></div>",
        "id": 249877659,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629305145
    },
    {
        "content": "<p>But I'm just telling you what I think.  If porting it to lists makes things simpler, then I'll happily switch over to what you write.</p>",
        "id": 249877778,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629305186
    },
    {
        "content": "<p>I'm trying it out on the PR. Will report back!</p>",
        "id": 249878721,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629305589
    },
    {
        "content": "<p>Your clist is a Sort generalization of list.chain, which is what I'm using for walks over simple graphs, since our edges are in Prop here.</p>",
        "id": 249879005,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629305704
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> I actually happen to slightly prefer \"path\" and \"simple path\" but it seemed that \"walk\" and \"path\" were more traditional. If anything, your vote to leave it as-is matters quite a lot since it's broken the tie!)</p>",
        "id": 249879170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629305768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> We're going to need a type-valued version for multigraphs though.  Is there something that can hold onto the edge?</p>",
        "id": 249879442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629305913
    },
    {
        "content": "<p>I thought about all this paths on multigraphs stuff, and I came to the conclusion that it was maybe desirable to have different definitions of paths for multigraph and simple graph or, at the very least, a solid API to describe multigraph paths in terms of vertices when the multigraph is simple.</p>",
        "id": 249879865,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629306071
    },
    {
        "content": "<p><code>clist</code> by the way is essentially <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.path\">docs#quiver.path</a>.  The difference is that a <code>quiver</code> is a typeclass that gives the <code>r</code> argument in <code>clist</code>.</p>",
        "id": 249880555,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629306354
    },
    {
        "content": "<p>Clunkily, one can use a proposition of \"edge between v and w is in my graph\". In the case of a simple graph, that's just G.adj. Even in a directed graph, this should work. In multigraphs, it can be a set membership. But I don't want to bikeshed on that level of generality. Just trying to see whether making the equivalence with list.chain more explicit helps or hurts. My inclination to us lists is because of existing infrastructure for recursors, folds, maps, etc.</p>",
        "id": 249882192,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629307003
    },
    {
        "content": "<p>Just to help choose the color of shingles for this bikeshed, I know mathlib has headed in a classical direction, but I find it pleasing when concrete data can remain concrete data, like having paths that actually know their edges.</p>",
        "id": 249882844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629307321
    },
    {
        "content": "<p>Something you might consider is having  your lists consist of darts (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.dart\">docs#simple_graph.dart</a>), and then all the chain needs to know is that adjacent darts are compatible, rather than having knowledge about the adjacency relation.</p>",
        "id": 249882873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629307323
    },
    {
        "content": "<p>I guess this is different, since you're dealing with lists of the vertices, not of the edges.</p>",
        "id": 249883577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629307628
    },
    {
        "content": "<p>Or the underlying list is [(vertex, edge)]</p>",
        "id": 249884735,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629308122
    },
    {
        "content": "<p>Which is similar to your dart suggestion</p>",
        "id": 249884781,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629308146
    },
    {
        "content": "<p>The reason darts contain the opposite vertex is so they're easy to reverse.  It's not that big of a deal, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sym2.mem.other\">docs#sym2.mem.other</a> is noncomputable, and then you'd have to rewrite with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sym2.other_invol\">docs#sym2.other_invol</a></p>",
        "id": 249885358,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629308386
    },
    {
        "content": "<p>I did some amount of cleanup (including switching to <code>sym2 V</code> for <code>walk.edges</code> rather than <code>G.edge_set</code>), though there's still more to do.</p>",
        "id": 250017547,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629393658
    },
    {
        "content": "<p>Just to make the PR more of a monster, I've added</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">adj_matrix_pow_apply_eq_card_walk</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">G.adj_matrix</span> <span class=\"n\">R</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">//</span> <span class=\"n\">p.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>in addition to definitions for Eulerian and Hamiltonian walks, k-edge-connectivity, and a proof that the <code>G.reachable</code> relation is equivalent to <code>relation.refl_trans_gen G.adj</code>.</p>",
        "id": 250017556,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629393663
    },
    {
        "content": "<p>I pushed <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/walks_and_trees\">branch#pechersky/walks_and_trees</a>, where I added ~400 lines of list API to make the list.chain' defns work. I got up to <code>subwalk_from</code>.</p>",
        "id": 250070558,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629425985
    },
    {
        "content": "<p>Some of the docstrings might be wrong because I changed a few things and maybe forgot to change them back</p>",
        "id": 250070610,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629426032
    },
    {
        "content": "<p>Using lists for <code>support</code> and <code>edges</code> is a good idea.  That way every <code>path</code> has both a list of vertices and a list of edges, and you can get stronger lemmas like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">reverse_edges</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.reverse.edges</span> <span class=\"bp\">=</span> <span class=\"n\">p.edges.reverse</span>\n</code></pre></div>\n<p>I switched <a href=\"https://github.com/leanprover-community/mathlib/issues/8737\">#8737</a> over to using them instead of multisets.</p>",
        "id": 250100148,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629454311
    },
    {
        "content": "<p>If you define more through lists, the \"rotate\" is also easier to implement. And the property you have now of \"support (p.rotate n) ~ support p\" is actually stronger, \"~r\"</p>",
        "id": 250110005,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629461854
    },
    {
        "content": "<p><code>rotate</code> is just one line though?</p>\n<p><code>~r</code> would be nice, but I can't find this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">list.is_rotated_append</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">l₁</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250147316,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629480334
    },
    {
        "content": "<p>Should be easy to get from something like <code>list.rotate_eq_drop_append_take</code>.</p>",
        "id": 250151105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629482091
    },
    {
        "content": "<p>I guess it wasn't so hard to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_rotated_append</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">~</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">l₁.length</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rotate_eq_rotate'</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l₁</span> <span class=\"n\">generalizing</span> <span class=\"n\">l₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rotate'</span><span class=\"o\">,</span> <span class=\"n\">l₁_ih</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250151116,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629482098
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8780\">#8780</a></p>",
        "id": 250153650,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629483313
    }
]