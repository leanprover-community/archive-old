[
    {
        "content": "<p>While proving Turan's theorem I had a problem with rewriting  that I think is captured by the example below.</p>\n<p>I managed to work around it but I'd like to understand what I'm doing wrong. (Probably something very basic..)</p>\n<p>In particular, why does the 1st lemma below work fine while the 2nd fails?</p>\n<p>(Anyone interested in seeing the longest known proof  of Turan's theorem can find it  here:<br>\n<a href=\"https://github.com/jt496/extremal_graph/blob/master/src/theorems.lean\">https://github.com/jt496/extremal_graph/blob/master/src/theorems.lean</a> )</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">simple_graph</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">α</span><span class=\"o\">}[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">][</span><span class=\"n\">decidable_rel</span> <span class=\"n\">H.adj</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.check</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">no_error</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">):</span> <span class=\"n\">G.edge_set</span> <span class=\"bp\">=</span> <span class=\"n\">H.edge_set</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">error</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">):</span> <span class=\"n\">G.edge_finset</span> <span class=\"bp\">=</span> <span class=\"n\">H.edge_finset</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[check] application type mismatch at</span>\n<span class=\"cm\">  _a.edges_fintype</span>\n<span class=\"cm\">argument type</span>\n<span class=\"cm\">  Π (a b : α), decidable (G.adj a b)</span>\n<span class=\"cm\">expected type</span>\n<span class=\"cm\">  decidable_rel _a.adj</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">rewrite tactic failed, motive is not type correct</span>\n<span class=\"cm\">  λ (_a : simple_graph α), G.edge_finset = H.edge_finset = (_a.edge_finset = H.edge_finset)</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type u_1,</span>\n<span class=\"cm\">G H : simple_graph α,</span>\n<span class=\"cm\">_inst_1 : fintype α,</span>\n<span class=\"cm\">_inst_2 : nonempty α,</span>\n<span class=\"cm\">_inst_3 : decidable_eq α,</span>\n<span class=\"cm\">_inst_4 : decidable_rel G.adj,</span>\n<span class=\"cm\">_inst_5 : decidable_rel H.adj,</span>\n<span class=\"cm\">h : G = H</span>\n<span class=\"cm\">⊢ G.edge_finset = H.edge_finset</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291996344,
        "sender_full_name": "John Talbot",
        "timestamp": 1659613962
    },
    {
        "content": "<p>Try <code>simp_rw</code></p>",
        "id": 291996552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659614071
    },
    {
        "content": "<p>That doesn't work either, and neither does <code>simp only</code>. Furthermore <code>subst</code> doesn't work because <code>_inst_5</code> is frozen! This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fixed_error</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">):</span> <span class=\"n\">G.edge_finset</span> <span class=\"bp\">=</span> <span class=\"n\">H.edge_finset</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I guess you need <code>congr'</code> rather than <code>refl</code> because Lean doesn't know that the two instances of <code>decidable_rel</code> are definitionally equal.</p>",
        "id": 291997352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659614550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"506168\">@John Talbot</span> those proofs look lovely to me -- you should look at some of the long proofs my undergraduates produce!</p>",
        "id": 291997528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659614652
    },
    {
        "content": "<p>Thanks both! What should I be reading to understand this stuff properly?</p>",
        "id": 291997725,
        "sender_full_name": "John Talbot",
        "timestamp": 1659614782
    },
    {
        "content": "<p><code>finset</code> is constructive finiteness and this might be part of the problem. There is <code>set.finite</code> which is another way to assert finiteness of a set; <code>set.finite</code> is a <code>Prop</code> whereas <code>finset</code> is data.</p>",
        "id": 291997747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659614810
    },
    {
        "content": "<p>Ah ok, thanks I'll look at this.</p>",
        "id": 291997908,
        "sender_full_name": "John Talbot",
        "timestamp": 1659614916
    },
    {
        "content": "<p>What is going on is that because <code>finset</code> is constructive, <code>simple_graph.edge_finset</code> is demanding a constructive proof of finiteness (i.e. data, not a proposition) from the type class inference system, hence all this wacky decidable_stuff. One of the things Lean is griping about is that you have assumed that there's an algorithm which decides whether two vertices in G are equal, and you've assumed that there's an algorithm which decides whether two vertices in H are equal, and then you've assumed that G and H are equal, but you haven't assumed that the algorithms are equal. This is the kind of price you pay when doing constructive mathematics.</p>",
        "id": 291998310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659615184
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">simple_graph</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">α</span><span class=\"o\">}[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Let's work in classical mathematics</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"c1\">-- now we don't need any of this stuff</span>\n<span class=\"c1\">--[decidable_eq α][decidable_rel G.adj][decidable_rel H.adj]</span>\n\n<span class=\"c1\">-- and this now works fine</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">error</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">):</span> <span class=\"n\">G.edge_finset</span> <span class=\"bp\">=</span> <span class=\"n\">H.edge_finset</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291998433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659615252
    },
    {
        "content": "<p>Thanks, that makes  a lot of sense.  I have to admit I quite enjoy the wacky decidable_stuff but its good to see an easy workaround.</p>",
        "id": 291998908,
        "sender_full_name": "John Talbot",
        "timestamp": 1659615541
    }
]