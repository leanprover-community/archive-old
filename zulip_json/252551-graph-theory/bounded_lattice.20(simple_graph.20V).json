[
    {
        "content": "<p>Here's another thing in case someone is looking for something to do.  Once <a href=\"https://github.com/leanprover-community/mathlib/issues/8223\">#8223</a> is merged, you can follow the structure of the <code>bounded_lattice G.subgraph</code> instance to define the <code>bounded_lattice (simple_graph V)</code> instance.  (This is the lattice of spanning subgraphs of the complete graph.)</p>\n<p>Eventually, there should also be a way to go back and forth from spanning subgraphs in <code>G.subgraph</code> to <code>simple_graph V</code>, along with lemmas showing how the subgraph-of relation is preserved.</p>",
        "id": 245985572,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626280809
    },
    {
        "content": "<p>I was just messing with this (turns out to be an easy copy+paste for the first half)</p>",
        "id": 246014715,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626294106
    },
    {
        "content": "<p>but for the second half I'm not sure what'd be the best approach; we can just make a <code>simple_graph</code> with some spanning <code>H</code>'s adj and call it <code>spanning_coe</code> or something, but feel like that's going to cause more lemmas or something; any further ideas?</p>",
        "id": 246014844,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626294157
    },
    {
        "content": "<p>(Also, thoughts on changing the defn of <code>is_spanning</code> to <code>H.verts = set.univ</code>? Not sure which is preferred, just a random thought)</p>",
        "id": 246014909,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626294194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/252551-graph-theory/topic/bounded_lattice.20.28simple_graph.20V.29/near/246014909\">said</a>:</p>\n<blockquote>\n<p>(Also, thoughts on changing the defn of <code>is_spanning</code> to <code>H.verts = set.univ</code>? Not sure which is preferred, just a random thought)</p>\n</blockquote>\n<p>I'd written it like that first, but then I changed it, then thought about changing it back.  I'm not sure what's best here...  I left it this way just because it seemed like it might be more useful getting a proof that a vertex is an element of <code>H.verts</code>, but if the equality with <code>set.univ</code> proves more useful may as well change it.</p>",
        "id": 246016093,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626294763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/252551-graph-theory/topic/bounded_lattice.20.28simple_graph.20V.29/near/246014844\">said</a>:</p>\n<blockquote>\n<p>but for the second half I'm not sure what'd be the best approach; we can just make a <code>simple_graph</code> with some spanning <code>H</code>'s adj and call it <code>spanning_coe</code> or something, but feel like that's going to cause more lemmas or something; any further ideas?</p>\n</blockquote>\n<p>Going with that name, I'd imagined something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">spanning_coe</span> <span class=\"o\">(</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G'.is_spanning</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">G'.adj</span><span class=\"o\">,</span>\n  <span class=\"n\">sym</span> <span class=\"o\">:=</span> <span class=\"n\">G'.sym</span><span class=\"o\">,</span>\n  <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">G.loopless</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">G'.adj_sub</span> <span class=\"n\">hv</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Maybe the only additional things you'd want (for now) are a corresponding isomorphism between <code>G'.coe</code> and <code>G'.spanning_coe h</code>.</p>",
        "id": 246016631,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626295018
    },
    {
        "content": "<p>You know, for <code>spanning_coe</code> it makes sense to drop the <code>h</code> hypothesis.  Only the isomorphism will need <code>G'.is_spanning</code>.</p>",
        "id": 246016873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626295128
    },
    {
        "content": "<p>I was also imagining a few definitions and lemmas like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">simple_graph.to_subgraph</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">G.subgraph</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">simple_graph.to_subgraph.is_spanning</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">H.to_subgraph</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_spanning</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">subgraph.spanning_coe_is_subgraph_of_is_subgraph</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">subgraph</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">H'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">H.spanning_coe</span> <span class=\"bp\">≤</span> <span class=\"n\">H'.spanning_coe</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but it's perfectly fine just PRing the <code>bounded_lattice</code> instance and leaving these to when they're actually needed.</p>",
        "id": 246018224,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626295718
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8330\">#8330</a></p>",
        "id": 246206639,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626431141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  thinks it's a good idea to replace <code>complete_graph</code> and <code>empty_graph</code> (in the aforementioned PR) with  ⊤ and ⊥ and i'd be tempted to agree; does anyone have issues with that?</p>",
        "id": 246231540,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626446287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/252551-graph-theory/topic/bounded_lattice.20.28simple_graph.20V.29/near/246231540\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>  thinks it's a good idea to replace <code>complete_graph</code> and <code>empty_graph</code> (in the aforementioned PR) with  ⊤ and ⊥ and i'd be tempted to agree; does anyone have issues with that?</p>\n</blockquote>\n<p>I think <code>complete_graph V</code> is nice, rather than <code>⊤ : simple_graph V</code>, but feel free to remove them.</p>",
        "id": 246246801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626453188
    },
    {
        "content": "<p>I don't think you can rewrite through an abbreviation, but if you could, defining <code>complete_graph V</code> to be an abbreviation for <code>⊤</code> might have been a nice synonym.</p>",
        "id": 246247095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626453340
    },
    {
        "content": "<p>Right, the best you can do is have one form simp to the other</p>",
        "id": 246249464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626454474
    },
    {
        "content": "<p>But at that point, either complete_graph appears in no lemma statements, or we have to copy all the API about top to a new API about complete_graph</p>",
        "id": 246249917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626454697
    },
    {
        "content": "<p>Note that for <code>set α</code> and <code>finset α</code> we use <code>∅</code> and <code>univ</code> instead of <code>⊥</code> and <code>⊤</code>. Could we bring in the same approach?</p>",
        "id": 246261183,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626460015
    },
    {
        "content": "<p>Very obliquely related to <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>'s question, I've been wondering whether mathlib has a way to create the sub-bounded-lattice of all things less than or equal to a particular thing.  This would be useful to create the lattice of spanning subgraphs of a particular graph.  (The relationship to the question is that this new lattice has its own empty graph.)</p>",
        "id": 246263564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626461339
    },
    {
        "content": "<p>Isn't that just the bounded lattice of <code>(coe_sort H)</code> where <code>H : subgraph G</code>?</p>",
        "id": 246264105,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626461624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Graphs and subgraphs don't have <code>coe_sort</code>, unlike subobjects of algebraic objects.  For the case of <code>bounded_lattice (simple_graph V)</code>, it would need to be a bounded lattice instance for something like <code>{G' : simple_graph V // G' ≤ G}</code>.  (I'm not very familiar with mathlib's lattice instances.)</p>",
        "id": 246265228,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626462215
    },
    {
        "content": "<p>Maybe it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Iic.bounded_lattice\">docs#set.Iic.bounded_lattice</a></p>",
        "id": 246265529,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626462387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/bounded_lattice.20.28simple_graph.20V.29/near/246261183\">said</a>:</p>\n<blockquote>\n<p>Note that for <code>set α</code> and <code>finset α</code> we use <code>∅</code> and <code>univ</code> instead of <code>⊥</code> and <code>⊤</code>. Could we bring in the same approach?</p>\n</blockquote>\n<p><code>univ</code> could also be done, and ∅ is just another notation typeclass so again can be done; I'm not so sure about ∅, though; it's nice seeing it and it meaning \"definitely set in some form\"</p>",
        "id": 246266710,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626463022
    },
    {
        "content": "<p>I didn't mean to reuse <code>univ</code> and <code>∅</code>! I meant that we could keep <code>complete_graph</code> and <code>empty_graph</code> and have them defeq to <code>⊥</code> and <code>⊤</code> (and maybe some more technicalities I am unaware of).</p>",
        "id": 246269144,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626464392
    },
    {
        "content": "<p>Finset can afford to make that choice because it also chooses to use different symbols for all the lattice operations, so the cost is already paid</p>",
        "id": 246272551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626466275
    },
    {
        "content": "<p>Also <code>\\empty</code> is relevant for the <code>insert</code> operation.</p>",
        "id": 246272592,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626466308
    },
    {
        "content": "<p>Having two ways to write one thing means you either have to simp one form into the other, or write twice as many lemmas</p>",
        "id": 246272595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626466311
    },
    {
        "content": "<p>If you decide to simp <code>top</code> into <code>complete_graph</code>, then you have to copy every lemma like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_top\">docs#le_top</a>. Finset does this (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/subset_univ\">docs#subset_univ</a>), but only due to a strong convention for using a different notation which I don't think applies to graphs</p>",
        "id": 246272805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626466439
    }
]