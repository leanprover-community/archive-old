[
    {
        "content": "<p>I had some ideas for how the graph theory refactor might go, and so I made a branch with partial progress <a href=\"https://github.com/leanprover-community/mathlib/pull/10963\">#10963</a>.</p>\n<p>The idea is to have typeclasses such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_adj</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>along with property typeclasses such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_adj_symmetric</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_adj</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">adj_symm</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"o\">(</span><span class=\"n\">has_adj.adj</span> <span class=\"n\">G</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>That way, anything that implements various subsets of these gets access to generic functions like <code>neighbor_set</code>.<br>\nThe only real downside seems to be that we lose dot notation.</p>\n<p>One thing I made sure to take care doing was making sure we are able to preserve nice defeq properties.  For <code>simple_graph</code>, one can still prove this with <code>iff.rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_edge_set</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">∈</span> <span class=\"n\">edge_set</span> <span class=\"n\">G</span> <span class=\"bp\">↔</span> <span class=\"n\">adj</span> <span class=\"n\">G</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n</code></pre></div>\n<p>This is implemented by allowing instances to choose their own definitions for things like <code>edge_set</code> so long as they satisfy some property.</p>",
        "id": 265781775,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640164665
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/quantum_graph/src/combinatorics/quantum/hierarchy.lean\">branch#quantum_graph/src/combinatorics/quantum/hierarchy.lean</a> now contains 17 structures and their 17 corresponding classes.</p>",
        "id": 265782323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640165016
    },
    {
        "content": "<p>It would be good to pool ideas for this <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, since this refactor is a good amount of design work (and this PR is just an essay into the problem), and it has many consequences for the graph theory library.</p>\n<p>I'm hoping we can do it in an incremental way so we don't inadvertently lose things. I've broken some nice-looking proofs trying to make some general things work.</p>",
        "id": 265782402,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640165045
    },
    {
        "content": "<p>Of course!</p>",
        "id": 265782428,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640165061
    },
    {
        "content": "<p>One thing I'm noting is that your <code>is_adj_symmetric</code> class does not extend <code>has_adj</code>. Instead, this is what I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `symm_rel_class F α` states that `F` is a type of symmetric relations on `α`.</span>\n\n<span class=\"sd\">Extend this class when you extend `symm_rel`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">symm_rel_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">rel_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun_symm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265782515,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640165111
    },
    {
        "content": "<p>Also, I introduce the new notation <code>a ⟶[G] b</code> for the type of edges from <code>a</code> to <code>b</code> in multigraph <code>G</code> (actually only requires <code>quiver_class</code>).</p>",
        "id": 265782718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640165216
    },
    {
        "content": "<p>I did that so it's possible to include/exclude different axioms. For example, you can define a new structure implementing <code>has_adj</code> and imbue it with <code>is_adj_symmetric</code> and <code>is_adj_reflexive</code> and now you have reflexive graphs.</p>",
        "id": 265782944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640165343
    },
    {
        "content": "<p>I decided to make <code>has_edges</code> (similar to <code>quiver_class</code>) extend <code>has_adj</code> to avoid some unpleasantness when it comes to giving <code>has_edges</code> a default <code>has_adj</code> implementation.</p>",
        "id": 265783104,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640165453
    },
    {
        "content": "<p>I agree that symmetry and irreflexivity can be made mixins.</p>",
        "id": 265783136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640165470
    },
    {
        "content": "<p>I was also thinking about making a default implementation for the adjacency relation.</p>",
        "id": 265783163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640165490
    },
    {
        "content": "<p>The way it works here is that you're required to implement <code>has_adj</code> such that <code>∀ (v w : V), (edges v w).nonempty ↔ adj v w</code> is satisfied. While that completely constrains what it is, since you're allowed to implement <code>adj</code> yourself, you can give it whatever definition would be most convenient.</p>",
        "id": 265783318,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640165585
    },
    {
        "content": "<p>Yeah of course.</p>",
        "id": 265783462,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640165661
    },
    {
        "content": "<p>And yet it only constrains it for this specific family of graphs.</p>",
        "id": 265783527,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640165713
    },
    {
        "content": "<p>Btw, in <code>multigraph</code> you need to take care what happens for self-loops. A similar problem occurs in <a href=\"https://github.com/leanprover-community/mathlib/tree/hedetniemi\">branch#hedetniemi</a>, though at least yours has only \"one-ended\" and \"two-ended\" self-loops.</p>",
        "id": 265783908,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640165865
    },
    {
        "content": "<p>What do you mean? I was wondering whether I needed <code>hom_fun a a : (a ⟶ a) → (a ⟶ a)</code> to be the identity. Is it that?</p>",
        "id": 265784056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640165946
    },
    {
        "content": "<p>You have to decide whether it's the identity or whether it's an involution with no fixed points.</p>",
        "id": 265784097,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640165974
    },
    {
        "content": "<p>The first in my experience is easier to deal with, but the second ensures that every edge has exactly two darts.</p>",
        "id": 265784298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640166091
    },
    {
        "content": "<p>I've identified 5 families of graphs that each have different data fields:</p>\n<ul>\n<li>Prop-valued graphs: <code>rel</code>, <code>simple_digraph</code>, <code>symm_rel</code>,  <code>simple_graph</code>. Each have an adjacency relation <code>α → β → Prop</code> or <code>α → α → Prop</code>.</li>\n<li>Hypergraphs: <code>hypergraph</code>. Has a set of nonempty hyperedges <code>set (set α)</code>.</li>\n<li><code>option</code>-valued graphs, aka weighted/labeled graphs: <code>weighted_digraph</code>, <code>weight_simple_digraph</code>, <code>weight_graph</code>, <code>weight_simple_graph</code>. Each have a weight relation <code>α → β → option W</code> or <code>α → α → option W</code>.</li>\n<li>Sort-valued graphs: <code>quiver</code>, <code>simple_quiver</code>, <code>multigraph</code>, <code>simple_multigraph</code>. Each have edges functions <code>α → α → Sort*</code>.</li>\n<li>Weighted Sort-valued graphs: <code>weight_quiver</code>, <code>weight_simple_quiver</code>, <code>weight_multigraph</code>, <code>weight_simple_multigraph</code>.  Each have edges functions <code>α → α → Sort*</code> and edge weights <code>(a ⟶ b) → W</code>.</li>\n</ul>",
        "id": 265784742,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640166367
    },
    {
        "content": "<p>Edge coloring is the same as edge weight, except that it's a structure rather than being part of the definition.</p>",
        "id": 265784878,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640166445
    },
    {
        "content": "<p>One takeaway is that edge weight is very different to weight between two vertices, and should be treated as such.</p>",
        "id": 265785132,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640166534
    },
    {
        "content": "<p>What I dislike with the mixin approach is that it fails to go through the four main families of graphs, although they clearly have the same \"nothing\", \"irreflexive\", \"symmetric\", \"symmetric and irreflexive\" relation. Irreflexivity works, but not symmetry.</p>",
        "id": 265785527,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640166800
    },
    {
        "content": "<p>Something else the mixin approach misses is types for the graphs that respect the mixin, which is definitely needed for some constructions. For example, without <code>simple_graph</code>, we can't talk about the complement of a simple graph, because that involves not complementing <code>G.adj a a</code>. So either we don't use mixins, or we must introduce disparity between graph types and graph classes.</p>",
        "id": 265786364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640167351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/265782402\">said</a>:</p>\n<blockquote>\n<p>It would be good to pool ideas for this</p>\n</blockquote>\n<p>How do you want to do that? Because I thought I was the only one working on it at the moment, so we effectively duplicated a huge chunk of work...</p>",
        "id": 265786543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640167511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/265786543\">said</a>:</p>\n<blockquote>\n<p>How do you want to do that? Because I thought I was the only one working on it at the moment, so we effectively duplicated a huge chunk of work...</p>\n</blockquote>\n<p>Like this discussion we're having, since until now I didn't have a clear idea what you were up to. Being able to make universal definitions for graph theory is something I've had my eye on since the beginning, but the right ideas never really came together to make something ergonomic and workable.</p>\n<p>Usually in other projects what we'd need to do is create a proposal (an RFC) and get community support before changing the way things work at such a deep level, and I figure the next best thing is to have a couple competing implementations. We have two refactorings that work in substantially different ways, so there is certainly some design discussion to be done.</p>",
        "id": 265830802,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640194312
    },
    {
        "content": "<p>At a high level, I've been thinking of this as a universal algebra problem: how do we deal with the fact that each type of combinatorial object is some collection of data and properties? Depending on which data exists and which properties hold, can we let those objects use some shared definitions? Can we support having forgetful morphisms from a graph type that that is more constrained to a less-constrained type? Can we support having additional data that isn't under the purview of the graph theory library itself?</p>\n<p>One solution is having two parts: (1) typeclasses for properties and (2) concrete implementations. What I think is the ideal is giving users the freedom to take any <code>structure</code> they might have defined and then implement instances to make it appropriately graphy. Ideally one would only need to then define things that are truly specific to the particular application.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/265786364\">said</a>:</p>\n<blockquote>\n<p>Something else the mixin approach misses is types for the graphs that respect the mixin, which is definitely needed for some constructions. For example, without <code>simple_graph</code>, we can't talk about the complement of a simple graph, because that involves not complementing <code>G.adj a a</code>. So either we don't use mixins, or we must introduce disparity between graph types and graph classes.</p>\n</blockquote>\n<p>The intent of the mixins is just to give additional definitions and lemmas. They definitely are not sufficient to be able to define constructions on graphs themselves, since for that you need to know specific details about the underlying <code>structure</code>.</p>\n<p>In the branch, <code>simple_graph</code> is the plain old structure from before, but it uses a standard implementation of a typeclass that gives it <code>sym2 V</code> edges via its <code>symm</code> property. It has to go on and define the <code>boolean_lattice</code> unaided, though, since that really depends on extensionality properties of the type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">adj'</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">adj'</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">adj'</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">simple_graph.has_simple_undirected_edges</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_simple_undirected_edges</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">graph.default_simple_undirected_edges</span> <span class=\"n\">G</span> <span class=\"n\">G.adj'</span> <span class=\"n\">G.symm</span>\n</code></pre></div>\n<p>I'm not discounting the possibility that there might be a way to define graph constructions in a general way, though.</p>",
        "id": 265832466,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640195276
    },
    {
        "content": "<p>Regarding <code>Sort</code>-valued graphs -- there's this relationship between <code>E -&gt; sym2 V</code> multigraphs and <code>V -&gt; V -&gt; Sort*</code> (plus involutions) multigraphs, and I was hoping we could find a way to unify them in some way.  One thing I don't like about the latter is it doesn't give a good type for the <code>incidence_set</code>. What I'm looking into is whether a graph typeclass might specify how this type is meant to work for a given concrete graph type.</p>\n<p>Or, in other words, somehow finding a design where graphs represented either way could be considered to be multigraphs as far as the general library is concerned.</p>",
        "id": 265834061,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640196157
    },
    {
        "content": "<p>Also, regarding what you mention about mixins not going through all the families of graphs you've outlined, I didn't mean to claim that the ones I've written handle everything yet. They only handle basic properties of directed/undirected graphs that might be reflexive/irreflexive at the moment. Things like edge labels/weights and vertex labels/weights would need more typeclasses.</p>",
        "id": 265834798,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640196454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/265785132\">said</a>:</p>\n<blockquote>\n<p>One takeaway is that edge weight is very different to weight between two vertices, and should be treated as such.</p>\n</blockquote>\n<p>Could you elaborate a bit on this observation? Is it that <code>α → α → option W</code> is not enough for edge weights?</p>",
        "id": 265834961,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640196536
    },
    {
        "content": "<p>Also, I'm wondering how you imagine hypergraphs fit in with the rest of the graph types -- they've always seemed like they're their own thing to me, other than that every simple graph may be regarded as being a hypergraph, too. (Not saying they shouldn't be addressed; I just want to understand what hypergraphs can do for graphs and vice versa.)</p>",
        "id": 265835259,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640196690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/265832466\">said</a>:</p>\n<blockquote>\n<p>Depending on which data exists and which properties hold, can we let those objects use some shared definitions? Can we support having forgetful morphisms from a graph type that that is more constrained to a less-constrained type? Can we support having additional data that isn't under the purview of the graph theory library itself?</p>\n<p>One solution is having two parts: (1) typeclasses for properties and (2) concrete implementations. What I think is the ideal is giving users the freedom to take any <code>structure</code> they might have defined and then implement instances to make it appropriately graphy. Ideally one would only need to then define things that are truly specific to the particular application.</p>\n</blockquote>\n<p>I'm sorry but you're just explaining my refactor back to me <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 266133945,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640562513
    },
    {
        "content": "<p>This is the hierarchy I've been thinking about, where each arrow is a forgetful functor:<br>\n<a href=\"/user_uploads/3121/0aLDRUql5XHnaPCPphk-YNS6/21c84d5a-050a-48b6-8027-01c0724b2a35.jpg\">Graph hierarchy V1</a><br>\nIt's a bit outdated compared to <a href=\"https://github.com/leanprover-community/mathlib/pull/11000\">#11000</a>. I got rid of <code>fun_fun_like</code>, which means the squiggly arrows are not evil anymore (as expected, they commute with all other arrows, but they can change the type of the <code>fun_fun_like</code> instance, which is a problem for Lean's TC inference as it will only every synthesize one of the two possibilities). And a few more types joined the dance. But the gist is there.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0aLDRUql5XHnaPCPphk-YNS6/21c84d5a-050a-48b6-8027-01c0724b2a35.jpg\" title=\"Graph hierarchy V1\"><img src=\"/user_uploads/3121/0aLDRUql5XHnaPCPphk-YNS6/21c84d5a-050a-48b6-8027-01c0724b2a35.jpg\"></a></div>",
        "id": 266134101,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640562774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/265834961\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/265785132\">said</a>:</p>\n<blockquote>\n<p>One takeaway is that edge weight is very different to weight between two vertices, and should be treated as such.</p>\n</blockquote>\n<p>Could you elaborate a bit on this observation? Is it that <code>α → α → option W</code> is not enough for edge weights?</p>\n</blockquote>\n<p>Just so that we're clear, I'm differentiating:</p>\n<ul>\n<li>Adjacency weight: <code>α → α → option W</code></li>\n<li>Edge weight: <code>sym2 α → option W</code></li>\n<li>Hom weight: <code>Π a b : α, (a ⟶ b) → W</code></li>\n<li>Hom edge weight: <code>edge [[(a, b)]] → W</code></li>\n</ul>\n<p>So what I'm saying is that hom weight and adjacency weight are too different to be unified.  You can turn on into the other, but there's no practical way for one to directly generalize the other.</p>",
        "id": 266134656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640563502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/265835259\">said</a>:</p>\n<blockquote>\n<p>Also, I'm wondering how you imagine hypergraphs fit in with the rest of the graph types -- they've always seemed like they're their own thing to me, other than that every simple graph may be regarded as being a hypergraph, too. (Not saying they shouldn't be addressed; I just want to understand what hypergraphs can do for graphs and vice versa.)</p>\n</blockquote>\n<p>I gave up on trying to fit them in my hierarchy, until I actually thought it wasn't too hard to just fit them in. The problem is less technical than semantic. Should we turn hypergraphs into simple graphs (which is what <a href=\"https://github.com/leanprover-community/mathlib/pull/11000\">#11000</a> currently does), or simple graphs into hypergraphs? And if so, how? I can think of several ways to do that in either direction and all of them have their merits.<br>\nSo I think I'm going to exclude hypergraphs from the hierarchy not because it can't handle them, but because we haven't decided what it should mean.</p>",
        "id": 266134856,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640563713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/265834061\">said</a>:</p>\n<blockquote>\n<p>Regarding <code>Sort</code>-valued graphs -- there's this relationship between <code>E -&gt; sym2 V</code> multigraphs and <code>V -&gt; V -&gt; Sort*</code> (plus involutions) multigraphs, and I was hoping we could find a way to unify them in some way.  One thing I don't like about the latter is it doesn't give a good type for the <code>incidence_set</code>.</p>\n</blockquote>\n<p>I currently much prefer the <code>V -&gt; V -&gt; Sort*</code> multigraphs because they fit in the hierarchy much better. You can just drop properties of the map and get <code>quiver</code>, or strenghten it to get <code>simple_multigraph</code> <code>(or </code>simple_quiver<code>). Also, do you consider </code>set (Π a b, a ⟶[G] b)` a bad type?</p>",
        "id": 266135077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640564093
    },
    {
        "content": "<p>I've thought about the graph API refactor a few times and now that Yael <a href=\"#narrow/stream/252551-graph-theory/topic/Graph.20minors.20and.20contractions/near/268681694\">mentioned it</a> I wanted to ask: have you guys gone any further in this introspection?<br>\nAt the moment, the only solid ground I've found is that we're going to lose dot notation</p>",
        "id": 268684003,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642681700
    },
    {
        "content": "<p>Could you point me to it? I'm late in the game and need to catch up :-)</p>",
        "id": 268685383,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642682499
    },
    {
        "content": "<p>Kyle gave it a go here: <a href=\"https://github.com/leanprover-community/mathlib/pull/10963\">#10963</a><br>\nAnd Yael did it here: <a href=\"https://github.com/leanprover-community/mathlib/pull/11000\">#11000</a><br>\nThen they started discussing the consequences of such choices above</p>",
        "id": 268685603,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642682635
    },
    {
        "content": "<p>Sorry for asking what should be obvious to me - what do you mean by losing the dot notation?</p>",
        "id": 268689133,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642684325
    },
    {
        "content": "<p>It means that, given two adjacent vertices <code>v</code> and <code>w</code> in a graph <code>G</code>, we would no longer be able to say <code>G.adj v w</code></p>",
        "id": 268689251,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642684379
    },
    {
        "content": "<p>So we would have to say <code>adj G v w</code> instead? As a beginner this feels like an obstacle maybe. Unless there is a better way using a convenient notation...</p>",
        "id": 268690502,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642685007
    },
    {
        "content": "<p>Exactly, you can see it in many places of Kyle's PR. He did exactly that</p>",
        "id": 268690767,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642685131
    },
    {
        "content": "<p>Since a graph \"is just an adj relation\", is there a way to have a coercion from a graph on <code>V</code> to <code>V -&gt; V -&gt; Prop</code> and say <code>G v w</code>? Or is that a more terrible idea than I imagine?</p>",
        "id": 268691442,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642685431
    },
    {
        "content": "<p>(Or just <code>adj v w</code> and let typeclass magic occur?)</p>",
        "id": 268691708,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1642685540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/252551-graph-theory/topic/graph.20typeclasses/near/268691708\">said</a>:</p>\n<blockquote>\n<p>(Or just <code>adj v w</code> and let typeclass magic occur?)</p>\n</blockquote>\n<p>I particularly like this idea, if it's possible. But let's hear it from the experts (Kyle, Yael and Bhavik)</p>",
        "id": 268694080,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642686613
    },
    {
        "content": "<p>I originally wanted that, but it doesn't quite work for a tricky reason. Multigraphs are just decorated functions <code>V -&gt; V -&gt; Sort*</code>, so you want them to be coerced to <code>V -&gt; V -&gt; Sort*</code>. But multigraphs are also just graphs with more edges, so you want a coercion (or an instance with the refactor) to graphs. But then when <code>G</code> is a multigraph, <code>G a b</code> can either mean the type of edges between <code>a</code> and <code>b</code> or the derived adjacency relation.</p>",
        "id": 268695046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642687005
    },
    {
        "content": "<p>That on its own wouldn't be such a problem because Lean can infer the type from context, but it turns out that the typeclass way to do this (Anne's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like\">docs#fun_like</a>) involves forgetting some parameter of the instance, and this parameter is precisely the <code>Prop</code>/<code>Sort*</code> distinction. That means Lean can't use context to infer the correct instance to use and will always synthesize the same (although I don't know which!)</p>",
        "id": 268695381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642687168
    },
    {
        "content": "<p>Here's an oldish version of the hierarchy I want: <a href=\"user_uploads/3121/0aLDRUql5XHnaPCPphk-YNS6/21c84d5a-050a-48b6-8027-01c0724b2a35.jpg\">https://leanprover.zulipchat.com/user_uploads/3121/0aLDRUql5XHnaPCPphk-YNS6/21c84d5a-050a-48b6-8027-01c0724b2a35.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/0aLDRUql5XHnaPCPphk-YNS6/21c84d5a-050a-48b6-8027-01c0724b2a35.jpg\" title=\"https://leanprover.zulipchat.com/user_uploads/3121/0aLDRUql5XHnaPCPphk-YNS6/21c84d5a-050a-48b6-8027-01c0724b2a35.jpg\"><img src=\"user_uploads/3121/0aLDRUql5XHnaPCPphk-YNS6/21c84d5a-050a-48b6-8027-01c0724b2a35.jpg\"></a></div>",
        "id": 268695796,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642687300
    },
    {
        "content": "<p>Each arrow is a forgetful functor, and they all commute, EXCEPT that when you go through a squiggly line the type might have changed (given the type, the values commute, but there might be two types).</p>",
        "id": 268696043,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642687389
    },
    {
        "content": "<p>In that regard, having dedicated functions <code>adj</code> and <code>homs</code> (that is, cutting the top of the above hierarchy) seems like the easiest solution.</p>",
        "id": 268696219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642687456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  I just want to make sure you know what I meant by \"competition\" earlier, since I've realized this can be easily misunderstood: I wanted us to do some thesis-antithesis-synthesis sort of thing.  There are a number of design goals that are hard to keep all in mind, if we're each even aware of all of them, and having competing designs (the thesis and antithesis) we can explore better. Then, we need to synthesize, which I've been planning on looking into, but things have come up the last couple weeks... I'm very glad you took up the challenge and put together what you think the graph theory library should look like, which is invaluable.</p>",
        "id": 268721942,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642697407
    },
    {
        "content": "<p>As part of synthesis, something I've been working on in the background is a lean PR to be able to preserve dot notation using a fairly simple system. The idea, roughly, that we can give structures an attribute that's a list of namespaces to search when doing extended dot notation. This gives us an object-oriented-like interface (but with static method resolution), that I think will make working with more general graph classes more pleasant.</p>\n<p>All I need to do is make it pretty print, and also test it more to make sure it actually meets our needs.</p>",
        "id": 268721945,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642697411
    },
    {
        "content": "<p>Dot notation, while I think it's important, isn't the only design consideration here.</p>\n<p>I want to be sure that we're not taking any compromises when it comes to how different graph objects get to define themselves, for defeq reasons. There are probably at least ten ways to define a multigraph, and I want us to be able to use any one of those definitions and get standard lemmas about them. For example, a directed multigraph is either a pair of maps <code>(s t : E -&gt; V)</code> or a single map <code>(edges : V -&gt; V -&gt; Sort*)</code>. You can go through a generic transformation to go between these representations, but I'd rather that we have the freedom to choose on a case-by-case basis. It's doable, too.</p>",
        "id": 268723817,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642698143
    }
]