[
    {
        "content": "<p>Hey, iirc, I was told at some point about some big refactor of the <code>simple_graph</code> API potentially based on quivers. Since I'm now somewhat working with quivers as directed graphs and using <code>has_involutive_inverse</code> to talk about those as kinds of undirected graphs, I was wondering about the status of it all. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> refered me to a pull request for undirected multigraphs as tuples <code>Vertices,Edges,Start,End,Reversal</code>. How does it all fit together?</p>",
        "id": 303988381,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665737731
    },
    {
        "content": "<p>Sorry, I've not really been following Lean recently. What is the idea to make the <code>simple_graph</code> API be based on quivers? Quivers are for a type of vertices with an attached set of arrows. How would you get any sort of lattice structure on the type of simple graphs with a given vertex type?</p>",
        "id": 304039390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665756220
    },
    {
        "content": "<p>Oh, I must be misremembering the quiver part then? But what about the refactor? Am I misremembering that part too?</p>",
        "id": 304041339,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665756737
    },
    {
        "content": "<p>Looking through some mentions, I see your thread where Yaël says multigraphs shouldn't be based on quivers: <a href=\"#narrow/stream/116395-maths/topic/Geometric.20group.20theory/near/303100448\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Geometric.20group.20theory/near/303100448</a></p>",
        "id": 304041916,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665756900
    },
    {
        "content": "<p>My feeling is that we're going to have parallel theories, the quiver-based graph theory, and something more like a \"bundled\" graph theory where the edge structure is part of the type.</p>",
        "id": 304042038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665756936
    },
    {
        "content": "<p>And then we should have more API to carry results from one side to another.</p>",
        "id": 304042210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665756980
    },
    {
        "content": "<p>This to me sounds like a reasonable solution, except for the obvious code duplication it entails.</p>",
        "id": 304042378,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665757037
    },
    {
        "content": "<p>Incidentally, one API inconsistency is quiver paths vs graph walks -- quivers build their paths from the end, but graphs build their walks from the front. One reason graphs do it this way is that it coincides with the list API, which is nice. I haven't had a chance to dig into why quivers work the way they do -- I suspect it has something to do with the fact that in category theory morphism composition is opposite the usual function composition.</p>",
        "id": 304042617,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665757115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Yeah I agree, but putting my software architect hat on, when developing software it tends to be better to allow duplication in the short term, since you often don't know ahead of time what abstraction you should use to unify everything. Once things get too abstract, it can get arbitrarily difficult to unwind.</p>",
        "id": 304043054,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665757252
    },
    {
        "content": "<blockquote>\n<p>My feeling is that we're going to have parallel theories, the quiver-based graph theory, and something more like a \"bundled\" graph theory where the edge structure is part of the type.</p>\n</blockquote>\n<p>So, it would be reasonable to continue with <code>has_involutive_reverse</code> and develop a quiver-based graph theory starting with quivers parallelly to what is currently there?</p>",
        "id": 304046298,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665758135
    },
    {
        "content": "<p>That's something I wouldn't have expected to be accepted in mathlib? What would the rationale for that be?</p>",
        "id": 304046631,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665758227
    },
    {
        "content": "<p>For a long time, mathlib had completely parallel additive and multiplicative monoid libraries until someone figured out how to write metaprogramming to unify them, just to give an example precedent.</p>",
        "id": 304047075,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665758352
    },
    {
        "content": "<p>It's not clear to me yet that there's a good way to unify quivers and simple graphs -- they have fairly different languages (i.e., the sorts of terms you write about them) and interfaces.</p>",
        "id": 304047361,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665758438
    },
    {
        "content": "<p>I was naïvely going to ask why not simply base <code>simple_graph</code> on <code>Prop</code>-valued quivers with reverses but then it seems there is some troubles with those (<code>Prop</code>-valued quivers) making <code>reverse</code>al complicated. Is that the sole reason (notwithstanding the practical issue that it would be a lot of work for little clear gains) ?</p>",
        "id": 304049582,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665759019
    },
    {
        "content": "<p>It's because <code>simple_graph V</code> is the type of all simple graphs that have the given vertex type. When you're working with quivers, you have only a single graph structure on the given type <code>V</code> because it's a typeclass.</p>",
        "id": 304049967,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665759137
    },
    {
        "content": "<p>By the way, I'm not sure I get the problem with <code>Prop</code>-valued quivers.</p>",
        "id": 304050042,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665759162
    },
    {
        "content": "<p>Is there a problem with <code>Prop</code>-valued quivers? The definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> allows them</p>",
        "id": 304050244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665759219
    },
    {
        "content": "<p>There's no problem with them. They are just not \"simple graphs\".</p>",
        "id": 304050381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665759245
    },
    {
        "content": "<p>Mmh, but then, is it \"sensible\" to fix a vertex set and look at all <code>simple_graph</code>s on it, rather than have simply <code>simple_graph</code>s and morphisms and a way to describe having the same vertex set?</p>",
        "id": 304050482,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665759282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Refactor.20and.20quivers.3F/near/304050244\">said</a>:</p>\n<blockquote>\n<p>Is there a problem with <code>Prop</code>-valued quivers? The definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver\">docs#quiver</a> allows them</p>\n</blockquote>\n<p>I'm refering to <a href=\"https://github.com/leanprover-community/mathlib/blob/e0ce21862273a48e47abe598035d4d043e3e3ecb/src/combinatorics/quiver/connected_component.lean#L25\">this comment</a> which I don't really know how to interpret</p>",
        "id": 304050608,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665759321
    },
    {
        "content": "<p>Oh that must be because of the <code>⊕</code> that appears just below. You could replace that with <code>psum</code>.</p>",
        "id": 304050894,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665759394
    },
    {
        "content": "<p>Oh, alright, then I see no problem with basing everything off quivers :)</p>",
        "id": 304051198,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665759463
    },
    {
        "content": "<p>More seriously, that means <code>s/psum/sum/</code> would be PRable?</p>",
        "id": 304051454,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665759519
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 304051499,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665759534
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/psum\">docs#psum</a> is already in core Lean</p>",
        "id": 304051554,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665759549
    },
    {
        "content": "<p>right, just making it so that the restriction on level is dropped in the file I linked to</p>",
        "id": 304051656,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665759578
    },
    {
        "content": "<p>Alright, that's on my todo list then: it probably also entails adding <code>psum.swap</code> and related.</p>",
        "id": 304052261,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665759733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> <a href=\"#narrow/stream/252551-graph-theory/topic/Refactor.20and.20quivers.3F/near/304050482\">said</a>:</p>\n<blockquote>\n<p>Mmh, but then, is it \"sensible\" to fix a vertex set and look at all <code>simple_graph</code>s on it, rather than have simply <code>simple_graph</code>s and morphisms and a way to describe having the same vertex set?</p>\n</blockquote>\n<p>This is one of those long-standing design tensions -- do we work with an \"actual\" lattice or do we work with morphisms modulo isomorphism?</p>\n<p>In my experience, it is less of a hassle formalizing things when you can find a single type that everything is a term of -- this tends to lead to fewer dependent type issues. When you are working with <code>simple_graph</code> and <code>simple_graph.subgraph</code>, it can be possible to work with just a single vertex type.</p>\n<p>For example, this way it's not so hard to formulate that every <code>simple_graph</code> is the <code>sup</code> of all the one-edge graphs <code>le</code> to it.</p>",
        "id": 304052531,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665759803
    },
    {
        "content": "<p>Oh, yeah, I was meaning to say, an ugly hack for this is to have not a single vertex type, àla quivers, but then if you want to talk about the lattice, you just play with subgraphs.</p>",
        "id": 304054304,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665760283
    },
    {
        "content": "<p>And _in some sense_, it's cleaner.But if doing the <code>quiver</code> version in parallel is OK, I guess it solves this question.</p>",
        "id": 304055146,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665760526
    },
    {
        "content": "<p>I also think that the quiver version could be pertinent. It would probably be fairly similar to the proposition in the PR you mention in your first message, but with the advantage that we could use the already existing quiver API.</p>",
        "id": 304057350,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1665761113
    }
]