[
    {
        "content": "<p>Something I thought was interesting a while back is these blog posts about graph theory in Julia, formulated using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>-sets. <a href=\"https://www.algebraicjulia.org/blog/tag/c-sets/\">https://www.algebraicjulia.org/blog/tag/c-sets/</a>  This is part of a project called AlgebraicJulia <a href=\"https://www.algebraicjulia.org/\">https://www.algebraicjulia.org/</a></p>\n<p>They say it's part of the framework of generalized algebraic theories.  As far as I can tell, having tried to parse the nlab page, generalized algebraic theories are more-or-less types you can define in Lean using <code>structure</code>, where all the types in sight are either bound variables, pi types, equalities, or <code>Type</code>.</p>",
        "id": 264688145,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639392231
    },
    {
        "content": "<p>The blog posts seem to be about a much more restrictive version, which are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>-sets (functors from a category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> to Set).  They show ways of encoding different kinds of combinatorial objects as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>-sets for appropriate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>.  Though there's a limitation that you can't encode things like simple graphs using this scheme (no way to say graphs are loopless).</p>",
        "id": 264688161,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639392238
    },
    {
        "content": "<p>I'm not suggesting organizing things categorically like this, but I think it helps clarify some of the problems involved in the design of combinatorial objects.</p>",
        "id": 264688176,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639392243
    },
    {
        "content": "<p>One thing that would be cool is if there were a way to automatically generate morphism types given a <code>structure</code> definition.</p>",
        "id": 264688218,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639392248
    }
]