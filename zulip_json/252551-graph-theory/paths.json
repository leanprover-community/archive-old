[
    {
        "content": "<p>Michael Hahn took a stab at defining eulerian circuits, with the intent to cross the konigsberg bridges problem off of freek's 100 theorem list</p>",
        "id": 206657304,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597203850
    },
    {
        "content": "<p>the code is in this repo<br>\n<a href=\"https://github.com/apurvnakade/mc2020-projects\">https://github.com/apurvnakade/mc2020-projects</a></p>",
        "id": 206657338,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597203950
    },
    {
        "content": "<p>we tried for a bit using the inductive type of paths defined in the hedetniemi branch, but we felt like we were reimplementing basic list API</p>",
        "id": 206657406,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597204067
    },
    {
        "content": "<p>so then we made an implementation with lists at the core</p>",
        "id": 206657621,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597204419
    },
    {
        "content": "<p>the compatibility condition called <code>p.adj</code> is not quite right, maybe it's enough to separate it into three structure fields</p>",
        "id": 206657669,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597204464
    },
    {
        "content": "<p>Alena then started to use the same definition of path, with the goal of characterizing trees as graphs in which any pair of points has a unique path between them</p>",
        "id": 206657930,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597204859
    },
    {
        "content": "<p>her code is in yet another repo<br>\n<a href=\"https://github.com/agusakov/graph_theory_2020\">https://github.com/agusakov/graph_theory_2020</a></p>",
        "id": 206657955,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597204904
    },
    {
        "content": "<p>I think michael proves that a vertex is incident to an odd number of edges in a path if and only if the path is not a cycle and the vertex is the head or tail, <br>\nup to several sorries which are somewhere between basic API and basic theorems</p>",
        "id": 206658095,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597205093
    },
    {
        "content": "<p>I guess both of these authors have reasons for writing in their own repo, but hopefully after the process of their first PRs, they'll see the light and want to work in branches on the mathlib repo</p>",
        "id": 206658119,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597205149
    },
    {
        "content": "<p>A good test of a path definition for simple graphs would be proving that powers of adjacency matrices count paths (<a href=\"https://github.com/leanprover-community/mathlib/pull/3672\">https://github.com/leanprover-community/mathlib/pull/3672</a>)</p>",
        "id": 206658185,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597205221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/252551-graph-theory/topic/paths/near/206657930\">said</a>:</p>\n<blockquote>\n<p>Alena then started to use the same definition of path, with the goal of characterizing trees as graphs in which any pair of points has a unique path between them</p>\n</blockquote>\n<p>I'd be interested to see how easy it is to translate between the path-connected definition of connected that Alena is using and an inductive definition of connected</p>",
        "id": 206658334,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597205435
    },
    {
        "content": "<p>where by inductive definition I guess I mean the transitive closure of adjacency</p>",
        "id": 206658353,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597205506
    },
    {
        "content": "<p>This is the totally-not-battle-tested definition of a path I'm pulling out of thin air:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertex_map</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edge_map</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">reasonable_definition</span> <span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">edges</span> <span class=\"n\">connect</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206755546,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268103
    },
    {
        "content": "<p>Ohhh okay gotcha</p>",
        "id": 206755673,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597268164
    },
    {
        "content": "<p>Interesting</p>",
        "id": 206755681,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597268167
    },
    {
        "content": "<p>It's less good for defining connectedness, but it'd nice to just say that the vertex map or the edge map is injective</p>",
        "id": 206755751,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268226
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 206755774,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597268241
    },
    {
        "content": "<p>and there are some ok lemmas for functions from <code>fin</code></p>",
        "id": 206755789,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268254
    },
    {
        "content": "<p>It might also make induction easier I think? In like, really specific cases lol</p>",
        "id": 206755902,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597268314
    },
    {
        "content": "<p>I think it'd make induction marginally harder, because lists are literally an inductive type, but <code>fin</code> has some definitions like <code>fin.tail</code> and <code>fin.init</code> to work around that</p>",
        "id": 206755945,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268358
    },
    {
        "content": "<p>*make induction easier for me to follow lol</p>",
        "id": 206755989,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597268401
    },
    {
        "content": "<p>One place I think it would be better is proving the adjacency matrix formula for counting paths</p>",
        "id": 206756051,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, just want to invite your critique on this alternate definition of a path</p>",
        "id": 206756242,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268539
    },
    {
        "content": "<p>or maybe, I'll move to the paths stream...</p>",
        "id": 206756319,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268589
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206756470,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/252551-graph-theory/topic/paths/near/206755546\">said</a>:</p>\n<blockquote>\n<p>This is the totally-not-battle-tested definition of a path I'm pulling out of thin air:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertex_map</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edge_map</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">reasonable_definition</span> <span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">edges</span> <span class=\"n\">connect</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I think the right test is to reimplement the API we already have</p>",
        "id": 206756497,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597268673
    },
    {
        "content": "<p>starting with induction_on</p>",
        "id": 206756518,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597268696
    },
    {
        "content": "<p><del>please make it be <code>(vertex_map : fin n → V)</code> and <code>(edge_map : fin (n - 1) → E)</code></del></p>",
        "id": 206756577,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597268752
    },
    {
        "content": "<p>though I guess that would be bad for cases where you don't have vertices</p>",
        "id": 206756627,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597268770
    },
    {
        "content": "<p>Unfortunately, I think you really can't do that... maybe you'd have to make it `path (n + 1) :='...</p>",
        "id": 206756700,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268836
    },
    {
        "content": "<p>Also, it really is pretty standard in the literature to have the length of a path be the number of edges</p>",
        "id": 206756709,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268840
    },
    {
        "content": "<p>See for instance the adjacency matrix formula. The entries of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">A ^ n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> count paths with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> edges</p>",
        "id": 206756754,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268881
    },
    {
        "content": "<p>and if you concatenate two paths, you add the number of edges, but not vertices</p>",
        "id": 206756834,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597268922
    },
    {
        "content": "<p>Yeah that makes sense</p>",
        "id": 206756846,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597268932
    },
    {
        "content": "<p>For some reason I feel like the way I learned about path lengths is counting the number of vertices but maybe it's such a small detail that I didn't pay attention and have just misremembered it</p>",
        "id": 206756895,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597268968
    },
    {
        "content": "<p>i mean, regardless of whether you remember correctly what your prof said, we should use the definition that's most convenient</p>",
        "id": 206756930,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597268993
    },
    {
        "content": "<p>Yeah true</p>",
        "id": 206757002,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597269015
    },
    {
        "content": "<p>from my point of view, nat subtraction is never convenient</p>",
        "id": 206757004,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597269016
    },
    {
        "content": "<p>Actually, concatenation would be even easier if you make the path definition even more dependent...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">path_from</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">vertex_map</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edge_map</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">reasonable_definition</span> <span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">edges</span> <span class=\"n\">connect</span> <span class=\"n\">the</span> <span class=\"n\">right</span> <span class=\"n\">vertices</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">starts_at</span> <span class=\"o\">:</span> <span class=\"n\">vertex_map</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ends_at</span> <span class=\"o\">:</span> <span class=\"n\">vertex_map</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206757020,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597269032
    },
    {
        "content": "<p>this is the road to dependent type hell</p>",
        "id": 206757048,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597269052
    },
    {
        "content": "<p>That'd be the definition I'd recommend if we were, say, just trying to define the fundamental group...</p>",
        "id": 206757053,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597269054
    },
    {
        "content": "<p>michael and I start with the <code>G.path a b</code> type and then I rewrote everything so that the source and sink were properties instead of part of the type</p>",
        "id": 206757112,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597269096
    },
    {
        "content": "<p>because i just didn't know how to prove some of the bits of the API</p>",
        "id": 206757140,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597269114
    },
    {
        "content": "<p>I think patrick massot and co. have put a definition of path connected topological spaces into mathlib recently, and they were trying to optimize for making it natural to define the fundamental groupoid form there</p>",
        "id": 206757235,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597269157
    },
    {
        "content": "<p>If it really is infeasible that way, then my definition's just a subtype, which is not bad at all</p>",
        "id": 206757239,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597269159
    },
    {
        "content": "<p>but I would recommend following whatever convention team path connected are doing</p>",
        "id": 206757276,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597269186
    },
    {
        "content": "<p>yes, I don't remember but maybe i can quickly find the code</p>",
        "id": 206757430,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597269278
    },
    {
        "content": "<p>It looks like they do define a path as dependent on endpoints (obviously not length)</p>",
        "id": 206757455,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597269297
    },
    {
        "content": "<p>I agree that defining a path in terms of source and target sounds like a pain if you're working with lists, but I think it might be nicer if you're working with fin-tuples</p>",
        "id": 206757711,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597269478
    },
    {
        "content": "<p>i'll think more carefully about any definition you propose after you prove <code>path.cons</code> and <code>path.induction_on</code> with it</p>",
        "id": 206757822,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597269556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/252551-graph-theory/topic/paths/near/206756518\">said</a>:</p>\n<blockquote>\n<p>starting with induction_on</p>\n</blockquote>\n<p>Did y'all ever get that working with the induction tactic?</p>",
        "id": 206757827,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597269560
    },
    {
        "content": "<p>I think so</p>",
        "id": 206757870,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597269597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/252551-graph-theory/topic/paths/near/206756051\">said</a>:</p>\n<blockquote>\n<p>One place I think it would be better is proving the adjacency matrix formula for counting paths</p>\n</blockquote>\n<p>We should probably make sure we match graph theory terminology.  It bugs me as a topologist, but they call paths <em><a href=\"https://en.wikipedia.org/wiki/Path_(graph_theory)\">walks</a></em>.</p>\n<p>(I'm just quoting <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span>'s comment because somehow that's what made me remember.  Counting paths is harder than counting walks.)</p>",
        "id": 206770126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597279089
    },
    {
        "content": "<p>Oof, that’s a good point</p>",
        "id": 206770475,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597279596
    },
    {
        "content": "<p>(moving discussion back to paths from maximal path)</p>",
        "id": 206770943,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597280160
    },
    {
        "content": "<p>Ok, one difference between my proposal and the structure for walks from before is that you can't specify the starting and ends points of the path.  However, that's always just a subtype away</p>",
        "id": 206771027,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597280274
    },
    {
        "content": "<p>with <code>walks G v w := {p : P n \\graphmap G // p 0 = v /\\ p n = w</code></p>",
        "id": 206771082,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597280321
    },
    {
        "content": "<p>(This would be using a <code>coe_to_fn</code> from graphmaps to maps on vertex sets, if that makes any sense to have.)</p>",
        "id": 206771121,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597280395
    },
    {
        "content": "<p>This is how I was taught too</p>\n<blockquote>\n<p>We should probably make sure we match graph theory terminology.  It bugs me as a topologist, but they call paths <em><a href=\"https://en.wikipedia.org/wiki/Path_(graph_theory)\">walks</a></em>.</p>\n</blockquote>",
        "id": 206771177,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597280419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> I'm always tempted to call them paths because of homotopy theory, which is probably the story with everyone else, too.  (It's nice that \"path connected\" still means the same thing, since if two vertices are connected by a walk, then they are also connected by a path.  If this weren't the case, I might have been inclined to use the homotopy theory terminology instead.)</p>",
        "id": 206771412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597280710
    },
    {
        "content": "<p>Ah yeah, I'm probably one of the people least familiar with homotopy theory here lol</p>",
        "id": 206771479,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1597280786
    },
    {
        "content": "<p>So, walks, loops, and cycles work well with homomorphisms and embeddings</p>",
        "id": 206771486,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597280800
    },
    {
        "content": "<p>I think this is a good test for which ever definition of walks we choose: can you prove that every pair of vertices connected by a walk is connected by a path?  (Stronger: can you prove this walk uses a subset of the edges of the walk?)</p>",
        "id": 206771488,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597280803
    },
    {
        "content": "<p>I mean, you'll be able to prove it no matter the definition, I think, but it's a good check for whether it's a good definition.</p>",
        "id": 206771500,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597280825
    },
    {
        "content": "<p>But I think path is really a multigraph definition</p>",
        "id": 206771505,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597280830
    },
    {
        "content": "<p>Because of edge injectivity</p>",
        "id": 206771527,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597280871
    },
    {
        "content": "<p>By the way, since we’re talking about graph homomorphisms and embeddings, check out <a href=\"https://github.com/leanprover-community/mathlib/issues/3750\">#3750</a></p>",
        "id": 206771585,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597280924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Good point about paths being a multigraph definition due to edge injectivity.</p>",
        "id": 206771761,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597281147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/252551-graph-theory/topic/paths/near/206771585\">said</a>:</p>\n<blockquote>\n<p>By the way, since we’re talking about graph homomorphisms and embeddings, check out <a href=\"https://github.com/leanprover-community/mathlib/issues/3750\">#3750</a></p>\n</blockquote>\n<p>Would you mind explaining how this applies to graph homomorphisms and embeddings? I'm not familiar with order theory, but it seems like it could be useful.</p>",
        "id": 206846197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597340522
    },
    {
        "content": "<p>The definition has 0 to do with orders a priori, which is why I’m renaming it</p>",
        "id": 206851515,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597343188
    },
    {
        "content": "<p>It just says basically that an embedding/equiv maps one relation to another</p>",
        "id": 206851548,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597343213
    },
    {
        "content": "<p>So if you plug in two graph adjacency relations, you get graph embeddings</p>",
        "id": 206851570,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597343231
    },
    {
        "content": "<p>Oh, ok, that's a nice thing to have.  Once you get that in, maybe I should wire <code>sym2</code> up to it, too, since it has a <code>map</code> function.  I guess relating <code>sym2.from_rel</code>, <code>map</code>, and those relation mapping functions.</p>",
        "id": 206851772,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597343349
    },
    {
        "content": "<p>You could do it now with <code>order_embedding</code>, as long as you rename it <code>rel_embedding</code> when the PR merges</p>",
        "id": 206853269,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597344110
    }
]